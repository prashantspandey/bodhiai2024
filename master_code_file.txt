Django Project Code Archive
Generated on: 2024-12-04 15:00:15
==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/code_getter.py
--------------------------------------------------

import os
from datetime import datetime

def create_master_file(root_dir, output_file="master_code_file.txt"):
    
    code_extensions = {
        '.py',    # Python files
    }
    
    exclude_dirs = {
        '__pycache__',
        'migrations',
        '.git',
        '.pyc',
        'venv',
        '.idea',
        '.vscode',
        'node_modules',
        'staticfiles',  # If you have collected static files
    }
    
    with open(output_file, 'w', encoding='utf-8') as master_file:
        master_file.write(f"Django Project Code Archive\n")
        master_file.write(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        master_file.write("="*50 + "\n\n")
        
        for root, dirs, files in os.walk(root_dir):
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            
            for file in files:
                file_path = os.path.join(root, file)
                _, ext = os.path.splitext(file)
                
                if ext not in code_extensions:
                    continue
                    
                try:
                    with open(file_path, 'r', encoding='utf-8') as code_file:
                        master_file.write(f"FILE: {file_path}\n")
                        master_file.write("-"*50 + "\n\n")
                        
                        master_file.write(code_file.read())
                        master_file.write("\n\n")
                        master_file.write("="*50 + "\n\n")
                except Exception as e:
                    master_file.write(f"Error reading {file_path}: {str(e)}\n\n")

if __name__ == "__main__":
    project_root = os.getcwd()
    
    try:
        create_master_file(project_root)
        print(f"Master code file has been created successfully!")
    except Exception as e:
        print(f"An error occurred: {str(e)}")



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/clean_comments.py
--------------------------------------------------

import os
import re

def clean_comments(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    important_patterns = [
        'INSTALLED_APPS',
        'MIDDLEWARE',
        'DEBUG',
        'DATABASES',
        'STATIC_URL',
        'MEDIA_URL',
        'AUTH_USER_MODEL',
        'URL_PATTERNS',
        '@register',
        '@admin'
    ]

    cleaned_lines = []
    in_multiline = False
    multiline_content = []

    for line in lines:
        stripped = line.strip()
        
        if not stripped:
            cleaned_lines.append(line)
            continue

        




    Process all Python files in a Django project recursively.
    



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/manage.py
--------------------------------------------------







==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/models.py
--------------------------------------------------

from django.db import models
from membership.models import *
from communication.models import *
from membership.models import *


class DoubtCallNew(models.Model):
    student = models.ForeignKey(
        Student, related_name='doubtcallstudent', on_delete=models.CASCADE, blank=True, null=True)
    teacher = models.ForeignKey(
        Teacher, related_name='doubtcallteacher', on_delete=models.CASCADE, blank=True, null=True)
    doubt = models.ForeignKey(StudentDoubt, related_name='doubtcalldoubt',
                              on_delete=models.CASCADE, blank=True, null=True)
    timeStart = models.DateTimeField(auto_now=True, blank=True, null=True)
    timeEnd = models.DateTimeField(blank=True, null=True)
    calledAt = models.DateTimeField(auto_now=True, blank=True, null=True)
    ringing = models.BooleanField(default=False, blank=True, null=True)
    answered = models.BooleanField(null=True, blank=True)
    callRating = models.IntegerField(blank=True, null=True)
    onGoingCall = models.BooleanField(default=False, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + self.teacher.name + ' ' +\
            str(self.onGoingCall) + ' ' + str(self.ringing) + ' ' + str(self.answered) + ' ' + \
            str(self.callRating)


class FeaturedTeachersNew(models.Model):
    teacher = models.ForeignKey(
        Teacher, related_name='featuredteacher', on_delete=models.CASCADE, blank=True, null=True)
    aboutMe = models.TextField(blank=True, null=True)
    videos = models.URLField(max_length=2000, null=True, blank=True)
    rating = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return self.aboutMe


class RequestToCounsellingNew(models.Model):
    student = models.ForeignKey(Student, related_name='requestcounselstudent',
                                on_delete=models.CASCADE, blank=True, null=True)
    teacher = models.ForeignKey(Teacher, related_name='requestcounselteacher',
                                on_delete=models.CASCADE, blank=True, null=True)
    message = models.TextField(blank=True, null=True)
    time = models.DateTimeField(auto_now=True, blank=True, null=True)

    def __str__(self):
        return self.student.name


class DoubtCallModel(models.Model):
    student = models.ForeignKey(Student, related_name='newdoubtcallstudent',
                                on_delete=models.CASCADE, blank=True, null=True)
    teacher = models.ForeignKey(Teacher, related_name='newdoubtcallteacher',
                                on_delete=models.CASCADE, blank=True, null=True)
    doubt = models.ForeignKey(StudentDoubt, related_name='newdoubtcalldoubt',
                              on_delete=models.CASCADE, blank=True, null=True)
    timeStart = models.DateTimeField(auto_now=True, blank=True, null=True)
    timeEnd = models.DateTimeField(blank=True, null=True)
    calledAt = models.DateTimeField(auto_now=True, blank=True, null=True)
    ringing = models.BooleanField(default=False, blank=True, null=True)
    answered = models.BooleanField(null=True, blank=True)
    callRating = models.IntegerField(blank=True, null=True)
    onGoingCall = models.BooleanField(default=False, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + self.teacher.name + ' ' +\
            str(self.onGoingCall) + ' ' + str(self.ringing) + ' ' + str(self.answered) + ' ' + \
            str(self.callRating)


class FeaturedTeachersModel(models.Model):
    teacher = models.ForeignKey(
        Teacher, related_name='newfeaturedteacher', on_delete=models.CASCADE, blank=True, null=True)
    aboutMe = models.TextField(blank=True, null=True)
    videos = models.URLField(max_length=2000, null=True, blank=True)
    rating = models.IntegerField(blank=True, null=True)
    thumbnail = models.URLField(max_length=3000, null=True, blank=True)

    def __str__(self):
        return self.aboutMe


class RequestToCounsellingModel(models.Model):
    student = models.ForeignKey(Student, related_name='newrequestcounselstudent',
                                on_delete=models.CASCADE, blank=True, null=True)
    teacher = models.ForeignKey(
        Teacher, related_name='newrequestcounselteacher', on_delete=models.CASCADE)
    message = models.TextField(blank=True, null=True)
    time = models.DateTimeField(auto_now=True, blank=True, null=True)

    def __str__(self):
        return self.student.name


class DoubtMeeting(models.Model):
    student = models.ForeignKey(
        Student, related_name='doubtmeetingsudnet', on_delete=models.CASCADE, blank=True, null=True)
    teacher = models.ForeignKey(Teacher, related_name='doubtmeetingteacher',
                                on_delete=models.CASCADE, blank=True, null=True)
    doubt = models.ForeignKey(StudentDoubt, related_name='doubtmeetingdoubt',
                              on_delete=models.CASCADE, blank=True, null=True)
    timeStart = models.DateTimeField(auto_now=True, blank=True, null=True)
    timeEnd = models.DateTimeField(blank=True, null=True)
    initiatedTime = models.DateTimeField(auto_now=True, blank=True, null=True)
    ringing = models.BooleanField(default=False, blank=True, null=True)
    answered = models.BooleanField(null=True, blank=True)
    callRating = models.IntegerField(blank=True, null=True)
    onGoingCall = models.BooleanField(default=False, null=True, blank=True)
    notificationCount = models.IntegerField(default=0, blank=True, null=True)
    numberTeachersNotified = models.IntegerField(blank=True, null=True)

    def __str__(self):
        if self.teacher != None:
            teach = self.teacher
        else:
            teach = 'No teacher picked up'
        return self.student.name + ' ' + str(self.notificationCount) + ' ' +\
            str(self.numberTeachersNotified) + ' ' + str(teach)


class SubjectDoubtApp(models.Model):
    course = models.ForeignKey(TeacherCourse, related_name='subject_course',
                               on_delete=models.SET_NULL, blank=True, null=True)
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name + ' ' + self.course.name


class ChapterDoubtApp(models.Model):
    subject = models.ForeignKey(
        SubjectDoubtApp, related_name='chapter_subjectDoubtApp', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    code = models.FloatField(blank=True, null=True)

    def __str__(self):
        return self.name + '-' + self.subject.name


class DoubtAppAgoraCode(models.Model):
    agoraCode = models.TextField()

    def __str__(self):
        return self.agoraCode


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/apps.py
--------------------------------------------------

from django.apps import AppConfig


class DoubtsConfig(AppConfig):
    name = 'doubts'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/admin.py
--------------------------------------------------

from django.contrib import admin
from doubts.models import *


@admin.register(DoubtCallModel)
class DoubtCallModelAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'teacher']
    readonly_fields = ['student', 'teacher', 'doubt']

@admin.register(FeaturedTeachersModel)
class FeaturedTeachersModelAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher']

@admin.register(RequestToCounsellingModel)
class RequestToCounsellingModelAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'teacher']
    readonly_fields = ['student', 'teacher']

@admin.register(DoubtMeeting)
class DoubtMeetingAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'teacher']
    readonly_fields = ['student', 'teacher', 'doubt']


@admin.register(SubjectDoubtApp)
class SubjectDoubtAppAdmin(admin.ModelAdmin):
    list_display = ['id', 'name']
    readonly_fields = ['course']

@admin.register(ChapterDoubtApp)
class ChapterDoubtAppAdmin(admin.ModelAdmin):
    list_display = ['id', 'name']
    readonly_fields = ['subject']


@admin.register(DoubtAppAgoraCode)
class DoubtAppAgoraCodeAdmin(admin.ModelAdmin):
    list_display = ['id', 'agoraCode']


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/views.py
--------------------------------------------------

from django.shortcuts import render



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/api/urls.py
--------------------------------------------------

from django.urls import include, re_path as url
from django.urls import path
from doubts.api import views


urlpatterns = [
    url(r'doubt_call_notification/$',
        views.DoubtCallNotification.as_view(), name='doubtCallNotification'),
    url(r'has_call_answered/$', views.HasStudentAnswered.as_view(),
        name='hasStudentAnswered'),
    url(r'teacher_change_notanswered_call/$', views.ChangeNotAnsweredCallToCallAgain.as_view(),
        name='changeNotAnsweredCallToCallAgain'),
    url(r'user_end_call/$', views.UserEndCall.as_view(), name='userEndCall'),
    url(r'can_teacher_call/$', views.CanTeacherCall.as_view(), name='canTeacherCall'),
    url(r'teacher_stop_ringing_call/$',
        views.TeacherEndRingingCall.as_view(), name='teacherEndRingingCall'),
    url(r'student_call_answered/$', views.StudentAcceptVideoCall.as_view(),
        name='studentAcceptVideoCall'),
    url(r'student_give_call_rating/$',
        views.EndCallAndGiveRating.as_view(), name='studentGiveRating'),
    url(r'student_get_connected_teachers/$',
        views.StudentConnectedTeachers.as_view(), name='studentConntectedTeachers'),
    url(r'student_get_my_all_doubts/$',
        views.StudentGetAllDoubts.as_view(), name='studentGetAllDoubts'),
    url(r'connected_teachers_detail/$',
        views.ConnectedTeachersDetails.as_view(), name='connectedTeachersDetails'),
    url(r'student_request_tocall/$', views.RequestCallFromTeacher.as_view(),
        name='requestCallFromTeacher'),
    url(r'teacher_call_requests/$', views.TeacherCallRequests.as_view(),
        name='teacherCallRequests'),
    url(r'student_get_featured_teachers/$',
        views.GetFeaturedTeachers.as_view(), name='getFeaturedTeachers'),
    url(r'student_doubt_asked_notification/$',
        views.NotifyTeachersForNewDoubt.as_view(), name='notifyTeachersForNewDoubt'),
    url(r'doubt_meeting_answered/$', views.DoubtMeetingAnswered.as_view(),
        name='doubtMeetingAnswered'),
    url(r'teacher_doubt_notification_again/$',
        views.GetNotificationDoubtTeacher.as_view(), name='getNotificationDoubtTeacher'),
    url(r'get_doubtapp_agoracode/$', views.GetDoubtAppAgoraCode.as_view(),
        name='GetDoubtAppAgoraCode'),
    url(r'connected_call_teacher_detail/$',
        views.OnCallConnectedTeacherDetail.as_view(), name='onCallConnctedTeacherDetail'),

]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/doubts/api/views.py
--------------------------------------------------

from rest_framework.views import APIView
from django.contrib.auth.models import User, Group
from rest_framework.response import Response
from basicinformation.models import *
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *
from communication.models import StudentDoubt
from membership.models import *
from management.models import *
from basicinformation.models import *
from content.models import *
from django.contrib.postgres.search import SearchVector
import requests
from rest_framework.authtoken.models import Token
from django_user_agents.utils import get_user_agent
from django.http import HttpResponse
import csv
from django.db.models import Q
from doubts.models import *


class DoubtCallNotification(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_username = data['student_username']
        doubt_id = data['doubt_id']
        token =\
            'AAAAA9c2nrE:APA91bGTIHb7EUbHCQDheK6k9hJQqSHq8dignwaAispW6tECUgtzZrxlJG7IgFNl9_N2f1d3iTfamgfZOaLlQfV7iqrULyl6LWu3RRjuvCGUPHKuCttWuCX7ImYSFzgtILlyGLV-5MQC'
        student = Student.objects.get(studentuser__username=student_username)
        doubt = StudentDoubt.objects.get(id=doubt_id)
        if doubt.solved == True:
            context = {'status': 'Failed',
                       'message': 'doubt solved', 'callId': 0}
            return Response(context)
        call_notification =\
            DoubtCallModel.objects.filter(
                doubt=doubt, student=student, ringing=True).exclude(teacher=me.profile)
        if len(call_notification) != 0:
            context = {'status': 'Failed',
                       'message': 'another teacher is calling', 'callId': 0}
            return Response(context)
        call_notification =\
            DoubtCallModel.objects.filter(
                doubt=doubt, student=student, onGoingCall=True)
        if len(call_notification) != 0:
            context = {'status': 'Failed',
                       'message': 'on another call', 'callId': 0}
            return Response(context)
        try:
            doubtcall =\
                DoubtCallModel.objects.get(
                    doubt=doubt, student=student, teacher=me.profile)
            if doubtcall.answered != True:
                message =\
                    {'call_data': {'teacher': me.profile.name, 'doubt_id': doubtcall.id}}
                send_notification(
                    token, student.firebaseToken, message, 1, ttl=0)
            else:
                context = {'status': 'Failed',
                           'message': 'already called', 'callId': 0}
                return Response(context)
        except DoubtCallModel.DoesNotExist:
            doubtcall = DoubtCallModel()
            doubtcall.teacher = me.profile
            doubtcall.student = student
            doubtcall.answered = None
            doubtcall.doubt = doubt
            doubtcall.ringing = True
            doubtcall.save()
            message =\
                {'call_data': {'teacher': me.profile.name, 'doubt_id': doubtcall.id}}
            send_notification(token, student.firebaseToken, message, 1, ttl=0)
        context = {'status': 'Success', 'callId': doubtcall.id}
        return Response(context)


class HasStudentAnswered(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        call_id = data['callId']
        call = DoubtCallModel.objects.get(id=call_id)
        context = {'answered': call.answered}
        return Response(context)


class ChangeNotAnsweredCallToCallAgain(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        call_id = data['callId']
        call = DoubtCallModel.objects.get(id=call_id)
        call.answered = None
        call.save()
        context = {'status': 'Success'}
        return Response(context)


class UserEndCall(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        call_id = data['call_id']
        try:
            call = DoubtMeeting.objects.get(id=call_id)
            call.answered = True
            call.ringing = False
            call.onGoingCall = False
            call.save()
            context = {'status': 'Success'}
        except DoubtCallModel.DoesNotExist:
            context = {'status': 'Failed',
                       'message': '{} doesnt exist'.format(call_id)}
        return Response(context)


class CanTeacherCall(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        doubt_id = data['doubt_id']
        doubt = StudentDoubt.objects.get(id=doubt_id)
        canCall = True
        if doubt.solved == True:
            canCall = False
            context = {'status': 'Failed',
                       'message': 'On another call or doubt already solved'}
            return Response(context)
        call =\
            DoubtCallModel.objects.filter(doubt=doubt, onGoingCall=True)
        if len(call) != 0:
            calCall = False
            context = {'status': 'Failed',
                       'message': 'On another call or doubt already solved'}
            return Response(context)

        call =\
            DoubtCallModel.objects.filter(Q(ringing=True) | Q(
                answered=True), teacher=me.profile, doubt=doubt)
        if len(call) > 0:
            canCall = False
            context = {'status': 'Failed',
                       'message': 'Already talked to student this doubt.'}
            return Response(context)
        else:
            canCall = True
            context = {'status': 'Success'}
        return Response(context)


class TeacherEndRingingCall(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        call_id = data['call_id']
        call = DoubtCallModel.objects.get(id=call_id)
        call.ringing = False
        call.onGoingCall = False
        call.save()
        context = {'status': 'Success'}
        return Response(context)


class StudentAcceptVideoCall(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        call_id = data['callId']
        answered = data['answered']
        try:
            call = DoubtCallModel.objects.get(id=call_id)
            if answered == 'true':
                answered_var = True
            else:
                answered_var = False
                call.ringing = False
                call.save()
            call.answered = answered_var
            if answered_var == True:
                call.onGoingCall = True
            call.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)


class EndCallAndGiveRating(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        call_id = data['call_id']
        rating = data['rating']
        try:
            call = DoubtMeeting.objects.get(id=call_id)
            call.onGoingCall = False
            call.ringing = False
            call.callRating = int(rating)
            call.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': '{} doesnot  exists'.format(call_id)}
        return Response(context)


class StudentGetAllDoubts(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        doubts =\
            StudentDoubt.objects.filter(doubtFrom=me.profile).order_by('-id')
        doubt_list = []
        for doubt in doubts:
            doubt_dict =\
                {'id': doubt.id, 'title': doubt.title,
                    'text': doubt.text, 'solved': doubt.solved}
            doubt_list.append(doubt_dict)
        context = {"doubts": doubt_list}
        return Response(context)


class StudentConnectedTeachers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        calls_list = []
        teacher_list = []
        calls =\
            DoubtMeeting.objects.filter(student=me.profile).order_by('-id')
        for call in calls:
            try:
                teacher = call.teacher
                courses_list = ['SSC Pre', 'IIT-JEE']
                try:
                    teacher_details = TeacherDetails.objects.get(
                        teacher=teacher)
                    courses = teacher_details.courses.all()
                    for course in courses:
                        courses_list.append(course.name)
                except:
                    pass
                teacher_dict =\
                    {'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                call_dict =\
                    {'id': call.id, 'teacher': teacher_dict, 'courses': courses_list}
                if teacher_dict in teacher_list:
                    continue
                else:
                    teacher_list.append(teacher_dict)
                    calls_list.append(call_dict)
            except Exception as e:
                continue
        context = {'calls': calls_list}
        return Response(context)


class ConnectedTeachersDetails(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        teacher = Teacher.objects.get(id=teacher_id)
        institute = teacher.institute
        url = institute.websiteURL
        banners = Banner.objects.filter(institute=institute).order_by('id')
        banner_list = []
        for banner in banners:
            banner_list.append(banner.link)
        facebook = institute.facebookURL
        instagram = institute.instagramURL
        twitter = institute.twitterURL
        aboutusObject = AboutUsDescription.objects.filter(institute=institute)
        try:
            abt_us = aboutusObject[0]
            aboutus = abt_us.description
        except:
            aboutus = None

        appUrl = institute.webAppUrl
        context =\
            {'institute_name': institute.name, 'banners': banner_list, 'aboutUs': aboutus, 'facebook': facebook,
                'instagram': instagram, 'twitter': twitter, 'website': url, 'appUrl': appUrl}
        return Response(context)


class RequestCallFromTeacher(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        message = data['message']
        try:
            teacher = Teacher.objects.get(id=teacher_id)
            requestToCall = RequestToCounsellingModel()
            requestToCall.student = me.profile
            requestToCall.teacher = teacher
            requestToCall.message = message
            requestToCall.save()
            try:
                message = '{} has requested for personal doubt solving'.format(
                    me.profile.name)
                server_key =\
                    'AAAAdOx1CrI:APA91bFrG4KnIYjW8uEt21eux48ydwAtg7RAjXL6ckGsOqoJI31U7i8SWJ9GNfaQSRG-xYPd-FB9HMWb6FAhQrXZauz2qWp2H_OYIAXlxeNjFGEUWn1pkAroKGo6E2eWd6HWfnArF1wG'
                send_notification(
                    server_key, teacher.firebaseToken, message, 2)
            except:
                pass
            context = {'status': 'Success',
                       'message': 'Teacher will call you ASAP'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)


class TeacherCallRequests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        callRequests =\
            RequestToCounsellingModel.objects.filter(
                teacher=me.profile).order_by('-id')
        request_list = []
        for cr in callRequests:
            student = cr.student
            student_dict = {'id': student.id, 'name': student.name}
            cr_dict =\
                {'id': cr.id, 'student': student_dict,
                    'message': cr.message, 'time': cr.time}
            request_list.append(cr_dict)
        context = {'requests': request_list}
        return Response(context)


class GetFeaturedTeachers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        featuredTeachers = FeaturedTeachersModel.objects.all()
        ft_list = []
        for ft in featuredTeachers:
            ft_dict =\
                {'teacher_id': ft.teacher.id, 'id': ft.id, 'aboutMe': ft.aboutMe,
                    'videos': ft.videos, 'rating': ft.rating, 'thumbnail': ft.thumbnail}
            ft_list.append(ft_dict)
        context = {'featuredTeachers': ft_list}
        return Response(context)


class NotifyTeachersForNewDoubt(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        doubt_id = data['doubt_id']
        student_doubt = StudentDoubt.objects.get(id=doubt_id)
        course = student_doubt.course
        teacher_details = TeacherDetails.objects.filter(course__name=course)
        teacher_list = []
        try:
            doubtMeeting = DoubtMeeting.objects.get(doubt=student_doubt)
            doubtMeeting.notificationCount = doubtMeeting.notificationCount + 1
            doubtMeeting.numberTeachersNotified = teacher_details.count()
            doubtMeeting.save()
        except DoubtMeeting.DoesNotExist:
            doubtMeeting = DoubtMeeting()
            doubtMeeting.student = student_doubt.doubtFrom
            doubtMeeting.doubt = student_doubt
            doubtMeeting.numberTeachersNotified = teacher_details.count()
            doubtMeeting.save()
        if doubtMeeting.answered == True:
            context = {'status': 'already answered'}
            return Response(context)
        if len(teacher_details) > 0:
            for td in teacher_details:
                teacher_list.append(td.teacher)
        message = {'call_data': {'message': 'New Doubt! Solve and get a lead.', 'doubt_id': student_doubt.id,
                                 'student': student_doubt.doubtFrom.studentuser.username, 'call_id': doubtMeeting.id}}
        for teacher in teacher_list:
            token = 'AAAAdOx1CrI:APA91bFrG4KnIYjW8uEt21eux48ydwAtg7RAjXL6ckGsOqoJI31U7i8SWJ9GNfaQSRG-xYPd-FB9HMWb6FAhQrXZauz2qWp2H_OYIAXlxeNjFGEUWn1pkAroKGo6E2eWd6HWfnArF1wG'
            send_notification(token, teacher.firebaseToken, message, 1)
        context =\
            {'status': 'sent', 'course': course,
                'numberTeachers': teacher_details.count()}
        return Response(context)


class DoubtMeetingAnswered(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        doubt_id = data['doubt_id']
        student_doubt = StudentDoubt.objects.get(id=doubt_id)
        doubt_meeting = DoubtMeeting.objects.get(doubt=student_doubt)
        if doubt_meeting.teacher == None:
            doubt_meeting.teacher = me.profile
            doubt_meeting.answered = True
            doubt_meeting.save()
            context = {'status': 'Success', 'message': 'Doubt Answered'}
        else:
            context = {'status': 'Failed',
                       'message': 'Someone has already taken the doubt'}
        return Response(context)


class GetNotificationDoubtTeacher(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        doubt_id = data['doubt_id']
        token =\
            'AAAAdOx1CrI:APA91bFrG4KnIYjW8uEt21eux48ydwAtg7RAjXL6ckGsOqoJI31U7i8SWJ9GNfaQSRG-xYPd-FB9HMWb6FAhQrXZauz2qWp2H_OYIAXlxeNjFGEUWn1pkAroKGo6E2eWd6HWfnArF1wG'
        try:
            doubt = StudentDoubt.objects.get(id=doubt_id)
            student = doubt.doubtFrom.studentuser.username
            deviceId = me.profile.firebaseToken
            message = {"student": student, 'doubt_id': doubt_id}
            r = send_notification(token, deviceId, message, 1)
            context =\
                {'status': 'Success', 'message': '{}---{}'.format(r, deviceId)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)


class GetDoubtAppAgoraCode(APIView):
    def get(self, request, *args, **kwargs):
        agora_code = DoubtAppAgoraCode.objects.all().first()
        if agora_code:
            agora_code = agora_code.agoraCode
        else:
            agora_code = None
        context = {'agora_code': agora_code}
        return Response(context)


class OnCallConnectedTeacherDetail(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        call_id = data['call_id']
        doubtcall = DoubtMeeting.objects.get(id=call_id)
        institute = doubtcall.teacher.institute
        url = institute.websiteURL
        facebook = institute.facebookURL
        instagram = institute.instagramURL
        twitter = institute.twitterURL
        aboutusObject = AboutUsDescription.objects.filter(institute=institute)
        try:
            abt_us = aboutusObject[0]
            aboutus = abt_us.description
        except:
            aboutus = None
        appUrl = institute.webAppUrl
        context =\
            {'institute_name': institute.name, 'aboutUs': aboutus, 'facebook': facebook,
                'instagram': instagram, 'twitter': twitter, 'website': url, 'appUrl': appUrl}
        return Response(context)

class justatest(APIView):
    def get(self,request):
        jj = {'me':'test'}
        context = {'testcode':jj}
        return Response(context)


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/models.py
--------------------------------------------------

from tokenize import blank_re
from django.db import models
from django.contrib.auth.models import User
from membership.models import *
from content.models import *
from communication.models import *
from picklefield.fields import PickledObjectField

class StudentReferralCode(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    code = models.CharField(max_length=1000)
    time = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.student.name + ' ' + self.code


class Coin(models.Model):
    student = models.ForeignKey(Student, related_name='coin_student',on_delete=models.CASCADE)
    coins = models.FloatField(default=0)

    def __str__(self):
        return self.student.name + ' ' + str(self.coins)


class ManipulatedCoin(models.Model):
    student = models.ForeignKey(Student, related_name='manipulatedcoin_student', on_delete=models.CASCADE)
    coin = models.ForeignKey(Coin, related_name='manipulated_coin',on_delete=models.CASCADE)
    coinChanged = models.FloatField()
    reason = models.CharField(max_length=500)
    date = models.DateTimeField(null=True, blank=True)
    by = models.ForeignKey(Teacher, null=True, blank=True,on_delete=models.SET_NULL)
    code = models.CharField(max_length=10, null=True, blank=True)
    studentSales =\
        models.ForeignKey(Student, related_name='manipulated_studentinitiator',
                          on_delete=models.CASCADE, null=True, blank=True)
    studentPurchase =\
        models.ForeignKey(Student, related_name='manipulated_studentreceiver',
                          on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return self.reason + ' ' + str(self.coinChanged)


class StudentChallenge(models.Model):
    test = models.ForeignKey(Test, related_name='challenge_test', on_delete=models.CASCADE)
    challenger = models.ForeignKey(
        Student, related_name='challenge_challenger', on_delete=models.SET_NULL, blank=True, null=True)
    competitor = models.ForeignKey(
        Student, related_name='challenge_competitor', on_delete=models.SET_NULL, blank=True, null=True)
    winner = models.ForeignKey(Student, related_name='challenge_winner',
                               on_delete=models.SET_NULL, blank=True, null=True)
    title = models.CharField(max_length=100, null=True, blank=True)
    coin = models.FloatField(null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    accepted = models.BooleanField(default=False)
    status = models.CharField(max_length=100, default='in-progress')
    is_this_free_challenge = models.BooleanField(default=False)
    free_challenge_student = models.ForeignKey(
        Student, related_name='free_challenge_student', on_delete=models.SET_NULL, blank=True, null=True)

    def __str__(self):
        if self.competitor:
            return str(self.coin) + ' ' + self.status + '  ' + self.challenger.name + ' VS ' + self.competitor.name
        else:
            return str(self.coin) + ' ' + self.status + '  ' + self.challenger.name


class StudentBuyCoinHistory(models.Model):
    student = models.ForeignKey(Student, related_name='buyer_student', on_delete=models.CASCADE)
    coin = models.FloatField()
    time = models.DateTimeField(auto_now_add=True)
    rupees = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.coin)


class StudentWithdrawCoinHistory(models.Model):
    student = models.ForeignKey(Student, related_name='withdraw_student', on_delete=models.CASCADE)
    coin = models.FloatField()
    time = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=100, default='in-review')
    number = models.BigIntegerField(null=True, blank=True)
    rupees = models.FloatField(null=True, blank=True)
    response = PickledObjectField(
        editable=True, default=None, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.coin)


class ChallengeNotification(models.Model):
    challenge = models.ForeignKey(
        StudentChallenge, related_name='notication_challenge', on_delete=models.CASCADE, blank=True, null=True)
    contestants = models.ManyToManyField(Student, related_name='challenge_contestants', blank=True)
    time = models.DateTimeField(auto_now_add=True)
    withdrawRequest = models.ForeignKey(
        StudentWithdrawCoinHistory, related_name='studentWithdraw_request', on_delete=models.CASCADE, blank=True, null=True)
    studentBuyCoin = models.ForeignKey(
        StudentBuyCoinHistory, related_name='student_buyCoin', on_delete=models.CASCADE, blank=True, null=True)
    staffMessage = models.ForeignKey(
        Message, related_name='staff_message', on_delete=models.CASCADE, blank=True, null=True)
    groupChallenge = models.ForeignKey(
        'gaming.StudentGroupChallenge', related_name='groupChallenge_notification', on_delete=models.CASCADE, blank=True, null=True)


class ContestantReadNotification(models.Model):
    student = models.ForeignKey(
        Student, related_name='readNotification_student', on_delete=models.CASCADE)
    challengeNotification = models.ManyToManyField(
        ChallengeNotification, blank=True)


class TestWinAppFeedback(models.Model):
    student = models.ForeignKey(
        Student, related_name='student_feedback', on_delete=models.CASCADE, blank=True, null=True)
    rating = models.IntegerField(null=True, blank=True)
    feedback = models.TextField(null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.student.name + ' ' + self.feedback


class FunctionalityHandlerTestWin(models.Model):
    active_grc = models.BooleanField(default=True)
    active_wcr = models.BooleanField(default=True)
    active_ccf = models.BooleanField(default=True)
    active_fsc = models.BooleanField(default=True)

    active_referral = models.BooleanField(default=True)
    isActivateTestwinApp = models.BooleanField(default=True)
    minimumWithdrawCoin = models.FloatField(null=True, blank=True)
    minimumChallengeForWithdraw = models.IntegerField(null=True, blank=True)
    newRegisterCoin = models.FloatField(default=50)
    eachCoinValue = models.FloatField(null=True, blank=True)
    refferalLimite = models.IntegerField(null=True, blank=True)
    shareEarnTabText = models.TextField(null=True, blank=True)
    withdrawTabText = models.TextField(null=True, blank=True)
    addCoinTabText = models.TextField(null=True, blank=True)

    def __str__(self):
        return str(self.active_grc)


class StaffAnnouncementTestWinApp(models.Model):
    announcement = models.TextField(null=True, blank=True)
    active = models.BooleanField(default=False)

    def __str__(self):
        return str(self.active)


class FAQ(models.Model):
    institute = models.ForeignKey(
        Institute, related_name='institute_faq', blank=True, null=True, on_delete=models.CASCADE)
    title = models.TextField(null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "FAQ"
        verbose_name_plural = "FAQs"


class StudentGroupChallenge(models.Model):
    contestants = models.ManyToManyField(
        Student, related_name='groupChallenge_contestants', blank=True)
    bookingsForPlay = models.ManyToManyField(
        Student, related_name='groupChallenge_bookings', blank=True)
    challengeLanguage = models.ManyToManyField(
        Language, related_name='groupChallenge_language', blank=True)
    winners = models.ManyToManyField(
        Student, related_name='groupChallenge_winners', blank=True)
    course = models.ForeignKey(Course, related_name='groupChallenge_course',
                               on_delete=models.SET_NULL, blank=True, null=True)
    test = models.ForeignKey(
        Test, related_name='groupChallenge_test', on_delete=models.CASCADE)
    title = models.CharField(max_length=100, null=True, blank=True)
    status = models.CharField(max_length=100, default='waiting-to-start')
    time = models.DateTimeField(auto_now_add=True)
    startTime = models.DateTimeField(null=True, blank=True)
    isChallengeOver = models.BooleanField(default=False)
    slots = models.IntegerField(blank=True, null=True)
    coin = models.FloatField(null=True, blank=True)
    winningCoinsUpto = models.FloatField(null=True, blank=True)
    winningCoins = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.title + ' ' + self.status + ' ' + str(self.startTime) + ' ' + str(self.isChallengeOver)


class TeacherCoin(models.Model):
    teacher = models.OneToOneField(
        Teacher, related_name='teacher_coin', on_delete=models.CASCADE)
    coins = models.FloatField(default=0)

    def __str__(self):
        return self.teacher.name + ' ' + str(self.coins)

class StudentCoinBuyRequest(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    phone = models.CharField(max_length=20, blank=True, null=True)
    pancard = models.CharField(max_length=20)
    bank_name = models.CharField(max_length=100)
    branch_name = models.CharField(max_length=100)
    account_number = models.CharField(max_length=50, blank=True, null=True)
    ifsc = models.CharField(max_length=20, blank=True, null=True)
    req_coin = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    withdraw = models.BooleanField(default=False)

    def __str__(self):
        return self.name

    



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/apps.py
--------------------------------------------------

from django.apps import AppConfig


class GamingConfig(AppConfig):
    name = 'gaming'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/admin.py
--------------------------------------------------

from django.contrib import admin
from gaming.models import *


admin.site.register(ChallengeNotification)
class ChallengeNotificationAdmin(admin.ModelAdmin):
    list_display = ['id', 'challenge']
    readonly_fields = ['challenge', 'contestants', 'withdrawRequest', 'studentBuyCoin', 'staffMessage', 'groupChallenge']

@admin.register(StudentReferralCode)
class StudentReferralCode(admin.ModelAdmin):
    list_display = ['id', 'student', 'code']
    search_fields = ['code']

@admin.register(StudentCoinBuyRequest)
class StudentCoinBuyRequest(admin.ModelAdmin):
    list_display = ['id', 'name', 'req_coin']
    search_fields = ['name']

@admin.register(Coin)
class CoinAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'coins']
    readonly_fields = ['student', 'coins']
    search_fields = ['student__studentuser__username']
    list_editable = ['coins']

admin.site.register(ContestantReadNotification)
class ContestantReadNotificationAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student', 'challengeNotification']

admin.site.register(FAQ)
class FAQAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute', 'title']
    readonly_fields = ['institute']

admin.site.register(FunctionalityHandlerTestWin)
class FunctionalityHandlerTestWinAdmin(admin.ModelAdmin):
    list_display = ['id', 'active_grc']

@admin.register(ManipulatedCoin)
class ManipulatedCoinAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'coin']
    readonly_fields = ['student', 'coin', 'by', 'studentSales', 'studentPurchase']
    search_fields = ['student__studentuser__username','studentPurchase__studentuser__username','studentSales__studentuser__username']
    

@admin.register(TeacherCoin)
class TeacherCoinAdmin(admin.ModelAdmin):
    list_display = ['teacher', 'coins']
    search_fields = ['teacher__id', 'teacher__name', 'teacher__institute__name', ]
    list_editable = ['coins']
    readonly_fields = ['teacher']


admin.site.register(TestWinAppFeedback)
class TestWinAppFeedbackAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student',]

admin.site.register(StaffAnnouncementTestWinApp)
class StaffAnnouncementTestWinAppAdmin(admin.ModelAdmin):
    list_display = ['id', 'announcement', 'active']

admin.site.register(StudentBuyCoinHistory)
class StudentBuyCoinHistoryAdmin(admin.ModelAdmin):
    list_display = ['id', 'student',]
    readonly_fields = ['student']

admin.site.register(StudentChallenge)
class StudentChallengeAdmin(admin.ModelAdmin):
    list_display = ['id','test', 'challenger', 'competitor']
    readonly_fields = ['test', 'challenger', 'competitor', 'winner', 'free_challenge_student']

admin.site.register(StudentGroupChallenge)
class StudentGroupChallengeAdmin(admin.ModelAdmin):
    list_display = ['id', 'course', 'title', 'status']
    readonly_fields = ['contestants', 'bookingsForPlay', 'challengeLanguage', 'winners', 'course', 'test']

admin.site.register(StudentWithdrawCoinHistory)
class StudentWithdrawCoinHistoryAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'coin']
    readonly_fields = ['student',]




==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/urls.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/views.py
--------------------------------------------------

from django.shortcuts import render



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/api/serializers.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/api/urls.py
--------------------------------------------------

from django.urls import re_path as url
from gaming.api import views

urlpatterns = [
    url(r'student_apply_coupon_code/$',views.StudentApplyCouponCodeRegistration.as_view(), name='studentApplyCouponCode'),
    url(r'student_generate_referral_code/$',views.CreateUniqueReferralCode.as_view(), name='studentCreateReferralCode'),
    url(r'create_new_referral_code/$',views.RefferalCodeGenerateNew.as_view(), name='referralCodeGenerateNew'),
    url(r'student_get_mycoins/$', views.StudentGetMyCoins.as_view(),name='studentGetMyCoins'),
    url(r'teacher_see_student_coins/$',views.TeacherSeeStudentCoins.as_view(), name='teacherSeeStudentCoins'),
    url(r'teacher_manipulate_coins/$',views.TeacherManipulateCoin.as_view(), name='teacherManipulateCoin'),
    url(r'teacher_manipulation_history/$',views.TeacherManipulationHistory.as_view(), name='teacherManipulationHistory'),
    url(r'teacher_coins_on_package_sharing/$', views.TeacherChangePackageSharingCoins.as_view(),name='teacherChangePackageSharingCoins'),
    url(r'teacher_coin_on_refferal/$', views.TeacherChangeCoinReferralTo.as_view(),name='teacherChangeRefferalToCoin'),
    url(r'teacher_coin_from_refferal/$', views.TeacherChangeCoinReferralFrom.as_view(),name='teacherChangeRefferalFromCoin'),
    url(r'teacher_change_extendcoin/$',views.TeacherChangeExtendCoin.as_view(), name='TeacherChangeExtendCoin'),
    url(r'teacher_get_coins_fromreferral/$',views.TeacherGetReferralFromCoins.as_view(), name='teacherGetCoinsFromReferral'),
    url(r'teacher_get_coins_toreferral/$',views.TeacherGetReferralToCoins.as_view(), name='teacherGetCoinsToReferral'),
    url(r'teacher_get_extend_coins/$', views.TeacherGetReferralExtendCoins.as_view(),name='TeacherGetReferralExtendCoins'),
    url(r'teacher_get_buycoins_referral/$',views.TeacherGetCoinsFromCoursePurchase.as_view(), name='teacherGetCoinsFromPurchase'),
    url(r'teacher_edit_buycourse_coins/$',views.TeacherEditBuyCourseCoins.as_view(), name='teacherEditBuyCourseCoins'),

    url(r'student_create_challenge/$',views.StudentCreateChallenge.as_view(), name='StudentCreateChallenge'),
    url(r'student_get_challenges/$', views.StudentGetChallenges.as_view(),name='StudentGetChallenges'),
    url(r'student_accept_challenges/$',views.StudentAcceptChallenges.as_view(), name='StudentAcceptChallenges'),
    url(r'student_challenge_resulte/$',views.StudentChallengeResulte.as_view(), name='StudentChallengeResulte'),
    url(r'student_get_own_coins/$',views.StudentGetOwnCoins.as_view(), name='StudentGetOwnCoins'),
    url(r'student_see_individual_challenge/$',views.StudentSeeIndividualChallenge.as_view(), name='StudentSeeIndividualChallenge'),
    url(r'student_get_wins_challenges/$',views.StudentGetWinsChallenges.as_view(), name='StudentGetWinsChallenges'),
    url(r'student_get_lost_challenges/$',views.StudentGetLostsChallenges.as_view(), name='StudentGetLostsChallenges'),
    url(r'student_get_past_challenges/$',views.StudentGetPastsChallenges.as_view(), name='StudentGetPastsChallenges'),
    url(r'student_get_total_challenges/$',views.StudentGetTotalChallenges.as_view(), name='StudentGetTotalChallenges'),
    url(r'student_get_progress_challenges/$',views.StudentGetProgressChallenges.as_view(), name='StudentGetProgressChallenges'),
    url(r'assign_coins_new_student/$', views.AssignFreeCoinsNewStudent.as_view(),name='AssignFreeCoinsNewStudent'),
    url(r'student_buy_coins_testwin/$',views.StudentBuyCoins.as_view(), name='StudentBuyCoins'),
    url(r'student_get_buy_coins_history/$',views.StudentGetOwnBuyCoinsHistory.as_view(), name='StudentGetOwnBuyCoinsHistory'),
    url(r'student_request_withdraw_coins/$',views.StudentRequestWithdrawCoins.as_view(), name='StudentRequestWithdrawCoins'),
    url(r'student_get_withdraw_coins_history/$',views.StudentGetOwnWithdrawCoinsHistory.as_view(), name='StudentGetOwnWithdrawCoinsHistory'),
    url(r'staff_get_all_withdraw_requests/$', views.StaffGetAllWithdrawCoinRequests.as_view(),name='StaffGetAllWithdrawCoinRequests'),
    url(r'staff_accept_withdraw_request/$', views.StaffAcceptWithdrawCoinRequest.as_view(),name='StaffAcceptWithdrawCoinRequest'),
    url(r'staff_reject_withdraw_request/$', views.StaffRejectWithdrawCoinRequest.as_view(),name='StaffRejectWithdrawCoinRequest'),
    url(r'student_post_issue/$', views.StudentPostIssue.as_view(),name='StudentPostIssue'),
    url(r'student_get_issue/$', views.StudentGetOwnIssue.as_view(),name='StudentGetOwnIssue'),
    url(r'student_get_history/$', views.StudentGetHistory.as_view(),name='StudentGetHistory'),
    url(r'student_see_leaderboard/$',views.StudentSeeLeaderboard.as_view(), name='StudentSeeLeaderboard'),
    url(r'student_unread_notifications/$',views.StudentUnreadNotification.as_view(), name='StudentUnreadNotification'),
    url(r'student_mark_read_notification/$',views.StudentMarkReadNotification.as_view(), name='StudentMarkReadNotification'),
    url(r'student_see_notification/$',views.StudentSeeNotification.as_view(), name='StudentSeeNotification'),
    url(r'generate_random_challenge/$',views.GenerateRandomChallenge.as_view(), name='GenerateRandomChallenge'),
    url(r'staff_get_student_issues/$',views.StaffGetStudentIssues.as_view(), name='StaffGetStudentIssues'),
    url(r'staff_revert_student_issue/$',views.StaffRevertStudentIssue.as_view(), name='StaffRevertStudentIssue'),
    url(r'staff_see_Individual_student_info/$', views.StaffSeeIndividualStudentInformation.as_view(),name='StaffSeeIndividualStudentInformation'),
    url(r'student_get_challenge_test_ranking/$',views.StudentGetChallengeTestRanking.as_view(), name='StudentGetChallengeTestRanking'),
    url(r'student_give_feedback/$', views.StudentGiveFeedback.as_view(),name='StudentGiveFeedback'),
    url(r'show_feedback_popup_student/$',views.ShowFeedbackPopupStudent.as_view(), name='ShowFeedbackPopupStudent'),
    url(r'staff_get_all_feedback/$', views.StaffGetAllFeedbacks.as_view(),name='StaffGetAllFeedbacks'),
    url(r'staff_manage_grc_functionality/(?P<input>.*)/$',views.StaffManageGRC.as_view(), name='StaffManageGRC'),
    url(r'staff_manage_wcr_functionality/(?P<input>.*)/$',views.StaffManageWCR.as_view(), name='StaffManageWCR'),
    url(r'check_withdraw_request_availability/$', views.CheckWithdrawCoinRequestAvailability.as_view(),name='CheckWithdrawCoinRequestAvailability'),
    url(r'staff_get_all_challenges_info/$',views.StaffGetAllChallengesInfo.as_view(), name='StaffGetAllChallengesInfo'),
    url(r'staff_announcement_testwin/$', views.StaffPostAnnouncementTestWinApp.as_view(),name='StaffPostAnnouncementTestWinApp'),
    url(r'student_get_announcement_testwin/$', views.StudentGetAnnouncementTestWinApp.as_view(),name='StudentGetAnnouncementTestWinApp'),
    url(r'student_applyReferral_testwin/$', views.StudentApplyReferralCodeTestWinApp.as_view(),name='StudentApplyReferralCodeTestWinApp'),
    url(r'staff_authorize_student_testwin/$', views.staffDoAuthorizedStudentTestwin.as_view(),name='staffDoAuthorizedStudentTestwin'),
    url(r'is_student_authorized/$', views.IsStudentAuthorized.as_view(),name='IsStudentAuthorized'),
    url(r'get_referral_coin/$', views.GetReferralCoin.as_view(),name='GetReferralCoin'),
    url(r'staff_manage_all_functionality_testwinApp/$',views.StaffManageAllFunctionalityTestwinApp.as_view(), name='StaffManageAllFunctionalityTestwinApp'),
    url(r'is_activate_testwinApp/$', views.IsActivateTestwinApp.as_view(),name='IsActivateTestwinApp'),
    url(r'staff_get_verified_students/$',views.StaffGetVerifiedStudents.as_view(), name='StaffGetVerifiedStudents'),
    url(r'staff_get_rejected_verification_students/$',views.StaffGetRejectedVerificationStudents.as_view(), name='StaffGetRejectedVerificationStudents'),
    url(r'staff_get_pending_verification_students/$',views.StaffGetPendingVerificationStudents.as_view(), name='StaffGetPendingVerificationStudents'),
    url(r'staff_verification_student_temprary/(?P<student_id>.*)/(?P<authorizedTestWin>.*)/$',views.staffVerificationStudentTemprary.as_view(), name='staffVerificationStudentTemprary'),
    url(r'get_teswin_instructions/$',views.GetTeswinInstructions.as_view(), name='GetTeswinInstructions'),
    url(r'student_get_FAQ/$', views.StudentGetFAQ.as_view(), name='StudentGetFAQ'),
    url(r'staff_get_all_FAQ/$', views.StaffGetAllFAQ.as_view(), name='StaffGetAllFAQ'),
    url(r'staff_create_FAQ/$', views.StaffCreateFAQ.as_view(), name='StaffCreateFAQ'),
    url(r'staff_update_FAQ/$', views.StaffUpdateFAQ.as_view(), name='StaffUpdateFAQ'),
    url(r'staff_delete_FAQ/$', views.StaffDeleteFAQ.as_view(), name='StaffDeleteFAQ'),
    url(r'staff_block_student/$', views.StaffBlockStudent.as_view(),name='StaffBlockStudent'),
    url(r'check_student_block_status/$',views.CheckStudentBlockStatus.as_view(), name='CheckStudentBlockStatus'),
    url(r'check_device_limitation/$',views.CheckDeviceLimitation.as_view(), name='CheckDeviceLimitation'),
    url(r'teacher_get_all_students_testwin/$',views.TeacherSeeAllStudentsTestwin.as_view(), name='TeacherSeeAllStudentsTestwin'),
    url(r'teacher_assign_coin_students/$',views.TeacherAssignCoinStudents.as_view(), name='TeacherAssignCoinStudents'),
    url(r'get_reffral_wise_students/$', views.StaffGetReffralWiseStudents.as_view(),name='StaffGetReffralWiseStudents'),

    url(r'create_test_group_challenge/$', views.CreateTestForGroupChallenges.as_view(),name='CreateTestForGroupChallenges'),
    url(r'student_get_total_group_challenges/$', views.StudentGetTotalNumberGroupChallenges.as_view(),name='StudentGetTotalNumberGroupChallenges'),
    url(r'student_get_group_challenges/$',views.StudentGetGroupChallenges.as_view(), name='StudentGetGroupChallenges'),
    url(r'student_see_group_challenge_details/$',views.StudentSeeGroupChallengeDetails.as_view(), name='StudentSeeGroupChallengeDetails'),
    url(r'student_registraion_group_challenge/$',views.StudentRegistraionGroupChallenge.as_view(), name='StudentRegistraionGroupChallenge'),
    url(r'student_start_playing_group_challenge/$',views.StudentStartPlayingGroupChallenge.as_view(), name='StudentStartPlayingGroupChallenge'),
    url(r'student_get_ongoing_group_challenges/$',views.StudentGetOngoingGroupChallenges.as_view(), name='StudentGetOngoingGroupChallenges'),
    url(r'student_get_won_group_challenges/$',views.StudentGetWonGroupChallenges.as_view(), name='StudentGetWonGroupChallenges'),
    url(r'student_get_lost_group_challenges/$',views.StudentGetLostGroupChallenges.as_view(), name='StudentGetLostGroupChallenges'),
    
    url(r'teacher_see_student_coins_pagination/$', views.TeacherSeeStudentCoinsUsingPagination.as_view(),name='TeacherSeeStudentCoinsUsingPagination'),
    url(r'teacher_get_levelwise_referral_coins/$',views.TeacherGetLevelWiseReferralCoins.as_view(), name='TeacherGetLevelWiseReferralCoins'),
    url(r'teacher_change_levelwise_referral_coins/$',views.TeacherChangeLevelWiseReferralCoins.as_view(), name='TeacherChangeLevelWiseReferralCoins'),
    url(r'student_apply_referral_levelwise/$', views.StudentApplyReferralWithLevelWiseFunctionality.as_view(),name='StudentApplyReferralWithLevelWiseFunctionality'),
    url(r'teacher_get_first_level_students/$',views.TeacherGetFirstLevelStudents.as_view(), name='TeacherGetFirstLevelStudents'),
    url(r'teacher_get_second_level_students/$',views.TeacherGetSecondLevelStudents.as_view(), name='TeacherGetSecondLevelStudents'),
    url(r'teacher_get_third_level_students/$',views.TeacherGetThirdLevelStudents.as_view(), name='TeacherGetThirdLevelStudents'),
    url(r'assign_coins_new_teacher/$', views.AssignFreeCoinsNewTeacher.as_view(),name='AssignFreeCoinsNewTeacher'),
    url(r'teacher_get_own_coins/$',views.TeacherGetOwnCoins.as_view(), name='TeacherGetOwnCoins'),
    url(r'student_get_coin_on_purchases/$',views.StudentGetCoinOnPurchase.as_view(), name='StudentGetCoinOnPurchase'),
    url(r'student_coin_buy_request/$',views.StudentRequestCoinBuy.as_view(), name='StudentRequestCoinBuy'),
    url(r'teacher_downloadCSV_for_coins_withdraw_request/(?P<institute_code>.*)/$',views.TeacherDownloadCSVForCoinsWithdrawRequest.as_view(), name='TeacherDownloadCSVForCoinsWithdrawRequest'),
    url(r'teacher_done_withdraw/$',views.TeacherDoneWithdraw.as_view(), name='TeacherDoneWithdraw'),
    url(r'teacher_see_withdraw_request_list/$',views.TeacherSeeWithdrawRequestList.as_view(), name='TeacherSeeWithdrawRequestList'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/gaming/api/views.py
--------------------------------------------------

import csv
import math
import random
import string
import requests
from random import randint
import pandas as pd
from django.utils import timezone
from datetime import datetime, timedelta
from django.db.models import Sum, Q
from django.core import mail
from django.http import HttpResponse
from gaming.models import *
from content.models import *
from membership.models import *
from communication.models import *
from rest_framework.views import APIView
from rest_framework.response import Response
from basicinformation.models import *
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *

def gettingAllParents(parent_id):
    try:
        manipulateCoins = ManipulatedCoin.objects.get(studentPurchase__id=parent_id, reason='myRefferal')
        parent = manipulateCoins.studentSales
        extendRefferedCoins = parent.institute.extendRefferedCoins
        if parent:
            try:
                coin = Coin.objects.get(student=parent)
            except Coin.MultipleObjectsReturned:
                coins = Coin.objects.filter(student=parent).order_by('-id')[1:]
                for i in coins:
                    i.delete()
                coin = Coin.objects.get(student=parent)
            coin.coins += extendRefferedCoins
            coin.save()
            try:
                app_token = parent.institute.serverKey
                deviceId = parent.firebaseToken
                message = f'You Earned {extendRefferedCoins} coins through one of your referrals..'
                send_notification_individual(app_token, deviceId, message)
            except Exception as e:
                pass
            gettingAllParents(parent.id)
    except ManipulatedCoin.DoesNotExist:
        return 'successfully'
    
class StudentGetMyCoins(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            my_coins = Coin.objects.get(student=me.profile)
            coins = my_coins.coins
            context = {'coins': coins}
        except Coin.DoesNotExist:
            my_coins = Coin()
            my_coins.student = me.profile
            my_coins.coins = 0
            my_coins.save()
            context = {'coins': 0}
        except Exception as e:
            context = {'coins': 0, 'message': str(e)}
        return Response(context)

class StudentGetCoinOnPurchase(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        his_coupon = data['other_coupon']
        package = PaidAmountStudentPackage.objects.filter(studentPackage__student =me.profile)
        if not package:
            context = {'status': 'Failed','message': 'Can\'t apply  coupon becuse you did not buy any package'}
        else:
            try:
                coinsRefferedTo = me.profile.institute.coinsRefferedTo_registration
                coinsRefferedFrom = me.profile.institute.coinsRefferedFrom_registration
                src = StudentReferralCode.objects.get(code=his_coupon)
                student_refferedfrom = src.student
                if student_refferedfrom == me.profile:
                    context = {'status': 'Failed', 'message': 'Can\'t apply own coupon'}

                existingManipulationSales = ManipulatedCoin.objects.filter(student=me.profile)
                if len(existingManipulationSales) != 0:
                    context = {'status': 'Failed','message': 'Code can only be applied once'}
                else:
                    try:
                        my_coins = Coin.objects.get(student=me.profile)
                    except Coin.MultipleObjectsReturned:
                        coins = Coin.objects.filter(student=me.profile).order_by('-id')[1:]
                        for i in coins:
                            i.delete()
                        my_coins = Coin.objects.get(student=me.profile)
                    
                    manipulator = ManipulatedCoin()
                    manipulator.coin = my_coins
                    manipulator.student = me.profile
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedTo
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.reason = 'otherStudentRefferal'
                    manipulator.date = timezone.now()
                    manipulator.save()
                    my_coins.coins += coinsRefferedTo
                    my_coins.save()

                    try:
                        his_coins = Coin.objects.get(student=student_refferedfrom)
                    except Coin.MultipleObjectsReturned:
                        coins = Coin.objects.filter(student=student_refferedfrom).order_by('-id')[1:]
                        for i in coins:
                            i.delete()
                        his_coins = Coin.objects.get(student=student_refferedfrom)

                    manipulator = ManipulatedCoin()
                    manipulator.coin = his_coins
                    manipulator.student = src.student
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedFrom
                    manipulator.reason = 'myRefferal'
                    manipulator.date = timezone.now()
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.save()
                    his_coins.coins += coinsRefferedFrom
                    his_coins.save()

                    context = {'status': 'Success','message': 'You got coins.'}

            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                
        return Response(context)

class StudentApplyCouponCodeRegistration(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        his_coupon = data['other_coupon']

        if me.profile.institute.code == 'testwin':
            try:
                coinsRefferedTo = me.profile.institute.coinsRefferedTo_registration
                coinsRefferedFrom = me.profile.institute.coinsRefferedFrom_registration
                src = StudentReferralCode.objects.get(code=his_coupon)
                student_refferedfrom = src.student
                if student_refferedfrom == me.profile:
                    context = {'status': 'Failed','message': 'Can\'t apply own coupon'}
                
                existingManipulationSales = ManipulatedCoin.objects.filter(student=me.profile)

                if len(existingManipulationSales) != 0:
                    context = {'status': 'Failed','message': 'Code can only be applied once'}
                else:
                    manipulator = ManipulatedCoin()
                    manipulator.coin = my_coins
                    manipulator.student = me.profile
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedTo
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.reason = 'otherStudentRefferal'
                    manipulator.date = timezone.now()
                    manipulator.save()
                    my_coins.coins += coinsRefferedTo
                    my_coins.save()

                    his_manipulatedCoin = ManipulatedCoin.objects.filter(student=src.student, reason='myRefferal').count()
                    limitetions = FunctionalityHandlerTestWin.objects.all()[0]
                    if his_manipulatedCoin < limitetions.refferalLimite:
                        his_coins = Coin.objects.get(student=student_refferedfrom)
                        manipulator = ManipulatedCoin()
                        manipulator.coin = his_coins
                        manipulator.student = src.student
                        manipulator.code = his_coupon
                        manipulator.coinChanged = coinsRefferedFrom
                        manipulator.reason = 'myRefferal'
                        manipulator.date = timezone.now()
                        manipulator.studentSales = src.student
                        manipulator.studentPurchase = me.profile
                        manipulator.save()
                        his_coins.coins += coinsRefferedFrom
                        his_coins.save()

                    context = {'status': 'Success', 'message': 'You got {} coin'.format(coinsRefferedTo), 'coin': coinsRefferedTo}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}

        else:
            try:
                coinsRefferedTo = me.profile.institute.coinsRefferedTo_registration
                coinsRefferedFrom = me.profile.institute.coinsRefferedFrom_registration
                extendRefferedCoins = me.profile.institute.extendRefferedCoins

                src = StudentReferralCode.objects.get(code=his_coupon) 
                student_refferedfrom = src.student

                if student_refferedfrom == me.profile:
                    context = {'status': 'Failed','message': 'Can\'t apply own coupon'}
                    
                existingManipulationSales = ManipulatedCoin.objects.filter(student=me.profile)
               
                if len(existingManipulationSales) != 0:
                    context = {'status': 'Failed','message': 'Code can only be applied once'}
                    return Response(context)
                else:
                    print('no transactins found')

                    try:
                        my_coins = Coin.objects.get(student=me.profile)
                    except Coin.MultipleObjectsReturned:
                        coins = Coin.objects.filter(student=me.profile).order_by('-id')[1:]
                        for i in coins:
                            i.delete()
                        my_coins = Coin.objects.get(student=me.profile)

                    manipulator = ManipulatedCoin()
                    manipulator.coin = my_coins
                    manipulator.student = me.profile
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedTo
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.reason = 'otherStudentRefferal'
                    manipulator.date = timezone.now()
                    manipulator.save()
                    my_coins.coins += coinsRefferedTo
                    my_coins.save()

                    try:
                        his_coins = Coin.objects.get(student=student_refferedfrom)
                    except Coin.MultipleObjectsReturned:
                        coins = Coin.objects.filter(student=student_refferedfrom).order_by('-id')[1:]
                        for i in coins:
                            i.delete()
                        his_coins = Coin.objects.get(student=student_refferedfrom)

                    manipulator = ManipulatedCoin()
                    manipulator.coin = his_coins
                    manipulator.student = src.student
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedFrom
                    manipulator.reason = 'myRefferal'
                    manipulator.date = timezone.now()
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.save()
                    his_coins.coins += coinsRefferedFrom
                    his_coins.save()

                    try:
                        manipulateCoins = ManipulatedCoin.objects.get(studentPurchase=src.student, reason='myRefferal')
                        parent = manipulateCoins.studentSales

                        try:
                            coin = Coin.objects.get(student=parent)
                        except Coin.MultipleObjectsReturned:
                            coins = Coin.objects.filter(student=parent).order_by('-id')[1:]
                            for i in coins:
                                i.delete()
                            coin = Coin.objects.get(student=parent)

                        coin.coins += extendRefferedCoins
                        coin.save()

                        try:
                            app_token = parent.institute.serverKey
                            deviceId = parent.firebaseToken
                            message = f'You Earned {extendRefferedCoins} coins through one of your referrals..'
                            send_notification_individual(app_token, deviceId, message)
                        except Exception as e:
                            pass

                        if parent:
                            response = gettingAllParents(parent.id)
                            
                    except ManipulatedCoin.DoesNotExist:
                        pass

                    context = {'status': 'Success','message': 'You got {} coin'.format(coinsRefferedTo)}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                
        return Response(context)

class CreateUniqueReferralCode(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            src_old = StudentReferralCode.objects.get(student=me.profile)
            code = src_old.code
            context = {'code': code}
            return Response(context)
        except StudentReferralCode.DoesNotExist:
            length = 6
            try:
                code = self.create_code(length)
                src = StudentReferralCode()
                src.student = me.profile
                src.code = code
                src.save()
                context = {'code': src.code}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def create_code(self, length):
        letters = string.ascii_lowercase
        result_str = ''.join(random.choice(letters) for i in range(length))
        studentReferralCode = StudentReferralCode.objects.all()
        for src in studentReferralCode:
            if src.code == result_str:
                result_str = self.create_code(6)
        return result_str

class TeacherSeeStudentCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            studentCoins = (Coin.objects
                            .filter(student__institute=me.profile.institute)
                            .values('student')
                            .annotate(total_coins=Sum('coins'))
                            .distinct())
            
            student_coins_list = []
            for sc in studentCoins:
                try:
                    student = Student.objects.get(id=sc['student'])
                    details = StudentDetails.objects.get(student=student)
                    photo = details.photo
                except StudentDetails.DoesNotExist:
                    photo = None

                try:
                    phone = student.studentuser.username
                    phone = phone.split('@')[0]
                except:
                    phone = None

                student_dict = {'id': student.id, 'name': student.name, 'photo': photo, 'phone': phone}
                sc_dict = {'student': student_dict, 'coins': sc['total_coins']}
                student_coins_list.append(sc_dict)

            context = {'status': True, 'studentCoinList': student_coins_list}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)

class TeacherSeeStudentCoins2(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            studentCoins = Coin.objects.filter(student__institute=me.profile.institute).distinct()
            student_coins_list = []
            for sc in studentCoins:
                try:
                    details = StudentDetails.objects.get(student=sc.student)
                    photo = details.photo
                except:
                    photo = None

                try:
                    phone = sc.student.studentuser.username
                    phone = phone.split('@')
                    phone = phone[0]
                except:
                    phone = None
                    
                student_dict = {'id': sc.student.id, 'name': sc.student.name, 'photo': photo, 'phone': phone}
                sc_dict = {'student': student_dict, 'coins': sc.coins}
                student_coins_list.append(sc_dict)
            context = {'studentCoinList': student_coins_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherManipulateCoin(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        student = Student.objects.get(id=student_id)
        new_coins = data['new_coins']
        reason = data['reason']
        try:
            studentCoins = Coin.objects.get(student=student)
            manipulateCoin = ManipulatedCoin()
            manipulateCoin.coin = studentCoins
            manipulateCoin.coinChanged = new_coins
            manipulateCoin.reason = reason
            manipulateCoin.date = timezone.now()
            manipulateCoin.by = me.profile
            manipulateCoin.student = student
            manipulateCoin.save()
            studentCoins.coins = new_coins
            studentCoins.save()

            try:
                token = me.profile.institute.serverKey
                deviceId = student.firebaseToken
                message = reason
                image = 'https://quizizz.com/media/resource/gs/quizizz-media/quizzes/d6ee4a10-0e0d-4781-b9a7-d16c6e26a7f1'
                title = f'Congratulation 😍🥰 You won {new_coins}'
                send_notification_testWinApp(
                    token, deviceId, message, image, title, 6)
            except Exception as f:
                print(str(f))

            if student.institute.code == 'testwin':
                user_to = student.studentuser
                message = Message()
                message.messageTo = user_to
                message.messageFrom = self.request.user
                message.text = reason
                message.save()
                testwinNotification = ChallengeNotification.objects.create(staffMessage=message)
                testwinNotification.contestants.add(student)

            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherManipulationHistory(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        try:
            student = Student.objects.get(id=student_id)
            coin = Coin.objects.get(student=student)
            manipulations = ManipulatedCoin.objects.filter(coin=coin)
            manipulation_list = []
            for manipulation in manipulations:
                try:
                    by_teacher = manipulation.by.teacheruser.username
                except:
                    by_teacher = 'teacher'
                    
                manipulation_dict = {
                    'id': manipulation.id, 
                    'coinChanged': manipulation.coinChanged,
                    'reason': manipulation.reason, 
                    'date': manipulation.date, 
                    'by': by_teacher
                    }
                manipulation_list.append(manipulation_dict)
            context = {'manipulationList': manipulation_list}
        except Exception as e:
            context = {'status': 'Success', 'message': str(e)}
        return Response(context)

class TeacherChangePackageSharingCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        coins_to = institute.packageSharingCoins
        context = {'status':True,'consTo': coins_to}
        return Response(context)
    
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            packageSharingCoins = data['new_coin']
            institute = me.profile.institute
            institute.packageSharingCoins = packageSharingCoins
            institute.save()
            context = {'status': True,'message': 'New coins {}'.format(packageSharingCoins)}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherChangeCoinReferralTo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            coinRefferalTo = data['new_coin']
            institute = me.profile.institute
            institute.coinsRefferedTo_registration = coinRefferalTo
            institute.save()
            context = {'status':'Success','message': 'New coins {}'.format(coinRefferalTo)}
        except Exception as e:
            context = {'status':'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeCoinReferralFrom(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            coinRefferalFrom = data['new_coin']
            institute = me.profile.institute
            institute.coinsRefferedFrom_registration = coinRefferalFrom
            institute.save()
            context = {'status':'Success','message': 'New coins {}'.format(coinRefferalFrom)}
        except Exception as e:
            context = {'status':'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeExtendCoin(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            extendRefferedCoins = data['new_coin']
            institute = me.profile.institute
            institute.extendRefferedCoins = extendRefferedCoins
            institute.save()
            context = {'status':'Success','message': 'New coins {}'.format(extendRefferedCoins)}
        except Exception as e:
            context = {'status':'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetReferralToCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            institute = me.profile.institute
            coins_to = institute.coinsRefferedTo_registration
            context = {'consTo': coins_to}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class TeacherGetReferralFromCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            institute = me.profile.institute
            coins_from = institute.coinsRefferedFrom_registration
            context = {'consFrom': coins_from}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class TeacherGetReferralExtendCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            institute = me.profile.institute
            coins_extend = institute.extendRefferedCoins
            context = {'consExtend': coins_extend}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class TeacherGetCoinsFromCoursePurchase(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            institute = me.profile.institute
            courseCoins = institute.buyCourseCoins
            context = {'buyCoins': courseCoins}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditBuyCourseCoins(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            coins = data['coins']
            institute = me.profile.institute
            institute.buyCourseCoins = coins
            institute.save()
            context = {'status': 'Success', 'message': 'Buy course coins updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class RefferalCodeGenerateNew(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        src_old = StudentReferralCode.objects.filter(student=me.profile)
        if len(src_old) == 1:
            code = src_old[0].code
            context = {'code': code}
            return Response(context)
        elif len(src_old) > 1:
            for ind, so in enumerate(src_old):
                if ind == 0:
                    pass
                else:
                    so.delete()
            code = src_old[0].code
            context = {'code': code}
            return Response(context)
        elif len(src_old) == 0:
            length = 6
            try:
                code = self.create_code(length)
                src = StudentReferralCode()
                src.student = me.profile
                src.code = code
                src.save()
                context = {'code': src.code}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def create_code(self, length):
        letters = string.ascii_lowercase
        result_str = ''.join(random.choice(letters) for i in range(length))
        try:
            StudentReferralCode.objects.get(code=result_str)
            result_str = self.create_code(6)
        except StudentReferralCode.DoesNotExist:
            return result_str

class StudentCreateChallenge(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        coin = data['coin']
        chapter_id = data['chapter_id']

        try:
            limitetions = FunctionalityHandlerTestWin.objects.all()[0]
            if me.profile.accessTestWinApp == False:
                context = {'status': 'Failed', 'message': 'Your app is not updated, please update it for keep playing and withdrawing.'}

            elif limitetions.active_ccf == False:  # ccs stand for Create Challenge Functionality
                context = {'status': 'Failed', 'message': 'This feature is under maintenance, please come back after sometime'}

            else:
                student_coin = Coin.objects.get(student=me.profile)
                if float(coin) <= student_coin.coins:
                    student_token = self.request.user.auth_token.key
                    headers = {'Authorization': 'Token ' + student_token}
                    param = {'chapter_id': chapter_id}
                    response = requests.post('https://bodhiai.live/api/content/student_create_challenge_test/', param, headers=headers).json()

                    if response['status'] == 'Success':
                        test = Test.objects.get(id=response['testID'])
                        sc = StudentChallenge()
                        sc.test = test
                        sc.challenger = me.profile
                        sc.coin = coin
                        sc.save()
                        try:
                            token = list(AppServerKey.objects.all())[0]
                            deviceId = Teacher.objects.get(teacheruser__username='testwin').firebaseToken
                            message = f'{me.profile.name} create a new challenge of {coin} coins'
                            image = None
                            title = 'New Challenge'
                            send_notification_testWinApp(token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))
                            
                        context = {'status': 'success', 'message': 'Successfully Created', 'testID': test.id}
                    else:
                        context = {'status': 'Failed', 'message': response['message']}
                else:
                    context = {'status': 'Failed', 'message': 'Insufficient Coins'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)




class StudentGetChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            my_languages = me.profile.student_language.all().values_list('id', flat=True)
            scs = StudentChallenge.objects.filter(Q(Q(accepted=False) & ~Q(challenger=me.profile)) & ~Q(test__marks_test=None) & Q(
                test__subjects__language__id__in=my_languages) & Q(is_this_free_challenge=False)).distinct().order_by('-id')

            free_challenges = StudentChallenge.objects.filter(is_this_free_challenge=True, free_challenge_student=me.profile, accepted=False).distinct().order_by('-id')
            scs = scs | free_challenges

            previousQuestions_ids = AttemptedQuestion.objects.filter(student=me.profile).values_list('question__id', flat=True)
            previousQuestions_ids_list = list(set(previousQuestions_ids))

            scs_list = []  # scs stand for student challenges
            for sc in scs:
                naive = sc.time.replace(tzinfo=None)
                if (datetime.now() - naive) >= timedelta(1) and sc.is_this_free_challenge == False:
                    sc.delete()
                else:
                    challengeLeftTime = str(timedelta(1) - (datetime.now() - naive))
                    current_challenge_test_questions_ids = sc.test.questions.all().values_list('id',flat=True)
                    previous_questions_ids = list(set(previousQuestions_ids_list).intersection(current_challenge_test_questions_ids))

                    if len(previous_questions_ids) <= 2:
                        test = sc.test
                        try:
                            subject = test.subjects.all()[0].name
                        except:
                            subject = None
                            
                        try:
                            chapter = test.chapters.all()[0].name
                        except:
                            chapter = None
                            
                        totalQuestions = len(test.questions.all())
                        testDetail = {'id': test.id, 'totalQuestion': totalQuestions, 'totalMarks': test.totalMarks, 'subject': subject, 'chapter': chapter}
                        sc_dict = {'id': sc.id, 'challenger': sc.challenger.name, 'title': sc.title, 'coin': sc.coin, 'time': sc.time, 'accepted': sc.accepted,
                                'status': sc.status, 'challengeLeftTime': challengeLeftTime, 'testDetail': testDetail, 'is_this_free_challenge': sc.is_this_free_challenge}
                        scs_list.append(sc_dict)

            context = {'status': 'success', 'challenges': scs_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentAcceptChallenges(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        challenge_id = data['challenge_id']

        try:
            if me.profile.accessTestWinApp == True:
                sc = StudentChallenge.objects.get(id=challenge_id)
                if sc.accepted != True:
                    sc.competitor = me.profile
                    sc.accepted = True
                    sc.save()
                    try:
                        token = me.profile.institute.serverKey
                        deviceId = sc.challenger.firebaseToken
                        message = f'Congrats!! {me.profile.name} accepted your challenge'
                        image = 'https://bodhiuploadaugust.s3.amazonaws.com/testwin/2022-01-03/4UkeBsd/2022-01-03.png'
                        title = 'Challenge Accepted'
                        send_notification_testWinApp(
                            token, deviceId, message, image, title, 6)
                    except Exception as f:
                        print(str(f))
                    context = {'status': 'success', 'test': sc.test.id}
                else:
                    context = {
                        'status': 'Failed', 'message': 'Other student has accepted this challenge'}
            else:
                context = {
                    'status': 'Failed', 'message': 'Your app is not updated, please update it for keep playing and withdrawing.'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentChallengeResulte(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        test_id = data['test_id']

        try:
            sm = StudentMarks.objects.filter(test=test_id)
            sc = StudentChallenge.objects.get(test=sm[0].test.id)

            if sm[0].student == me.profile:
                your_marks = sm[0].marks
                your_time = sm[0].time
                your_competitor_marks = sm[1].marks
                your_competitor_time = sm[1].time
            else:
                your_marks = sm[1].marks
                your_time = sm[1].time
                your_competitor_marks = sm[0].marks
                your_competitor_time = sm[0].time

            if your_marks == your_competitor_marks:
                if your_time == your_competitor_time:
                    sc.status = 'challenge-tie'

                elif your_time < your_competitor_time:
                    sc.winner = me.profile
                    sc.status = 'challenge-complete'

                else:
                    sc.winner = sc.challenger
                    sc.status = 'challenge-complete'

            elif your_marks > your_competitor_marks:
                sc.winner = me.profile
                sc.status = 'challenge-complete'
            else:
                sc.winner = sc.challenger
                sc.status = 'challenge-complete'
            sc.save()

            if sc.status == 'challenge-complete':
                if sc.is_this_free_challenge:
                    if sc.winner == me.profile:
                        winner_coins = Coin.objects.get(student=me.profile)
                        winner_coins.coins += sc.coin
                        winner_coins.save()
                        winnerCoin = sc.coin
                        try:
                            token = me.profile.institute.serverKey
                            deviceId = sc.challenger.firebaseToken
                            message = f'{sc.challenger.name} you lost the challenge with {sc.winner.name}.. better luck next time {sc.challenger.name}'
                            image = 'https://bodhiuploadaugust.s3.amazonaws.com/testwin/2022-01-03/uWkRPYn/2022-01-03.png'
                            title = 'You lose'
                            send_notification_testWinApp(token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))

                    else:
                        try:
                            token = me.profile.institute.serverKey
                            deviceId = sc.challenger.firebaseToken
                            message = f'Congratulation {sc.winner.name} 🥇🥇..You beat the {sc.competitor.name} and got coins'
                            image = 'https://bodhiuploadaugust.s3.amazonaws.com/testwin/2022-01-03/rsvdGfz/2022-01-03.png'
                            title = 'You Win 🏆🏆'
                            send_notification_testWinApp(token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))

                else:
                    if sc.winner == me.profile:
                        student_coins = Coin.objects.get(student=sc.challenger)
                        student_coins.coins -= sc.coin
                        student_coins.save()

                        winner_coins = Coin.objects.get(student=me.profile)
                        winner_coins.coins -= sc.coin
                        winner_coins.save()

                        totalCoin = sc.coin + sc.coin
                        companyCoin = totalCoin * (20/100)
                        winnerCoin = totalCoin - companyCoin

                        winner_coins.coins += winnerCoin
                        winner_coins.save()

                        try:
                            token = me.profile.institute.serverKey
                            deviceId = sc.challenger.firebaseToken
                            message = f'{sc.challenger.name} you lost the challenge with {sc.winner.name}.. better luck next time {sc.challenger.name}'
                            image = 'https://bodhiuploadaugust.s3.amazonaws.com/testwin/2022-01-03/uWkRPYn/2022-01-03.png'
                            title = 'You lose'
                            send_notification_testWinApp(token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))

                    else:
                        student_coins = Coin.objects.get(student=me.profile)
                        student_coins.coins -= sc.coin
                        student_coins.save()

                        winner_coins = Coin.objects.get(student=sc.challenger)
                        winner_coins.coins -= sc.coin
                        winner_coins.save()

                        totalCoin = sc.coin + sc.coin
                        companyCoin = totalCoin * (20/100)
                        winnerCoin = totalCoin - companyCoin

                        winner_coins.coins += winnerCoin
                        winner_coins.save()

                        try:
                            token = me.profile.institute.serverKey
                            deviceId = sc.challenger.firebaseToken
                            message = f'Congratulation {sc.winner.name} 🥇🥇..You beat the {sc.competitor.name} and got coins'
                            image = 'https://bodhiuploadaugust.s3.amazonaws.com/testwin/2022-01-03/rsvdGfz/2022-01-03.png'
                            title = 'You Win 🏆🏆'
                            send_notification_testWinApp(token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))

            cn = ChallengeNotification(challenge=sc)
            cn.save()
            cn.contestants.add(sc.challenger)
            cn.contestants.add(sc.competitor)

            if sc.status == 'challenge-complete':
                if sc.winner == me.profile:
                    message = 'congrats !! yow won 🏆🏆'
                    result = 'win'
                    coin = winnerCoin
                    context = {'status': 'success', 'message': message,'result': result, 'coin': coin}
                else:
                    result = 'lose'
                    coin = sc.coin
                    message = 'you lose.. better luck next time 👎👎'
                    context = {'status': 'success', 'message': message,'result': result, 'coin': coin}
            else:
                result = 'tie'
                try:
                    token = me.profile.institute.serverKey
                    deviceId = sc.challenger.firebaseToken
                    message = f'{sc.challenger.name} your challenge with {sc.compititor.name} is tied ..create another challenge and coins won'
                    image = 'https://quickdraw.withgoogle.com/static/shareimg.png'
                    title = 'Challenge Tie'
                    send_notification_testWinApp(token, deviceId, message, image, title, 6)
                except Exception as f:
                    print(str(f))
                coin = None
                context = {'status': 'success', 'message': sc.status,'result': result, 'coin': coin}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentGetOwnCoins(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            my_coins = Coin.objects.get(student=me.profile)
            scs = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(
                competitor=me.profile)) & Q(status='in-progress')).aggregate(totalCoin=Sum('coin'))

            if scs['totalCoin'] == None:
                my_coins = my_coins.coins
            else:
                my_coins = my_coins.coins - scs['totalCoin']
            context = {'status': 'success', 'coins': my_coins}
            
        except Coin.DoesNotExist:
            my_coins = Coin()
            my_coins.student = me.profile
            my_coins.coins = 0
            my_coins.save()
            context = {'status': 'success', 'coins': my_coins.coins}
            
        return Response(context)

class StudentSeeIndividualChallenge(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        challenge_id = data['challenge_id']
        try:
            sc = StudentChallenge.objects.get(id=challenge_id)
            if sc.status == 'in-progress':
                competitor = None
                winner = None
            elif sc.status == 'challenge-complete':
                competitor = sc.competitor.name
                winner = sc.winner.name
            else:
                competitor = sc.competitor.name
                winner = None

            challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': sc.challenger.name, 'competitor': competitor,
                              'winner': winner, 'title': sc.title, 'coin': sc.coin, 'time': sc.time, 'status': sc.status}
            context = {'status': 'success', 'challenge': challenge_dict}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentGetWinsChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        challenges_list = []
        try:
            scs = StudentChallenge.objects.filter(winner=me.profile).select_related('challenger', 'competitor', 'winner', 'test').order_by('-id')
            for sc in scs:
                performance_id = sc.test.marks_test.get(student=me.profile).id
                try:
                    subject = sc.test.subjects.all()[0].name
                except:
                    subject = None
                try:
                    chapter = sc.test.chapters.all()[0].name
                except:
                    chapter = None

                if sc.challenger:
                    challenger = sc.challenger.name
                else:
                    challenger = 'Testwin User'

                if sc.competitor:
                    competitor = sc.competitor.name
                else:
                    competitor = 'Testwin User'
                challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': challenger, 'competitor': competitor, 'winner': sc.winner.name, 'title': sc.title,
                                  'coin': sc.coin, 'time': sc.time, 'status': sc.status, 'performance_id': performance_id, 'subject': subject, 'chapter': chapter}
                challenges_list.append(challenge_dict)
            context = {'status': 'success', 'challenges': challenges_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetLostsChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        challenges_list = []
        try:
            scs = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(competitor=me.profile)) & Q(
                ~Q(winner=me.profile) & ~Q(winner=None))).select_related('challenger', 'competitor', 'winner', 'test').order_by('-id')
            for sc in scs:
                performance_id = sc.test.marks_test.get(student=me.profile).id
                try:
                    subject = sc.test.subjects.all()[0].name
                except:
                    subject = None
                try:
                    chapter = sc.test.chapters.all()[0].name
                except:
                    chapter = None

                if sc.challenger:
                    challenger = sc.challenger.name
                else:
                    challenger = 'Testwin User'

                if sc.competitor:
                    competitor = sc.competitor.name
                else:
                    competitor = 'Testwin User'

                challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': challenger, 'competitor': competitor, 'winner': sc.winner.name, 'title': sc.title,
                                  'coin': sc.coin, 'time': sc.time, 'status': sc.status, 'performance_id': performance_id, 'subject': subject, 'chapter': chapter, 'loser': me.profile.name}
                challenges_list.append(challenge_dict)
            context = {'status': 'success', 'challenges': challenges_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetPastsChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        challenges_list = []
        try:
            scs = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(competitor=me.profile)) & ~Q(status='in-progress')).order_by('-id')
            for sc in scs:
                challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': sc.challenger.name, 'competitor': sc.competitor.name,
                                  'winner': sc.winner.name, 'title': sc.title, 'coin': sc.coin, 'time': sc.time, 'status': sc.status}
                challenges_list.append(challenge_dict)
            context = {'status': 'success', 'challenges': challenges_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetTotalChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            studentProgressChallenges = StudentChallenge.objects.filter(challenger=me.profile, status='in-progress').count()
            studentLostChallenges = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(
                competitor=me.profile)) & Q(~Q(winner=me.profile) & ~Q(winner=None))).count()
            studentWinChallenges = StudentChallenge.objects.filter(winner=me.profile).count()

            my_languages = me.profile.student_language.all().values_list('id', flat=True)
            studentLiveChallenges = StudentChallenge.objects.filter(Q(Q(accepted=False) & ~Q(challenger=me.profile)) & ~Q(
                test__marks_test=None) & Q(test__subjects__language__id__in=my_languages) & Q(is_this_free_challenge=False)).distinct().order_by('-id')
            free_challenges = StudentChallenge.objects.filter(is_this_free_challenge=True, free_challenge_student=me.profile, accepted=False).distinct().order_by('-id')
            studentLiveChallenges = studentLiveChallenges | free_challenges

            previousQuestions_ids = AttemptedQuestion.objects.filter(student=me.profile).values_list('question__id', flat=True)
            previousQuestions_ids_list = list(set(previousQuestions_ids))
            totalLiveChallenge = 0
            for sc in studentLiveChallenges:
                current_challenge_test_questions_ids = sc.test.questions.all().values_list('id',flat=True)
                previous_questions_ids = list(set(previousQuestions_ids_list).intersection(current_challenge_test_questions_ids))
                if len(previous_questions_ids) <= 2:
                    totalLiveChallenge += 1

            context = {'status': 'success', 'studentLostChallenges': studentLostChallenges, 'studentWinChallenges': studentWinChallenges,
                    'studentProgressChallenges': studentProgressChallenges, 'studentLiveChallenges': totalLiveChallenge}
        except Exception as e:
            context = {'status':'failed', 'message':str(e)}
        return Response(context)

class StudentGetProgressChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        challenges_list = []
        try:
            scs = StudentChallenge.objects.filter(challenger=me.profile, status='in-progress').order_by('-id')
            for sc in scs:
                naive = sc.time.replace(tzinfo=None)
                if (datetime.now() - naive) >= timedelta(1):
                    sc.delete()
                elif sc.test.marks_test.all().exists():
                    testAttempt = True
                    test = sc.test
                    try:
                        subject = test.subjects.all()[0].name
                    except:
                        subject = None
                    try:
                        chapter = test.chapters.all()[0].name
                    except:
                        chapter = None

                    challengeLeftTime = str(timedelta(1) - (datetime.now() - naive))

                    challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': sc.challenger.name, 'competitor': None, 'winner': None, 'title': sc.title, 'coin': sc.coin,
                                      'time': sc.time, 'status': sc.status, 'testAttempt': testAttempt, 'subject': subject, 'chapter': chapter, 'challengeLeftTime': challengeLeftTime}
                    challenges_list.append(challenge_dict)
                else:
                    testAttempt = False
                    test = sc.test
                    subject = test.subjects.all()[0].name
                    chapter = test.chapters.all()[0].name
                    challengeLeftTime = str(timedelta(1) - (datetime.now() - naive))

                    challenge_dict = {'id': sc.id, 'test': sc.test.id, 'challenger': sc.challenger.name, 'competitor': None, 'winner': None, 'title': sc.title, 'coin': sc.coin,
                                      'time': sc.time, 'status': sc.status, 'testAttempt': testAttempt, 'subject': subject, 'chapter': chapter, 'challengeLeftTime': challengeLeftTime}
                    challenges_list.append(challenge_dict)

            context = {'status': 'success', 'challenges': challenges_list, 'TotalPastsChallenges': len(scs)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class AssignFreeCoinsNewStudent(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            limitetions = FunctionalityHandlerTestWin.objects.all()[0]
            registerCoin = limitetions.newRegisterCoin

            coin = Coin()
            coin.student = me.profile
            coin.coins += registerCoin
            coin.save()

            context = {'status': 'success','message': 'Successfully Added', 'coin': str(registerCoin)}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentBuyCoins(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        amount = data['amount']
        limitetions = FunctionalityHandlerTestWin.objects.all()[0]
        convertedCoin = float(amount) * limitetions.eachCoinValue
        try:
            coin = Coin.objects.get(student=me.profile)
            coin.coins += convertedCoin
            coin.save()
            sbch = StudentBuyCoinHistory()  # sbch stand for student buy coin history
            sbch.student = me.profile
            sbch.coin = convertedCoin
            sbch.rupees = float(amount)
            sbch.save()
            ChallengeNotification.objects.create(studentBuyCoin=sbch)

            try:
                token = me.profile.institute.serverKey
                deviceId = me.profile.firebaseToken
                message = f'{convertedCoin} coins credited in your account successfully'
                image = 'https://cdn4.vectorstock.com/i/thumb-large/36/08/green-tick-checkbox-isolated-vector-20743608.jpg'
                title = 'Coins Deposit Successfull'
                send_notification_testWinApp(token, deviceId, message, image, title, 6)
            except Exception as f:
                print(str(f))

            context = {'status': 'success', 'message': 'successfully added'}
        except Coin.DoesNotExist:
            coin = Coin()
            coin.student = me.profile
            coin.coins += convertedCoin
            coin.save()
            sbch = StudentBuyCoinHistory()  # sbch stand for student buy coin history
            sbch.student = me.profile
            sbch.coin = convertedCoin
            sbch.rupees = float(amount)
            sbch.save()
            context = {'status': 'success', 'message': 'successfully added'}
            
        return Response(context)

class StudentGetOwnBuyCoinsHistory(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            sbchs = StudentBuyCoinHistory.objects.filter(student=me.profile).order_by('-id')
            historys_list = []
            for sbch in sbchs:
                history_dict = {'id': sbch.id, 'student': sbch.student.name,'coin': sbch.coin, 'time': sbch.time}
                historys_list.append(history_dict)
            context = {'status': 'success', 'history': historys_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentRequestWithdrawCoins(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        coin = data['coins']
        number = data['number']

        try:
            if me.profile.accessTestWinApp == True:
                limitetions = FunctionalityHandlerTestWin.objects.all()[0]
                scs = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(competitor=me.profile)) & Q(
                    Q(status='in-progress') | Q(status='challenge-complete')) & ~Q(test__marks_test=None)).count()

                if me.profile.student.isBlocked == True:
                    context = {'status': 'Failed', 'message': 'You are blocked by TestWin. To unblock yourself please write to TestWin under support tab.'}

                elif scs < limitetions.minimumChallengeForWithdraw:
                    context = {'status': 'Failed', 'message': f'To withdraw coins you have to Take or Create {limitetions.minimumChallengeForWithdraw} challenges.'}

                elif float(coin) < limitetions.minimumWithdrawCoin:
                    context = {'status': 'Failed', 'message': f'coins will shoulb be {limitetions.minimumWithdrawCoin} and above'}

                elif limitetions.active_wcr == False:
                    context = {'status': 'Failed', 'message': 'This Feature is under maintenance, please come back after 12 hours.'}
                else:
                    studentCoin = Coin.objects.get(student=me.profile)
                    swch = StudentWithdrawCoinHistory()
                    swch.student = me.profile
                    swch.coin = coin
                    swch.number = number
                    swch.rupees = float(coin) / limitetions.eachCoinValue
                    swch.save()

                    studentCoin.coins -= float(coin)
                    studentCoin.save()

                    try:
                        token = list(AppServerKey.objects.all())[0]
                        deviceId = Teacher.objects.get(teacheruser__username='testwin').firebaseToken
                        message = f'{me.profile.name} sent a withdraw request of {coin} coins'
                        image = None
                        title = 'New Withdraw Request'
                        send_notification_testWinApp(token, deviceId, message, image, title, 6)
                    except Exception as f:
                        print(str(f))

                    try:
                        token = me.profile.institute.serverKey
                        deviceId = me.profile.firebaseToken
                        message = 'Your amount is credit within 24 hours'
                        image = None
                        title = 'Withdraw Request Sent Successffully'
                        send_notification_testWinApp(
                            token, deviceId, message, image, title, 6)
                    except Exception as f:
                        print(str(f))
                    context = {'status': 'success', 'message': 'The amount is credit within 24 hours ', 'withdrawRequestStatus': swch.status}
            else:
                context = {'status': 'Failed', 'message': 'Your app is not updated, please update it for keep playing and withdrawing.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetOwnWithdrawCoinsHistory(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            swchs = StudentWithdrawCoinHistory.objects.filter(student=me.profile).order_by('-id')
            historys_list = []
            for swch in swchs:
                history_dict = {'id': swch.id, 'student': swch.student.name,'coin': swch.coin, 'time': swch.time, 'status': swch.status}
                historys_list.append(history_dict)
            context = {'status': 'success', 'history': historys_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        
        return Response(context)

class StaffGetAllWithdrawCoinRequests(APIView):
    def get(self, request):
        try:
            requests = StudentWithdrawCoinHistory.objects.all().order_by('-id')
            requests_list = []
            for request in requests:
                number = request.number
                detail = StudentDetails.objects.get(student=request.student)

                if detail.authorizedTestWin == True:
                    verification = 'success'
                elif detail.studentDocument and detail.authorizedTestWin == False:
                    verification = 'pending'
                elif detail.studentDocument and detail.authorizedTestWin is None:
                    verification = 'pending'
                else:
                    verification = 'failed or None'

                history_dict = {'id': request.id, 'student_id': request.student.id, 'student': request.student.name, 'number': number, 'coin': request.coin,
                                'time': request.time, 'status': request.status, 'rupees': request.rupees, 'verification': verification, 'response': request.response}
                requests_list.append(history_dict)
            context = {'status': 'success', 'requests': requests_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StaffAcceptWithdrawCoinRequest(APIView):
    def post(self, request):
        data = request.data
        withdrawRequestID = data['withdrawRequestID']
        try:
            withdrawRequest = StudentWithdrawCoinHistory.objects.get(id=withdrawRequestID)
            if withdrawRequest.status != 'reject-withdraw-request':
                withdrawRequest.status = 'accept-withdraw-request'
                withdrawRequest.save()
                ChallengeNotification.objects.create(withdrawRequest=withdrawRequest)
                context = {'status': 'success', 'message': 'Successfully Accept', 'accept': True}
            else:
                context = {'status': 'Failed', 'message': 'This request has already rejected', 'accept': False}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e), 'accept': False}
        return Response(context)

class StaffRejectWithdrawCoinRequest(APIView):
    def post(self, request):
        data = request.data
        withdrawRequestID = data['withdrawRequestID']
        try:
            withdrawRequest = StudentWithdrawCoinHistory.objects.get(id=withdrawRequestID)
            withdrawRequest.status = 'reject-withdraw-request'
            withdrawRequest.save()

            coin = Coin.objects.get(student=withdrawRequest.student)
            coin.coins += withdrawRequest.coin
            coin.save()

            ChallengeNotification.objects.create(withdrawRequest=withdrawRequest)

            context = {'status': 'success', 'reject': True}
        except:
            context = {'status': 'Failed', 'reject': False}
            
        return Response(context)

class StudentPostIssue(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        issueType = data['issueType']
        issue = data['issue']
        subject = data['subject']
        email = data.get('email',None)
        StudentIssue.objects.create(student=me.profile, issueType=issueType, issue=issue, subject=subject, email=email)

        try:
            token = list(AppServerKey.objects.all())[0]
            deviceId = Teacher.objects.get(teacheruser__username='testwin').firebaseToken
            message = f'You have a new student doubt from {me.profile.name}'
            image = None
            title = 'New Doubt'
            send_notification_testWinApp(token, deviceId, message, image, title, 6)
        except Exception as f:
            print(str(f))

        context = {'status': 'success', 'message': 'Successfully Send'}
        
        return Response(context)

class StudentGetOwnIssue(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            studentIssues = StudentIssue.objects.filter(student=me.profile)
            issues_list = []
            for si in studentIssues:
                issue_dict = {
                    'id': si.id, 'issueType': si.issueType, 
                    'email': si.email, 'issue': si.issue,
                    'subject': si.subject, 'time': si.time, 
                    'resolve': si.resolve, 'staffReply': si.staffReply
                    }
                issues_list.append(issue_dict)
            context = {'status': 'success', 'issues': issues_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentGetHistory(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            swchs = StudentWithdrawCoinHistory.objects.filter(student=me.profile).order_by('-id')
            withdraw_list = []
            for swch in swchs:
                history_dict = {'id': swch.id, 'student': swch.student.name,'coin': swch.coin, 'time': swch.time.date(), 'status': swch.status}
                withdraw_list.append(history_dict)

            sbchs = StudentBuyCoinHistory.objects.filter(student=me.profile).order_by('-id')
            buy_list = []
            for sbch in sbchs:
                history_dict = {'id': sbch.id, 'student': sbch.student.name,'coin': sbch.coin, 'time': sbch.time.date()}
                buy_list.append(history_dict)

            history_list = withdraw_list + buy_list
            history_list = sorted(history_list, key=lambda i: i['time'], reverse=True)
            context = {'status': 'success', 'history': history_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentSeeLeaderboard(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            winner_ids = StudentChallenge.objects.filter(Q(status='challenge-complete') & Q(
                ~Q(challenger=None) & ~Q(competitor=None))).values_list('winner__id', flat=True).distinct()
            leaderBoard_list = []
            for i in winner_ids:
                challenges = StudentChallenge.objects.filter(winner=i)
                winsData_dict = challenges.aggregate(winCoins=Sum('coin'))
                winsData_dict['winChallenges'] = len(challenges)
                winsData_dict['name'] = challenges[0].winner.name
                winsData_dict['photo'] = challenges[0].winner.student.photo
                winsData_dict['totalChallenges'] = StudentChallenge.objects.filter(Q(challenger=challenges[0].winner) | Q(competitor=challenges[0].winner)).count()
                leaderBoard_list.append(winsData_dict)

            leaderBoard_list = sorted(leaderBoard_list, key=lambda i: i['winCoins'], reverse=True)[:15]
            context = {'status': 'success', 'leaderBoard': leaderBoard_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentUnreadNotification(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            notifications = ChallengeNotification.objects.filter(Q(contestants=me.profile) | Q(
                withdrawRequest__student=me.profile) | Q(studentBuyCoin__student=me.profile)).values_list('id', flat=True)
            readNotification = ContestantReadNotification.objects.filter(student=me.profile, challengeNotification__in=notifications).count()
            unReadNotifications = readNotification - len(notifications)
            context = {'status': 'success','unReadNotifications': abs(unReadNotifications)}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentMarkReadNotification(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        notifications_ids = data['notifications_ids']
        notifications_list = notifications_ids.strip('][').split(',')
        try:
            readNotification = ContestantReadNotification.objects.get(student=me.profile)
            notifications = ChallengeNotification.objects.filter(id__in=notifications_list)
            readNotification.challengeNotification.add(*notifications)
            readNotification.save()
            context = {'status': 'success'}
        except ContestantReadNotification.DoesNotExist:
            readNotification = ContestantReadNotification()
            readNotification.student = me.profile
            readNotification.save()
            notifications = ChallengeNotification.objects.filter(id__in=notifications_list)
            readNotification.challengeNotification.add(*notifications)
            context = {'status': 'success'}
        return Response(context)

class StudentSeeNotification(APIView):
    def get(self, request):
        me = Studs(self.request.user)

        notifications = ChallengeNotification.objects.filter(Q(contestants=me.profile) | Q(
            withdrawRequest__student=me.profile) | Q(studentBuyCoin__student=me.profile)).order_by('-id')
        readNotification = ContestantReadNotification.objects.filter(Q(student=me.profile) & ~Q(
            challengeNotification=None)).values_list('challengeNotification__id', flat=True)

        notification_list = []
        my_name = me.profile.name

        for n in notifications:
            naive = n.time.replace(tzinfo=None)
            if (datetime.utcnow() - naive) >= timedelta(1):
                if readNotification:
                    if n.id in readNotification:
                        n.delete()
                else:
                    n.delete()

            else:
                if n.withdrawRequest:
                    if n.withdrawRequest.status == 'accept-withdraw-request':
                        message = f'{my_name} your withdraw request has been accepted..your amount {n.withdrawRequest.rupees} has been credited in your account'
                    else:
                        message = f'{my_name} your withdraw request has been rejected..your coins {n.withdrawRequest.coin} has been credited in your account'

                    notificationDetail_dict = {'id': n.withdrawRequest.id, 'coin': n.withdrawRequest.coin, 'time': n.withdrawRequest.time,
                                               'status': n.withdrawRequest.status, 'message': message, 'rupees': n.withdrawRequest.rupees}

                elif n.studentBuyCoin:
                    message = f'{n.studentBuyCoin.coin} coins credited in your account successfully'
                    notificationDetail_dict = {'id': n.studentBuyCoin.id, 'coin': n.studentBuyCoin.coin,
                                               'time': n.studentBuyCoin.time, 'message': message, 'rupees': n.studentBuyCoin.rupees}

                elif n.staffMessage:
                    message = 'You have received message from TestWin.'
                    notificationDetail_dict = {'id': n.staffMessage.id, 'time': n.staffMessage.time, 'message': message, 'notification_type': 'message'}

                elif n.groupChallenge:
                    groupChallenge = n.groupChallenge
                    group_challenge_winners = groupChallenge.winners.all()
                    winningCoins = groupChallenge.winningCoins

                    if groupChallenge.status == 'challenge-tie-coins-refunded':
                        message = 'The group test is tied, we have refunded your amount. Attempt another test and win money.'

                    else:
                        if me.profile in group_challenge_winners:
                            if groupChallenge.status == 'challenge-tie-coins-devided-given':
                                message = f'Congratulations you have tied for first place. You won {winningCoins} Rupees, attempt another test and win money.'
                            else:
                                message = f'Congratulations Learner you have won {winningCoins} rupees. Create or attempt more test and win money.'
                        else:
                            if groupChallenge.status == 'no-one-join':
                                message = f'Hey! Learner, you have lost the test as you did not joined it.'
                            else:
                                message = f'You have lost the test, no worries attempt another test and win money.'

                    performance_id = groupChallenge.test.marks_test.get(student=me.profile).id
                    notificationDetail_dict = {'id': groupChallenge.id, 'coins': groupChallenge.coin, 'time': groupChallenge.time,
                                               'message': message, 'test': groupChallenge.test.id, 'performance_id': performance_id}

                else:

                    challenge = n.challenge
                    if challenge.status != 'challenge-tie':
                        if challenge.winner == challenge.challenger:
                            winner = challenge.winner.name
                            loser = challenge.competitor.name
                        else:
                            winner = challenge.winner.name
                            loser = challenge.challenger.name

                        if me.profile == challenge.winner:
                            message = f'Congratulation {winner} 🥇🥇..You beat the {loser} and got coins'
                        else:
                            message = f'{my_name} you lost the challenge with {winner}.. better luck next time {my_name}'

                    else:
                        winner = None
                        loser = None
                        if me.profile == challenge.challenger:
                            message = f'{my_name} your challenge with {challenge.competitor.name} is tied ..accept another challenge and coins won'
                        else:
                            message = f'{my_name} your challenge with {challenge.challenger.name} is tied ..accept another challenge and coins won'

                    performance_id = challenge.test.marks_test.get(student=me.profile).id
                    notificationDetail_dict = {'id': challenge.id, 'challenger': challenge.challenger.name, 'competitor': challenge.competitor.name, 'coins': challenge.coin,
                                               'time': challenge.time, 'status': challenge.status, 'winner': winner, 'loser': loser, 'message': message, 'test': challenge.test.id, 'performance_id': performance_id}

                notification_dict = {'id': n.id, 'time': n.time,'notification_detail': notificationDetail_dict}
                notification_list.append(notification_dict)

        context = {'status': 'success', 'notification': notification_list}
        return Response(context)

class GenerateRandomChallenge(APIView):
    def get(self, request):
        coin = 10
        student_list = ['7062317493@testwin', '8529255549@testwin']
        randomStudent = random.choice(student_list)
        mainUser = Student.objects.get(studentuser__username=randomStudent)

        my_languages = mainUser.student_language.all().values_list('id', flat=True)
        chapters_ids = Chapter.objects.filter(subject__teachersubject__institute=mainUser.institute,
                                              subject__language__id__in=my_languages).distinct().values_list('id', flat=True)
        randomChapter = random.choice(chapters_ids)

        scs = StudentChallenge.objects.filter(challenger=mainUser, status='in-progress').count()
        if scs < 3:
            try:
                student_token = mainUser.studentuser.auth_token.key
                headers = {'Authorization': 'Token ' + student_token}
                param = {'chapter_id': randomChapter}
                response = requests.post('https://bodhiai.live/api/content/student_create_challenge_test/', param, headers=headers).json()

                if response['status'] == 'Success':
                    test = Test.objects.get(id=response['testID'])
                    sc = StudentChallenge()
                    sc.test = test
                    sc.challenger = mainUser
                    sc.coin = coin
                    sc.save()

                    testMarks = StudentMarks()
                    testMarks.student = mainUser
                    testMarks.test = test
                    testMarks.save()

                    questions = test.questions.all().values_list('id', flat=True)
                    count = 1
                    for i in questions:
                        attemptedQuestion = AttemptedQuestion()
                        attemptedQuestion.student = mainUser

                        question = Question.objects.get(id=i)
                        attemptedQuestion.question = question
                        attemptedQuestion.attempted = True

                        if count > 7:
                            options_ids = question.option_question.all().values_list('id', flat=True)
                        else:
                            options_ids = question.option_question.filter(correct=True).values_list('id', flat=True)

                        rand_id = random.randrange(len(options_ids))
                        random_id = options_ids[rand_id]

                        option = Option.objects.get(id=random_id)
                        attemptedQuestion.save()
                        attemptedQuestion.optionAttempted.add(option)
                        if option.correct == True:
                            attemptedQuestion.right = True
                            randomSecond = ['9', '10', '11']
                            randomTime = random.choice(randomSecond)
                            attemptedQuestion.time = randomTime

                        else:
                            attemptedQuestion.right = False
                            randomTime = randint(2, 7)
                            attemptedQuestion.time = randomTime

                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)
                        count += 1

                    total_marks = 0
                    attemptedQuestions = testMarks.questions.all()
                    for aq in attemptedQuestions:
                        question = aq.question
                        right = aq.right
                        if right:
                            total_marks += question.marks
                        elif right == False:
                            total_marks -= question.negativeMarks
                    testMarks.marks = total_marks
                    testMarks.save()

                    totalTime = testMarks.questions.all().aggregate(time=Sum('time'))
                    testMarks.time = totalTime['time']
                    testMarks.save()
                    context = {'status': 'success', 'message': 'Successfully Created', 'testID': test.id}
                else:
                    error = response['message']
                    context = {'status': 'Failed', 'message': response['message']}
            except Exception as e:
                error = str(e)
                context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed', 'message': '3 challenges already created'}
        return Response(context)

class StaffGetStudentIssues(APIView):
    def get(self, request):
        studentIssues = StudentIssue.objects.all().order_by('-id').values('id', 'student__name', 'issueType', 'issue', 'subject', 'time', 'resolve', 'email')
        context = {'status': 'success', 'issues': studentIssues}
        return Response(context)

class StaffRevertStudentIssue(APIView):
    def post(self, request):
        data = request.data
        studentIssueId = data['studentIssueId']
        resolve = data['resolve']
        staffReply = data['staffReply']
        try:
            studentIssue = StudentIssue.objects.get(id=studentIssueId)
            studentIssue.staffReply = staffReply
            if resolve == 'true':
                studentIssue.resolve = True
            studentIssue.save()

            try:
                token = studentIssue.student.institute.serverKey
                deviceId = studentIssue.student.firebaseToken
                message = f'TestWin has replied, please go to support tab to see the reply.'
                image = None
                title = 'Reply from TestWin'
                send_notification_testWinApp(
                    token, deviceId, message, image, title, 6)
            except Exception as f:
                print(str(f))

            mail.send_mail(
                subject="TestWin's reply to your query.",
                message=f'{studentIssue.staffReply}',
                from_email='Testwinhelp@gmail.com',
                recipient_list=[studentIssue.email],
                auth_user='Testwinhelp@gmail.com',
                auth_password='Testwin@2021',
            )

            context = {'status': 'success', 'message': 'successffully submite'}
        except Exception as e:
            context = {'status': 'success', 'message': str(e)}
        return Response(context)

class StaffSeeIndividualStudentInformation(APIView):
    def post(self, request):
        data = request.data
        student_id = data['student_id']

        loseChallenges_list = []
        wonChallenges_list = []
        manipulators_list = []
        totalBoughtCoins_list = []
        totalwithdrawCoins_list = []
        try:
            student = Student.objects.get(id=student_id)
            photo = student.student.photo
            studentTotalCoins = Coin.objects.get(student=student).coins
            limitetions = FunctionalityHandlerTestWin.objects.all()[0]
            registrationCoin = limitetions.newRegisterCoin

            boughtCoinsHistories = student.buyer_student.all().order_by('-id')
            totalBoughtCoinsHistories = len(boughtCoinsHistories)
            totalBoughtCoins = 0
            for tbc in boughtCoinsHistories:
                totalBoughtCoins += tbc.coin
                totalBoughtCoins_dict = {
                    'id': tbc.id, 'coin': tbc.coin, 'time': tbc.time, 'rupees': tbc.rupees}
                totalBoughtCoins_list.append(totalBoughtCoins_dict)

            withdrawCoinsHistories = student.withdraw_student.filter(
                ~Q(status='in-review')).order_by('-id')
            totalwithdrawCoinsHistories = len(withdrawCoinsHistories)
            totalwithdrawCoins = 0
            totalRejectedwithdrawCoins = 0
            for twc in withdrawCoinsHistories:
                if twc.status == 'accept-withdraw-request':
                    totalwithdrawCoins += twc.coin
                else:
                    totalRejectedwithdrawCoins += twc.coin
                totalwithdrawCoins_dict = {'id': twc.id, 'coin': twc.coin, 'time': twc.time,
                                           'status': twc.status, 'rupees': twc.rupees, 'number': twc.number}
                totalwithdrawCoins_list.append(totalwithdrawCoins_dict)

            loseChallenges = StudentChallenge.objects.filter(Q(Q(challenger=student) | Q(
                competitor=student)) & Q(~Q(winner=student) & ~Q(winner=None))).order_by('-id')
            totalLoseChallenges = len(loseChallenges)
            totalLoseCoins = 0
            for sc in loseChallenges:
                totalLoseCoins += sc.coin
                if sc.challenger:
                    challenger_name = sc.challenger.name
                else:
                    challenger_name = 'User Deleted'

                if sc.competitor:
                    competitor_name = sc.competitor.name
                else:
                    competitor_name = 'User Deleted'

                challenge_dict = {'id': sc.id, 'challenger': challenger_name,
                                  'competitor': competitor_name, 'coin': sc.coin, 'time': sc.time}
                loseChallenges_list.append(challenge_dict)

            wonChallenges = StudentChallenge.objects.filter(
                winner=student).order_by('-id')
            totalWonChallenges = len(wonChallenges)
            totalWonCoins = 0
            for sc in wonChallenges:
                totalWonCoins += sc.coin
                if sc.challenger:
                    challenger_name = sc.challenger.name
                else:
                    challenger_name = 'User Deleted'

                if sc.competitor:
                    competitor_name = sc.competitor.name
                else:
                    competitor_name = 'User Deleted'

                challenge_dict = {'id': sc.id, 'challenger': challenger_name,
                                  'competitor': competitor_name, 'coin': sc.coin, 'time': sc.time}
                wonChallenges_list.append(challenge_dict)

            totalCoins = totalWonCoins + totalWonCoins
            companyCommission = totalCoins * (20/100)
            totalWonCoins = (totalCoins - companyCommission) - totalWonCoins

            manipulators = ManipulatedCoin.objects.filter(
                studentSales=student, reason='myRefferal').order_by('-id')
            totalManipulators = len(manipulators)
            totalManipulteCoins = 0
            for m in manipulators:
                totalManipulteCoins += m.coinChanged
                manipulator_dict = {'id': m.id, 'coinChanged': m.coinChanged,
                                    'studentPurchase': m.studentPurchase.name, 'date': m.date}
                manipulators_list.append(manipulator_dict)

            try:
                osr = ManipulatedCoin.objects.get(
                    student=student, reason='otherStudentRefferal')
                totalOSR = 1
                earnCoins = osr.coinChanged
                osr_dict = {'id': osr.id, 'coinChanged': osr.coinChanged,
                            'studentSales': osr.studentSales.name, 'date': osr.date}
            except ManipulatedCoin.DoesNotExist:
                totalOSR = 0
                earnCoins = 0
                osr_dict = {}

            scs = StudentChallenge.objects.filter(Q(challenger=student) & Q(
                status='in-progress') & ~Q(test__marks_test=None)).order_by('-id')
            progessChallenges_list = []
            for sc in scs:
                sm = StudentMarks.objects.get(
                    student=sc.challenger, test=sc.test)
                student_marks = sm.marks
                student_time = sm.time
                challenger_dict = {'challenger': sc.challenger.name,
                                   'studentMarks': student_marks, 'studentTime': student_time}
                sc_dict = {'id': sc.id, 'coin': sc.coin,
                           'time': sc.time, 'challengerData': challenger_dict}
                progessChallenges_list.append(sc_dict)

            scs = StudentChallenge.objects.filter(Q(Q(challenger=student) | Q(
                competitor=student)) & Q(status='challenge-complete')).order_by('-id')
            completeChallenges_list = []
            for sc in scs:
                sm = StudentMarks.objects.filter(test=sc.test)
                for i in sm:
                    if i.student == sc.challenger:
                        challenger_dict = {
                            'id': sc.challenger.id, 'challenger': sc.challenger.name, 'studentMarks': i.marks, 'studentTime': i.time}
                    else:
                        competitor_dict = {
                            'id': sc.competitor.id, 'competitor': sc.competitor.name, 'studentMarks': i.marks, 'studentTime': i.time}
                sc_dict = {'id': sc.id, 'coin': sc.coin, 'time': sc.time,
                           'challengerData': challenger_dict, 'competitorData': competitor_dict}
                completeChallenges_list.append(sc_dict)

            context = {'status': 'success', 'photo': photo, 'totalCoins': studentTotalCoins, 'registrationCoin': registrationCoin, 'totalLoseChallenges': totalLoseChallenges, 'totalLoseCoins': totalLoseCoins, 'loseChallenges': loseChallenges_list, 'totalWonChallenges': totalWonChallenges, 'totalWonCoins': totalWonCoins, 'wonChallenges': wonChallenges_list,
                       'totalManipulteCoins': totalManipulteCoins, 'totalManipulators': totalManipulators, 'manipulators': manipulators_list, 'totalBoughtCoinsHistories': totalBoughtCoinsHistories, 'totalBoughtCoins': totalBoughtCoins, 'boughtCoins_list': totalBoughtCoins_list, 'totalwithdrawCoinsHistories': totalwithdrawCoinsHistories, 'totalwithdrawCoins': totalwithdrawCoins, 'totalRejectedwithdrawCoins': totalRejectedwithdrawCoins, 'withdrawCoins_list': totalwithdrawCoins_list,
                       'totalOSR': totalOSR, 'earnCoins': earnCoins, 'osr_dict': osr_dict, 'progessChallenges_list': progessChallenges_list, 'completeChallenges_list': completeChallenges_list}
        except Exception as e:
            context = {'status': 'success', 'message': str(e)}
        return Response(context)

class StudentGetChallengeTestRanking(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        test_id = data['test_id']
        try:
            all_student_marks = StudentMarks.objects.filter(test=test_id).order_by('-marks', 'time')
            totalMarks = all_student_marks[0].test.totalMarks
            all_student_list = []
            for asm in all_student_marks:
                photo = asm.student.student.photo
                student_dict = {'name': asm.student.name, 'photo': photo,'marks': asm.marks, 'totalMarks': totalMarks, 'time': asm.time}
                all_student_list.append(student_dict)
            context = {'status': 'success', 'students_list': all_student_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGiveFeedback(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        rating = data['rating']
        feedback = data['feedback']
        TestWinAppFeedback.objects.create(student=me.profile, rating=rating, feedback=feedback)
        context = {'status': 'success', 'message': 'Successfully Submitted'}
        return Response(context)

class ShowFeedbackPopupStudent(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        feedback = TestWinAppFeedback.objects.filter(student=me.profile).count()
        if feedback == 0:
            scs = StudentChallenge.objects.filter(Q(challenger=me.profile) | Q(competitor=me.profile), status='challenge-complete').count()
            if scs == 2:
                popup = True
            else:
                popup = False
        else:
            popup = False
        context = {'status': 'success', 'popup': popup}
        return Response(context)

class StaffGetAllFeedbacks(APIView):
    def get(self, request):
        allFeedbackes = TestWinAppFeedback.objects.all().values('student__name', 'rating', 'feedback', 'time')
        context = {'status': 'success', 'allFeedbackes': allFeedbackes}
        return Response(context)

class StaffManageGRC(APIView):
    def get(self, request, input):
        if input == 'on':
            FunctionalityHandlerTestWin.objects.all().update(active_grc=True)
        else:
            FunctionalityHandlerTestWin.objects.all().update(active_grc=False)

        return Response(f'successfulluy {input}')

class StaffManageWCR(APIView):
    def get(self, request, input):
        if input == 'on':
            FunctionalityHandlerTestWin.objects.all().update(active_wcr=True)
        else:
            FunctionalityHandlerTestWin.objects.all().update(active_wcr=False)
        return Response(f'successfulluy {input}')

class CheckWithdrawCoinRequestAvailability(APIView):
    def get(self, request):
        availability = FunctionalityHandlerTestWin.objects.all()[0].active_wcr
        context = {'availability': availability}
        return Response(context)

class StaffGetAllChallengesInfo(APIView):
    def get(self, request):
        scs = StudentChallenge.objects.filter(Q(status='in-progress') & ~Q(test__marks_test=None)).order_by('-id')
        progessChallenges_list = []
        for sc in scs:
            sm = StudentMarks.objects.get(student=sc.challenger, test=sc.test)
            student_marks = sm.marks
            student_time = sm.time
            challenger_dict = {'id': sc.challenger.id, 'challenger': sc.challenger.name, 'studentMarks': student_marks, 'studentTime': student_time}
            sc_dict = {'id': sc.id, 'coin': sc.coin,'time': sc.time, 'challengerData': challenger_dict}
            progessChallenges_list.append(sc_dict)

        scs = StudentChallenge.objects.filter(status='challenge-complete').order_by('-id')
        completeChallenges_list = []
        for sc in scs:
            sm = StudentMarks.objects.filter(test=sc.test)
            for i in sm:
                if i.student == sc.challenger:
                    challenger_dict = {'id': sc.challenger.id, 'challenger': sc.challenger.name,'studentMarks': i.marks, 'studentTime': i.time}
                else:
                    competitor_dict = {'id': sc.competitor.id, 'competitor': sc.competitor.name,'studentMarks': i.marks, 'studentTime': i.time}
                    
            sc_dict = {'id': sc.id, 'coin': sc.coin, 'time': sc.time,'challengerData': challenger_dict, 'competitorData': competitor_dict}
            completeChallenges_list.append(sc_dict)

        context = {'status': 'success', 'liveChallenges_list': progessChallenges_list, 'completeChallenges_list': completeChallenges_list}
        return Response(context)

class StaffPostAnnouncementTestWinApp(APIView):
    def post(self, request):
        data = request.data
        announcement = data['announcement']
        active = data['active']
        if active == 'true':
            StaffAnnouncementTestWinApp.objects.all().update(announcement=announcement, active=True)
        else:
            StaffAnnouncementTestWinApp.objects.all().update(announcement=announcement, active=False)
            
        context = {'status': 'success', 'message': 'Successffully Updated'}
        return Response(context)

    def get(self, request):
        staffannouncement = StaffAnnouncementTestWinApp.objects.all()[0]
        announcement = staffannouncement.announcement
        active = staffannouncement.active
        context = {'status': 'success', 'active': active,'announcement': announcement}
        return Response(context)

class StudentGetAnnouncementTestWinApp(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        staffannouncement = StaffAnnouncementTestWinApp.objects.all()[0]
        announcement = staffannouncement.announcement
        active = staffannouncement.active
        context = {'status': 'success', 'active': active,'announcement': announcement}
        return Response(context)

class StudentApplyReferralCodeTestWinApp(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        his_coupon = data['other_coupon']
        limitetions = FunctionalityHandlerTestWin.objects.all()[0]

        if me.profile.student.isBlocked == True:
            context = {'status': 'Failed','message': 'You are blocked by TestWin. To unblock yourself please write to TestWin under support tab.'}
            return Response(context)

        elif me.profile.accessTestWinApp == False:
            context = {'status': 'Failed','message': 'Your app is not updated, please update it for keep playing or withdrawing and Referral.'}
            return Response(context)

        elif limitetions.active_referral == False:
            context = {'status': 'Failed','message': 'This feature is under maintenance, please come back after sometime.'}
            return Response(context)

        else:
            try:
                coinsRefferedTo = me.profile.institute.coinsRefferedTo_registration
                coinsRefferedFrom = me.profile.institute.coinsRefferedFrom_registration
                src = StudentReferralCode.objects.get(code=his_coupon)
                student_refferedfrom = src.student
                if student_refferedfrom == me.profile:
                    context = {'status': 'Failed','message': 'Can\'t apply own coupon'}
                    return Response(context)
                
                existingManipulationSales = ManipulatedCoin.objects.filter(student=me.profile, reason='otherStudentRefferal')

                if len(existingManipulationSales) != 0:
                    context = {'status': 'Failed','message': 'Code can only be applied once'}
                    return Response(context)
                else:
                    my_coins = Coin.objects.get(student=me.profile)
                    manipulator = ManipulatedCoin()
                    manipulator.coin = my_coins
                    manipulator.student = me.profile
                    manipulator.code = his_coupon
                    manipulator.coinChanged = coinsRefferedTo
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.reason = 'otherStudentRefferal'
                    manipulator.date = timezone.now()
                    manipulator.save()
                    my_coins.coins += coinsRefferedTo
                    my_coins.save()

                    his_manipulatedCoin = ManipulatedCoin.objects.filter(student=src.student, reason='myRefferal').count()
                    if his_manipulatedCoin < limitetions.refferalLimite:
                        his_coins = Coin.objects.get(student=student_refferedfrom)
                        manipulator = ManipulatedCoin()
                        manipulator.coin = his_coins
                        manipulator.student = src.student
                        manipulator.code = his_coupon
                        manipulator.coinChanged = coinsRefferedFrom
                        manipulator.reason = 'myRefferal'
                        manipulator.date = timezone.now()
                        manipulator.studentSales = src.student
                        manipulator.studentPurchase = me.profile
                        manipulator.save()
                        his_coins.coins += coinsRefferedFrom
                        his_coins.save()

                    context = {'status': 'Success', 'message': 'You got {} coin'.format(coinsRefferedTo), 'coin': coinsRefferedTo}
                    return Response(context)

            except StudentReferralCode.DoesNotExist:
                context = {'status': 'Failed','message': 'Incorrect Referral Code'}
                return Response(context)

            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)

class staffDoAuthorizedStudentTestwin(APIView):
    def post(self, request):
        data = request.data
        authorizedTestWin = data['authorizedTestWin']
        student_id = data['student_id']
        try:
            student = Student.objects.get(id=student_id)
            if authorizedTestWin == 'true':
                student.student.authorizedTestWin = True
                student.student.save()
                try:
                    token = student.institute.serverKey
                    deviceId = student.firebaseToken
                    message = 'Your Verification is successful, you can now send withdrawal request.'
                    image = None
                    title = 'Document Verified'
                    send_notification_testWinApp(token, deviceId, message, image, title, 6)
                except Exception as f:
                    print(str(f))

            else:
                student.student.authorizedTestWin = False
                student.student.studentDocument = None
                student.student.save()
                try:
                    token = student.institute.serverKey
                    deviceId = student.firebaseToken
                    message = 'Your Verification is rejected, please ensure you upload valid ID with same name as in your TestWin profile.'
                    image = None
                    title = 'Document Verification Failed'
                    send_notification_testWinApp(token, deviceId, message, image, title, 6)
                except Exception as f:
                    print(str(f))

            context = {'status': 'success', 'message': 'Successffully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class IsStudentAuthorized(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            detail = StudentDetails.objects.get(student=me.profile)

            if detail.authorizedTestWin == True:
                message = 'Your Verification is successful, you can now send withdrawal request.'
                verification = 'success'
                authorized = detail.authorizedTestWin

            elif detail.studentDocument is None and detail.authorizedTestWin == False:
                message = 'Your Verification is rejected, please ensure you upload valid ID with same name as in your TestWin profile.'
                verification = 'rejected'
                authorized = detail.authorizedTestWin

            elif detail.studentDocument and detail.authorizedTestWin == False:
                message = 'Your Document Verification is in process, it takes 2-12 hours for the verification to be completed. Post which you can send withdrawal request.'
                verification = 'pending'
                authorized = True

            elif detail.studentDocument and detail.authorizedTestWin is None:
                message = 'Your Document Verification is in process, it takes 2-12 hours for the verification to be completed. Post which you can send withdrawal request.'
                verification = 'pending'
                authorized = True

            else:
                message = 'To process your withdrawal request please come back again after attaching the valid ID in profile. Please ensure your name on ID matches with your profile name for processing the withdrawal request.'
                verification = 'empty'
                authorized = detail.authorizedTestWin

            context = {'status': 'success', 'message': message,'authorized': authorized, 'verification': verification}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetReferralCoin(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        referralCoin = me.profile.institute.coinsRefferedTo_registration
        context = {'status': 'success', 'referralCoin': referralCoin}
        return Response(context)

class StaffManageAllFunctionalityTestwinApp(APIView):
    def post(self, request):
        data = request.data
        active_grc = data['active_grc']
        active_wcr = data['active_wcr']
        isActivateTestwinApp = data['isActivateTestwinApp']
        active_ccf = data['active_ccf']
        active_referral = data['active_referral']
        minimumWithdrawCoin = data['minimumWithdrawAmount']
        minimumChallengeForWithdraw = data['minimumChallengeForWithdraw']
        newRegisterCoin = data['newRegisterCoin']
        shareEarnTabText = data['shareEarnTabText']
        withdrawTabText = data['withdrawTabText']

        try:
            functionality = FunctionalityHandlerTestWin.objects.all()[0]
            functionality.minimumWithdrawCoin = minimumWithdrawCoin
            functionality.minimumChallengeForWithdraw = minimumChallengeForWithdraw
            functionality.newRegisterCoin = newRegisterCoin
            functionality.shareEarnTabText = shareEarnTabText
            functionality.withdrawTabText = withdrawTabText

            if active_grc == 'true':
                functionality.active_grc = True
            else:
                functionality.active_grc = False
            if active_wcr == 'true':
                functionality.active_wcr = True
            else:
                functionality.active_wcr = False

            if isActivateTestwinApp == 'true':
                functionality.isActivateTestwinApp = True
            else:
                functionality.isActivateTestwinApp = False

            if active_ccf == 'true':
                functionality.active_ccf = True
            else:
                functionality.active_ccf = False

            if active_referral == 'true':
                functionality.active_referral = True
            else:
                functionality.active_referral = False

            functionality.save()
            context = {'status': 'success', 'message': 'Updated Successffully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def get(self, request):
        functionality = FunctionalityHandlerTestWin.objects.all().values()
        context = {'status': 'success', 'functionalities': functionality}
        return Response(context)

class IsActivateTestwinApp(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        IsActivateTestwinApp = FunctionalityHandlerTestWin.objects.all()[0].IsActivateTestwinApp
        context = {'IsActivateTestwinApp': IsActivateTestwinApp}
        return Response(context)

class StaffGetVerifiedStudents(APIView):
    def get(self, request):
        try:
            students = StudentDetails.objects.filter(student__institute__code='testwin', authorizedTestWin=True)
            verifiedStudents_list = []
            for student in students:
                contact = student.student.studentuser.username.split('@')[0]
                student_dict = {'id': student.student.id, 'name': student.student.name, 
                                'document_name': student.fullName, 'contact': contact, 
                                'photo': student.photo, 'studentDocumentType': student.studentDocumentType, 
                                'studentDocument': student.studentDocument, 'authorizedTestWin': student.authorizedTestWin
                                }
                verifiedStudents_list.append(student_dict)
            context = {'status': 'success','verifiedStudents': verifiedStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffGetRejectedVerificationStudents(APIView):
    def get(self, request):
        try:
            students = StudentDetails.objects.filter(student__institute__code='testwin', authorizedTestWin=False, studentDocument=None)
            rejectedVerificationStudents_list = []
            for student in students:
                contact = student.student.studentuser.username.split('@')[0]
                student_dict = {'id': student.student.id, 'name': student.student.name, 
                                'document_name': student.fullName, 'contact': contact, 
                                'photo': student.photo, 'studentDocumentType': student.studentDocumentType, 
                                'studentDocument': student.studentDocument, 'authorizedTestWin': student.authorizedTestWin
                                }
                rejectedVerificationStudents_list.append(student_dict)
            context = {'status': 'success','rejectedVerificationStudents': rejectedVerificationStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffGetPendingVerificationStudents(APIView):
    def get(self, request):
        try:
            students = StudentDetails.objects.filter(Q(student__institute__code='testwin') & Q(
                Q(Q(authorizedTestWin=False) & ~Q(studentDocument=None)) | Q(Q(authorizedTestWin=None) & ~Q(studentDocument=None))))
            pendingVerificationStudents_list = []
            for student in students:
                contact = student.student.studentuser.username.split('@')[0]
                student_dict = {'id': student.student.id, 'name': student.student.name, 
                                'document_name': student.fullName, 'contact': contact, 
                                'photo': student.photo, 'studentDocumentType': student.studentDocumentType, 
                                'studentDocument': student.studentDocument, 'authorizedTestWin': student.authorizedTestWin
                                }
                pendingVerificationStudents_list.append(student_dict)
            context = {'status': 'success','pendingVerificationStudents': pendingVerificationStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class staffVerificationStudentTemprary(APIView):
    def get(self, request, student_id, authorizedTestWin):
        try:
            student = Student.objects.get(id=student_id)
            if authorizedTestWin == 'true':
                student.student.authorizedTestWin = True
                student.student.save()
                message = 'Verification successfull'
                try:
                    token = student.institute.serverKey
                    deviceId = student.firebaseToken
                    message = 'Your Verification is successful, you can now send withdrawal request.'
                    image = None
                    title = 'Document Verified'
                    send_notification_testWinApp(token, deviceId, message, image, title, 6)
                except Exception as f:
                    print(str(f))

            else:
                student.student.authorizedTestWin = False
                student.student.studentDocument = None
                student.student.save()
                message = 'Rejected successfull'
                try:
                    token = student.institute.serverKey
                    deviceId = student.firebaseToken
                    message = 'Your Verification is rejected, please ensure you upload valid ID with same name as in your TestWin profile.'
                    image = None
                    title = 'Document Verification Failed'
                    send_notification_testWinApp(token, deviceId, message, image, title, 6)
                except Exception as f:
                    print(str(f))

            context = {'status': 'success', 'message': message}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetTeswinInstructions(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        functionality = FunctionalityHandlerTestWin.objects.all()[0]
        withdrawInstruction = f'You may withdraw {functionality.minimumWithdrawCoin} or more coins. Also, playing/creating {functionality.minimumChallengeForWithdraw} Test is mandatory before withdrawl.'
        shareEarnTabText = functionality.shareEarnTabText
        withdrawTabText = functionality.withdrawTabText
        addCoinTabText = functionality.addCoinTabText
        context = {'status': 'success', 'withdrawInstruction': withdrawInstruction,
                   'shareEarnTabText': shareEarnTabText, 'withdrawTabText': withdrawTabText, 
                   'addCoinTabText': addCoinTabText
                   }
        return Response(context)

class StudentGetFAQ(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        faq = FAQ.objects.filter(institute=me.profile.institute).values()
        context = {'status': 'success', 'faq': faq}
        return Response(context)

class StaffGetAllFAQ(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        faq = FAQ.objects.filter(institute=me.profile.institute).values()
        context = {'status': 'success', 'faq': faq}
        return Response(context)

class StaffCreateFAQ(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        title = data['title']
        description = data['description']
        FAQ.objects.create(institute=me.profile.institute, title=title, description=description)
        context = {'status': 'success', 'message': 'Successfully Created'}
        return Response(context)

class StaffUpdateFAQ(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        faq_id = data['faq_id']
        title = data['title']
        description = data['description']

        faq = FAQ.objects.get(id=faq_id)
        faq.title = title
        faq.description = description
        faq.save()

        context = {'status': 'success', 'message': 'Successfully Updated'}
        return Response(context)

class StaffDeleteFAQ(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        faq_id = data['faq_id']
        try:
            FAQ.objects.get(id=faq_id, institute=me.profile.institute).delete()
            context = {'status': 'success', 'message': 'successfull deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffBlockStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        block = data['block']
        try:
            student = StudentDetails.objects.get(student__id=student_id)
            if block == 'true':
                student.isBlocked = True
                student.save()
                message = 'Successfully Blocked'
            else:
                student.isBlocked = False
                student.save()
                message = 'Successfully Unblocked'

            context = {'status': 'success', 'message': message}
        except Exception as e:
            context = {'status': 'success', 'message': str(e)}
        return Response(context)

class CheckStudentBlockStatus(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        blockStatus = StudentDetails.objects.get(student=me.profile).isBlocked
        context = {'status': 'success', 'blockStatus': blockStatus}
        return Response(context)

class CheckDeviceLimitation(APIView):
    def post(self, request):
        data = request.data
        deviceId = data['deviceId']
        username = data['username']
        type = data['type']

        if type == 'post':
            sdl = StudentDeviceLimitation()
            sdl.deviceId = deviceId
            sdl.username = username
            sdl.save()
            context = {'status': 'success'}
            return Response(context)
        else:
            studentDeviceLengths = StudentDeviceLimitation.objects.filter(
                deviceId=deviceId).count()
            if studentDeviceLengths < 2:
                context = {'status': 'success', 'newRegistration': True}
            else:
                context = {
                    'status': 'success', 
                    'newRegistration': False,
                    'message': 'You can only register two account in this device. Please use another device to register new account'
                    }
            return Response(context)

class checkNoti(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)


            try:
                message = f'{me.profile.name} created new challenge ..accept the challenge and win coin'
                image = 'https://i1.wp.com/www.renyoga.com/wp-content/uploads/2019/02/New-Challenge.gif?resize=410%2C378'
                title = 'New Challenge Demo Reminder'
                bulk_notification_testWinApp.delay(message, image, title, 6, me.profile.id)
            except Exception as f:
                context = {'status': 'Failed', 'message': str(f)}

            context = {'status': 'success','message': 'successfull sed', 'id': me.profile.id}

        except Exception as f:
            context = {'status': 'Failed', 'message': str(f)}
        return Response(context)

class TeacherSeeAllStudentsTestwin(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        all_students = StudentDetails.objects.filter(student__institute=me.profile.institute).order_by(
            'student__coin_student__coins').values('student__id', 'student__name', 'photo', 'student__coin_student__coins')

        df = pd.DataFrame(all_students)
        df = df.fillna('')
        df = df.rename(columns={"student__name": "name", "student__coin_student__coins": "coins", "student__id": "id"})
        all_students = df.to_dict('records')

        context = {'studentList': all_students}
        return Response(context)

class TeacherAssignCoinStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_ids = data['student_ids']
        coin = data['coin']
        reason = data['reason']
        students_list = student_ids.strip('][').split(',')

        for sid in students_list:
            student = Student.objects.get(id=sid)
            studentcoin, create = Coin.objects.get_or_create(student=student)
            studentcoin.coins += float(coin)
            studentcoin.save()

            try:
                token = student.institute.serverKey
                deviceId = student.firebaseToken
                message = reason
                image = None
                title = f'Congratulation 😍🥰 You won {coin}'
                send_notification_testWinApp(token, deviceId, message, image, title, 6)
            except Exception as f:
                print(str(f))
        context = {'status': 'success', 'messsage': 'Successfully Assinged'}
        return Response(context)

class TeacherSeeStudentCoinsUsingPagination(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        page = data['page']
        item_page = 50
        start_index = int(page) * item_page
        end_index = int(start_index) + item_page

        studentCoins = Coin.objects.filter(student__institute=me.profile.institute).count()
        totalPage = math.ceil(studentCoins/item_page)

        studentCoins = Coin.objects.filter(student__institute=me.profile.institute).distinct().order_by('-id')[start_index:end_index]
        student_coins_list = []
        for sc in studentCoins:
            try:
                details = StudentDetails.objects.get(student=sc.student)
                photo = details.photo
            except:
                photo = None

            try:
                phone = sc.student.studentuser.username
                phone = phone.split('@')
                phone = phone[0]
            except:
                phone = None
                
            student_dict = {'id': sc.student.id, 'name': sc.student.name,'photo': photo, 'phone': phone}
            sc_dict = {'student': student_dict, 'coins': sc.coins}
            student_coins_list.append(sc_dict)
            
        context = {'studentCoinList': student_coins_list,'totalPage': totalPage}
        return Response(context)

class StaffGetReffralWiseStudents(APIView):
    def get(self, request):
        interns_refferal_code = ['jrwacp', 'tbrkyg', 'jbiljc', 'bvbjne', 'subhu', 'tbnapz', 'cgtdkk']

        try:
            src = StudentReferralCode.objects.filter(code__in=interns_refferal_code)
            refferalWiseDetails = []
            for i in src:
                parent_student = i.student
                mc = ManipulatedCoin.objects.filter(student=parent_student, reason='myRefferal').order_by('-id')
                students_list = []
                for j in mc:
                    student = j.studentPurchase
                    students_dict = {'id': student.id,'name': student.name, 'joining_date': j.date}
                    students_list.append(students_dict)

                try:
                    osr = ManipulatedCoin.objects.get(student=parent_student, reason='otherStudentRefferal')
                    osr_dict = {'id': osr.id, 'coinChanged': osr.coinChanged,'studentSales': osr.studentSales.name, 'date': osr.date}
                except ManipulatedCoin.DoesNotExist:
                    osr_dict = {}

                refferalWiseDetails_dict = {'parentStudent': parent_student.name, 'total_his_reffral': len(
                    students_list), 'his_reffral': students_list, 'otherStudentRefferal': osr_dict}
                refferalWiseDetails.append(refferalWiseDetails_dict)
            context = {'status': 'success', 'refferalWiseDetails': refferalWiseDetails}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class CreateTestForGroupChallenges(APIView):
    def post(self, request):
        data = request.data
        chapter_id = data['chapter_id']
        number_questions = 6
        title = 'Group Challenge Test Testwin'
        try:
            chapter = Chapter.objects.get(id=chapter_id)
            questions_chapter = Question.objects.filter(chapter=chapter)
            if len(questions_chapter) == 0:
                context = {'status': 'Failed', 'message': 'No questions in chapter'}
                return Response(context)
            
            test = Test()
            test.published = timezone.now()
            test.time = 2
            test.totalMarks = 0
            test.name = title
            test.save()
            test.subjects.add(chapter.subject)
            test.chapters.add(chapter)
            total_marks = 0

            for q in questions_chapter:
                if test.questions.count() < number_questions and q not in test.questions.all():
                    test.questions.add(q)
                    total_marks += q.marks

            if test.questions.count() < 4:
                test.delete()
                context = {'status': 'Failed', 'message': 'Please select some other subject category.'}
            else:
                if test.questions.count() < number_questions:
                    questions_chapter = questions_chapter.values('id')
                    for i in questions_chapter:
                        random_id = random.choice(questions_chapter)["id"]
                        if test.questions.count() < number_questions:
                            question_obj = Question.objects.get(id=random_id)
                            if question_obj not in test.questions.all():
                                test.questions.add(question_obj)
                                total_marks += question_obj.marks
                        else:
                            break

            test.totalMarks = total_marks
            test.save()

            if test.questions.count() != number_questions:
                test.delete()
                context = {'status': 'Failed', 'message': 'Please select some other subject category.'}

            context = {'status': 'Success', 'testID': test.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetTotalNumberGroupChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        studentLostGroupChallenges = StudentGroupChallenge.objects.filter(Q(Q(contestants=me.profile) | Q(
            bookingsForPlay=me.profile)) & Q(isChallengeOver=True) & ~Q(winners=me.profile)).distinct().count()
        studentWinGroupChallenges = StudentGroupChallenge.objects.filter(winners=me.profile).count()
        studentProgressGroupChallenges = StudentGroupChallenge.objects.filter(bookingsForPlay=me.profile, isChallengeOver=False).count()

        my_languages = me.profile.student_language.all().values_list('id', flat=True)
        sgc = StudentGroupChallenge.objects.filter(isChallengeOver=False, challengeLanguage__id__in=my_languages).distinct().order_by('-id')
        previousQuestions_ids_list = AttemptedQuestion.objects.filter(student=me.profile).values_list('question__id', flat=True)

        totalLiveGroupChallenge = 0
        for gc in sgc:
            current_challenge_test_questions_ids = gc.test.questions.all().values_list('id',flat=True)
            previous_questions_ids = list(set(previousQuestions_ids_list).intersection(current_challenge_test_questions_ids))
            if len(previous_questions_ids) <= 2:
                totalLiveGroupChallenge += 1

        context = {'status': 'success', 'studentLostGroupChallenges': studentLostGroupChallenges, 'studentWinGroupChallenges': studentWinGroupChallenges,
                   'studentProgressGroupChallenges': studentProgressGroupChallenges, 'totalLiveGroupChallenge': totalLiveGroupChallenge}
        return Response(context)

class StudentGetGroupChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        my_languages = me.profile.student_language.all().values_list('id', flat=True)
        sgc = StudentGroupChallenge.objects.filter(isChallengeOver=False, challengeLanguage__id__in=my_languages).distinct().order_by('id')
        previousQuestions_ids_list = AttemptedQuestion.objects.filter(student=me.profile).values_list('question__id', flat=True)

        sgc_list = []  # sgc stand for student group challenges
        for gc in sgc:
            current_challenge_test = gc.test
            current_challenge_test_questions_ids = current_challenge_test.questions.all().values_list('id', flat=True)
            previous_questions_ids = set(previousQuestions_ids_list).intersection(current_challenge_test_questions_ids)

            if len(previous_questions_ids) <= 2:
                try:
                    course = gc.course.name
                except:
                    course = None
                    
                try:
                    subject = current_challenge_test.subjects.all()[0].name
                except:
                    subject = None

                totalBookedSlots = gc.bookingsForPlay.count()

                sc_dict = {
                    'id': gc.id, 'title': gc.title, 'coin': gc.coin, 'time': gc.time, 
                    'startTime': gc.startTime, 'status': gc.status,
                    'course': course, 'subject': subject, 'winningCoinsUpto': gc.winningCoinsUpto, 
                    'slots': gc.slots, 'totalBookedSlots': totalBookedSlots
                    }
                sgc_list.append(sc_dict)

        context = {'status': 'success', 'challenges': sgc_list}
        return Response(context)

class StudentSeeGroupChallengeDetails(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        groupChallenge_id = data['groupChallenge_id']

        try:
            sgc = StudentGroupChallenge.objects.get(id=groupChallenge_id)
            participants = sgc.bookingsForPlay.all().values('id', 'name', 'student__photo')

            if me.profile in sgc.bookingsForPlay.all():
                is_i_booked_this_groupChallenge = True
            else:
                is_i_booked_this_groupChallenge = False

            totalQuestions = sgc.test.questions.count()

            sc_dict = {'id': sgc.id, 'totalQuestions': totalQuestions, 
                       'is_i_booked_this_groupChallenge': is_i_booked_this_groupChallenge,
                       'totalBookedSlots': len(participants), 'participants': participants, 
                       'test_id': sgc.test.id}
            context = {'status': 'success', 'details': sc_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentRegistraionGroupChallenge(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        groupChallenge_id = data['groupChallenge_id']

        try:
            if me.profile.accessTestWinApp == True:
                sgc = StudentGroupChallenge.objects.get(id=groupChallenge_id)

                if sgc.bookingsForPlay.count() < sgc.slots:
                    contestant_coins = Coin.objects.get(student=me.profile)
                    contestant_coins.coins -= sgc.coin
                    contestant_coins.save()

                    sgc.bookingsForPlay.add(me.profile)
                    context = {'status': 'success', 'message': 'You have successfully joined the test, your Test will start shortly. Check it under upcoming tab on Home screen.'}
                else:
                    context = {'status': 'Failed', 'message': 'Sorry!! no more booking available in this gruop challenge, Kindly book another group challenge'}
            else:
                context = {'status': 'Failed', 'message': 'Your app is not updated, please update it for keep playing and withdrawing.'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentStartPlayingGroupChallenge(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        groupChallenge_id = data['groupChallenge_id']

        try:
            sgc = StudentGroupChallenge.objects.get(id=groupChallenge_id)
            sgc.contestants.add(me.profile)
            context = {'status': 'success', 'test': sgc.test.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetOngoingGroupChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        sgc_list = []

        sgc = StudentGroupChallenge.objects.filter(bookingsForPlay=me.profile, isChallengeOver=False).order_by('-id')

        sgc_list = []  # sgc stand for student group challenges
        for gc in sgc:
            try:
                course = gc.course.name
            except:
                course = None
                
            try:
                subject = gc.test.subjects.all()[0].name
            except:
                subject = None

            totalBookedSlots = gc.bookingsForPlay.count()
            sc_dict = {'id': gc.id, 'title': gc.title, 'coin': gc.coin, 'time': gc.time, 
                       'startTime': gc.startTime, 'status': gc.status, 'course': course,
                       'subject': subject, 'winningCoinsUpto': gc.winningCoinsUpto, 
                       'slots': gc.slots, 'totalBookedSlots': totalBookedSlots, 'test_id': gc.test.id}
            sgc_list.append(sc_dict)

        context = {'status': 'success', 'challenges': sgc_list}
        return Response(context)

class StudentGetWonGroupChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        sgc_list = []

        try:
            sgc = StudentGroupChallenge.objects.filter(winners=me.profile).order_by('-id')
            for gc in sgc:
                performance_id = StudentMarks.objects.get(test=gc.test, student=me.profile).id
                try:
                    course = gc.course.name
                except:
                    course = None
                    
                try:
                    subject = gc.test.subjects.all()[0].name
                except:
                    subject = None
                    
                challenge_dict = {'id': gc.id, 'test': gc.test.id, 'title': gc.title, 'coin': gc.coin,
                                  'winningCoins': gc.winningCoins, 'performance_id': performance_id, 
                                  'course': course, 'subject': subject}
                
                sgc_list.append(challenge_dict)
            context = {'status': 'success', 'challenges': sgc_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetLostGroupChallenges(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            sgc = StudentGroupChallenge.objects.filter(Q(Q(contestants=me.profile) | Q(bookingsForPlay=me.profile)) & Q(
                isChallengeOver=True) & ~Q(winners=me.profile)).distinct().order_by('-id')
            sgc_list = []

            for gc in sgc:
                try:
                    performance_id = StudentMarks.objects.get(test=gc.test, student=me.profile).id
                except:
                    performance_id = None

                try:
                    course = gc.course.name
                except:
                    course = None
                    
                try:
                    subject = gc.test.subjects.all()[0].name
                except:
                    subject = None
                    
                challenge_dict = {'id': gc.id, 'test': gc.test.id, 'title': gc.title, 'coin': gc.coin,
                                  'winningCoins': gc.winningCoins, 'performance_id': performance_id, 
                                  'course': course, 'subject': subject}
                
                sgc_list.append(challenge_dict)
            context = {'status': 'success', 'challenges': sgc_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetLevelWiseReferralCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute_details = me.profile.institute.institute_details
        referralCoinLevel1 = institute_details.referralCoinLevel1
        referralCoinLevel2 = institute_details.referralCoinLevel2
        referralCoinLevel3 = institute_details.referralCoinLevel3
        context = {
            'status': 'Success', 
            'referralCoinLevel1': referralCoinLevel1,
            'referralCoinLevel2': referralCoinLevel2, 
            'referralCoinLevel3': referralCoinLevel3
            }
        return Response(context)

class TeacherChangeLevelWiseReferralCoins(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        referralCoinLevel1 = data['referralCoinLevel1']
        referralCoinLevel2 = data['referralCoinLevel2']
        referralCoinLevel3 = data['referralCoinLevel3']
        institute_details = me.profile.institute.institute_details
        institute_details.referralCoinLevel1 = referralCoinLevel1
        institute_details.referralCoinLevel2 = referralCoinLevel2
        institute_details.referralCoinLevel3 = referralCoinLevel3
        institute_details.save()

        context = {'status': 'Success','message': 'Coins Changed Successfully'}
        return Response(context)

class StudentApplyReferralWithLevelWiseFunctionality(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        his_coupon = data['other_coupon']

        try:
            instituteDetails = InstituteDetails.objects.get(institute=me.profile.institute)
            referralCoinLevel1 = instituteDetails.referralCoinLevel1
            referralCoinLevel2 = instituteDetails.referralCoinLevel2
            referralCoinLevel3 = instituteDetails.referralCoinLevel3
            src = StudentReferralCode.objects.get(code=his_coupon)
            student_refferedfrom = src.student
            if student_refferedfrom == me.profile:
                context = {'status': 'Failed','message': 'Can\'t apply own coupon'}
                return Response(context)

            existingManipulationSales = ManipulatedCoin.objects.filter(studentPurchase=me.profile)

            if len(existingManipulationSales) != 0:
                context = {'status': 'Failed','message': 'Code can only be applied once'}
                return Response(context)
            else:

                try:
                    his_coins = Coin.objects.get(student=student_refferedfrom)
                except Coin.MultipleObjectsReturned:
                    coins = Coin.objects.filter(student=student_refferedfrom).order_by('-id')[1:]
                    for i in coins:
                        i.delete()
                    his_coins = Coin.objects.get(student=student_refferedfrom)

                hisTotalEarnCoins = ManipulatedCoin.objects.filter(studentSales=src.student, reason='myRefferal').aggregate(totalEarning=Sum('coinChanged'))
                totalEarning = hisTotalEarnCoins['totalEarning']

                if totalEarning == None:
                    manipulator = ManipulatedCoin()
                    manipulator.coin = his_coins
                    manipulator.student = src.student
                    manipulator.code = his_coupon
                    manipulator.coinChanged = referralCoinLevel1
                    manipulator.reason = 'myRefferal'
                    manipulator.date = timezone.now()
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.save()
                    his_coins.coins += referralCoinLevel1
                    his_coins.save()

                    try:
                        app_token = student_refferedfrom.institute.serverKey
                        deviceId = student_refferedfrom.firebaseToken
                        message = f'You Earned {referralCoinLevel1} coins through one of your referrals..'
                        send_notification_individual(app_token, deviceId, message)
                    except Exception as e:
                        pass

                elif totalEarning < 1100:
                    manipulator = ManipulatedCoin()
                    manipulator.coin = his_coins
                    manipulator.student = src.student
                    manipulator.code = his_coupon
                    manipulator.coinChanged = referralCoinLevel1
                    manipulator.reason = 'myRefferal'
                    manipulator.date = timezone.now()
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.save()
                    his_coins.coins += referralCoinLevel1
                    his_coins.save()

                    try:
                        app_token = student_refferedfrom.institute.serverKey
                        deviceId = student_refferedfrom.firebaseToken
                        message = f'You Earned {referralCoinLevel1} coins through one of your referrals..'
                        send_notification_individual(app_token, deviceId, message)
                    except Exception as e:
                        pass

                elif totalEarning > 1100:
                    manipulator = ManipulatedCoin()
                    manipulator.coin = his_coins
                    manipulator.student = src.student
                    manipulator.code = his_coupon
                    manipulator.coinChanged = referralCoinLevel1
                    manipulator.reason = 'myRefferal'
                    manipulator.date = timezone.now()
                    manipulator.studentSales = src.student
                    manipulator.studentPurchase = me.profile
                    manipulator.save()

                try:
                    manipulateCoins = ManipulatedCoin.objects.get(studentPurchase=src.student, reason='myRefferal')
                    secondLevelParent = manipulateCoins.studentSales

                    hisParentTotalEarnCoins = ManipulatedCoin.objects.filter(
                        studentSales=secondLevelParent, reason='myRefferal').aggregate(totalEarning=Sum('coinChanged'))
                    totalEarning = hisParentTotalEarnCoins['totalEarning']

                    if totalEarning == None:
                        try:
                            coin = Coin.objects.get(student=secondLevelParent)
                        except Coin.MultipleObjectsReturned:
                            coins = Coin.objects.filter(
                                student=secondLevelParent).order_by('-id')[1:]
                            for i in coins:
                                i.delete()
                            coin = Coin.objects.get(student=secondLevelParent)
                        coin.coins += referralCoinLevel2
                        coin.save()

                        try:
                            app_token = secondLevelParent.institute.serverKey
                            deviceId = secondLevelParent.firebaseToken
                            message = f'You Earned {referralCoinLevel2} coins through one of your referrals..'
                            send_notification_individual(app_token, deviceId, message)
                        except Exception as e:
                            pass

                    elif totalEarning < 1100:
                        try:
                            coin = Coin.objects.get(student=secondLevelParent)
                        except Coin.MultipleObjectsReturned:
                            coins = Coin.objects.filter(student=secondLevelParent).order_by('-id')[1:]
                            for i in coins:
                                i.delete()
                            coin = Coin.objects.get(student=secondLevelParent)
                        coin.coins += referralCoinLevel2
                        coin.save()

                        try:
                            app_token = secondLevelParent.institute.serverKey
                            deviceId = secondLevelParent.firebaseToken
                            message = f'You Earned {referralCoinLevel2} coins through one of your referrals..'
                            send_notification_individual(app_token, deviceId, message)
                        except Exception as e:
                            pass

                    try:
                        manipulateCoins = ManipulatedCoin.objects.get(studentPurchase=secondLevelParent, reason='myRefferal')
                        thirdLevelParent = manipulateCoins.studentSales

                        hisParentTotalEarnCoins = ManipulatedCoin.objects.filter(
                            studentSales=thirdLevelParent, reason='myRefferal').aggregate(totalEarning=Sum('coinChanged'))
                        totalEarning = hisParentTotalEarnCoins['totalEarning']

                        if totalEarning == None:
                            try:
                                coin = Coin.objects.get(student=thirdLevelParent)
                            except Coin.MultipleObjectsReturned:
                                coins = Coin.objects.filter(student=thirdLevelParent).order_by('-id')[1:]
                                for i in coins:
                                    i.delete()
                                coin = Coin.objects.get(student=thirdLevelParent)
                            coin.coins += referralCoinLevel3
                            coin.save()

                            try:
                                app_token = thirdLevelParent.institute.serverKey
                                deviceId = thirdLevelParent.firebaseToken
                                message = f'You Earned {referralCoinLevel3} coins through one of your referrals..'
                                send_notification_individual(app_token, deviceId, message)
                            except Exception as e:
                                pass

                        elif totalEarning < 1100:
                            try:
                                coin = Coin.objects.get(student=thirdLevelParent)
                            except Coin.MultipleObjectsReturned:
                                coins = Coin.objects.filter(student=thirdLevelParent).order_by('-id')[1:]
                                for i in coins:
                                    i.delete()
                                coin = Coin.objects.get(student=thirdLevelParent)
                            coin.coins += referralCoinLevel3
                            coin.save()

                            try:
                                app_token = thirdLevelParent.institute.serverKey
                                deviceId = thirdLevelParent.firebaseToken
                                message = f'You Earned {referralCoinLevel3} coins through one of your referrals..'
                                send_notification_individual(app_token, deviceId, message)
                            except Exception as e:
                                pass

                    except Exception as e:
                        pass

                except Exception as e:
                    pass

                context = {'status': 'Success', 'message': 'The person whose referral you used has got the {} coins.'.format(referralCoinLevel1)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetFirstLevelStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            all_students = Student.objects.filter(Q(institute=me.profile.institute) & ~Q(manipulatedcoin_student__studentSales=None))

            firstLevelStudents_list = []
            for student in all_students:
                his_manipulatedCoins = ManipulatedCoin.objects.filter(studentSales=student)

                if his_manipulatedCoins:  # if this condition is true ,,then it means student are first level
                    totalEarningByReferralCoins = his_manipulatedCoins.aggregate(totalEarning=Sum('coinChanged'))
                    totalEarning = totalEarningByReferralCoins['totalEarning']
                    total_child = len(his_manipulatedCoins)

                    his_child_list = []
                    for his_manipulatedCoin in his_manipulatedCoins:
                        his_child = his_manipulatedCoin.studentPurchase
                        his_child_dict = {'id': his_child.id, 'name': his_child.name, 'photo': his_child.student.photo,
                                          'date': his_manipulatedCoin.date, 'coinChanged': his_manipulatedCoin.coinChanged}
                        his_child_list.append(his_child_dict)

                    firstLevel_student_dict = {'id': student.id, 'name': student.name, 'photo': student.student.photo,
                                               'total_child': total_child, 'totalEarning': totalEarning, 'his_child_list': his_child_list}
                    firstLevelStudents_list.append(firstLevel_student_dict)

                else:
                    pass

            context = {'status': 'success','firstLevelStudents_list': firstLevelStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSecondLevelStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            all_students = Student.objects.filter(Q(institute=me.profile.institute) & ~Q(manipulatedcoin_student__studentSales=None))
            secondLevelStudents_list = []
            for student in all_students:
                is_student_in_level2 = None
                his_manipulatedCoins = ManipulatedCoin.objects.filter(studentSales=student)

                if his_manipulatedCoins:  # if this condition is true ,,then it means student are first level
                    totalEarningByReferralCoins = his_manipulatedCoins.aggregate(totalEarning=Sum('coinChanged'))
                    main_parent_total_earning = totalEarningByReferralCoins['totalEarning']
                    main_parent_total_child = len(his_manipulatedCoins)

                    his_child_list = []
                    for his_manipulatedCoin in his_manipulatedCoins:
                        his_child = his_manipulatedCoin.studentPurchase
                        manipulatedCoins_of_his_child = ManipulatedCoin.objects.filter(studentSales=his_child)

                        second_level_child_list = []
                        if manipulatedCoins_of_his_child:  # if this condition is true ,,then it means student are first or second level
                            first_child_totalEarningByReferralCoins = manipulatedCoins_of_his_child.aggregate(totalEarning=Sum('coinChanged'))
                            main_parent_total_earning += first_child_totalEarningByReferralCoins['totalEarning']
                            main_parent_total_child += len(manipulatedCoins_of_his_child)

                            is_student_in_level2 = True
                            for mohc in manipulatedCoins_of_his_child:
                                child_of_his_child = mohc.studentPurchase
                                dict = {'id': child_of_his_child.id, 'name': child_of_his_child.name,
                                        'photo': child_of_his_child.student.photo, 'date': mohc.date, 
                                        'coinChanged': mohc.coinChanged}
                                second_level_child_list.append(dict)

                        else:
                            pass

                        his_child_dict = {'id': his_child.id, 'name': his_child.name, 'photo': his_child.student.photo, 
                                          'date': his_manipulatedCoin.date,'coinChanged': his_manipulatedCoin.coinChanged, 
                                          'second_level_child_list': second_level_child_list}
                        his_child_list.append(his_child_dict)

                    if is_student_in_level2 == True:
                        firstLevel_student_dict = {'id': student.id, 'name': student.name, 'photo': student.student.photo,
                                                   'total_child': main_parent_total_child, 'totalEarning': main_parent_total_earning, 'his_child_list': his_child_list}
                        secondLevelStudents_list.append(firstLevel_student_dict)

                else:
                    pass
            context = {'status': 'success','secondLevelStudents_list': secondLevelStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetThirdLevelStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            all_students = Student.objects.filter(Q(institute=me.profile.institute) & ~Q(manipulatedcoin_student__studentSales=None))
            thirdLevelStudents_list = []

            for student in all_students:
                is_student_in_level3 = None
                his_manipulatedCoins = ManipulatedCoin.objects.filter(studentSales=student)

                if his_manipulatedCoins:  # if this condition is true ,,then it means student are first level
                    totalEarningByReferralCoins = his_manipulatedCoins.aggregate(totalEarning=Sum('coinChanged'))
                    main_parent_total_earning = totalEarningByReferralCoins['totalEarning']
                    main_parent_total_child = len(his_manipulatedCoins)

                    his_child_list = []
                    for his_manipulatedCoin in his_manipulatedCoins:
                        his_child = his_manipulatedCoin.studentPurchase
                        manipulatedCoins_of_his_child = ManipulatedCoin.objects.filter(studentSales=his_child)

                        second_level_child_list = []
                        if manipulatedCoins_of_his_child:  # if this condition is true ,,then it means student are first or second level also
                            first_child_totalEarningByReferralCoins = manipulatedCoins_of_his_child.aggregate(totalEarning=Sum('coinChanged'))
                            main_parent_total_earning += first_child_totalEarningByReferralCoins['totalEarning']
                            main_parent_total_child += len(manipulatedCoins_of_his_child)

                            for mohc in manipulatedCoins_of_his_child:
                                child_of_his_child = mohc.studentPurchase
                                manipulatedCoins_of_child_of_his_child = ManipulatedCoin.objects.filter(studentSales=child_of_his_child)

                                third_level_child_list = []
                                if manipulatedCoins_of_child_of_his_child:
                                    is_student_in_level3 = True
                                    first_child_totalEarningByReferralCoins = manipulatedCoins_of_child_of_his_child.aggregate(totalEarning=Sum('coinChanged'))
                                    main_parent_total_earning += first_child_totalEarningByReferralCoins['totalEarning']
                                    main_parent_total_child += len(manipulatedCoins_of_child_of_his_child)

                                    for final in manipulatedCoins_of_child_of_his_child:
                                        final_student = final.studentPurchase
                                        dict = {'id': final_student.id, 'name': final_student.name,
                                                'photo': final_student.student.photo, 'date': final.date, 
                                                'coinChanged': final.coinChanged}
                                        third_level_child_list.append(dict)

                                    dict = {'id': child_of_his_child.id, 'name': child_of_his_child.name, 
                                            'photo': child_of_his_child.student.photo,
                                            'date': mohc.date, 'coinChanged': mohc.coinChanged, 
                                            'third_level_child_list': third_level_child_list}
                                    second_level_child_list.append(dict)

                                else:
                                    dict = {'id': child_of_his_child.id, 'name': child_of_his_child.name, 
                                            'photo': child_of_his_child.student.photo,
                                            'date': mohc.date, 'coinChanged': mohc.coinChanged, 
                                            'third_level_child_list': third_level_child_list}
                                    second_level_child_list.append(dict)

                        else:
                            pass

                        his_child_dict = {'id': his_child.id, 'name': his_child.name, 'photo': his_child.student.photo, 
                                          'date': his_manipulatedCoin.date,'coinChanged': his_manipulatedCoin.coinChanged, 
                                          'second_level_child_list': second_level_child_list}
                        his_child_list.append(his_child_dict)

                    if is_student_in_level3 == True:
                        firstLevel_student_dict = {'id': student.id, 'name': student.name, 'photo': student.student.photo,
                                                   'total_child': main_parent_total_child, 'totalEarning': main_parent_total_earning, 
                                                   'his_child_list': his_child_list}
                        thirdLevelStudents_list.append(firstLevel_student_dict)

                else:
                    pass

            context = {'status': 'success','thirdLevelStudents_list': thirdLevelStudents_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class AssignFreeCoinsNewTeacher(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        coin = TeacherCoin()
        coin.teacher = me.profile
        coin.coins += float(100)
        coin.save()
        context = {'status': 'success', 'message': 'Successfully Added'}
        return Response(context)

class TeacherGetOwnCoins(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            my_coins = TeacherCoin.objects.get(teacher=me.profile)
            coins = my_coins.coins
            context = {'coins': coins}
        except TeacherCoin.DoesNotExist:
            my_coins = TeacherCoin()
            my_coins.teacher = me.profile
            my_coins.coins = 0
            my_coins.save()
            context = {'coins': 0}
        except Exception as e:
            context = {'coins': 0, 'message': str(e)}
        return Response(context)

























class StudentRequestCoinBuy(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            student = StudentCoinBuyRequest.objects.filter(student__studentuser=me.profile.studentuser).last()
            context = {
                "name":student.name,"phone":student.phone,"pancard":student.pancard,
                "bank_name":student.bank_name,"branch_name":student.branch_name,
                "account_number":student.account_number,"ifsc":student.ifsc}
        except Exception as e:
            context = {}
        return Response(context)

    def post(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        student = Student.objects.filter(studentuser=me.profile.studentuser,institute=institute).first()
        data = request.data
        name = data['name']
        phone = data.get("phone")
        pancard = data['pancard']
        bank_name = data['bank_name']
        branch_name = data['branch_name']
        account_number = data.get("account_number", "")
        ifsc = data.get("ifsc", "")
        req_coin = data['req_coin']
        try:
            student_coin = StudentCoinBuyRequest()
            student_coin.student =student
            student_coin.name = name
            student_coin.phone = phone
            student_coin.pancard = pancard
            student_coin.bank_name = bank_name
            student_coin.branch_name = branch_name
            student_coin.account_number = account_number
            student_coin.ifsc = ifsc
            student_coin.req_coin = req_coin
            student_coin.save()
            context = {"status": True, "message": "Your Request Successfully Submitted "}
                
        except Exception as e:
            context = {"status": False, "message": str(e)}
        return Response(context)

class TeacherDownloadCSVForCoinsWithdrawRequest(APIView):
    def get(self, request, institute_code):
        try:
            institute = Institute.objects.get(code=institute_code)
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['S.No', 'Name', 'Mobile','Pan No', 'Bank Name','Branch Name','Account No', 'IFSC Code','Req. Coin','Withdraw'])
            students = StudentCoinBuyRequest.objects.filter(student__institute=institute,withdraw=False).order_by('-id')
            for student in students:
                writer.writerow([student.id, student.name, student.phone, student.pancard, student.bank_name,
                        student.branch_name, student.account_number, student.ifsc, student.req_coin,student.withdraw])
            response['Content-Disposition'] = 'attachment; filename="Coin withdrew request.csv"'
            return response
        except Exception as e:
            return HttpResponse('Failed')

class TeacherSeeWithdrawRequestList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        try:
            all_request = StudentCoinBuyRequest.objects.filter(student__institute=institute)

            student_list = []
            for request in all_request:
                student_dict = {
                    'id':request.id,
                    'student':request.student.name,
                    'name': request.name,
                    'phone': request.phone,
                    'coins': request.req_coin,
                    'created_at': request.created_at.date(),
                    'withdraw': request.withdraw,
                }
                student_list.append(student_dict)

                
            context = {'status': True, 'data': student_list}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class TeacherDoneWithdraw(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            request_id = data['request_id']
            student_request = StudentCoinBuyRequest.objects.get(id=int(request_id))
            if student_request.withdraw==False:
                student_coins = Coin.objects.get(student = student_request.student)
                total_coins = student_coins.coins
                withdraw_coins = student_request.req_coin
                if total_coins >= withdraw_coins:
                    remaining_coins = total_coins - withdraw_coins
                    student_coins.coins = remaining_coins
                    student_coins.save()
                student_request.withdraw = True
                student_request.save()
                context = {'status': True, 'message': 'Updated Successfully'}

            else:
                context = {'status': False, 'message': 'Already Withdraw'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

def gettingAllSubParents(parent_id):
    try:
        manipulateCoins = ManipulatedCoin.objects.get(studentPurchase__id=parent_id, reason='myRefferal')
        parent = manipulateCoins.studentSales
        subparent_coins = parent.institute.subparent_coins
        if parent:
            try:
                coin = Coin.objects.get(student=parent)
            except Coin.MultipleObjectsReturned:
                coins = Coin.objects.filter(student=parent).order_by('-id')[1:]
                for i in coins:
                    i.delete()
                coin = Coin.objects.get(student=parent)
            coin.coins += subparent_coins
            coin.save()
            try:
                app_token = parent.institute.serverKey
                deviceId = parent.firebaseToken
                message = f'You Earned {subparent_coins} coins through one of your referrals..'
                send_notification_individual(app_token, deviceId, message)
            except Exception as e:
                pass
            gettingAllSubParents(parent.id)
    except ManipulatedCoin.DoesNotExist:
        return 'Successffullyy'

class StudentApplyCouponCodeSubParent(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        his_coupon = data['other_coupon']        
        try:
            coinsRefferedTo = me.profile.institute.coinsRefferedTo_registration
            coinsRefferedFrom = me.profile.institute.coinsRefferedFrom_registration
            extendRefferedCoins = me.profile.institute.extendRefferedCoins
            subparent_coins =  me.profile.institute.subparent_coins

            src = StudentReferralCode.objects.get(code=his_coupon) 
            student_refferedfrom = src.student

            if student_refferedfrom == me.profile:
                context = {'status': 'Failed','message': 'Can\'t apply own coupon'}
                return Response(context)
            existingManipulationSales = ManipulatedCoin.objects.filter(student=me.profile)

            if len(existingManipulationSales) != 0:
                context = {'status': 'Failed','message': 'Code can only be applied once'}
                return Response(context)
            else:
                print('no transactins found')

                try:
                    my_coins = Coin.objects.get(student=me.profile)
                except Coin.MultipleObjectsReturned:
                    coins = Coin.objects.filter(student=me.profile).order_by('-id')[1:]
                    for i in coins:
                        i.delete()
                    my_coins = Coin.objects.get(student=me.profile)

                manipulator = ManipulatedCoin()
                manipulator.coin = my_coins
                manipulator.student = me.profile
                manipulator.code = his_coupon
                manipulator.coinChanged = coinsRefferedTo
                manipulator.studentSales = src.student
                manipulator.studentPurchase = me.profile
                manipulator.reason = 'otherStudentRefferal'
                manipulator.date = timezone.now()
                manipulator.save()
                my_coins.coins += coinsRefferedTo
                my_coins.save()

                try:
                    his_coins = Coin.objects.get(student=student_refferedfrom)
                except Coin.MultipleObjectsReturned:
                    coins = Coin.objects.filter(student=student_refferedfrom).order_by('-id')[1:]
                    for i in coins:
                        i.delete()
                    his_coins = Coin.objects.get(student=student_refferedfrom)

                manipulator = ManipulatedCoin()
                manipulator.coin = his_coins
                manipulator.student = src.student
                manipulator.code = his_coupon
                manipulator.coinChanged = coinsRefferedFrom
                manipulator.reason = 'myRefferal'
                manipulator.date = timezone.now()
                manipulator.studentSales = src.student
                manipulator.studentPurchase = me.profile
                manipulator.save()
                his_coins.coins += coinsRefferedFrom
                his_coins.save()
                manipulateCoins = ManipulatedCoin.objects.get(studentPurchase=src.student, reason='myRefferal')
                parent = manipulateCoins.studentSales

                try:
                    coin = Coin.objects.get(student=parent)
                except Coin.MultipleObjectsReturned:
                    coins = Coin.objects.filter(student=parent).order_by('-id')[1:]
                    for i in coins:
                        i.delete()
                    coin = Coin.objects.get(student=parent)

                coin.coins += extendRefferedCoins
                coin.save()

                try:
                    manipulateCoins = ManipulatedCoin.objects.filter(studentPurchase=parent, reason='myRefferal').last()
                    sub_parent = manipulateCoins.studentSales
                    try:
                        coin = Coin.objects.get(student=sub_parent)
                    except Coin.MultipleObjectsReturned:
                        coins = Coin.objects.filter(student=sub_parent).order_by('-id')[1:]
                        for i in coins:
                            i.delete()
                        coin = Coin.objects.get(student=sub_parent)

                    coin.coins += subparent_coins
                    coin.save()

                    try:
                        app_token = sub_parent.institute.serverKey
                        deviceId = sub_parent.firebaseToken
                        message = f'You Earned {subparent_coins} coins through one of your referrals..'
                        send_notification_individual(app_token, deviceId, message)
                    except Exception as e:
                        pass

                        
                except ManipulatedCoin.DoesNotExist:
                    pass

                context = {'status': 'Success','message': 'You got {} coin'.format(coinsRefferedTo)}
                return Response(context)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/tasks.py
--------------------------------------------------

from celery import shared_task
from celery_progress.backend import ProgressRecorder
from django.core.mail import EmailMessage
from django.contrib.auth.models import User, Group
from django.db.models import Q, Sum, Avg
from django.db.models import Sum, Count
from basicinformation.api.helperFunctions import *
from content.models import *
from membership.models import *
from gaming.models import *
from communication.models import *
from basicinformation.models import *
import json
import requests
from urllib.parse import urlparse
import boto3
from boto3.session import Session
from yt_dlp import YoutubeDL
from azure.storage.blob import BlobServiceClient
import os
import shutil
import subprocess
import re
import random
import time
from random import randint
import pytz
import datetime
from datetime import timedelta
import pandas as pd
import firebase_admin
from firebase_admin import credentials, messaging
from google.cloud import storage
from basicinformation.firebase_utils import initialize_firebase_with_json
from itertools import islice

details = f"/home/azureuser/bodhiai/basicinformation/details.json"

@shared_task
def send_email_multipurpose(subject:str, message:str, from_email:str, recipient_list:list,bcc:list=None,attachments:list=None,cc:list=None,reply_to:list=None,):
    try:
        email = EmailMessage(
            subject=subject,
            body=message,
            from_email=from_email,
            to=recipient_list,
            bcc=bcc,
            attachments=attachments,
            cc=cc,
            reply_to=reply_to,
        ) 
        res = email.send()
        return res
    except Exception as e:
        return str(e)

@shared_task
def send_notification_to_multipurpose(serverKey = None,notification = None,data = None,teacher_id = None,student_id = None,batch_id = None,package_id = None,group_id = None,institute_id = None):
    try:
        request_body = {}
        if notification == None:
            request_body['notification'] = {
                "title": f"ALERT",
                "body": 'Notification',
                "image": "https://static.wixstatic.com/media/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png/v1/fill/w_192%2Ch_192%2Clg_1%2Cusm_0.66_1.00_0.01/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png"
            }
        else:
            request_body['notification'] = notification

        if data == None:
            request_body['data'] = {"click_action": "FLUTTER_NOTIFICATION_CLICK",}
        else:
            request_body['data'] = data

        url = 'https://fcm.googleapis.com/fcm/send'
        
        headers_fcm = {
            'Authorization': f'key={serverKey}',
            'Content-Type': 'application/json'
        }

        deviceIdList = set()
        if teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)
            deviceId = teacher.firebaseToken
            deviceIdList.add(deviceId)
            
        if student_id:
            student = Student.objects.get(id=student_id)
            deviceId = student.firebaseToken
            deviceIdList.add(deviceId)
            
        if batch_id:
            batch = Batch.objects.get(id=batch_id)
            students = batch.studentbatch.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if package_id:
            package = Package.objects.get(id=package_id)
            students = package.students.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if group_id:
            group = StudentGroup.objects.get(id=group_id)
            students = group.student.all()
            teachers = group.teacher.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                teacher_firebox = TeacherFirebaseToken.objects.filter(teacher=teacher.id)
                for teacher in teacher_firebox:
                    deviceId = teacher.firebaseToken
                    deviceIdList.add(deviceId)

        if institute_id:
            students = Student.objects.filter(institute=institute_id)
            teachers = Teacher.objects.filter(institute=institute_id)
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                deviceId = teacher.firebaseToken
                deviceIdList.add(deviceId)

        for deviceId in deviceIdList:
            request_body["to"] = deviceId

            request_result = requests.post(url, headers=headers_fcm, data=json.dumps(request_body))
            print(request_result.text)

        return {"status": "success", 'last_request_response': request_result.text}
    except Exception as e:
        return {"status": "failed", 'error':str(e)}
    
@shared_task
def send_notification_to_multipurpose_new(json_file_url = None,notification = None,data = None,teacher_id = None,student_id = None,batch_id = None,package_id = None,group_id = None,institute_id = None):
    try:
        if not firebase_admin._apps:
            initialize_firebase_with_json(json_file_url)
        
        if notification is None:
            notification = {
                "title": "ALERT", 
                "body": "Notification",
                "image": "https://static.wixstatic.com/media/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png/v1/fill/w_192%2Ch_192%2Clg_1%2Cusm_0.66_1.00_0.01/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png"
            }

        if data is None:
            data = {"click_action": "FLUTTER_NOTIFICATION_CLICK"}
        
        deviceIdList = set()
        if student_id:
            student = Student.objects.get(id=student_id)
            deviceId = student.firebaseToken
            deviceIdList.add(deviceId)
            
        if teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)
            deviceId = teacher.firebaseToken
            deviceIdList.add(deviceId)
            
        if batch_id:
            batch = Batch.objects.get(id=batch_id)
            students = batch.studentbatch.all()
            for student in students:
                print(student.name)
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if package_id:
            package = Package.objects.get(id=package_id)
            students = package.students.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if group_id:
            group = StudentGroup.objects.get(id=group_id)
            students = group.student.all()
            teachers = group.teacher.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                teacher_firebox = TeacherFirebaseToken.objects.filter(teacher=teacher.id)
                for teacher in teacher_firebox:
                    deviceId = teacher.firebaseToken
                    deviceIdList.add(deviceId)

        if institute_id:
            students = Student.objects.filter(institute=institute_id)
            teachers = Teacher.objects.filter(institute=institute_id)
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                deviceId = teacher.firebaseToken
                deviceIdList.add(deviceId)

        for deviceId in deviceIdList:
            message = messaging.Message(
                notification = messaging.Notification(
                    title = notification['title'], 
                    body = notification['body'], 
                    image=notification.get('image') if 'image' in notification else None),
                data = data,
                token = deviceId,
            )
            try:
                response = messaging.send(message)
                print('Successfully Sent Message:', response)
            except Exception as e:
                print(str(e))
                
        context = {'status':'success', 'message':'Notification Sent Successfully'}

    except Exception as e:
        print(str(e))
        context = {'status': 'failed', 'error':str(e)}
        
    return context
   
def chunks(iterable, size):
    for i in range(0, len(iterable), size):
        yield iterable[i:i + size]
     
@shared_task
def send_notification_to_multipurpose_bulk(json_file_url = None,notification = None,data = None,teacher_id = None,student_id = None,batch_id = None,package_id = None,group_id = None,institute_id = None):
    try:
        initialize_firebase_with_json(json_file_url)
        
        if notification is None:
            notification = {
                "title": "ALERT", 
                "body": "Notification",
                "image": "https://static.wixstatic.com/media/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png/v1/fill/w_192%2Ch_192%2Clg_1%2Cusm_0.66_1.00_0.01/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png"
            }

        if data is None:
            data = {"click_action": "FLUTTER_NOTIFICATION_CLICK"}
        
        deviceIdList = set()
        if student_id:
            student = Student.objects.get(id=student_id)
            deviceId = student.firebaseToken
            deviceIdList.add(deviceId)
            
        if teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)
            deviceId = teacher.firebaseToken
            deviceIdList.add(deviceId)
            
        if batch_id:
            batch = Batch.objects.get(id=batch_id)
            students = batch.studentbatch.all()
            for student in students:
                print(student.name)
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if package_id:
            package = Package.objects.get(id=package_id)
            students = package.students.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
                
        if group_id:
            group = StudentGroup.objects.get(id=group_id)
            students = group.student.all()
            teachers = group.teacher.all()
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                teacher_firebox = TeacherFirebaseToken.objects.filter(teacher=teacher.id)
                for teacher in teacher_firebox:
                    deviceId = teacher.firebaseToken
                    deviceIdList.add(deviceId)

        if institute_id:
            students = Student.objects.filter(institute=institute_id)
            teachers = Teacher.objects.filter(institute=institute_id)
            for student in students:
                deviceId = student.firebaseToken
                deviceIdList.add(deviceId)
            for teacher in teachers:
                deviceId = teacher.firebaseToken
                deviceIdList.add(deviceId)
                
        device_tokens = [token for token in deviceIdList if isinstance(token, str) and token]
        print("Device Tokens:", device_tokens)
        
        for token_chunk in chunks(device_tokens, 500):
            if not all(isinstance(token, str) for token in token_chunk):
                raise ValueError("token_chunk must contain only strings")
            
            message = messaging.MulticastMessage(
                notification=messaging.Notification(
                    title=notification['title'],
                    body=notification['body'],
                    image=notification.get('image')
                ),
                data=data,
                tokens=token_chunk  # A chunk of device tokens (up to 500)
            )
            
            response = messaging.send_multicast(message)

            print(f'Successfully sent {response.success_count} messages out of {len(token_chunk)}')
            
            if response.failure_count > 0:
                for idx, resp in enumerate(response.responses):
                    if not resp.success:
                        print(f"Failed to send message to {token_chunk[idx]}: {resp.exception}")
                
        context = {'status': 'success', 'message': 'Notifications sent successfully'}

    except Exception as e:
        print(str(e))
        context = {'status': 'failed', 'error':str(e)}
        
    return context
        
        
@shared_task
def meethour_developer_pack_payment_refresh():
    try:
        from basicinformation.cron import meethour_developer_pack_payment
        meethour_developer_pack_payment()
        return "success"
    except Exception as e:
        return str(e)







@shared_task
def upload_s3_recorded_video_to_azure_server(recorded_video_id):
    rec_video = RecordedVideo.objects.get(id=recorded_video_id)
    link = rec_video.link

    try:
        if link:
            if "cloudfront.net/" in link:
                file_title = link.split("cloudfront.net/")[-1]
            elif "s3.amazonaws.com/" in link:
                file_title = link.split("s3.amazonaws.com/")[-1]
            else:
                return "failed"

            storage_account_name = "bodhiaigeneral"
            connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
            container_name = "bodhiai-recorded-video"

            blob_service_client = BlobServiceClient.from_connection_string(connection_string)

            response = requests.get(link)
            if response.status_code == 200:
                unique_code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
                address = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}"
                open(address, "wb").write(response.content)
                try:
                    blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_title)
                    with open(address, "rb") as data:
                        blob_client.upload_blob(data)
                        print(f"Uploaded {file_title}.")
                    Link_new = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_title}"
                    rec_video.link = Link_new
                    rec_video.save()
                    res = Link_new

                except Exception as e:
                    res = str(e)
                os.remove(address)
            else:
                res = "failed"

    except Exception as e:
        res = str(e)

    return res

@shared_task
def find_s3_recorded_videos_new(teacher_id, access_key, secret_key, bucket_name, cloudfront=None):
    teacher = Teacher.objects.get(id=teacher_id)
    gcloud_bucket_name = "bodhiai_recorded_videos"
    s3 = boto3.client('s3',aws_access_key_id=access_key,aws_secret_access_key=secret_key)
    response = s3.list_buckets()
    session = Session(aws_access_key_id=access_key,aws_secret_access_key=secret_key)
    s3_res = session.resource('s3')
    my_batches = teacher.batches.all()
    
    for buck in response['Buckets']:
        if f'{bucket_name}' in buck["Name"]:
            buck_obj = s3_res.Bucket(buck['Name'])
            for fi in buck_obj.objects.all():
                
                if teacher.mainTeacher:
                    all_teachers = Teacher.objects.filter(institute=teacher.institute)
                    for at in all_teachers:
                        at_username = at.teacheruser.username
                        if at_username+'_2022' in fi.key or \
                                at_username+'-2022' in fi.key or \
                                at_username+'_2023' in fi.key or \
                                at_username+'-2023' in fi.key or \
                                at_username+'_2024' in fi.key or \
                                at_username+'-2024' in fi.key:
                              
                            if cloudfront:
                                url_c = f'https://{cloudfront}/{fi.key}'
                            else:
                                url_c = None
                                
                            url_a = f'https://{fi.bucket_name}.s3.amazonaws.com/{fi.key}'
                            
                            url_azure =f"https://storage.googleapis.com/{gcloud_bucket_name}/{fi.key}"
                            
                            recordedVideo = RecordedVideo.objects.filter(link__in=[url_a, url_c, url_azure]).order_by('-id')

                            if len(recordedVideo) == 0:
                                title_fi = fi.key.split('/')[-1]
                                final_title = str(title_fi.split('.')[0])
                                recordedVideo = RecordedVideo()
                                
                                if url_c:
                                    recordedVideo.link = url_c
                                else:
                                    recordedVideo.link = url_a
                                    
                                recordedVideo.title = final_title
                                recordedVideo.teacher = at
                                recordedVideo.save()
                                upload_s3_recorded_video_to_gcloud(recordedVideo.id)
                                recordedVideo.batches.add(*my_batches)

                            elif len(recordedVideo) == 1:
                                rcvideo = recordedVideo.first()
                                if rcvideo.link != url_azure:
                                    upload_s3_recorded_video_to_gcloud(rcvideo.id)
                            
                            else:
                                for ind, rv in enumerate(recordedVideo):
                                    if ind != 0:
                                        rv.delete()

                else:
                    if teacher.teacheruser.username+'_2022' in fi.key or teacher.teacheruser.username+'-2022' in fi.key\
                            or teacher.teacheruser.username+'-2023' in fi.key or teacher.teacheruser.username+'-2023' in fi.key \
                            or teacher.teacheruser.username+'-2024' in fi.key or teacher.teacheruser.username+'-2024' in fi.key:

                        if cloudfront:
                            url_c = f'https://{cloudfront}/{fi.key}'
                        else:
                            url_c = None

                        url_a = f'https://{fi.bucket_name}.s3.amazonaws.com/{fi.key}'
                        url_azure =f"https://storage.googleapis.com/{gcloud_bucket_name}/{fi.key}"

                        try:
                            rcvideo = RecordedVideo.objects.get(link__in=[url_a, url_c, url_azure])
                            if rcvideo.link != url_azure:
                                rcvideo = recordedVideo.first()
                                upload_s3_recorded_video_to_gcloud(rcvideo.id)
                            
                        except RecordedVideo.DoesNotExist:
                            title_fi = fi.key.split('/')[-1]
                            final_title = str(title_fi.split('.')[0])
                            recordedVideo = RecordedVideo()
                            
                            if url_c:
                                recordedVideo.link = url_c
                            else:
                                recordedVideo.link = url_a
                                
                            recordedVideo.title = final_title
                            recordedVideo.teacher = teacher
                            recordedVideo.save()
                            upload_s3_recorded_video_to_gcloud(recordedVideo.id)
                            recordedVideo.batches.add(*my_batches)

    return 'found'

@shared_task
def upload_s3_recorded_video_to_gcloud(recorded_video_id):
    rec_video = RecordedVideo.objects.get(id=recorded_video_id)
    link = rec_video.link

    try:
        if link:
            if "cloudfront.net/" in link:
                file_title = link.split("cloudfront.net/")[-1]
            elif "s3.amazonaws.com/" in link:
                file_title = link.split("s3.amazonaws.com/")[-1]
            else:
                return "failed"
            
            response = requests.get(link)
            
            if response.status_code == 200:
                bucket_name = "bodhiai_recorded_videos"
                unique_code = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
                address = f"/home/azureuser/bodhiai/basicinformation/temp/{unique_code}"
                open(address, "wb").write(response.content)
                try:
                    storage_client = storage.Client.from_service_account_json(details)
                    blob = storage_client.bucket(bucket_name).blob(file_title)
                    
                    with open(address, "rb") as data:
                        blob.upload_from_file(data)
                        
                    Link_new = f"https://storage.googleapis.com/{bucket_name}/{file_title}"
                    rec_video.link = Link_new
                    rec_video.save()
                    res = Link_new

                except Exception as e:
                    res = str(e)
                os.remove(address)
            else:
                res = "failed"

    except Exception as e:
        res = str(e)

    return res


@shared_task
def upload_yt_video_to_azure_server(video_id, teacher_id):
    teacher = Teacher.objects.get(id=teacher_id)
    try:
        video = Video.objects.get(id=video_id, download_link__isnull=True)
    except:
        return "already exist"
    
    urlLink = video.urlLink
    unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    dir_name = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}/"
    os.mkdir(dir_name)
    
    try:
        storage_account_name = "bodhiaigeneral"
        connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
        container_name = "bodhiai-yt-videos"

        ydl_opts = {"outtmpl" : f'{dir_name}video.mp4'}
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(urlLink, download=True)

        title = info['title'].replace(" ","-")

        blob_service_client = BlobServiceClient.from_connection_string(connection_string)
        new_timezone = pytz.timezone('Asia/Kolkata')
        time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
        file_name = f"{teacher.teacheruser.username}/{time}/{unique_code}/video.mp4"
        blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_name)
        with open(f'{dir_name}video.mp4', "rb") as data:
            blob_client.upload_blob(data)

        res = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_name}"

        video.download_link = res
        video.save()

    except Exception as e:
        res = str(e)

    shutil.rmtree(dir_name)
    return res


@shared_task
def upload_yt_live_video_to_azure_server(video_id):
    video = LiveVideoLink.objects.get(id=video_id)
    teacher = video.teacher
    urlLink = video.link
    unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    dir_name = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}/"
    os.mkdir(dir_name)
    try:
        storage_account_name = "bodhiaigeneral"
        connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
        container_name = "bodhiai-yt-videos"

        ydl_opts = {"outtmpl" : f'{dir_name}video.mp4'}
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(urlLink, download=True)

        title = info['title'].replace(" ","-")

        blob_service_client = BlobServiceClient.from_connection_string(connection_string)
        new_timezone = pytz.timezone('Asia/Kolkata')
        time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
        file_name = f"{teacher.teacheruser.username}/{time}/{unique_code}/video.mp4"
        blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_name)
        with open(f'{dir_name}video.mp4', "rb") as data:
            blob_client.upload_blob(data)

        res = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_name}"

        video.download_link = res
        video.save()

    except Exception as e:
        res = str(e)

    shutil.rmtree(dir_name)
    return res

@shared_task
def upload_s3_to_azure_server(video_id):
    video = Video.objects.get(id=video_id)
    urlLink_old = video.urlLink
    lowlink_old = video.lowlink
    highlink_old = video.highlink
    try:
        if urlLink_old:
            if "cloudfront.net/" in urlLink_old:
                file_title = urlLink_old.split("cloudfront.net/")[-1]
            elif "s3.amazonaws.com/" in urlLink_old:
                file_title = urlLink_old.split("s3.amazonaws.com/")[-1]
            else:
                return "failed"

            storage_account_name = "bodhiaigeneral"
            connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
            container_name = "bodhiai-videos"

            blob_service_client = BlobServiceClient.from_connection_string(connection_string)
            response = requests.get(urlLink_old)
            
            if response.status_code == 200:
                import random
                import string
                unique_code = ''.join(random.choices(
                    string.ascii_letters + string.digits, k=16))
                address = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}"
                open(address, "wb").write(response.content)

                try:
                    blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_title)
                    with open(address, "rb") as data:
                        blob_client.upload_blob(data)
                        print(f"Uploaded {file_title}.")
                    os.remove(address)
                    urlLink_new = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_title}"
                    video.urlLink = urlLink_new
                    video.save()
                except:
                    pass
                os.remove(address)
    except:
        pass
    try:

        if lowlink_old:
            if "cloudfront.net/" in lowlink_old:
                file_title = lowlink_old.split("cloudfront.net/")[-1]
            elif "s3.amazonaws.com/" in lowlink_old:
                file_title = lowlink_old.split("s3.amazonaws.com/")[-1]
            else:
                return "failed"

            storage_account_name = "bodhiaigeneral"
            connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
            container_name = "bodhiai-videos"

            blob_service_client = BlobServiceClient.from_connection_string(
                connection_string)

            response = requests.get(lowlink_old)
            if response.status_code == 200:
                import random
                import string
                unique_code = ''.join(random.choices(
                    string.ascii_letters + string.digits, k=16))
                address = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}"
                open(address, "wb").write(response.content)

                try:
                    blob_client = blob_service_client.get_blob_client(
                        container=container_name, blob=file_title)
                    with open(address, "rb") as data:
                        blob_client.upload_blob(data)
                        print(f"Uploaded {file_title}.")
                    os.remove(address)
                    lowlink_new = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_title}"
                    video.lowlink = lowlink_new
                    video.save()
                except:
                    pass
                os.remove(address)
    except:
        pass
    try:

        if highlink_old:
            if "cloudfront.net/" in highlink_old:
                file_title = highlink_old.split("cloudfront.net/")[-1]
            elif "s3.amazonaws.com/" in highlink_old:
                file_title = highlink_old.split("s3.amazonaws.com/")[-1]
            else:
                return "failed"

            storage_account_name = "bodhiaigeneral"
            connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
            container_name = "bodhiai-videos"

            blob_service_client = BlobServiceClient.from_connection_string(
                connection_string)

            response = requests.get(highlink_old)
            if response.status_code == 200:
                import random
                import string
                unique_code = ''.join(random.choices(
                    string.ascii_letters + string.digits, k=16))
                address = f"/home/bodhiai/bodhiai/basicinformation/temp/{unique_code}"
                open(address, "wb").write(response.content)

                try:
                    blob_client = blob_service_client.get_blob_client(
                        container=container_name, blob=file_title)
                    with open(address, "rb") as data:
                        blob_client.upload_blob(data)
                        print(f"Uploaded {file_title}.")
                    os.remove(address)
                    highlink_new = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_title}"
                    video.highlink = highlink_new
                    video.save()
                except:
                    pass
                os.remove(address)
    except:
        pass

    return "success"



@shared_task
def send_notification(token, deviceId, message, typeMessage, ttl=20000):
    url = 'https://fcm.googleapis.com/fcm/send'
    headers_fcm = {'Authorization': 'key={}'.format(token), 'Content-Type': 'application/json'}
    notification_data = {'click_action': 'FLUTTER_NOTIFICATION_CLICK', 'id': '{}'.format(
            typeMessage), 'sound': 'default', 'time_to_live': ttl}
    data = {'to': 'key={}'.format(deviceId), 'priority': 'high', 'notification': {
            'body': message}, "data": notification_data}
    r = requests.post(url, headers=headers_fcm, data=json.dumps(data))
    return r


@shared_task
def send_doubt_call_notification(token, deviceId, message, typeMessage, ttl=20000):
    url = 'https://fcm.googleapis.com/fcm/send'
    headers_fcm = {'Authorization': 'key={}'.format(
        token), 'Content-Type': 'application/json'}
    notification_data = {'click_action': 'FLUTTER_NOTIFICATION_CLICK', 'id': '{}'.format(
            typeMessage), 'sound': 'default', 'time_to_live': ttl}
    data = {'to': 'key={}'.format(deviceId), 'priority': 'high', 'notification': {
            'channel_id': 'teacher_channel', 'android_channel_id': 'teacher_channel', 'body': message}, "data": notification_data}
    r = requests.post(url, headers=headers_fcm, data=json.dumps(data))
    print(r.text)



@shared_task
def doubt_publish_notification(course, student_name):
    serverKey =\
        'AAAAdOx1CrI:APA91bFrG4KnIYjW8uEt21eux48ydwAtg7RAjXL6ckGsOqoJI31U7i8SWJ9GNfaQSRG-xYPd-FB9HMWb6FAhQrXZauz2qWp2H_OYIAXlxeNjFGEUWn1pkAroKGo6E2eWd6HWfnArF1wG'
    to_text = 'New Doubt: Answer fast or some other teacher will get the doubt.'
    teacher_details =\
        TeacherDetails.objects.filter(course__name=course)
    for td in teacher_details:
        teacher = td.teacher
        firebaseToken = teacher.firebaseToken
        send_notification(serverKey, firebaseToken, to_text, 2)


@shared_task
def welcome_notification_via_email(to_email, app_link, teacher_name, institute_name):
    from django.template.loader import render_to_string
    from django.core import mail
    subject = 'Bodhi AI - Congratulations ! Your teaching app {} is ready.'.format(
        institute_name)



















































                                

                    
                



































































































        




        



        
















        


    








                
            

                
            




            
            

            

            
            
            

    



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/models.py
--------------------------------------------------

from ast import Str
from django.db import models
from membership.models import *
from content.models import *

class VideoBanner(models.Model):
    link = models.URLField(max_length=5000)
    
    def __str__(self):
        return str(self.id)
    
class Banner(models.Model):
    link = models.URLField(max_length=1000)
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    package = models.ForeignKey(Package, null=True, blank=True, on_delete=models.SET_NULL)
    video = models.URLField(max_length=5000,null=True,blank=True)

    def __str__(self):
        return self.institute.name

class GoogleAppStoreLatestVersion(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    version = models.IntegerField()
    date = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.institute.name + ' ' + str(self.version)

class GoogleAppStoreTeacherLatestVersion(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    version = models.IntegerField()
    date = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return str(self.version)

class StudentDeviceId(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    deviceId = models.TextField()

    def __str__(self):
        return self.student.name

class TeacherNumber(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    phone = models.BigIntegerField()
    name = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return self.institute.name + ' ' + str(self.phone)

class BatchChangeRequest(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    batches = models.ManyToManyField(Batch)
    date = models.DateTimeField(auto_now=True, editable=True)
    active = models.BooleanField(default=True)

    def __str__(self):
        return str(self.student.name)

class AppServerKey(models.Model):
    serverKey = models.TextField()

    def __str__(self):
        return self.serverKey

class AboutUsBanner(models.Model):
    link = models.URLField(max_length=1000)
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)

    def __str__(self):
        return self.institute.name

class AboutUsDescription(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    description = models.TextField()

    def __str__(self):
        return self.institute.name

class TeacherIssue(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    mainFeature = models.CharField(max_length=200)
    feature = models.CharField(max_length=200)
    description = models.TextField()
    typeIssue = models.CharField(max_length=100)
    time = models.DateTimeField(auto_now=True, editable=True)
    received = models.BooleanField(default=False)
    receiveTime = models.DateTimeField(blank=True, null=True)
    resolved = models.BooleanField(default=False)
    resolveTime = models.DateTimeField(blank=True, null=True)
    screenshot = models.URLField(blank=True, null=True, max_length=2000)
    revertMessage = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.mainFeature + ' ' + self.teacher.name+' ' +\
            self.description + '            \n                                          Received:  ' + str(self.received) + \
            '    \t\tResolved: ' + str(self.resolved) + ' Date:' +\
            str(self.time)

    def teacherDeatil(self):
        teacherDeatil = str(self.teacher) + ' ' + \
            str(self.teacher.institute.typeInstitute)
        return teacherDeatil

class SMSCount(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.SET_NULL, null=True, blank=True)
    remaining = models.IntegerField()
    sent = models.IntegerField()

    def __str__(self):
        try:
            return self.institute.name + ', remaining is:' + str(self.remaining) + ', total send is:' + str(str(self.sent))
        except:
            return 'remaining is:' + str(self.remaining) + ', total send is:' + str(str(self.sent))

class SMSPackageBought(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.SET_NULL, null=True, blank=True)
    count = models.IntegerField()
    date = models.DateTimeField()
    amount = models.FloatField()

    def __str__(self):
        return self.institute.name + ' ' + str(self.amount) + ' ' + str(self.date)

class IndividualSMS(models.Model):
    smsTo = models.ForeignKey(Student, related_name='smsTo_student',on_delete=models.SET_NULL, null=True, blank=True)
    phone = models.CharField(max_length=31, null=True, blank=True)
    smsText = models.TextField()
    date = models.DateTimeField()
    typeMessage = models.CharField(max_length=30)

    def __str__(self):
        try:
            return self.smsTo.name + ' ' + self.smsTo.institute.name
        except:
            return str(self.smsText)

class RefferalUrl(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    shared = models.BooleanField(default=False)
    date = models.DateTimeField(default=timezone.now, blank=True, null=True)
    number = models.IntegerField(default=0)
    facebook = models.URLField(max_length=1000, default='https://www.facebook.com/bodhiai/')
    instagram = models.URLField(max_length=1000, default='https://www.instagram.com/bodhi_ai/?hl=en')
    youtube = models.URLField(max_length=1000, default='https://www.youtube.com/channel/UCrcZf8dGWj-7SbHu2ZD5i7g')
    linkedin = models.URLField(max_length=1000, default='https://in.linkedin.com/company/bodhiai')
    thumbnail = models.URLField(max_length=1000, default='https://in.linkedin.com/company/bodhiai')
    sharedLead = models.IntegerField(default=0)
    date = models.DateTimeField(default=timezone.now, blank=True, null=True)

    def __str__(self):
        return self.teacher.name


class FirebaseProject(models.Model):
    name = models.CharField(max_length=200, null=True, blank=True)
    apps = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return self.name + ' ' + str(self.apps)

class WebappFeedback(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE, null=True, blank=True)
    user = models.CharField(max_length=100, blank=True, null=True)
    feedback = models.CharField(max_length=500, blank=True, null=True)
    feedbackType = models.CharField(max_length=500, blank=True, null=True)
    date = models.DateField(auto_now_add=True)
    callrecording = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.institute.name

class TutorialPoster(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    title = models.CharField(max_length=500, null=True, blank=True)
    link = models.URLField(max_length=2000)
    thumbnail = models.URLField(max_length=2000, null=True, blank=True)
    uploadDate = models.DateTimeField(auto_now=True, editable=True)
    publish = models.BooleanField(default=True)

    def __str__(self):
        return self.institute.name

class StudentBookmark(models.Model):
    student = models.OneToOneField(Student, on_delete=models.CASCADE)
    questions = models.ManyToManyField(Question, blank=True, related_name='bookmark_questions')
    videos = models.ManyToManyField(Video, blank=True, related_name='bookmark_videos')
    tests = models.ManyToManyField(Test, blank=True, related_name='bookmark_tests')
    notes = models.ManyToManyField(Note, blank=True, related_name='bookmark_notes')

    def __str__(self):
        return str(self.student.name)

class AgoraCodeLive(models.Model):
    code = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return self.code

class UpdatedAgoraCode(models.Model):
    code = models.CharField(max_length=500, blank=True, null=True)
    updateTime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return self.code + ' ' + str(self.updateTime)

class StudentDeviceLimitation(models.Model):
    deviceId = models.TextField()
    username = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.username

class CurrencyType(models.Model):
    type = models.CharField(max_length=100)
    icon = models.URLField(max_length=300, blank=True, null=True)
    institutes = models.ManyToManyField(Institute, blank=True, related_name='institute_Currency')

    def __str__(self):
        return self.type

class TeacherAppFooterBanner(models.Model):
    banner_category = (
        ('HomePage', 'HomePage'),
        ('Management', 'Management'),
        ('Content', 'Content'),
        ('Marketing', 'Marketing'),
        ('Communication', 'Communication')
    )
    bannerCategory = models.CharField(
        choices=banner_category, max_length=20, default='HomePage', verbose_name='banner Category')
    thumnail = models.URLField(max_length=300, blank=True, null=True)
    url = models.URLField(max_length=300, blank=True, null=True)
    disable = models.BooleanField(default=False)

    def __str__(self):
        return self.thumnail

class TeacherEnquiry(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name='enquiry_teacher')
    courses = models.ManyToManyField(Course, blank=True, related_name='enquiry_courses')
    contact = models.BigIntegerField(null=True, blank=True)
    experience = models.FloatField(null=True, blank=True)
    address = models.CharField(max_length=200, blank=True, null=True)
    resolved = models.BooleanField(default=False)
    enquiryTime = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.teacher

class TeacherFirebaseToken(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, null=True, blank=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    deviceId = models.TextField(blank=True, null=True)
    time = models.DateTimeField(auto_now=True, editable=True)

class StudentPackageActivitie(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='activitie_student')
    package = models.ForeignKey(Package, on_delete=models.CASCADE, related_name='activitie_package', null=True, blank=True)
    activitieTime = models.DateTimeField(auto_now=True, editable=True)
    numberOfNotifications = models.IntegerField(default=0)
    sendReminder = models.BooleanField(default=True)

    def __str__(self):
        return self.student.name + ' ' + self.package.title

class Error(models.Model):
    student = models.ForeignKey(Student, on_delete=models.SET_NULL, related_name='error_student', blank=True, null=True)
    package = models.CharField(max_length=5000, null=True, blank=True)
    payPrice = models.FloatField(null=True, blank=True)
    error = models.CharField(max_length=5000, null=True, blank=True)
    time = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.student.name

class UnknownUserEnquiry(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE, related_name='error_institute')
    name = models.CharField(max_length=200)
    userClass = models.CharField(max_length=200, blank=True, null=True)
    subject = models.CharField(max_length=200, blank=True, null=True)
    experience = models.CharField(max_length=500, null=True, blank=True)
    address = models.CharField(max_length=1000, blank=True, null=True)
    address2 = models.CharField(max_length=1000, blank=True, null=True)
    landmark = models.CharField(max_length=1000, blank=True, null=True)
    tutorPreference = models.CharField(max_length=100, blank=True, null=True)
    gender = models.CharField(max_length=100, blank=True, null=True)
    timeWiseFees = models.CharField(max_length=200, blank=True, null=True)
    userType = models.CharField(null=True, blank=True, max_length=50)
    idProof = models.URLField(max_length=3000, null=True, blank=True)
    idProof2 = models.URLField(max_length=3000, null=True, blank=True)
    profilePicture = models.URLField(max_length=3000, null=True, blank=True)
    aboutUser = models.TextField(null=True, blank=True)
    fees = models.FloatField(null=True, blank=True)
    enquiryTime = models.DateTimeField(auto_now=True, editable=True)
    contact = models.BigIntegerField(null=True, blank=True)
    alternativeContact = models.BigIntegerField(null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + self.userType

class MarketingVideo(models.Model):
    title = models.CharField(max_length=500, blank=True, null=True)
    url = models.URLField(max_length=5000)

    def __str__(self):
        return self.title + ' ' + self.url

class TeacherAppMarquee(models.Model):
    institute_type = (
        ('Premium', 'Premium'),
        ('webapp', 'webapp'),
    )
    instituteType = models.CharField(choices=institute_type, max_length=20, default='Premium', verbose_name='institute_type')
    announcement = models.TextField(null=True, blank=True)
    active = models.BooleanField(default=False)

    def __str__(self):
        return str(self.active) + ' ' + self.instituteType

class TeacherPackageActivitie(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, related_name='activitie_teacher')
    package = models.ForeignKey(Package, on_delete=models.CASCADE,
                                related_name='activitie_teacher_package', null=True, blank=True)
    activitieTime = models.DateTimeField(auto_now=True, editable=True)
    reminderFor = models.CharField(max_length=100, default='add-package')

    def __str__(self):
        return self.teacher.name + ' ' + self.package.title + ' ' + self.reminderFor

class TeacherRequestStudyContent(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='study_content_request_teacher',
                                on_delete=models.SET_NULL, null=True, blank=True)
    teacher_course = models.ForeignKey(
        TeacherCourse, related_name='study_content_course', on_delete=models.SET_NULL, null=True, blank=True)
    message = models.TextField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.teacher.name + ' ' + self.teacher_course.name

class ComplaintPicture(models.Model):
    picture = models.URLField(max_length=5000)

    def __str__(self):
        return self.picture

class Complaint(models.Model):
    student = models.ForeignKey(Student, on_delete=models.SET_NULL,
                                related_name='complaint_student', null=True, blank=True)
    complaint_pictures = models.ManyToManyField(
        ComplaintPicture, blank=True, related_name='complaint_pictures')
    father_name = models.CharField(max_length=50, null=True, blank=True)
    area = models.CharField(max_length=200, null=True, blank=True)
    contact = models.BigIntegerField()
    name = models.CharField(max_length=50)
    complaint = models.TextField()
    resolved = models.BooleanField(default=False)
    time = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.name   




class PrincipleFirebaseToken(models.Model):
    principle = models.ForeignKey(Principle, on_delete=models.CASCADE, null=True, blank=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    deviceId = models.TextField(blank=True, null=True)
    time = models.DateTimeField(auto_now=True, editable=True)

class OldInstitute(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, null=True, blank=True)
    institute = models.CharField(max_length=2000, null=True, blank=True)
    time = models.DateField(null=True, blank=True)

    def __str__(self):
        return self.teacher.name 

from django.db import transaction
class CSAIdCard(models.Model):
    student = models.OneToOneField(Student, on_delete=models.CASCADE,related_name='csa_card_student', null=True, blank=True)
    name = models.CharField(max_length=2000, null=True, blank=True)
    institute = models.CharField(max_length=2000, null=True, blank=True)
    address = models.CharField(max_length=2000, null=True, blank=True)
    medium = models.CharField(max_length=2000, null=True, blank=True)
    classes = models.CharField(max_length=2000, null=True, blank=True)
    phone_number = models.BigIntegerField(null=True, blank=True)
    board = models.CharField(max_length=2000, null=True, blank=True)
    created = models.DateField(auto_now=True, editable=True)
    photo = models.URLField(max_length=1000, blank=True, null=True)
    id_card_number = models.CharField(max_length=10, blank=True, null=True)

    def __str__(self):
        return str(self.name)

class PaidCSAIdCardStudent(models.Model):
    name = models.ForeignKey(CSAIdCard, on_delete=models.CASCADE, null=True, blank=True)
    paidAmount =models.FloatField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.name)


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/cron.py
--------------------------------------------------

from membership.models import *
from basicinformation.models import *
from django.utils import timezone
from basicinformation.tasks import *
import random
from random import randint
from content.models import *
from management.models import *
from gaming.models import *
import requests
from django.db.models import Sum, Q, F
import subprocess
import pytz
import datetime
import logging
from django.db.models import Prefetch
from django.utils.timezone import make_aware
from datetime import datetime as dt

logger = logging.getLogger(__name__)
def project_backup_every_day():
    new_timezone = pytz.timezone('Asia/Kolkata')
    time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M"))
    project_backup = f"tar -czvf /home/azureuser/1_project_backup/project_{time}.tar.gz /home/azureuser/bodhiai/"
    print(project_backup)
    process = subprocess.Popen(project_backup.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    return 200

def my_scheduled_job():
    agora_code = AgoraCodeLive.objects.order_by('?').first()
    if agora_code:
        Institute.objects.all().update(agoraCode=agora_code.code)
        UpdatedAgoraCode.objects.create(code=agora_code.code, updateTime=timezone.now())
        agora_code.delete()

    pass

def send_random_notification():
    try:
        message = 'Learners get ready to take test and beat other learners. Join the test now and win rewards.'
        image = 'https://bodhilocalvideos.s3.amazonaws.com/teacherdemo/2022-07-04/RYtQ4wr/2022-07-04.jpeg'
        title = 'Testwin-Learn Now'
        notificationFor = 'all-testwin-users'
        groupChallenge_id = None
        bulk_notification_testWinApp.delay(
            message, image, title, 6, 0, notificationFor, groupChallenge_id)
    except Exception as f:
        print(str(f))
        UpdatedAgoraCode.objects.create(code=str(f), updateTime=timezone.now())

def GenerateRandomChallenge():

    GRC_functionality = FunctionalityHandlerTestWin.objects.all()
    if GRC_functionality[0].active_grc == True:

        coin = 10
        student_list = ['7062317493@testwin', '8529255549@testwin']
        randomStudent = random.choice(student_list)
        mainUser = Student.objects.get(studentuser__username=randomStudent)

        my_languages = mainUser.student_language.all().values_list('id', flat=True)
        chapters_ids = Chapter.objects.filter(subject__teachersubject__institute=mainUser.institute,
                                              subject__language__id__in=my_languages).distinct().values_list('id', flat=True)
        randomChapter = random.choice(chapters_ids)

        scs = StudentChallenge.objects.filter(
            challenger=mainUser, status='in-progress').count()
        if scs < 3:
            try:
                student_token = mainUser.studentuser.auth_token.key
                headers = {'Authorization': 'Token ' + student_token}
                param = {
                    'chapter_id': randomChapter
                }
                response = requests.post(
                    'https://bodhiai.live/api/content/student_create_challenge_test/', param, headers=headers).json()

                if response['status'] == 'Success':
                    test = Test.objects.get(id=response['testID'])
                    sc = StudentChallenge()
                    sc.test = test
                    sc.challenger = mainUser
                    sc.coin = coin
                    sc.save()

                    testMarks = StudentMarks()
                    testMarks.student = mainUser
                    testMarks.test = test
                    testMarks.save()

                    questions = test.questions.all().values_list('id', flat=True)
                    count = 1
                    for i in questions:
                        attemptedQuestion = AttemptedQuestion()
                        attemptedQuestion.student = mainUser

                        question = Question.objects.get(id=i)
                        attemptedQuestion.question = question
                        attemptedQuestion.attempted = True

                        if count > 4:
                            options_ids = question.option_question.all().values_list('id', flat=True)
                        else:
                            options_ids = question.option_question.filter(
                                correct=True).values_list('id', flat=True)

                        rand_id = random.randrange(len(options_ids))
                        random_id = options_ids[rand_id]

                        option = Option.objects.get(id=random_id)
                        attemptedQuestion.save()
                        attemptedQuestion.optionAttempted.add(option)
                        if option.correct == True:
                            attemptedQuestion.right = True
                            randomSecond = ['10', '11', '12', '13', '14', '15']
                            randomTime = random.choice(randomSecond)
                            attemptedQuestion.time = randomTime

                        else:
                            attemptedQuestion.right = False
                            randomTime = randint(5, 9)
                            attemptedQuestion.time = randomTime

                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)
                        count += 1

                    total_marks = 0
                    attemptedQuestions = testMarks.questions.all()
                    for aq in attemptedQuestions:
                        question = aq.question
                        right = aq.right
                        if right:
                            total_marks += question.marks
                        elif right == False:
                            total_marks -= question.negativeMarks
                    testMarks.marks = total_marks
                    testMarks.save()

                    totalTime = testMarks.questions.all().aggregate(time=Sum('time'))
                    testMarks.time = totalTime['time']
                    testMarks.save()

                    UpdatedAgoraCode.objects.create(
                        code='successfully created random test', updateTime=timezone.now())
                else:
                    error = response['message']
                    UpdatedAgoraCode.objects.create(
                        code=error, updateTime=timezone.now())
            except Exception as e:
                error = str(e)
                UpdatedAgoraCode.objects.create(
                    code=error, updateTime=timezone.now())
        else:
            pass
    else:
        pass
    pass

def SendNotificationForPackageMarketing():
    spa = StudentPackageActivitie.objects.filter(sendReminder=True).order_by('-id')
    for i in spa:
        package = i.package
        student = i.student
        if student in package.students.all():
            i.sendReminder = False
            i.save()
        else:
            message = f'{student.name} recently you visite this package {package.title}, If you want to purchase this package Please click the notification..'
            title = 'Package Available for you.....'
            send_clickable_notification.delay(student.institute.serverKey, student.firebaseToken,
                                              message, title, None, 'package', package.thumbnail, package.id, 20000)
            i.numberOfNotifications += 1
            i.save()
    pass

def SendNotificationForAddPackageFromMarketPlace():
    try:
        spa = TeacherPackageActivitie.objects.filter(
            reminderFor='add-package').order_by('-id')
        serverKey = AppServerKey.objects.all().first().serverKey
        for i in spa:
            package = i.package
            teacher = i.teacher
            teacherViewedPackage = Package.objects.filter(
                teacher=teacher, marketParentPackage=package)
            if len(teacherViewedPackage) != 0:
                i.reminderFor = 'add-students-in-package'
                i.save()
            else:
                message = "Don't wait, Select any course and start adding packages as you want.."
                title = 'Go to Store...'
                image = 'https://bodhilocalvideos.s3.amazonaws.com/teacherdemo/2022-08-02/174255/2022-08-02.png'
                send_clickable_notification(
                    serverKey, teacher.firebaseToken, message, title, None, 'package', image, package.id, 20000)

    except Exception as e:
        error = 'error while sending add package from maketshop ----'+str(e)
        UpdatedAgoraCode.objects.create(code=error, updateTime=timezone.now())
    pass

def SendNotificationForAddStudentsInPackage():
    spa = TeacherPackageActivitie.objects.filter(
        reminderFor='add-students-in-package').order_by('-id')
    serverKey = AppServerKey.objects.all().first().serverKey

    try:
        for i in spa:
            package = i.package
            teacher = i.teacher
            addedpackage = Package.objects.get(
                teacher=teacher, marketParentPackage=package)
            alreadyAddedStudentsTotal = addedpackage.students.count()
            if alreadyAddedStudentsTotal > 0:
                i.reminderFor = 'no-need-to-send-reminder'
                i.save()
            else:
                message = 'Still waiting! Share courses with students and get your commission now...'
                title = 'Share and start earning money📣'
                image = 'http://bodhilocalvideos.s3.amazonaws.com/teacherdemo/2022-08-02/17987/2022-08-02.png'
                send_clickable_notification.delay(
                    serverKey, teacher.firebaseToken, message, title, None, 'package', image, addedpackage.id, 20000)

    except Exception as e:
        error = 'error while sending add student in package ----'+str(e)
        UpdatedAgoraCode.objects.create(code=error, updateTime=timezone.now())
    pass

def CreateGroupChallengesAutomatically():
    coin = 10
    slots = 250

    student_list = ['7062317493@testwin', '8529255549@testwin']
    randomStudent = random.choice(student_list)
    mainUser = Student.objects.get(studentuser__username=randomStudent)


    subjects_list = [61195, 61585, 61931, 62100]
    chapters_ids = Chapter.objects.filter(
        subject__id__in=subjects_list).distinct().values_list('id', flat=True)


    hours = 1
    for i in range(12):

        randomChapter = random.choice(chapters_ids)

        try:
            param = {
                'chapter_id': randomChapter
            }
            response = requests.post(
                'https://bodhiai.live/api/gaming/create_test_group_challenge/', param).json()

            if response['status'] == 'Success':
                test = Test.objects.get(id=response['testID'])

                sgc = StudentGroupChallenge()
                sgc.test = test
                sgc.title = 'Testwin'
                sgc.coin = coin
                sgc.slots = slots
                sgc.winningCoinsUpto = ((coin * slots) * 80) / 100
                sgc.save()

                startTime = timezone.now() + timedelta(minutes=60*hours)
                sgc.startTime = startTime

                course = Course.objects.filter(
                    subjects__chapter_subject=randomChapter).first()
                sgc.course = course
                sgc.save()

                testSubjectLanguage = Language.objects.filter(
                    subject_language__chapter_subject__id=randomChapter)
                sgc.challengeLanguage.add(*testSubjectLanguage)

                testMarks = StudentMarks()
                testMarks.student = mainUser
                testMarks.test = test
                testMarks.save()

                questions = test.questions.all().values_list('id', flat=True)
                count = 1
                for i in questions:
                    attemptedQuestion = AttemptedQuestion()
                    attemptedQuestion.student = mainUser

                    question = Question.objects.get(id=i)
                    attemptedQuestion.question = question
                    attemptedQuestion.attempted = True

                    if count > 4:
                        options_ids = question.option_question.all().values_list('id', flat=True)
                    else:
                        options_ids = question.option_question.filter(
                            correct=True).values_list('id', flat=True)

                    rand_id = random.randrange(len(options_ids))
                    random_id = options_ids[rand_id]

                    option = Option.objects.get(id=random_id)
                    attemptedQuestion.save()
                    attemptedQuestion.optionAttempted.add(option)

                    if option.correct == True:
                        attemptedQuestion.right = True
                        randomSecond = ['10', '11',
                                        '12', '13', '14', '15', '16']
                        randomTime = random.choice(randomSecond)
                        attemptedQuestion.time = randomTime
                    else:
                        attemptedQuestion.right = False
                        randomTime = randint(5, 9)
                        attemptedQuestion.time = randomTime

                    attemptedQuestion.save()
                    testMarks.questions.add(attemptedQuestion)
                    count += 1

                total_marks = 0
                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    right = aq.right
                    if right:
                        total_marks += question.marks
                    elif right == False:
                        total_marks -= question.negativeMarks

                testMarks.marks = total_marks
                testMarks.save()

                totalTime = testMarks.questions.all().aggregate(time=Sum('time'))
                testMarks.time = totalTime['time']
                testMarks.save()

                sgc.bookingsForPlay.add(mainUser)
                sgc.contestants.add(mainUser)

                hours += 1

                UpdatedAgoraCode.objects.create(
                    code='successfully created group challenge', updateTime=timezone.now())

            else:
                error = response['message']
                error = 'error while create group challenge test ----'+error
                UpdatedAgoraCode.objects.create(
                    code=error, updateTime=timezone.now())

        except Exception as e:
            error = 'Exception while create group challenge ----' + str(e)
            UpdatedAgoraCode.objects.create(
                code=error, updateTime=timezone.now())

    pass

def SendReminderBeforeStartingGroupChallenge():
    currentTime = timezone.now()
    sgc = StudentGroupChallenge.objects.filter(
        status='waiting-to-start', startTime__gte=currentTime)

    for gc in sgc:
        after_subtraction_current_time = gc.startTime - currentTime

        if after_subtraction_current_time >= timedelta(minutes=8) and after_subtraction_current_time <= timedelta(minutes=10):
            try:
                message = 'Dear Learner, your Test is going to begin in 10 Min, Join the lobby now.'
                image = 'https://bodhilocalvideos.s3.amazonaws.com/pbgs_teacher/2022-07-18/K6QY3RD/2022-07-18.jpeg'
                title = 'Test starts in 10 Min'
                notificationFor = 'group-all-bookingsForPlay'
                groupChallenge_id = gc.id
                bulk_notification_testWinApp.delay(
                    message, image, title, 6, 0, notificationFor, groupChallenge_id)
                UpdatedAgoraCode.objects.create(
                    code='Success Dear Learner, your Test is going to begin in 10 Min, Join the lobby now.', updateTime=timezone.now())
            except Exception as e:
                error = 'Exception while sending 10 minute notification ---' + \
                    str(e)
                UpdatedAgoraCode.objects.create(
                    code=error, updateTime=timezone.now())

            gc.status = 'starting-in-soon'
            gc.save()

    pass

def sendGroupChallengeStartedReminder():
    currentTime = timezone.now()
    sgc = StudentGroupChallenge.objects.filter(status='starting-in-soon', startTime__lte=currentTime)

    for gc in sgc:

        try:
            message = 'Dear Learner, your Test has started, Join now to attempt it and win cash prize.'
            image = 'https://bodhilocalvideos.s3.amazonaws.com/teacherdemo/2022-07-18/41Hgv3l/2022-07-18.jpeg'
            title = 'Test Started'
            notificationFor = 'group-all-bookingsForPlay'
            groupChallenge_id = gc.id
            bulk_notification_testWinApp.delay(
                message, image, title, 6, 0, notificationFor, groupChallenge_id)
            UpdatedAgoraCode.objects.create(
                code='Dear Learner, your Test has started, Join now to attempt it and win cash prize.', updateTime=timezone.now())
        except Exception as e:
            error = 'Exception while sending started notification ---' + str(e)
            UpdatedAgoraCode.objects.create(
                code=error, updateTime=timezone.now())

    sgc.update(status='challenge-started')
    pass

def CreateStudentsMarks(groupId):

    gc = StudentGroupChallenge.objects.get(id=groupId)
    test = gc.test
    all_bookings_students = gc.bookingsForPlay.all()
    testAttemptedStudents = gc.contestants.all()

    for abs in all_bookings_students:
        if abs not in testAttemptedStudents:
            try:

                testMarks = StudentMarks()
                testMarks.student = abs
                testMarks.test = test
                testMarks.save()

                questions = test.questions.all()
                attempted_time = test.time / len(questions)

                for question in questions:
                    attemptedQuestion = AttemptedQuestion()
                    attemptedQuestion.student = abs
                    attemptedQuestion.question = question

                    attemptedQuestion.attempted = False
                    attemptedQuestion.right = None
                    attemptedQuestion.time = attempted_time
                    attemptedQuestion.save()

                    testMarks.questions.add(attemptedQuestion)

                testMarks.marks = 0

                totalTime = testMarks.questions.all().aggregate(time=Sum('time'))
                testMarks.time = totalTime['time']
                testMarks.save()

                gc.contestants.add(abs)

            except Exception as e:
                error = 'create student marks for not attempted students --- Exception' + \
                    str(e)
                UpdatedAgoraCode.objects.create(
                    code=error, updateTime=timezone.now())

    return 200

def EvaluateGroupChallengesTest():
    currentTime = timezone.now()
    sgc = StudentGroupChallenge.objects.filter(status='challenge-started')

    for gc in sgc:
        currentChallengeTestTime = gc.test.time
        currentChallengeCoins = gc.coin

        afterAddingTime = gc.startTime + \
            timedelta(minutes=currentChallengeTestTime)

        if afterAddingTime < currentTime:
            sm = StudentMarks.objects.filter(
                test=gc.test.id).order_by('-marks', 'time')

            if len(sm) != 1:

                firstRankStudentMarks = sm[0].marks
                firstRankStudentTime = sm[0].time

                totalTieChallengers_ids = sm.filter(
                    marks=firstRankStudentMarks, time=firstRankStudentTime).values_list('student__id', flat=True)

                if len(totalTieChallengers_ids) == 1:

                    try:
                        create_not_attempted_students_marks = CreateStudentsMarks(
                            gc.id)

                        winner = sm[0].student
                        currentChallengeTotalCoin = gc.contestants.count() * currentChallengeCoins
                        CompanyCommission = currentChallengeTotalCoin * \
                            (20/100)
                        winningCoins = currentChallengeTotalCoin - CompanyCommission

                        winner_coins = Coin.objects.get(student=winner)
                        winner_coins.coins += winningCoins
                        winner_coins.save()

                        gc.winners.add(winner)
                        gc.winningCoins = winningCoins
                        gc.status = 'challenge-complete'
                        gc.isChallengeOver = True
                        gc.save()

                        try:
                            message = 'You have lost the test, no worries attempt another test and win money.'
                            image = None
                            title = 'You lose'
                            notificationFor = 'group-all-contestants'
                            groupChallenge_id = gc.id
                            bulk_notification_testWinApp.delay(
                                message, image, title, 6, winner.id, notificationFor, groupChallenge_id)
                            UpdatedAgoraCode.objects.create(
                                code='You have lost the test, no worries attempt another test and win money.', updateTime=timezone.now())
                        except Exception as e:
                            error = 'Exception while sending lose notification ---' + \
                                str(e)
                            UpdatedAgoraCode.objects.create(
                                code=error, updateTime=timezone.now())

                        try:
                            token = winner.institute.serverKey
                            deviceId = winner.firebaseToken
                            message = f'Congratulations Learner you have won {winningCoins} rupees. Create or attempt more test and win money.'
                            image = None
                            title = 'You Win 🏆🏆'
                            send_notification_testWinApp(
                                token, deviceId, message, image, title, 6)
                        except Exception as f:
                            print(str(f))

                    except Exception as e:
                        error = 'Only single user win--- Exception' + str(e)
                        UpdatedAgoraCode.objects.create(
                            code=error, updateTime=timezone.now())

                elif len(totalTieChallengers_ids) > 10:

                    try:

                        create_not_attempted_students_marks = CreateStudentsMarks(
                            gc.id)

                        currentChallengeTotalCoin = gc.contestants.count() * currentChallengeCoins
                        CompanyCommission = currentChallengeTotalCoin * \
                            (20/100)
                        winningCoins = currentChallengeTotalCoin - CompanyCommission

                        price_devided_between_tiers_contestants = winningCoins / \
                            len(totalTieChallengers_ids)
                        students_coins = Coin.objects.filter(student__id__in=totalTieChallengers_ids).update(
                            coins=F('coins') + price_devided_between_tiers_contestants)

                        all_winners = Student.objects.filter(
                            id__in=totalTieChallengers_ids)
                        gc.winners.add(*all_winners)
                        gc.winningCoins = price_devided_between_tiers_contestants
                        gc.status = 'challenge-tie-coins-devided-given'
                        gc.save()

                    except Exception as e:
                        error = 'challenge-tie-coins-devided-given --Exception' + \
                            str(e)
                        UpdatedAgoraCode.objects.create(
                            code=error, updateTime=timezone.now())

                elif len(totalTieChallengers_ids) <= 10:

                    try:

                        create_not_attempted_students_marks = CreateStudentsMarks(
                            gc.id)

                        all_contestants_ids = gc.contestants.all().values_list('id', flat=True)
                        students_coins = Coin.objects.filter(student__id__in=all_contestants_ids).update(
                            coins=F('coins') + currentChallengeCoins)

                        gc.status = 'challenge-tie-coins-refunded'
                        gc.winningCoins = 0
                        gc.save()

                        try:
                            message = 'The test is tied, we have refunded your amount. Attempt another test and win money.'
                            image = None
                            title = 'You won, amount refunded.'
                            notificationFor = 'group-all-contestants'
                            groupChallenge_id = gc.id
                            bulk_notification_testWinApp.delay(
                                message, image, title, 6, 0, notificationFor, groupChallenge_id)
                            UpdatedAgoraCode.objects.create(
                                code='The test is tied, we have refunded your amount. Attempt another test and win money.', updateTime=timezone.now())
                        except Exception as e:
                            error = 'Exception while sending Tie notification ---' + \
                                str(e)
                            UpdatedAgoraCode.objects.create(
                                code=error, updateTime=timezone.now())

                    except Exception as e:
                        error = 'challenge-tie-coins-devided-given --Exception' + \
                            str(e)
                        UpdatedAgoraCode.objects.create(
                            code=error, updateTime=timezone.now())

                cn = ChallengeNotification(groupChallenge=gc)
                cn.save()
                cn.contestants.add(*gc.contestants.all())

            else:

                try:

                    all_bookings_students = gc.bookingsForPlay.all()

                    if len(all_bookings_students) == 1:
                        winningCoins = currentChallengeCoins
                    else:
                        create_not_attempted_students_marks = CreateStudentsMarks(
                            gc.id)

                        currentChallengeTotalCoin = gc.contestants.count() * currentChallengeCoins
                        CompanyCommission = currentChallengeTotalCoin * \
                            (20/100)
                        winningCoins = currentChallengeTotalCoin - CompanyCommission

                    winner = sm[0].student

                    winner_coins = Coin.objects.get(student=winner)
                    winner_coins.coins += winningCoins
                    winner_coins.save()

                    gc.winners.add(winner)
                    gc.winningCoins = winningCoins
                    gc.status = 'no-one-join'
                    gc.isChallengeOver = True
                    gc.save()

                    cn = ChallengeNotification(groupChallenge=gc)
                    cn.save()
                    all_contestants_instead_of_winner = gc.bookingsForPlay.filter(
                        ~Q(id=winner.id))
                    cn.contestants.add(*all_contestants_instead_of_winner)

                    try:
                        message = 'Hey! Learner, you have lost the test as you did not joined it.'
                        image = None
                        title = 'You lose'
                        notificationFor = 'group-all-bookingsForPlay'
                        groupChallenge_id = gc.id
                        bulk_notification_testWinApp.delay(
                            message, image, title, 6, winner.id, notificationFor, groupChallenge_id)
                        UpdatedAgoraCode.objects.create(
                            code='Hey! Learner, you have lost the test as you did not joined it.', updateTime=timezone.now())
                    except Exception as e:
                        error = 'Exception while sending not attempted lose notification ---' + \
                            str(e)
                        UpdatedAgoraCode.objects.create(
                            code=error, updateTime=timezone.now())

                except Exception as e:
                    error = 'No-one-join Exception ---' + str(e)
                    UpdatedAgoraCode.objects.create(
                        code=error, updateTime=timezone.now())

            gc.isChallengeOver = True
            gc.save()

        else:
            pass

    pass



def meeethourEnterprise_refresh_token_monthly():
    from content.api.liveVideos.meethour.meethourEnterprise import BodhiAIUserAccount
    account = BodhiAIUserAccount()
    account.get_access_token()
    return 200

def meeethourDeveloperAccounts_refresh_token_monthly():
    from content.api.liveVideos.meethour.meethourDeveloperAccount import InstituteUserAccount
    account_credentials = MeetHourDeveloperAccountClientCredentials.objects.all()

    token_refresh_accounts = []
    for account_credential in account_credentials:
        meethour_credentials = {
            "username": account_credential.username,
            "password": account_credential.password,
            "client_id": account_credential.client_id,
            "client_secret": account_credential.client_secret,
            "access_token": account_credential.access_token,
            "refresh_token": account_credential.refresh_token,
        }
        account = InstituteUserAccount(meethour_credentials)
        response = account.get_access_token()
        if response["status"]:
            account_credential.access_token = response['data']['access_token']
            account_credential.refresh_token = response['data']['refresh_token']
            account_credential.save()
            token_refresh_accounts.append(account_credential.username)
    return 200

def meeethourEnterprise_parallel_meeting_configure_every_5min():
    buffer_limit = 3
    from content.api.liveVideos.meethour.meethourEnterprise import Contact, Subscription
    subscription_obj = Subscription()
    contact_obj = Contact()
    response = contact_obj.parallel_meeting_on_account()
    if response["status"] == True:
        running = response["data"]["current_running_meetings"]
        remaining = response["data"]["remaining_allowed_concurrent_meetings"]
        total_allowed = response["data"]["total_allowed_concurrent_meetings"]

        if remaining > buffer_limit:
            subscription_obj.update_licence_qty(-(remaining-buffer_limit))

        else:
            subscription_obj.update_licence_qty(+(buffer_limit - remaining))

    return 200

def meeethourEnterprise_recording_update_every_10min():
    from content.api.liveVideos.meethour.meethourEnterprise import Contact, Recurrent
    contact = Contact()
    recurrent = Recurrent()

    page = 1
    res = contact.recording_list(limit=50, page=page)
    while res["status"] and res["data"]["s3"]:
        recording_list = res["data"]["s3"]
        for recording in recording_list:
            id = recording["id"]
            id_meeting = recording["id_meeting"]
            recording_type = recording["recording_type"]
            recording_name = recording["recording_name"]
            recording_datetime = recurrent.time_conversion_timeZone(
                input_time=recording["recording_date"], input_timezone="Europe/London", output_timezone='Asia/Kolkata')
            recording_date = recording["recording_date"][:10]
            status = recording["status"]
            duration = recording["duration"]
            recording_size = recording["recording_size"]
            topic = recording["topic"]
            meeting_id = recording["meeting_id"]

            rec_path = recording["recording_path"]
            recording_path = rec_path.split("?")[0]

            try:
                RecordedVideo.objects.get(
                    meethour_MeetingRecording_id=recording_name)
                break
            except:
                rec_video = RecordedVideo()
                try:
                    teacher = MeetHourMeeting.objects.get(
                        meeting_id=meeting_id).teacher
                    rec_video.teacher = teacher
                except:
                    rec_video.teacher = Teacher.objects.get(id=1)

                rec_video.title = f'{topic} ({rec_video.teacher.name}) - {recording_datetime}'
                rec_video.link = recording_path
                rec_video.recordDate = recording_date
                rec_video.meethour_MeetingRecording_id = recording_name
                rec_video.meethour_Meeting_id = meeting_id
                rec_video.save()
                if "cloudfront.net/" in recording_path or "s3.amazonaws.com/" in recording_path:
                    upload_s3_recorded_video_to_gcloud.delay(
                        rec_video.id)

        else:
            page += 1
            res = contact.recording_list(limit=50, page=page)
            continue
        break
    return 200

def meeethourDeveloperAccounts_recording_update_every_10min():
    from content.api.liveVideos.meethour.meethourDeveloperAccount import Contact, Recurrent
    account_credentials = MeetHourDeveloperAccountClientCredentials.objects.all()
    accounts_refresh_list = []
    for account_credential in account_credentials:
        meethour_credentials = {
            "username": account_credential.username,
            "password": account_credential.password,
            "client_id": account_credential.client_id,
            "client_secret": account_credential.client_secret,
            "access_token": account_credential.access_token,
            "refresh_token": account_credential.refresh_token,
        }
        contact = Contact(meethour_credentials)
        recurrent = Recurrent(meethour_credentials)
        accounts_refresh_list.append(contact.username)

        page = 1
        res = contact.recording_list(limit=50, page=page)
        while res["status"] and res["data"]["s3"]:
            recording_list = res["data"]["s3"]
            for recording in recording_list:
                id = recording["id"]
                id_meeting = recording["id_meeting"]
                recording_type = recording["recording_type"]
                recording_name = recording["recording_name"]
                recording_datetime = recurrent.time_conversion_timeZone(
                    input_time=recording["recording_date"], input_timezone="Europe/London", output_timezone='Asia/Kolkata')
                recording_date = recording["recording_date"][:10]
                status = recording["status"]
                duration = recording["duration"]
                recording_size = recording["recording_size"]
                topic = recording["topic"]
                meeting_id = recording["meeting_id"]

                rec_path = recording["recording_path"]
                recording_path = rec_path.split("?")[0]

                try:
                    RecordedVideo.objects.get(meethour_MeetingRecording_id=recording_name)
                    break
                except:
                    rec_video = RecordedVideo()
                    try:
                        teacher = MeetHourDeveloperAccountMeeting.objects.get(meeting_id=meeting_id).teacher
                        rec_video.teacher = teacher
                    except:
                        rec_video.teacher = Teacher.objects.get(id=1)

                    rec_video.title = f'{topic} ({rec_video.teacher.name}) - {recording_datetime}'
                    rec_video.link = recording_path
                    rec_video.recordDate = recording_date
                    rec_video.meethour_MeetingRecording_id = recording_name
                    rec_video.meethour_Meeting_id = meeting_id
                    rec_video.save()
                    if "cloudfront.net/" in recording_path or "s3.amazonaws.com/" in recording_path:
                        upload_s3_recorded_video_to_gcloud.delay(rec_video.id)
            else:
                page += 1
                res = contact.recording_list(limit=50, page=page)
                continue
            break
    return accounts_refresh_list

def meethour_enterprise_pack_payment():
    import pytz
    import datetime
    new_timezone = pytz.timezone('Asia/Kolkata')
    date = datetime.datetime.now(new_timezone).strftime("%Y-%m-%d")
    institutes = Institute.objects.filter(meethour_account_type__isnull=False)
    for institute in institutes:
        records = MeetHourPayment.objects.filter(
            institute=institute).order_by('-id')
        for record in records:
            if str(record.expire_date) >= date:
                institute.meethour_account_type = "enterprise"
                institute.save()
                break
        else:
            institute.meethour_account_type = None
            institute.save()

def meethour_developer_pack_payment():
    import pytz
    import datetime
    from content.api.liveVideos.meethour.meethourDeveloperAccount import Subscription
    new_timezone = pytz.timezone('Asia/Kolkata')
    date = datetime.datetime.now(new_timezone).strftime("%Y-%m-%d")
    account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
        institute__isnull=False)
    for account_credential in account_credentials:
        meethour_credentials = {
            "username": account_credential.username,
            "password": account_credential.password,
            "client_id": account_credential.client_id,
            "client_secret": account_credential.client_secret,
            "access_token": account_credential.access_token,
            "refresh_token": account_credential.refresh_token,
        }
        licence_subcription = Subscription(meethour_credentials)
        context = licence_subcription.my_subscription()
        try:
            if context["success"]:
                subscription = context["subscription"]
                if subscription["subscription_type"] == "Free":
                    subscription_expire_date = None
                else:
                    subscription_expire_date = datetime.datetime.strptime(subscription['expirydate'], "%d-%b-%Y")
            else:
                subscription_expire_date = None
        except:
            subscription_expire_date = None
        account_credential.subscription_upto = subscription_expire_date
        account_credential.save()
        record = MeetHourDeveloperAccountPayment.objects.filter(
            developer_account=account_credential).order_by('-expire_date').first()
        if str(record.expire_date) >= date:
            record.subcription_upto = subscription_expire_date
            record.save()
            account_credential.expire_date = record.expire_date
            account_credential.save()
            institute = account_credential.institute
            institute.meethour_account_type = "developer"
            institute.save() 
        else:
            record.subcription_upto = subscription_expire_date
            record.save()
            account_credential.expire_date = record.expire_date
            account_credential.save()
            institute = account_credential.institute
            institute.meethour_account_type = None
            institute.save() 

def studylive_VideoDownload():
    liveVideos = LiveVideoLink.objects.filter(teacher="76",download_link=None).order_by('-id')[:3]
    for video_object in liveVideos:
        upload_yt_live_video_to_azure_server.delay(video_object.id)
    return 200


def student_fees_reminder():
    teacher_id = 54159
    try:
        teacher = Teacher.objects.get(id=teacher_id)
        course_fees = CourseFees.objects.filter(teacher=teacher)
        for courseFee in course_fees:
            student_paid_fees = StudentCourseFees.objects.filter(coursefees=courseFee)
            new_timezone = pytz.timezone('Asia/Kolkata')
            date_now = datetime.datetime.now(new_timezone).date()

            for spf in student_paid_fees:
                if spf.nextDuePayment and spf.nextPaymentDate:
                    next_payment_date = spf.nextPaymentDate
                    days_until_payment = (next_payment_date - date_now).days

                    if days_until_payment == 7:
                        try:
                            serverKey = teacher.institute.serverKey
                            deviceId = spf.student.firebaseToken
                            text = f"Course EMI Due {next_payment_date}"
                            to_text = f'Message from {teacher.name}: {text}'
                            notification = {"body": to_text}
                            data = {"id": teacher.id, "type": "fees", "name": "", "link": ""}
                            res = send_notification_individual_second(serverKey=serverKey, deviceId=deviceId, notification=notification, data=data)
                            logger.info(res)
                        except Exception as e:
                            logger.error(f"Failed to send notification: {str(e)}")
    except Teacher.DoesNotExist:
        logger.error(f"Teacher with id {teacher_id} does not exist")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        
def update_transaction_record():
    
    
    completed_transaction_status = ['success', 'dropped', 'bounced', 'userCancelled', 'failure', 'False']
    
    today_start = make_aware(dt.combine(dt.today(), dt.min.time()))
    today_end = make_aware(dt.combine(dt.today(), dt.max.time()))

    payments = EaseBuzzPayment.objects.filter(
        datetime__range=(today_start, today_end)
    ).exclude(
        txnid__in=EaseBuzzPaymentResponseRecord.objects.filter(
            status__in=completed_transaction_status, payment_type='easebuzz').values_list('payment', flat=True))
    
    url = 'https://bodhiai.live/api/management/transaction_refresh/'
    
    with requests.Session() as session:
        session.headers.update({'Content-Type': 'application/json'})
        
        for payment in payments:
            body = {'txnid': str(payment.txnid)}
            try:
                response = session.post(url, json=body)
                response.raise_for_status()  # Raises an HTTPError for bad responses
            except requests.RequestException as e:
                print(f"Failed to update transaction {payment.txnid}: {str(e)}")

    return 200  # Optionally change based on the success/failure of the operation



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/apps.py
--------------------------------------------------

from django.apps import AppConfig


class BasicinformationConfig(AppConfig):
    name = 'basicinformation'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/admin.py
--------------------------------------------------

from django.contrib import admin
from basicinformation.models import *
from basicinformation.tasks import *

@admin.register(AboutUsBanner)
class AboutUsBannerAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute', 'link']
    readonly_fields = ['institute']

@admin.register(AboutUsDescription)
class AboutUsDescriptionAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute', 'description']
    readonly_fields = ['institute']

@admin.register(AgoraCodeLive)
class AgoraCodeLiveAdmin(admin.ModelAdmin):
    list_display = ['id', 'code']

@admin.register(AppServerKey)
class AppServerKeyAdmin(admin.ModelAdmin):
    list_display = ['id', 'serverKey']

@admin.register(Banner)
class BannerAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute']
    readonly_fields = ['institute', 'package']
    search_fields = ['institute__name','institute__code']

@admin.register(BatchChangeRequest)
class BatchChangeRequestAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student', 'batches']

@admin.register(ComplaintPicture)
class ComplaintPictureAdmin(admin.ModelAdmin):
    list_display = ['id', 'picture']

@admin.register(Complaint)
class ComplaintAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'resolved']
    readonly_fields = ['student', 'complaint_pictures',]

@admin.register(CurrencyType)
class CurrencyTypeAdmin(admin.ModelAdmin):
    list_display = ['id', 'type', 'icon']
    readonly_fields = ['institutes']

@admin.register(Error)
class ErrorAdmin(admin.ModelAdmin):
    list_display = ('id', 'student', 'package', 'payPrice', 'error', 'time')
    readonly_fields = ['student', 'package',]

@admin.register(FirebaseProject)
class FirebaseProjectAdmin(admin.ModelAdmin):
    list_display = ['id', 'name', 'apps']

@admin.register(GoogleAppStoreLatestVersion)
class GoogleAppStoreLatestVersionAdmin(admin.ModelAdmin):
    search_fields = ['institute__name','institute__code']
    list_display = ['id', 'institute', 'student', 'version']
    readonly_fields = ['institute', 'student']

@admin.register(GoogleAppStoreTeacherLatestVersion)
class GoogleAppStoreTeacherLatestVersionAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher', 'version']
    readonly_fields = ['teacher']

@admin.register(IndividualSMS)
class IndividualSMSAdmin(admin.ModelAdmin):
    fields = ['smsTo', 'smsText', 'date', 'typeMessage']
    list_display = ['smsTo', 'smsText', 'phone', 'date', 'typeMessage']
    search_fields = ['smsTo__institute__name', 'smsText']
    readonly_fields = ['smsTo',]

@admin.register(MarketingVideo)
class MarketingVideoAdmin(admin.ModelAdmin):
    list_display = ['id', 'title', 'url']

@admin.register(RefferalUrl)
class RefferalUrlAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher']

@admin.register(SMSCount)
class SMSCountAdmin(admin.ModelAdmin):
    search_fields = ['institute__name','institute__code']
    list_display = ['id', 'institute', 'remaining', 'sent']

@admin.register(SMSPackageBought)
class SMSPackageBoughtAdmin(admin.ModelAdmin):
    search_fields = ['institute__name', 'institute__code']
    list_display = ['id', 'institute', 'count']
    readonly_fields = ['institute']

@admin.register(StudentBookmark)
class StudentBookmarkAdmin(admin.ModelAdmin):
    list_display = ['id', 'student',]
    search_fields = ['student__studentuser__username']
    readonly_fields = ['student', 'questions', 'videos', 'tests', 'notes']

@admin.register(StudentDeviceId)
class StudentDeviceIdAdmin(admin.ModelAdmin):
    list_display = ['id', 'student',]
    readonly_fields = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(StudentDeviceLimitation)
class StudentDeviceLimitationAdmin(admin.ModelAdmin):
    search_fields = ['username',]
    list_display = ['id', 'username']

@admin.register(StudentPackageActivitie)
class StudentPackageActivitieAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'package', 'activitieTime']
    readonly_fields = ['student', 'package',]

@admin.register(TeacherAppFooterBanner)
class TeacherAppFooterBannerAdmin(admin.ModelAdmin):
    list_display = ['id', 'bannerCategory', 'thumnail']

    def save_model(self, request, obj, form, change):
        if change == False:
            thumbnail = obj.thumnail
            blog_url = obj.url
            title = 'New Blog 😊😊 Click to know more..'
            message = ''
            category = 'blog'
            send_notification_teachers.delay(
                thumbnail, blog_url, title, message, category, None)

        obj.save()
        super().save_model(request, obj, form, change)

@admin.register(TeacherAppMarquee)
class TeacherAppMarqueeAdmin(admin.ModelAdmin):
    list_display = ['id', 'instituteType', 'active', 'announcement']

@admin.register(TeacherEnquiry)
class TeacherEnquiryAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher', 'courses',]

@admin.register(TeacherFirebaseToken)
class TeacherFirebaseTokenAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    search_fields = ['id','firebaseToken']
    readonly_fields = ['teacher']

@admin.register(TeacherIssue)
class TeacherIssueAdmin(admin.ModelAdmin):
    list_display = ('teacherDeatil', 'mainFeature',
                    'feature', 'description', 'time')
    readonly_fields = ['teacher', ]

@admin.register(TeacherPackageActivitie)
class TeacherPackageActivitieAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher', 'package']
    readonly_fields = ['teacher', 'package']

@admin.register(TeacherRequestStudyContent)
class TeacherRequestStudyContentAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher', 'teacher_course']
    readonly_fields = ['teacher', 'teacher_course']

@admin.register(TutorialPoster)
class TutorialPosterAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute',]
    readonly_fields = ['institute']

@admin.register(UnknownUserEnquiry)
class UnknownUserEnquiryAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute', 'name', 'userType']
    readonly_fields = ['institute',]

@admin.register(UpdatedAgoraCode)
class UpdatedAgoraCodeAdmin(admin.ModelAdmin):
    search_fields = ['code',]
    list_display = ['id', 'code']

@admin.register(WebappFeedback)
class WebappFeedbackAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute',]
    readonly_fields = ['institute']

@admin.register(PrincipleFirebaseToken)
class PrincipleFirebaseTokenAdmin(admin.ModelAdmin):
    list_display = ['id', 'principle']
    search_fields = ['id','firebaseToken']
    readonly_fields = ['principle']

admin.site.register(OldInstitute)

@admin.register(CSAIdCard)
class CSAIdCardAdmin(admin.ModelAdmin):
    list_display = ['id','student', 'name',]
    readonly_fields = ['student',]

admin.site.register(PaidCSAIdCardStudent)


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/firebase_utils.py
--------------------------------------------------

import os
import requests
import firebase_admin
from firebase_admin import credentials
import logging

logging.basicConfig(level=logging.INFO)

def initialize_firebase_with_json(json_file_url, app_name=None):
    try:
        tmp_dir = "/home/azureuser/bodhiai/basicinformation/tmp"
        print(tmp_dir)
        os.makedirs(tmp_dir, exist_ok=True)  # No need to check if exists

        file_name = json_file_url.split("?")[0].split("/")[-1]
        print(file_name)
        local_json_path = os.path.join(tmp_dir, file_name)
        print(local_json_path)
        
        response = requests.get(json_file_url)
        response.raise_for_status()  # Raise an error for bad responses
        with open(local_json_path, "wb") as file:
            file.write(response.content)
        logging.info(f"Downloaded JSON file: {local_json_path}")

        if app_name:
            if app_name not in firebase_admin._apps:
                cred = credentials.Certificate(local_json_path)
                firebase_admin.initialize_app(cred, name=app_name)
            return firebase_admin.get_app(app_name)
        else:
            if not firebase_admin._apps:
                cred = credentials.Certificate(local_json_path)
                firebase_admin.initialize_app(cred)
            return firebase_admin.get_app()

    except requests.exceptions.RequestException as req_err:
        logging.error(f"Error downloading JSON file: {str(req_err)}")
        raise
    except Exception as e:
        logging.error(f"Error during Firebase initialization with JSON: {str(e)}")
        raise
    finally:
        if os.path.exists(local_json_path):
            os.remove(local_json_path)
            logging.info(f"Removed temporary JSON file: {local_json_path}")



            
        



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/urls.py
--------------------------------------------------

from django.urls import path
from . import views

app_name = 'basic'

urlpatterns = [
    path('home', views.home, name='home'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/views.py
--------------------------------------------------

from django.shortcuts import (render,reverse,redirect,HttpResponseRedirect,HttpResponse)
from django.contrib.auth.models import User, Group
from basicinformation.api.helperFunctions import *

def home(request):
    if request.user.is_authenticated:
        user = request.user
        if user.groups.filter(name='Teachers').exists():
            me = Teach(user)
            meethour_account_type = me.profile.institute.meethour_account_type
            try:
                meethour_developer_account_client_credentials = \
                    MeetHourDeveloperAccountClientCredentials.objects.get(institute = me.profile.institute)
            except Exception as e:
                meethour_developer_account_client_credentials = None
                context = {
                    'status':'failed',
                    'message':str(e),
                    'meethour_account_type': meethour_account_type,
                    'developer_account_details': meethour_developer_account_client_credentials,
                    }
            context = {
                'teacher': me.profile,
                'institute': me.profile.institute,
                'video_upload_permission': me.profile.institute.video_upload_permission,
                'meethour_account_type': meethour_account_type,
                'developer_account_details': meethour_developer_account_client_credentials,
                }
            return render(request, 'basicinformation/teacher_homepage2.html', context)
        else:
            return HttpResponse("You are not a Teacher, Please login as a Teacher.")
    else:
        return redirect('/membership/login/')


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/api/serializers.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/api/helperFunctions.py
--------------------------------------------------

import json
import string
import random
import requests
import urllib.parse
import urllib.request
from django.utils import timezone
from gaming.models import *
from content.models import *
from basicinformation.models import *
from firebase_admin import messaging
from basicinformation.firebase_utils import initialize_firebase_with_json

def instituteCodeList():
    institute_code_list = ["royenglish","rohitsir","smeclasses","toppersmind","reyaansh","pssclasses","thepublishing","testing","scenglish","conceptmehsi","allengroup","trinityenglish","brilliantpublic"]
    return institute_code_list

class InstituteAdmin:
    def __init__(self, user) -> None:
        self.profile = user.InstituteAdmin
        self.name = user.InstituteAdmin.name

    def my_institute(self):
        institutes = Institute.objects.filter(AdminUser=self.profile)
        return institutes

class Teach:
    def __init__(self, user):
        self.profile = user.teacher
        self.name = user.teacher.name
        self.institute_name = self.profile.institute.name

    def myBatchObjects(self):
        batches = self.profile.batches.all()
        batches_list = []
        for batch in batches:
            batch_dict = {'id': batch.id, 'name': batch.name}
            batches_list.append(batch_dict)
        return batches_list
    
    def batchIds(self):
        batches = Batch.objects.filter(institute=self.profile.institute)
        batch_set = set(batch.id for batch in batches if batch)
        return batch_set

class PrincipleUser:
    def __init__(self, user): 
        self.profile = user.principle  # here principle is model
        self.name = user.principle.name

    def my_name(self):
        return self.profile.name

class Studs:
    def __init__(self, user):
        self.profile = user.student
        self.institute = self.profile.institute

    def batchIds(self):
        batches = Batch.objects.filter(institute=self.institute)
        batch_set = set(batch.id for batch in batches if batch)
        return batch_set

    def get_batches(self):
        batches = self.profile.batches.all()
        batches_list = []
        for batch in batches:
            batch_dict = {'id': batch.id, 'name': batch.name}
            batches_list.append(batch_dict)
        return batches_list

    def add_subjects(self):
        teachers = Teacher.objects.filter(institute=self.profile.institute)
        for teacher in teachers:
            subjects = teacher.subjects.all()
            for subject in subjects:
                self.profile.subjects.add(subject)
                self.profile.save()

    def add_tests(self):
        batches = self.profile.batches.all()
        for batch in batches:
            tests = Test.objects.filter(batches=batch)
            for test in tests:
                test.students.add(self.profile)

    def get_my_coins(self):
        my_coins = Coin.objects.get(student=self.profile)
        return my_coins.coins

    def change_my_coins(self, coin_quantity, reason):
        my_coins = Coin.objects.get(student=self.profile)
        manipulator = ManipulatedCoin.objects.get(coin=my_coins)
        manipulator.coinChanged = coin_quantity
        manipulator.reason = reason
        manipulator.date = timezone.now()
        manipulator.save()
        if coin_quantity > 0:
            my_coins.coins += coin_quantity
        else:
            my_coins.coins -= coin_quantity
        my_coins.save()

class ParentUser:
    def __init__(self, user):
        self.profile = user.parent
        self.name = user.parent.name

    def my_name(self):
        return self.profile.name

def isTestinPackage(test, package):
    allTests = package.tests.all()
    test_list = []
    for test in allTests:
        test_list.append(test.id)
    if test.id in test_list:
        return True
    else:
        return False

def isVideoInPackages(video, institute):
    teachers = Teacher.objects.filter(institute=institute)
    for teacher in teachers:
        pass
    allVideos = Package.videos.all()
    video_list = []
    for video in allVideos:
        video_list.append(video.id)
    if video.id in video_list:
        return True
    else:
        return False

def isNoteInPackage(note, package):
    allNotes = package.notes.all()
    note_list = []
    for note in allNotes:
        note_list.append(test.id)
    if note.id in note_list:
        return True
    else:
        return False

def send_notification_individual(token, deviceId, message):
    url = 'https://fcm.googleapis.com/fcm/send'
    headers_fcm = {'Authorization': 'key={}'.format(token), 'Content-Type': 'application/json'}
    data = {'to': 'key={}'.format(deviceId), 'notification': {'body': message}}
    r = requests.post(url, headers=headers_fcm, data=json.dumps(data))
    print(r.text)

def send_otp_textlocal(phone, message):
    apikey = 'NzE2YjRkNzc0NjY3NzA1NjM2NmY0NzYzMzE1NzcxMzg= '
    url = 'https://api.textlocal.in/send/?'
    message = 'Your OTP for Login is {}. Thanks, Bodhi AI.'.format(message)
    sender = 'BODHII'
    data = urllib.parse.urlencode({'apikey': apikey, 'numbers': phone, 'message': message, 'sender': sender})
    data = data.encode('utf-8')
    request = urllib.request.Request("https://api.textlocal.in/send/?")
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def send_otp_by_mail(sender_email, reciver_email, subject, message):
    from basicinformation.tasks import send_email_multipurpose
    subject = subject
    message = message
    from_email = sender_email
    recipient_list = [reciver_email]
    res = send_email_multipurpose.delay(subject=subject, message=message, from_email=from_email, recipient_list=recipient_list,)
    return 1

def send_sms(number, message):
    otp = message
    extra_param = 'extra_param={"OTP":'+str(otp)+'}'
    url = 'https://api.msg91.com/api/v5/otp?authkey=281608AqE2Kl6kNfy5d08c2d2&template_id=5f55c76b9a6c30375920e160&{}&mobile=+91{}&invisible=1&otp={}'.format(extra_param, number, otp)
    r = requests.get(url)
    print('send sms code {}'.format(r.status_code))
    return r.status_code

def send_sms_new(number, message):
    headers = {'authkey': '326328AOj4Nbpryb5e995f51P1', 'Content-Type': 'application/json'}
    body = {"flow_id": "5ff6cafcb0008b0e600b9a06",
            "recipients": [
                {
                    "mobiles": "91{}".format(number),
                    "testvariable": "{}".format(message)

                }
            ]
            }
    json_body = json.dumps(body)
    url = "https://api.msg91.com/api/v5/flow/"
    r = requests.post(url, data=json_body, headers=headers)
    print(r.text)
    return r.status_code

def bulk_notification(teacher_id, message):
    teacher = Teacher.objects.get(id=teacher_id)
    token = teacher.institute.serverKey
    students = Student.objects.filter(institute=teacher.institute)
    for student in students:
        deviceId = student.firebaseToken
        if deviceId != None:
            send_notification_individual(token, deviceId, message)

def institute_code_generate():
    letters = string.ascii_lowercase
    code = ''.join(random.choice(letters) for i in range(4))
    try:
        code = Institute.objects.get(code=code)
        institute_code_generate()
    except:
        return code

def CheckVideoViewLimite(user, video_id, video_viewsLimite):
    studentVideoView = StudentVideoView.objects.filter(videoview__video=video_id, student=user).count()
    if studentVideoView >= int(video_viewsLimite):
        vision = False
    else:
        vision = True
    return vision

def CheckNoteViewLimite(user, note_id, note_viewsLimite):
    studentNoteView = StudentNoteView.objects.filter(noteview__note=note_id, student=user).count()
    if studentNoteView >= int(note_viewsLimite):
        vision = False
    else:
        vision = True
    return vision

def send_otp_via_rankup(phone, message):
    apikey = 'NWE2OTc0NDI2ZjQzNzY0ZjUxNzg2ZTcyNjM3ODM4NTc= '
    url = 'https://api.textlocal.in/send/?'
    message = 'Your OTP to verify Rank Up account is {}. Never share your OTP with anyone. - https://rankup.co.in - TUSKNT'.format(message)
    sender = 'TUSKNT'
    data = urllib.parse.urlencode({'apikey': apikey, 'numbers': phone, 'message': message, 'sender': sender})
    data = data.encode('utf-8')
    request = urllib.request.Request(url)
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def send_otp_via_totalExamPlus(phone, message):
    sender = 'TLEXAM'
    template_id = 1507161684299404104
    url = 'http://api.bulksmsgateway.in/sendmessage.php?'
    message = "{}, is your OTP to proceed on TotalExam Plus App. Don't share your OTP with anyone.".format(message)
    data = urllib.parse.urlencode({
        'user': 'totalexam', 
        'password': 'Mkg@090311', 
        'mobile': phone,
        'message': message, 
        'sender': sender, 
        'type': 3, 
        'template_id': template_id
        })
    data = data.encode('utf-8')
    request = urllib.request.Request(url)
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def send_otp_Etuson(phone, otp):
    sender = 'ETUNSM'
    message = f"Your ETUSON verification code is {otp} ETUNSM"
    template_id = 1007192436246666106
    peid = 1001663801329863628
    url = f'https://sms.indiasms.com/SMSApi/send?userid=etusoncom&password=2b35V8&sendMethod=quick&mobile={phone}&msg={message}&senderid={sender}&msgType=text&dltEntityId={peid}&dltTemplateId={template_id}&duplicatecheck=true&output=json'
    res = requests.get(url)
    response = json.loads(res.content)
    return response

def send_otp_Pravinata(phone, otp):
    apikey = 'MzMzOTcyMzA3OTQzNTc2MzUxNjI3Mjc1NjQ1NzY2NDE='
    message = 'Your one time password(OTP) is {} which is valid for 5 minutes from now. Please do not share your OTP with anyone - Pravinata Education Foundation(PEF)'.format(otp)
    sender = 'NGOPEF'
    url = f'https://api.textlocal.in/send/?apikey={apikey}&numbers={phone}&sender={sender}&message={message}'
    res = requests.post(url)
    response = json.loads(res.content)
    return response

def send_otp_Credence(phone, otp):
    key = '563D0FD1C52F67'
    campaign = 12435
    routeid = 3
    contact = phone
    senderid = 'CRDNAP'
    message = f'Your OTP for login is {otp} Thanks - Credenceapp By - CRDNAP'
    template = 1707164663963622060
    pe_id = 1701164431273310319
    url = f'http://193.46.243.10/app/smsapi/index.php?key={key}&campaign={campaign}&routeid={routeid}&type=text&contacts={contact}&senderid={senderid}&msg={message}&template_id={template}&pe_id={pe_id}'

    res = requests.post(url)
    try:
        response = json.loads(res.content)
        return response
    except:
        return 200

def send_otp_atLive(phone, otp):
    message = f'Your OTP for Login is {otp}. Thanks, Welcome to AT Live Classes.'
    url = f'http://sms.bulkssms.com/submitsms.jsp?user=ATLIVE&key=3286d0e797XX&mobile={phone}&message={message}&senderid=ATLIVE&accusage=1&entityid=1201160741966535018&tempid=1207165172677033453'
    res = requests.post(url)
    try:
        response = json.loads(res.content)
        return response
    except:
        return 200

def send_otp_ankisha_computers(phone, otp):
    message = f'Your one time password(OTP) is {otp} - Thanks! ANKISHA COMPUTERS'
    sender = 'ankisa'
    DLTTemplateId = '1507165693049649602'
    routeId = '2'
    username = 'grover_rajeev'
    password = 'Alfa@123'
    url = f'http://text.bluemedia.in/http-api.php?username={username}&password={password}&senderid={sender}&route={routeId}&number={phone}&message={message}&templateid={DLTTemplateId}'
    response = requests.get(url)
    try:
        response = json.loads(response.content)
        return response
    except:
        return 200

def send_otp_as_education_academy(phone, message):
    AUTH_KEY = '4cf8ba4f31bfda59b33e052718f3de3'
    message = 'Greetings, Here is your otp to verify account {}. AS Education Academy.'.format(message)
    senderId = 'ASEXAM'
    routeId = 1
    entityid = 1701161364304210252
    tmid = 140200000022
    templateid = 1707161397808786261
    url = f'http://msg.icloudsms.com/rest/services/sendSMS/sendGroupSms?AUTH_KEY={AUTH_KEY}&message={message}&senderId={senderId}&routeId={routeId}&mobileNos={phone}&smsContentType=english&entityid={entityid}&tmid={tmid}&templateid={templateid}'
    res = requests.get(url)
    try:
        response = json.loads(res.content)
        return response
    except:
        return 200

def send_otp_as_ujjwal_IAS_academy(phone, otp):
    user = "ujjwaliasacademy"
    password = "123123"
    senderid = "UJWIAS"
    channel = "trans"
    DCS = "0"
    flashsms = "0"
    number = phone
    route = "04"
    DLTTemplateId = "1407167532597903132"
    PEID = "1401531130000030619"
    message = f"Dear Student {otp} is your OTP to log in to the application. Thank You. Ujjwal IAS Academy"
    url = f"http://bulksms.saakshisoftware.com/api/mt/SendSMS?user={user}&password={password}&senderid={senderid}&channel={channel}&DCS={DCS}&flashsms={flashsms}&number={number}&text={message}&route={route}&DLTTemplateId={DLTTemplateId}&PEID={PEID}"

    res = requests.get(url)
    try:
        response = json.loads(res.content)
        return response
    except:
        return 200



def send_otp_textlocal_by_cranax(phone, message):
    apikey = 'NmQ3NzU4NDc2NzU5NjQ0ZjRjNzE0ODU2NTU0NTU5NDI= '
    url = 'https://api.textlocal.in/send/?'
    message = 'Your OTP for Login is {}. Thanks, CRANAX EDUCATION'.format(message)
    sender = 'CRANX'
    data = urllib.parse.urlencode({'apikey': apikey, 'numbers': phone, 'message': message, 'sender': sender})
    data = data.encode('utf-8')
    request = urllib.request.Request(url)
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def send_otp_textlocal_by_pcbtnursing(phone, message):
    apikey = 'NzQ2ODRjNjU2YzcyNTk2NDdhNmU0NTc5N2EzNDRlMzA= '
    url = 'https://api.textlocal.in/send/?'
    message = 'Your OTP for login is {}. Thanks, PRATAPS CBT EXAM PORTAL.'.format(message)
    sender = 'PCBTAI'
    data = urllib.parse.urlencode({'apikey': apikey, 'numbers': phone, 'message': message, 'sender': sender})
    data = data.encode('utf-8')
    request = urllib.request.Request(url)
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def send_textlocal_package_buy(context: dict):
    apikey = 'NzE2YjRkNzc0NjY3NzA1NjM2NmY0NzYzMzE1NzcxMzg= '
    numbers = context['phone']
    sender = 'BODHII'
    message = f"Hello {context['name']} thanks for purchasing package {context['package_name']} from {context['institute_name']}. Login with the link {context['webapp_link']} and then your Number/Username {context['username']}. Thanks, Bodhi AI."
    params = {'apikey': apikey, 'numbers': numbers, 'message': message, 'sender': sender}
    f = urllib.request.urlopen('https://api.textlocal.in/send/?'+ urllib.parse.urlencode(params))
    print(params)
    a, b = (f.read(), f.code)
    response = json.loads(a)
    return response

def send_textlocal_training_code(context: dict):
    apikey = 'NzE2YjRkNzc0NjY3NzA1NjM2NmY0NzYzMzE1NzcxMzg= '
    numbers = context['number']
    sender = 'BODHII'
    message = f"Please download Android application https://play.google.com/store/apps/details?id=com.bodhiai.teacherapp, to join your training session with Joining ID {context['secret_code']}; Bodhi AI"
    url = f'https://api.textlocal.in/send/?apikey={apikey}&numbers={numbers}&sender={sender}&message={message}'
    res = requests.post(url)
    response = json.loads(res.content)
    return response

def send_payout_error_sms(phone, error):
    apikey = 'NzE2YjRkNzc0NjY3NzA1NjM2NmY0NzYzMzE1NzcxMzg= '
    url = 'https://api.textlocal.in/send/?'
    message = 'Your EaseBuzz Wire Payout Failed. Check Your Account Balance or Other Related issues'
    sender = 'BODHII'
    data = urllib.parse.urlencode({'apikey': apikey, 'numbers': phone, 'message': message, 'sender': sender})
    data = data.encode('utf-8')
    request = urllib.request.Request(url)
    f = urllib.request.urlopen(request, data)
    fr = json.loads(f.read())
    return fr

def app_serverKey(code):
    if code == "eclassopedia":
        appServer = AppServerKey.objects.get(id=6)
        appserverList = appServer.serverKey
        return appserverList
    else:
        appServer = AppServerKey.objects.get(id=1)
        appserverList = appServer.serverKey
        return appserverList
    
def send_notification_individual_second(serverKey=None,deviceId =None,notification=None,data=None,teacher_id = None,principle_id = None):
    try:
        request_body = {}
        if notification == None:
            request_body['notification'] = {
                "title": f"ALERT",
                "body": 'Notification',
                "image": "https://static.wixstatic.com/media/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png/v1/fill/w_192%2Ch_192%2Clg_1%2Cusm_0.66_1.00_0.01/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png"
            }
        else:
            request_body['notification'] = notification

        if data == None:
            request_body['data'] = {"click_action": "FLUTTER_NOTIFICATION_CLICK",}
        else:
            request_body['data'] = data

        url = 'https://fcm.googleapis.com/fcm/send'
        headers_fcm = {'Authorization': f'key={serverKey}','Content-Type': 'application/json'}
        
        if deviceId != None:
            request_body["to"] = deviceId
            request_result = requests.post(url, headers=headers_fcm, data=json.dumps(request_body))
            return {"status": "success", 'last_request_response': request_result.text}
        
        deviceIdList =set()
        if teacher_id:
            deviceIdList =set()
            teacher_firebox = TeacherFirebaseToken.objects.filter(teacher=teacher_id)
            for teacher in teacher_firebox:
                deviceId = teacher.firebaseToken
                deviceIdList.add(deviceId)

            for deviceId in deviceIdList:
                request_body["to"] = deviceId
                request_result = requests.post(url, headers=headers_fcm, data=json.dumps(request_body))
                
            return {"status": "success", 'last_request_response': request_result.text}
        
        if principle_id:
            deviceIdList =set()
            princle_firebox = PrincipleFirebaseToken.objects.filter(principle=principle_id)
            for princle in princle_firebox:
                deviceId = princle.firebaseToken
                deviceIdList.add(deviceId)

            for deviceId in deviceIdList:
                request_body["to"] = deviceId
                request_result = requests.post(url, headers=headers_fcm, data=json.dumps(request_body))
                print(request_result.text)
                
            return {"status": "success", 'last_request_response': request_result.text}
                
    except Exception as e:
        return {"status": "failed", 'error':str(e)}

def send_notification_individual(deviceId = None, notification = None, data = None, json_file = None, teacher_id = None,principle_id = None):
    try:
        print('first stage')
        print(json_file)
        initialize_firebase_with_json(json_file)
        
        if notification is None:
            notification = {"title": "ALERT","body": "Notification"}

        if data is None:
            data = {"click_action": "FLUTTER_NOTIFICATION_CLICK"}
            
        deviceIdList = set()
        if deviceId:
            deviceIdList.add(deviceId)
            
        if teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)
            deviceId = teacher.firebaseToken
            deviceIdList.add(deviceId)
            
        if principle_id:
            princle_firebox = PrincipleFirebaseToken.objects.filter(principle=principle_id)
            for princle in princle_firebox:
                deviceId = princle.firebaseToken
                deviceIdList.add(deviceId)

        for deviceId in deviceIdList:
            message = messaging.Message(
                notification = messaging.Notification(title = notification['title'], body = notification['body']),
                data = data,
                token = deviceId,
            )
            try:
                response = messaging.send(message)
                print('Successfully Sent Message:', response)
            except messaging.UnregisteredError:
                print(f"Device token {deviceId} is unregistered or invalid.")
            except Exception as e:
                print(f"An error occurred: {e}")
                
        return {'status': 'success', 'message': 'Notifications sent successfully'}
    
    except Exception as e:
        print(str(e))
        return {'status': 'failed', 'error':str(e)}
        
    





==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/api/urls.py
--------------------------------------------------

from django.urls import include, re_path as url
from django.urls import path
from basicinformation.api import views

urlpatterns = [
    url(r'get_institute_details/$',views.GetDetailsOfInstitute.as_view(),name='getDetailsOfInstitute'),
    url(r'institute_get_razorpay_key/$',views.InstituteRazorpayKey.as_view(), name='InstituteRazorpayKey'),
    url(r'institute_get_razorpay_key_new/$',views.InstituteRazorpayKeyToken.as_view(), name='InstituteRazorpayKeyToken'),
    url(r'check_exist_username/$', views.CheckUsernameExistance.as_view(),name='checkUsernameExistance'),
    url(r'get_agora_code/$', views.GetInstituteAgoraCode.as_view(),name='getInstituteAgoraCode'),
    url(r'get_social_media_list/$',views.GetSocialMediaList.as_view(), name='GetSocialMediaList'),
    url(r'device_id_check/$', views.DeviceIdCheck.as_view(), name='deviceIdCheck'),
    url(r'device_id_check_multi_institute/$',views.DeviceIdCheckMultiInstitute.as_view(), name='DeviceIdCheckMultiInstitute'),
    url(r'check_exist_username_multi_institute/$', views.CheckUsernameExistanceMultiInstitute.as_view(),name='CheckUsernameExistanceMultiInstitute'),
    url(r'check_institute_code_exist/$',views.CheckInstituteCode.as_view(), name='checkInstituteCode'),
    url(r'web_app_create/$', views.WebAppCreate.as_view(), name='webAppCreate'),
    url(r'check_webapp_url/$', views.CheckWebAppURL.as_view(), name='checkWebAppURL'),
    url(r'give_feedback_to_webapp/$',views.GiveFeedbackToWebapp.as_view(), name='GiveFeedbackToWebapp'),
    url(r'get_webapp_feedback/$', views.TeacherGetWebappFeedbacks.as_view(),name='TeacherGetWebappFeedbacks'),
    url(r'get_feedbackwise_webapps/$', views.TeacherGetFeedbackWiseWebapps.as_view(),name='TeacherGetFeedbackWiseWebapps'),
    url(r'get_webapp_logo/$', views.WebAppLogo.as_view(), name='getWebAppLogo'),
    url(r'staff_change_agora_code/(?P<agoraCode>.*)/$',views.StaffChangeAgoraCode.as_view(), name='TeacherDownloadBookBuyersDetailCSV'),
    url(r'get_webapp_videos_info/$',views.LastSevenDaysVideos.as_view(), name='LastSevenDaysVideos'),
    url(r'get_webapp_videos_info_moh/$',views.LastSevenDaysVideosMoh.as_view(), name='LastSevenDaysVideosMoh'),
    url(r'get_webapp_notes_info/$',views.LastSevenDaysNotes.as_view(), name='LastSevenDaysNotes'),
    url(r'get_webapp_notes_info_moh/$',views.LastSevenDaysNotesMoh.as_view(), name='LastSevenDaysNotesMoh'),
    url(r'get_webapp_students_info/$',views.LastSevenDaysStudents.as_view(), name='LastSevenDaysStudents'),
    url(r'get_webapp_students_info_moh/$',views.LastSevenDaysStudentsMoh.as_view(), name='LastSevenDaysStudentsMoh'),
    url(r'get_webapps_info/$', views.LastSevenDaysInstitutes.as_view(),name='LastSevenDaysInstitutes'),
    url(r'get_webapp_notes_info_datewise/$',views.GetWebappNotesInfoDateWise.as_view(), name='GetWebappNotesInfoDateWise'),
    url(r'get_webapp_videos_info_datewise/$',views.GetWebappVideosInfoDateWise.as_view(), name='GetWebappVideosInfoDateWise'),
    url(r'get_webapp_students_info_datewise/$',views.GetWebappStudentsInfoDateWise.as_view(), name='GetWebappStudentsInfoDateWise'),
    url(r'get_webapp_info_datewise/$', views.GetWebappContentInfoDateWise.as_view(),name='GetWebappContentInfoDateWise'),
    url(r'get_datewise_feedback_webapp/$',views.GetDateWiseFeedbackWebapps.as_view(), name='GetDateWiseFeedbackWebapps'),
    url(r'test_welcome_email/$', views.email_test.as_view(), name='email_test'),
    url(r'get_student_doubts_datewise/$',views.GetStudentDoubtsDateWise.as_view(), name='GetStudentDoubtsDateWise'),
    url(r'get_doubt_meetings_datewise/$',views.GetDoubtMeetingsDateWise.as_view(), name='GetDoubtMeetingsDateWise'),
    url(r'edit_webapp_feedback/$', views.EditWebAppFeedback.as_view(),name='EditWebAppFeedback'),
    url(r'get_top_webapp/$', views.GetTopTenWebappUsesUser.as_view(),name='GetTopTenWebappUsesUser'),
    url(r'get_all_webapp_analytics/$',views.GetAllWebAppAnalytics.as_view(), name='GetAllWebAppAnalytics'),
    url(r'get_date_feedback_wise_webapp/$',views.GetDateFeedbackWiseWebApp.as_view(), name='GetDateFeedbackWiseWebApp'),
    url(r'check_user_country/$',views.GetUserCountry.as_view(), name='GetUserCountry'),
    url(r'staff_download_testwin_studentsInfo/$',views.StaffDownloadTestwinStudentsInfo.as_view(), name='StaffDownloadTestwinStudentsInfo'),
    url(r'get_top_webapp_institute/$', views.StaffGetTopWebappInstitute.as_view(),name='StaffGetTopWebappInstitute'),
    url(r'get_top_premium_institute/$', views.StaffGetTopPremiumInstitute.as_view(),name='StaffGetTopPremiumInstitute'),
    url(r'retrive_institute_student/$', views.RetriveInstituteListStudent.as_view(),name='RetriveInstituteListStudent'),
    url(r'create_web_app_stepone/$',views.WebAppStepOne.as_view(), name='webappstepone'),
    url(r'create_web_app_steptwo/$',views.WebAppStepTwo.as_view(), name='webappsteptwo'),
    
    
    url(r'teacher_all_student_list/$',views.TeacherSeeAllStudents.as_view(), name='teacherAllStudentList'),
    url(r'teacher_individual_student_profile/$',views.TeacherGetStudentDetails.as_view(), name='teacherGetStudentDetails'),
    url(r'teacher_get_all_student_number/$',views.TeacherGetAllStudentNumber.as_view(), name='teacherGetAllStudentNumber'),
    url(r'teacher_general_data_institute/$',views.GeneralDataInstitute.as_view(), name='teacherDataInstitute'),
    url(r'teacher_get_batches/$', views.TeacherGetAllBatches.as_view(),name='teacherGetBatches'),
    url(r'teacher_students_batchwise/$',views.TeacherGetStudentsBatchWise.as_view(), name='teacherStudentBatchWise'),
    url(r'teacher_create_batch/$', views.TeacherCreateBatch.as_view(),name='teacherCreateBatch'),
    url(r'teacher_add_students_batch/$',views.TeacherAddStudentsBatch.as_view(), name='teacherAddStudentsBatch'),
    url(r'teacher_get_banners/$', views.InstituteGetBanners.as_view(),name='teacherGetBanners'),
    url(r'teacher_upload_banner/$', views.TeacherUploadBanner.as_view(),name='teacherUploadBanner'),
    url(r'teacher_send_notification/$',views.TeacherSendNotification.as_view(), name='teacherSendNotification'),
    url(r'teacher_start_native_live_video/$',views.TeacherStartNativeBatchWiseLiveVideo.as_view(), name='teacherStartNativeLiveVideo'),
    url(r'teacher_start_package_native_live_video/$',views.TeacherStartNativePackageWiseLiveVideo.as_view(), name='teacherNativePackageLiveVideo'),
    url(r'teacher_stop_native_live_video/$',views.TeacherStopNativeLiveVideo.as_view(), name='teacherStopNativeLiveVideo'),
    url(r'teacher_delete_banner/$', views.TeacherDeleteBanner.as_view(),name='teacherDeleteBanner'),
    url(r'teacher_delete_banner_video/$', views.TeacherDeleteBannerVideo.as_view(),name='TeacherDeleteBannerVideo'),
    url(r'teacher_delete_batch/$', views.TeacherDeleteBatch.as_view(),name='teacherDeleteBatch'),
    url(r'teacher_delete_test/$', views.TeacherDeleteTest.as_view(),name='teacherDeleteTest'),
    url(r'teacher_add_subject/$', views.TeacherAddSubject.as_view(),name='teacherAddSubject'),
    url(r'teacher_delete_subject/$', views.TeacherDeleteSubject.as_view(),name='teacherDeleteSubject'),
    url(r'teacher_check_app_version/$',views.TeacherCheckAppVersion.as_view(), name='teacherAppVersionCheck'),
    url(r'teacher_get_number_live/$', views.TeacherGetNumberLiveStudents.as_view(),name='teacherGetLiveStudentsNumber'),
    url(r'teacher_get_live_students/$', views.TeacherGetLiveStudentsInfo.as_view(),name='teacherGetLiveStudentsInfo'),
    url(r'teacher_get_join_requests/$',views.TeacherGetJoinRequests.as_view(), name='teacherGetJoinRequests'),
    url(r'teacher_accept_join_request/$',views.TeacherAcceptJoinRequest.as_view(), name='teacherAcceptJoinRequest'),
    url(r'teacher_get_new_user/$', views.TeacherCreateInstitute.as_view(),name='teacherCreateInstitute'),
    url(r'teacher_reject_join_request/$',views.TeacherRejectJoinRequest.as_view(), name='teacherRejectJoinRequest'),
    url(r'teacher_remove_student_batch/$',views.TeacherRemoveStudentBatch.as_view(), name='teacherRemoveStudentBatch'),
    url(r'teacher_delete_student/$', views.TeacherDeleteStudent.as_view(),name='teacherDeleteStudent'),
    url(r'teacher_check_student_trade/$', views.TeacherCheckStudentTrade.as_view(),name='TeacherCheckStudentTrade'),
    url(r'teacher_search_student/$', views.TeacherSearchStudent.as_view(),name='teacherSearchStudent'),
    url(r'teacher_search_student_name/$',views.TeacherSearchStudentByName.as_view(), name='teacherSearchStudentByName'),
    url(r'teacher_delete_chapter/$', views.TeacherDeleteChapter.as_view(),name='teacherDeleteChapter'),
    url(r'teacher_batch_student_add/$',views.TeacherAddStudentBatch.as_view(), name='teacherStudentBatchAdd'),
    url(r'teacher_add_razorpay_key/$',views.TeacherAddRazorpayKey.as_view(), name='teacherAddRazorpayKey'),
    url(r'teacher_update_profile/$', views.TeacherUpdateProfile.as_view(),name='teacherUpdateProfile'),
    url(r'teacher_get_profile/$', views.TeacherGetProfile.as_view(),name='teacherGetProfile'),
    url(r'teacher_get_subscription_validity/$',views.InstituteSubscriptionDate.as_view(), name='InstituteSubscriptionDate'),
    url(r'teacher_get_students_lead/$', views.TeacherGetStudentLeadData.as_view(),name='TeacherGetStudentLeadData'),
    url(r'teacher_change_lead_status/$',views.TeacherChangeLeadStatus.as_view(), name='TeacherChangeLeadStatus'),
    url(r'teacher_get_refferal_link/$', views.TeacherGetAllReferrallPost.as_view(),name='teacherGetAllReferrallPost'),
    url(r'teacher_get_students_report/$', views.TeacherGetStudentsDataReport.as_view(),name='TeacherGetStudentsDataReport'),
    url(r'teacher_get_csv_report/$', views.TeacherGetStudentDataCSV.as_view(),name='TeacherGetStudentDataCSV'),
    url(r'teacher_set_password/(?P<id>.*)/$',views.TeacherStudentChangePassword.as_view(), name='teacherStudentChangePassword'),
    url(r'teacher_get_username/(?P<id>.*)/$',views.TeacherGetUsername.as_view(), name='TeacherGetUsername'),
    url(r'teacher_get_report_csv/(?P<code>.*)/$',views.TeacherGetStudentSDataCSV.as_view(), name='TeacherGetStudentSDataCSV'),
    url(r'teacher_current_live_videos/$', views.TeacherGetCurrentLiveVideos.as_view(),name='teacherGetCurrentLiveVideos'),
    url(r'teacher_previous_live_videos/$', views.TeacherGetPreviousLiveVideos.as_view(),name='teacherGetPreviousLiveVideos'),
    url(r'teacher_student_info_live_video/$',views.TeacherGetAllStudentsLiveVideo.as_view(), name='teacherGetAllStudentsLiveVideo'),
    url(r'teacher_previous_google_live/$', views.TeacherGetPreviousGoogleMeetLive.as_view(),name='TeacherGetPreviousGoogleMeetLive'),
    url(r'teacher_change_student_googlemeet_leave_time/$', views.TeacherChangeMeetLeaveTime.as_view(),name='TeacherChangeMeetLeaveTime'),
    url(r'teacher_student_info_google_meet/$',views.TeacherGetAllStudentsGoogleLive.as_view(), name='TeacherGetAllStudentsGoogleLive'),
    url(r'teacher_get_all_live_messages/$', views.TeacherGetLiveMessagesHistory.as_view(),name='teacherGetLiveMessagesHistory'),
    url(r'teacher_create_phone/$', views.TeacherContactUsNumber.as_view(),name='teacherContactUsNumber'),
    url(r'teacher_get_phonecontact/$',views.TeacherGetContactNumbers.as_view(), name='teacherGetContactNumber'),
    url(r'teacher_delete_contact/$', views.TeacherDeleteContactNumber.as_view(),name='teacherDeleteContactNumber'),
    url(r'teacher_see_batch_change_requests/$',views.TeacherShowBatchChangeRequests.as_view(), name='teacherSeeBatchChangeRequests'),
    url(r'teacher_accept_batch_change_request/$',views.TeacherAcceptBatchChangeRequest.as_view(), name='teacherAcceptBatchChangeRequest'),
    url(r'teacher_deny_batch_change_request/$',views.TeacherDenyBatchChangeRequest.as_view(), name='teacherDenyBatchChangeRequest'),
    url(r'teacher_codeagora/$', views.TeacherCodeAgora.as_view(),name='teacherGetAgoraCode'),
    url(r'teacher_get_institute_code/$',views.TeacherGetInstituteCode.as_view(), name='teacherGetInstituteCode'),
    url(r'teacher_firebase_token/$', views.SaveTeacherFireBaseToken.as_view(),name='SaveTeacherFireBaseToken'),
    url(r'principle_firebase_token/$', views.SavePrincipleFirebaseToken.as_view(),name='SavePrincipleFirebaseToken'),
    url(r'teacher_update_social_media/$',views.InstituteSocialMediaRecord.as_view(), name='InstituteSocialMediaRecord'),
    url(r'teacher_upload_aboutus_banner/$',views.TeacherUploadAboutUsBanner.as_view(), name='teacherUploadAboutUsBanner'),
    url(r'teacher_update_aboutus_description/$',views.TeacherAboutUsDescription.as_view(), name='teacherAboutUsDescription'),
    url(r'teacher_get_aboutus_description/$',views.TeacherGetAboutUsDescription.as_view(), name='teacherGetAboutUsDescription'),
    url(r'teacher_get_aboutus_banners/$',views.TeacherAboutUsGetBanner.as_view(), name='teacherGetAboutUsBanners'),
    url(r'teacher_update_facebook/$',views.InstituteUpdateFacebook.as_view(), name='teacherUpdateFacebook'),
    url(r'teacher_update_instagram/$',views.InstituteUpdateInstagram.as_view(), name='teacherUpdateInstagram'),
    url(r'teacher_update_email/$', views.InstituteUpdateEmail.as_view(),name='teacherUpdateEmail'),
    url(r'teacher_update_phone_number/$',views.TeacherUpdatePhoneNumber.as_view(), name='teacherUpdatePhoneNumber'),
    url(r'teacher_delete_aboutus_banner/$',views.TeacherDeleteAboutUsBanner.as_view(), name='teacherDeleteAboutUsBanner'),
    url(r'teacher_get_all_phoneNumbers/$',views.TeacherGetPhoneNumbers.as_view(), name='teacherGetPhoneNumbers'),
    url(r'teacher_get_studentDeviceIds/$',views.TeacherGetStudentDeviceIds.as_view(), name='teacherGetStudentDeviceIds'),
    url(r'teacher_search_studentDeviceIds/$',views.TeacherSearchStudentDeviceId.as_view(), name='teacherSearchStudentDeviceId'),
    url(r'teacher_search_studentDeviceIds_bynumber/$',views.TeacherSearchStudentDeviceIdByNumber.as_view(), name='teacherSearchStudentDeviceIdByNumber'),
    url(r'teacher_delete_studentDeviceId/$',views.TeacherRemoveDeviceId.as_view(), name='teacherRemoveDeviceId'),
    url(r'teacher_change_acccess_tests/$', views.TeacherChangeStudentRestrictionTests.as_view(),name='teacherChangeStudentRestrictionTests'),
    url(r'teacher_change_access_videos/$', views.TeacherChangeStudentRestrictionVideos.as_view(),name='teacherChangeStudentRestrictionVideos'),
    url(r'teacher_change_access_notes/$', views.TeacherChangeStudentRestrictionNotes.as_view(),name='teacherChangeStudentRestrictionNotes'),
    url(r'teacher_change_access_live_videos/$', views.TeacherChangeStudentRestrictionLiveVideos.as_view(),name='teacherChangeStudentRestrictionLiveVideos'),
    url(r'teacher_change_access_youtube_live_videos/$', views.TeacherChangeStudentRestrictionYouTubeLiveVideos.as_view(),name='TeacherChangeStudentRestrictionYouTubeLiveVideos'),
    url(r'teacher_student_restriction_list/$',views.TeacherStudentRestriction.as_view(), name='teacherStudentRestriction'),
    url(r'teacher_post_issue/$', views.TeacherRegisterIssue.as_view(),name='teacherRegisterIssue'),
    url(r'teacher_get_issues/$', views.TeacherGetAllIssues.as_view(),name='teacherGetIssues'),
    url(r'teacher_edit_subject_name/$',views.TeacherEditSubjectName.as_view(), name='teacherEditSubjectName'),
    url(r'teacher_edit_course_name/$',views.TeacherEditCourseName.as_view(), name='teacherEditCourseName'),
    url(r'teacher_edit_batch_name/$',views.TeacherEditBatchName.as_view(), name='teacherEditBatchName'),
    url(r'teacher_update_twitterurl/$',views.InstituteUpdateTwitter.as_view(), name='teacherUpdateTwitter'),
    url(r'teacher_update_websiteurl/$',views.InstituteUpdateWebSite.as_view(), name='teacherUpdateWebsite'),
    url(r'teacher_update_telegramurl/$',views.InstituteUpdateTelegram.as_view(), name='InstituteUpdateTelegram'),
    url(r'teacher_create_branch/$', views.CreateBranch.as_view(),name='teacherCreateBranch'),
    url(r'teacher_get_branches/$', views.TeacherAllBranches.as_view(),name='teacherAllBranches'),
    url(r'teacher_batch_branch/$', views.CreateBatchBranch.as_view(),name='teacherCreateBranch'),
    url(r'teacher_get_batches_branch/$',views.TeacherBranchBatches.as_view(), name='teacherBranchBatches'),
    url(r'teacher_student_restriction_search/$',views.TeacherStudentRestrictionSearch.as_view(), name='teacherStudentRestrictionSearch'),
    url(r'live_get_total_numberstudents/$',views.AntMediaGetNumberOfStudents.as_view(), name='antMediaGetNumberofStudents'),
    url(r'admin_get_permissionlist/$', views.AdminTeacherAllPermissions.as_view(),name='adminGetAllPermissionList'),
    url(r'get_teacher_permissions/$',views.TeacherGetPermissions.as_view(), name='getTeacherPermissions'),
    url(r'admin_assign_permissions/$',views.AdminAssignTeacherPermissions.as_view(), name='adminAssignPermission'),
    url(r'admin_remove_permissions/$', views.AdminRemoveTeacherPermission.as_view(),name='adminRemoveTeacherPermission'),
    url(r'get_my_permissions_teacher/$',views.GetMyPermissionsTeacher.as_view(), name='getMyPermissionsTeacher'),
    url(r'get_my_server/$', views.GetMyServer.as_view(), name='getMyServer'),
    url(r'teacher_antmedia_current_livevideos/$',views.TeacherAntMediaGetCurrentLiveVideos.as_view(), name='teacherGetLiveVideosAntMedia'),
    url(r'staff_get_institute/$',views.StaffGetInstitute.as_view(), name='getAllInstitute'),
    url(r'staff_get_subject/$',views.StaffGetSubjectList.as_view(), name='getAllSubject'),
    url(r'staff_add_subject/$', views.StaffAddSubject.as_view(), name='createSubject'),
    url(r'staff_get_institute_subjectlist/$',views.StaffGetInstituteSubjectList.as_view(), name='individualinstitutesubject'),
    url(r'staff_remove_subject/$',views.StaffRemoveSubject.as_view(), name='removeSubject'),
    url(r'connect_package_banner/$', views.TeacherConnectPackageBanner.as_view(),name='teacherConnectPackageBanner'),
    url(r'connect_video_banner/$', views.TeacherConnectVideoBanner.as_view(),name='TeacherConnectVideoBanner'),
    url(r'teacher_get_show_other_courses/$',views.TeacherGetShowOtherCourses.as_view(), name='teacherGetShowOtherCourses'),
    url(r'teacher_post_other_courses/$',views.TeacherSetToShowCourses.as_view(), name='teachersetOtherCourses'),
    url(r'doubt_call_notification/$',views.DoubtCallNotification.as_view(), name='doubtCallNotification'),
    url(r'teacher_get_batchwise_student_list/$',views.TeacherSeeBatchWiseStudents.as_view(), name='TeacherSeeBatchWiseStudents'),
    url(r'teacher_get_packagewise_student_list/$',views.TeacherSeePackageWiseStudents.as_view(), name='TeacherSeePackageWiseStudents'),
    url(r'teacher_get_batchwise_student_report_csv/(?P<institute_code>.*)/(?P<batch_id>.*)/$',
        views.TeacherGetBatchWiseStudentReportCSV.as_view(), name='TeacherGetStudentTestPerformanceDataCSV'),
    url(r'teacher_get_packagewise_student_report_csv/(?P<institute_code>.*)/(?P<package_id>.*)/$',
        views.TeacherGetPackageWiseStudentReportCSV.as_view(), name='TeacherGetPackageWiseStudentReportCSV'),
    url(r'teacher_get_app_link/$',views.TeacherGetWebAppLink.as_view(), name='teacherGetAppUrl'),
    url(r'teacher_get_all_web_apps/$',views.TeacherGetAllWebApps.as_view(), name='TeacherGetAllWebApps'),
    url(r'teacher_get_all_web_apps_moh/$',views.TeacherGetAllWebAppsMoh.as_view(), name='TeacherGetAllWebAppsMoh'),
    url(r'teacher_see_individual_web_app/$',views.TeacherSeeIndividualWebApp.as_view(), name='TeacherSeeIndividualWebApp'),
    url(r'teacher_get_web_apps_datewise/$',views.TeacherGetWebAppsDateWise.as_view(), name='TeacherGetWebAppsDateWise'),
    url(r'teacher_get_web_apps_datewise_moh/$',views.TeacherGetWebAppsDateWiseMoh.as_view(), name='TeacherGetWebAppsDateWiseMoh'),
    url(r'teacher_upload_tutorial_poster/$',views.TeacherUploadTutorialPoster.as_view(), name='TeacherUploadTutorialPoster'),
    url(r'teacher_get_tutorial_poster/$',views.TeacherGetTutorialPoster.as_view(), name='TeacherGetTutorialPoster'),
    url(r'teacher_edit_tutorial_poster/$',views.TeacherEditTutorialPoster.as_view(), name='TeacherEditTutorialPoster'),
    url(r'teacher_delete_tutorial_poster/$',views.TeacherDeleteTutorialPoster.as_view(), name='TeacherDeleteTutorialPoster'),
    url(r'teacher_get_available_courses/$', views.TeacherGetAllAvailableCourses.as_view(),name='teacherGetAllAvailableCourses'),
    url(r'teacher_register_available_courses/$',views.TeacherRegisterCourses.as_view(), name='teacherRegisterCourses'),
    url(r'get_teacher_ip_address/$',views.GetTeacherIpAddress.as_view(), name='GetTeacherIpAddress'),
    url(r'teacher_change_agora_code/$',views.TeacherChangeAgoraCode.as_view(), name='TeacherChangeAgoraCode'),
    url(r'teacher_get_batches_students/$', views.TeacherGetAllBatchesStudents.as_view(),name='TeacherGetAllBatchesStudents'),
    url(r'teacher_get_registered_issues/$',views.TeacherGetRegisteredIssues.as_view(), name='TeacherGetRegisteredIssues'),
    url(r'get_welcome_note/$', views.GetWelcomeNote.as_view(), name='GetWelcomeNote'),
    url(r'teacher_get_languages/$', views.TeacherGetAllLanguages.as_view(),name='TeacherGetAllLanguages'),
    url(r'teacher_get_own_coursewise_students/$',views.TeacherGetOwnCourseWiseStudents.as_view(), name='TeacherGetOwnCourseWiseStudents'),
    url(r'teacher_get_new_students/$',views.TeacherGetNewStudents.as_view(), name='TeacherGetNewStudents'),
    url(r'teacher_update_course/$', views.TeacherUpdateCourse.as_view(),name='TeacherUpdateCourse'),
    url(r'teacher_get_subjects_doubtApp/$',views.TeacherGetSubjectsDoubtApp.as_view(), name='TeacherGetSubjectsDoubtApp'),
    url(r'staff_send_notification_for_testing/$',views.StaffSendNotificationForTesting.as_view(), name='StaffSendNotificationForTesting'),
    url(r'staff_add_course_teacher/(?P<username>.*)/(?P<course_ids>.*)/$',
        views.StaffAddCourseToTeacher.as_view(), name='StaffAddCourseToTeacher'),
    url(r'staff_download_webappDetails/$', views.StaffDownloadWebappStudentsInfoDateWise.as_view(),name='StaffDownloadWebappStudentsInfoDateWise'),
    url(r'teacher_get_currency_types/$',views.TeacherGetCurrencyTypes.as_view(), name='TeacherGetCurrencyTypes'),
    url(r'teacher_update_currency_type/$',views.TeacherUpdateCurrencyType.as_view(), name='TeacherUpdateCurrencyType'),
    url(r'teacher_get_footer_banner/$',views.TeacherGetFooterBanner.as_view(), name='TeacherGetFooterBanner'),
    url(r'teacher_get_categorywise_footer_banner/$',views.TeacherGetAllCotegoryFooterBanner.as_view(), name='TeacherGetAllCotegoryFooterBanner'),
    url(r'teacher_post_enquiry/$', views.TeacherPostEnquiry.as_view(),name='TeacherPostEnquiry'),
    url(r'teacher_get_enquiry/$', views.TeacherGetEnquirys.as_view(),name='TeacherGetEnquirys'),
    url(r'teacher_buy_sms_package/$',views.TeacherBuySMSPackage.as_view(), name='TeacherBuySMSPackage'),
    url(r'teacher_get_sms_package_info/$',views.TeacherGetSMSBalanceInfo.as_view(), name='TeacherGetSMSBalanceInfo'),
    url(r'unknown_user_enquiry/$', views.UnknownUserPostEnquiry.as_view(),name='UnknownUserPostEnquiry'),
    url(r'teacher_get_unknownuser_enquiry/$',views.TeacherGetUnknownUserEnquiry.as_view(), name='TeacherGetUnknownUserEnquiry'),
    url(r'teacher_delete_unknownuser_enquiry/$',views.TeacherDeleteUnknownUserEnquiry.as_view(), name='TeacherDeleteUnknownUserEnquiry'),
    url(r'get_all_marketing_videos/$',views.GetAllMarketingVideos.as_view(), name='GetAllMarketingVideos'),
    url(r'staff_see_lastSevenDays_institutesData/$', views.StaffSeeLastSevenDaysUploadedInstituteData.as_view(),name='StaffSeeLastSevenDaysUploadedInstituteData'),
    url(r'get_teacher_app_marquee/$',views.GetTeacherAppMarquee.as_view(), name='GetTeacherAppMarquee'),
    url(r'teacher_do_package_activitie/$',views.TeacherDoPackageActivitie.as_view(), name='TeacherDoPackageActivitie'),
    url(r'staff_delete_institute_data/$',views.StaffDeleteInstituteData.as_view(), name='StaffDeleteInstituteData'),
    url(r'staff_add_subject_institute/$',views.StaffAddSubjectInstitute.as_view(), name='StaffAddSubjectInstitute'),
    url(r'staff_create_test/$', views.StaffCreateTest.as_view(),name='StaffCreateTest'),
    url(r'teacher_request_study_content/$', views.TeacherRequestStudyContentAPI.as_view(),name='TeacherRequestStudyContentAPI'),
    url(r'satff_get_study_content_request/$',views.SatffGetStudyContentRequest.as_view(), name='SatffGetStudyContentRequest'),
    url(r'get_all_premium_institute/$',views.GetAllPremiumInstitute.as_view(), name='GetAllPremiumInstitute'),
    url(r'get_teacher_webapp_progress/$',views.GetWebAppCreationProgress.as_view(), name='getWebAppCreationProgress'),
    url(r'teacher_get_complaint/$', views.TeacherGetComplaint.as_view(),name='TeacherGetComplaint'),
    url(r'notification/$', views.NotificationTesting.as_view(),name='TeacherGetComplaint'),
    url(r'teacher_get_subInstitute_student_profile/$',views.TeacherGetSubInstituteStudentProfile.as_view(), name='TeacherGetSubInstituteStudentProfile'),
    url(r'teacher_update_subInstitute_student_profile/$',views.TeacherUpdateSubInstituteStudentProfile.as_view(), name='TeacherUpdateSubInstituteStudentProfile'),
    url(r'teacher_get_students_list_by_subInstitute',views.TeacherGetStudentsListBySubInstitute.as_view(),name='TeacherGetStudentsListBySubInstitute'),
    url(r'institute_admin_management/$', views.InstituteManagementAdminCreateInstitute.as_view(),name='InstituteManagementAdminCreateInstitute'),
    url(r'retrive_institute_admin/$', views.RetriveInstituteListAdmin.as_view(),name='RetriveInstituteListAdmin'),
    url(r'teacher_change_access_all_student/$', views.TeacherRestrictionAllStudent.as_view(),name='TeacherRestrictionAllStudent'),
    

    url(r'generate_device_id/$',views.CreateDeviceId.as_view(), name='createDeviceId'),
    url(r'student_homescreen_banners/$',views.StudentHomeScreenBanners.as_view(), name='studentHomeScreenBanners'),
    url(r'student_subjects/$', views.StudentAllSubjects.as_view(),name='studentsAllSubjects'),
    url(r'student_subject_chapters/$',views.StudentSubjectChapters.as_view(), name='studentSubjectChapters'),
    url(r'student_institute_information/$',views.StudentInstituteInformation.as_view(), name='studentInstituteInformation'),
    url(r'student_check_app_version/$',views.StudentCheckAppVersion.as_view(), name='studentCheckAppVersion'),
    url(r'student_join_live_video/$', views.StudentJoinNativeLiveVideo.as_view(),name='studentJoinNativeLiveVideo'),
    url(r'student_join_google_live_video/$', views.StudentJoinGoogleLiveVideo.as_view(),name='StudentJoinGoogleLiveVideo'),
    url(r'student_leave_live_video/$',views.StudentLeaveLiveVideo.as_view(), name='studentLeaveLiveVideo'),
    url(r'student_check_deviceId/$', views.StudentDeviceIdCheck.as_view(),name='studentCheckDeviceId'),
    url(r'student_get_batches/$', views.NewStudentBatches.as_view(),name='studentNewBatches'),
    url(r'student_batches/$', views.StudentGetAllBatches.as_view(),name='studentAllBatches'),
    url(r'student_check_join_request/$', views.StudentCheckJoinRequestProgress.as_view(),name='studentJoinRequestProgress'),
    url(r'student_get_all_teachers/$',views.StudentGetAllTeachers.as_view(), name='studentGetAllTeachers'),
    url(r'student_get_profile/$', views.StudentGetProfile.as_view(),name='studentGetProfile'),
    url(r'student_get_subinstitute_profile/$', views.StudentGetSubInstituteProfile.as_view(),name='SubInstituteStudentGetProfile'),
    url(r'student_update_profile/$', views.StudentUpdateProfile.as_view(),name='studentUpdateProfile'),
    url(r'student_update_subinstitute_profile/$', views.StudentUpdateSubInstituteProfile.as_view(),name='StudentUpdateSubInstituteProfile'),
    url(r'student_update_profile_picture/$',views.StudentUpdateProfilePicture.as_view(), name='studentUpdateProfilePicture'),
    url(r'student_get_profile_picture/$',views.StudentGetProfilePicture.as_view(), name='studentGetProfilePicture'),
    url(r'student_get_contactNumber/$',views.StudentGetContactNumbers.as_view(), name='studentGetContactNumbers'),
    url(r'student_batch_change_request/$',views.StudentBatchChangeRequest.as_view(), name='studentChangeBatchRequest'),
    url(r'student_about_us_banners/$',views.StudentGetAboutUsBanners.as_view(), name='studentAboutUsBanners'),
    url(r'student_about_us_description/$',views.StudentGetAboutUsDescription.as_view(), name='studentAboutUsDescription'),
    url(r'student_get_teacher_numbers/$',views.StudentGetTeacherNumbers.as_view(), name='studentGetTeacherNumbers'),
    url(r'student_get_socialmedia_contacts/$',views.StudentGetSocialMediaContacts.as_view(), name='studentSocialMediaContacts'),
    url(r'student_register_note_count/$',views.StudentRegisterNoteCount.as_view(), name='studentRegisterNoteCount'),
    url(r'student_register_video_count/$',views.StudentRegisterVideoCount.as_view(), name='studentRegisterVideoCount'),
    url(r'student_register_test_count/$',views.StudentRegisterTestCount.as_view(), name='StudentRegisterTestCount'),
    url(r'student_banners_new/$',views.StudentBannersHomeScreenRedirect.as_view(), name='studentBannersNew'),
    url(r'banners_student_new/$',views.StudentBannersHomeScreenRedirect.as_view(), name='bannersForStudents'),
    url(r'osn_register_student_new/$',views.OSN_RegisterStudentNew.as_view(), name='OSN_RegisterStudentNew'),
    url(r'student_force_logout/$', views.StudentForceLogOut.as_view(),name='studentForceLogout'),
    url(r'student_get_content_numbers/$',views.StudentGetContentNumbers.as_view(), name='studentGetContentNumbers'),
    url(r'student_bookmark_question/$', views.StudentAddQuestionBookmark.as_view(),name='StudentAddQuestionBookmark'),
    url(r'student_bookmark_video/$', views.StudentAddVideoBookmark.as_view(),name='StudentAddVideoBookmark'),
    url(r'student_bookmark_note/$', views.StudentAddNoteBookmark.as_view(),name='StudentAddNoteBookmark'),
    url(r'student_all_bookmarks/$', views.StudentGetAllBookmarks.as_view(),name='StudentGetAllBookmarks'),
    url(r'welcome_reminder_test/$', views.WelcomeReminderTesting.as_view(),name='WelcomeReminderTesting'),
    url(r'get_teachers_list_coursewise/$',views.GetTeachersListCourseWise.as_view(), name='GetTeachersListCourseWise'),
    url(r'check_institute_easebuzz_account/$',views.CheckInstituteEasebuzzAcount.as_view(), name='CheckInstituteEasebuzzAcount'),
    url(r'student_get_languages/$', views.StudentGetAllLanguages.as_view(),name='StudentGetAllLanguages'),
    url(r'student_add_languages/$', views.StudentAddLanguages.as_view(),name='StudentAddLanguages'),
    url(r'student_see_selected_languages/$',views.StudentSeeSelectedLanguages.as_view(), name='StudentSeeSelectedLanguages'),
    url(r'student_get_chapters_testwin/$', views.StudentGetChaptersTestWinApp.as_view(),name='StudentGetChaptersTestWinApp'),
    url(r'get_student_address_through_ip/$', views.GetStudentAddressThroughIpAddress.as_view(),name='GetStudentAddressThroughIpAddress'),
    url(r'student_get_subjects_doubtApp/$', views.StudentGetSubjectsOwnCourseWiseDoubtApp.as_view(),name='StudentGetSubjectsOwnCourseWiseDoubtApp'),
    url(r'student_get_chapters_subjectwise_doubtApp/$',views.StudentGetChaptersSubjectWiseDoubtApp.as_view(), name='StudentGetChaptersSubjectWiseDoubtApp'),
    url(r'student_get_currency_type/$',views.StudentGetCurrencyType.as_view(), name='StudentGetCurrencyType'),
    url(r'student_get_currency_type_new/$',views.StudentGetCurrencyTypeNew.as_view(), name='StudentGetCurrencyTypeNew'),
    url(r'student_do_package_activitie/$',views.StudentDoPackageActivitie.as_view(), name='StudentDoPackageActivitie'),
    url(r'save_buy_package_error/$',views.SaveBuyPackageError.as_view(), name='SaveBuyPackageError'),
    url(r'student_doing_complaint/$',views.StudentDoingComplaint.as_view(), name='StudentDoingComplaint'),
    url(r'student_check_app_version_update/$',views.StudentCheckAppVersionUpdate.as_view(), name='StudentCheckAppVersionUpdate'),
    
    
    url(r'teacher_add_student_batch/$',views.TeacherAddStudentBatchLimit.as_view(), name='TeacherAddStudentBatchLimit'),
    url(r'institute_details/$', views.DetailTeacherFireBaseToken.as_view(),name='DetailTeacherFireBaseToken'),
    url(r'csa_bihar_create_idcard/$', views.CSABiharCreateIDCard.as_view(),name='CSABiharCreateIDCard'),
    url(r'csa_bihar_get_idcard/$', views.CSABiharIDCardGet.as_view(),name='CSABiharIDCardGet'),
    url(r'csa_bihar_all_students/$', views.CSABiharallCards.as_view(),name='CSABiharallCards'),
    url(r'teacher_get_card_id/$', views.CSABiharteachergetCard.as_view(),name='CSABiharteachergetCard'),
    
    url(r'function/$', views.Function.as_view(),name='function'),
    url(r'student_get_package_history/$', views.StudentGetPackageHistory.as_view(),name='student_get_package_history'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/basicinformation/api/views.py
--------------------------------------------------

from datetime import datetime, timedelta
from rest_framework.views import APIView
from django.contrib.auth.models import User, Group
from django.contrib.auth.hashers import make_password, check_password
from django.db import transaction
from rest_framework.response import Response
from basicinformation.models import *
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *
from membership.models import *
from management.models import *
from basicinformation.models import *
from content.models import *
from django.contrib.postgres.search import SearchVector
import requests
from rest_framework.authtoken.models import Token
from django_user_agents.utils import get_user_agent
from django.http import HttpResponse
import csv
from doubts.models import *
import os
import subprocess
from PIL import Image
from rest_framework.authtoken.models import Token
from django.contrib.auth.models import User, Group
from django.db.models import Max
from django.core import mail
from django.template.loader import render_to_string
from bodhiai import settings
from django.db.models import Count, Q
from content.content_helper import *

class TeacherSeeAllStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            if me.profile.mainTeacher == True:
                if me.profile.institute.name == 'Oxford':
                    all_students = Student.objects.select_related('studentuser').prefetch_related('batches').filter(institute=me.profile.institute).order_by('-id')[:100]
                else:
                    all_students = Student.objects.select_related('studentuser').prefetch_related('batches').filter(institute=me.profile.institute).order_by('-id')
            else:
                all_students = []
                mybatches = me.profile.batches.all()
                students = Student.objects.select_related('studentuser').prefetch_related('batches').filter(institute=me.profile.institute, batches__in=mybatches).order_by('-id')
                all_students.extend(students)
                
            all_students_list = []
            for stud in all_students:
                try:
                    student_details = StudentDetails.objects.get(student=stud)
                    if student_details.fullName:
                        name = student_details.fullName
                    else:
                        name = stud.name
                        
                    if student_details.phone:
                        phone = student_details.phone
                    else:
                        number = stud.studentuser.username
                        ph = number.split('@')
                        phone = ph[0]
                        
                    jdate = student_details.jdate
                    
                except:
                    name = stud.name
                    jdate = None
                    
                try:
                    photo = stud.photo
                    fullName = stud.fullName
                
                    if me.profile.institute.name == 'Oxford':
                        email = 'No data'
                    else:
                        email = stud.email
                except:
                    photo = None
                    fullName = None
                    email = None
                
                if me.profile.institute.code =="eclassopedia":
                    if student_details.phone:
                        phone = student_details.phone
                        phone = "+"+str(phone)
                    else:
                        number = stud.studentuser.username
                        last_at_index = number.rfind('@')
                        if last_at_index != -1:
                            phone = number[:last_at_index]

                if me.profile.institute.name == 'Oxford':
                    details_dict = {'photo': photo, 'phone': 'confidential','email': 'confidential', 'fullName': fullName}
                else:
                    details_dict = {'photo': photo, 'phone': phone,'email': email, 'fullName': fullName, 'joining_date': jdate}
                
                batches = stud.batches.all()
                student_batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    student_batches_list.append(bat_dict)
                    
                student_dict = {
                    'id': stud.id, 
                    'name': name,
                    'batches': student_batches_list, 
                    'details': details_dict
                    }
                all_students_list.append(student_dict)

            context = {'studentList': all_students_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherSearchStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            user_name = data['user_name']
            students =\
                Student.objects.select_related('studentuser').filter(Q(name__icontains=user_name) | Q(
                    studentuser__username__icontains=user_name), institute=me.profile.institute)
            all_students_list = []
            for stud in students:
                try:
                    student_details = StudentDetails.objects.get(student=stud)
                    photo = student_details.photo
                    fullName = student_details.fullName
                    phone = student_details.phone
                    email = student_details.email

                except:
                    phone = None
                    photo = None
                    fullName = None
                    email = None
                    
                if me.profile.institute.name == 'Oxford':
                    details_dict = {'photo': photo, 'phone': 'confidential','email': 'confidential', 'fullName': fullName}
                else:
                    details_dict = {'photo': photo, 'phone': stud.studentuser.username,'email': email, 'fullName': fullName}

                batches = stud.batches.all()
                student_batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    student_batches_list.append(bat_dict)

                student_dict = {'id': stud.id, 'name': stud.name,'batches': student_batches_list, 'details': details_dict}
                all_students_list.append(student_dict)
            context = {'studentList': all_students_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherCreateInstitute(APIView):
    def post(self, request):
        data = request.data
        try:
            institute_name = data['institute_name']
            code = data['code']
            username = data['user_name']
            instituteAddress = data.get('instituteAddress')
            serverKey = data['serverKey']

            try:
                Institute.objects.get(code=code)
                context = {'status': 'Failed','message': 'Already Created this Code'}

            except Institute.DoesNotExist:
                institute = Institute()
                institute.name = institute_name
                institute.code = code
                institute.serverKey = serverKey
                institute.instituteAddress = instituteAddress
                institute.save()

                instituteDetails = InstituteDetails()
                instituteDetails.institute = institute
                instituteDetails.save()

                batch = Batch()
                batch.name = 'Outer'
                batch.institute = institute
                batch.save()
                
                user = User.objects.create_user(username=username, password='123', email=None)
                group = Group.objects.get(name='Teachers')
                group.user_set.add(user)
                teacher = Teacher(teacheruser=user, name=institute_name +' Teacher', institute=institute, mainTeacher=True)
                batches = Batch.objects.filter(institute=institute)
                subject6 = Subject.objects.get(id=1680)
                subject7 = Subject.objects.get(id=7178)
                subject8 = Subject.objects.get(id=1680)
                subject9 = Subject.objects.get(id=6629)

                teacher.save()
                for bat in batches:
                    teacher.batches.add(bat)
                    teacher.save()
                teacher.subjects.add(subject6)
                teacher.subjects.add(subject7)
                teacher.subjects.add(subject8)
                teacher.subjects.add(subject9)
                teacher.save()
                context = {'status': 'success', 'hint': "done"}

            return Response(context)
        except Exception as e:
            return Response(str(e))

class TeacherSearchStudentByName(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            name = data['name']
            students =\
                Student.objects.select_related('studentuser').prefetch_related('batches').filter(
                    institute=me.profile.institute, name__icontains=name)
            all_students_list = []
            for stud in students:
                try:
                    student_details = StudentDetails.objects.get(student=stud)
                    photo = student_details.photo
                    fullName = student_details.fullName
                    phone = student_details.phone
                    email = student_details.email
                except:
                    phone = None
                    photo = None
                    fullName = None
                    email = None
                    
                if me.profile.institute.name == 'Oxford':
                    details_dict = {'photo': photo, 'phone': 'confidential','email': 'confidential', 'fullName': fullName}
                else:
                    details_dict = {'photo': photo, 'phone': stud.studentuser.username,'email': email, 'fullName': fullName}
                    
                batches = stud.batches.all()
                student_batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    student_batches_list.append(bat_dict)

                student_dict = {'id': stud.id, 'name': stud.name,'batches': student_batches_list, 'details': details_dict}
                all_students_list.append(student_dict)
            context = {'studentList': all_students_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class GeneralDataInstitute(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            numberStudents = Student.objects.filter(institute=me.profile.institute).count()
            numberBatches = Batch.objects.filter(institute=me.profile.institute).count()
            if me.profile.mainTeacher:
                context = {'numberStudents': numberStudents,'numberBatches': numberBatches}
            else:
                numberBatches = me.profile.batches.all().count()
                context = {'numberStudents': numberStudents,'numberBatches': numberBatches}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherGetAllBatches(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        
        try:
            if me.profile.mainTeacher:
                batches = Batch.objects.filter(institute=me.profile.institute)
            else:
                batches = me.profile.batches.all()
                
            all_batches_list = []
            for batch in batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                all_batches_list.append(batch_dict)
                
            context = {'batches': all_batches_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherGetStudentsBatchWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            students = Student.objects.select_related('studentuser').prefetch_related('batches').filter(batches=batch).order_by('name')
            all_students_list = []
            for student in students:
                details = StudentDetails.objects.get(student=student)
                photo = details.photo
                phone = details.phone
                address = details.address
                email = details.email
                fullName = details.fullName
                details_dict = {'photo': photo, 'phone': student.studentuser.username,
                        'address': address, 'email': email, 'fullName': fullName}
                batches = student.batches.all()
                student_batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    student_batches_list.append(bat_dict)

                student_dict = {'id': student.id, 'name': student.name,'batches': student_batches_list, 'details': details_dict}
                all_students_list.append(student_dict)
                context = {'studentList': all_students_list}
                
        except Exception as e:
                context = {'message': str(e)} 
                      
        return Response(context)

class TeacherCreateBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_name = data['batch_name']
        batch_name = batch_name.replace('\"', '')
        if batch_name == '' or batch_name == None:
            context = {'status': 'Failed','message': 'Please Enter a Valid Name for Batch'}
            return Response(context)
        try:
            institute = me.profile.institute
            my_batches = me.profile.batches.all()
            for batch in my_batches:
                if batch.name == batch_name:
                    context = {'status': 'Failed', 'message': 'Batch with {} name Already Exists'.format(batch_name)}
                    return Response(context)
                
            batch = Batch()
            batch.name = batch_name
            batch.institute = institute
            batch.save()
            me.profile.batches.add(batch)
            context = {'status': 'Success','message': 'Batch {} Successfully Created !'.format(batch_name)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherAddStudentsBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        student_ids = data['student_ids']
        try:
            student_list = student_ids.strip('][').split(',')
            batch = Batch.objects.get(id=batch_id)
            for student_id in student_list:
                student = Student.objects.get(id=student_id)
                student.batches.add(batch)
                liveVideos = NativeLiveVideo.objects.filter(batches=batch, live=True)
                for lv in liveVideos:
                    lv.students.add(student)
                    lv.save()
            context = {'status': 'Success', 'message': 'Students Successfully Added to Batch'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentHomeScreenBanners(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.institute
        banners = Banner.objects.filter(institute=institute).order_by('id')
        banner_list = []
        for banner in banners:
            banner_list.append(banner.link)
        context = {'banners': banner_list}
        return Response(context)

class StudentBannersHomeScreenRedirect(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.institute
        try:
            banners = Banner.objects.filter(institute=institute).select_related('package').order_by('id')
            banner_list = []
            bought_package_helper = StudentBroughtPackagesHelper(me.profile)
            for banner in banners:
                if banner.package:
                    bought = bought_package_helper.check_package_brought(banner.package)
                    package_id = banner.package.id
                    marketLevelPackage = banner.package.marketLevelPackage
                else:
                    package_id = None
                    marketLevelPackage = None
                    bought = None
                    
                if banner.video:
                    video = banner.video
                else:
                    video = None

                banner_dict = {
                    'id': banner.id,
                    'link': banner.link, 
                    'package_id': package_id, 
                    'bought': bought,
                    'marketLevelPackage':marketLevelPackage,
                    'video':video
                    }
                banner_list.append(banner_dict)
            context = {'banners': banner_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentAllSubjects(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            my_courses = []
            for batch in batches:
                courses = batch.course.all()
                for course in courses:
                    if course in my_courses:
                        pass
                    else:
                        my_courses.append(course)
                        
            subject_list = []
            for course in my_courses:
                subjects = course.subjects.all()
                for subject in subjects:
                    if subject in subject_list:
                        pass
                    else:
                        subject_list.append(subject)

            subject_dict_list = []
            for subject in subject_list:
                subject_dict = {'id': subject.id, 'name': subject.name, 'icon': subject.icon}
                subject_dict_list.append(subject_dict)
            context = {'subjects': subject_dict_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentSubjectChapters(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject).order_by('id')
            chapters_list = []
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
            context = {'chapters': chapters_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class InstituteGetBanners(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            banners = Banner.objects.filter(institute=me.profile.institute).order_by('id')
            banner_list = []
            for banner in banners:
                try:
                    package_id = banner.package.id
                    if package_id:
                        pacakge_dict = {'id': banner.package.id, 'name': banner.package.title}
                except:
                    pacakge_dict = {}
                    
                try:
                    video = banner.video
                except:
                    video = None

                institute = banner.institute
                institute_dict = {'id': institute.id, 'name': institute.name}
                banner_dict = {
                    'id': banner.id, 
                    'link': banner.link, 
                    'institute': institute_dict,
                    'package': pacakge_dict,
                    'video':video
                    }
                banner_list.append(banner_dict)
            context = {'banners': banner_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class TeacherUploadBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_link = data['link']
            banner_link = banner_link.replace("\"", '')
            try:
                banner = Banner.objects.get(link=banner_link)
                context = {'status': 'Failed', 'message': 'Banner Already Exists'}
            except:
                banner = Banner(link=banner_link, institute=me.profile.institute)
                banner.save()
            context = {'status': 'Success','message': 'Banner Successfully Uploaded'}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class TeacherConnectPackageBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_id = data['banner_id']
            package_id = data['package_id']
            banner = Banner.objects.get(id=banner_id)
            
            if package_id:
                package = Package.objects.get(id=package_id)
                banner.package = package
            else:
                banner.package = None
                
            banner.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}

        return Response(context)
    
class TeacherConnectVideoBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_id = data['banner_id']
            video = data['video']
            banner = Banner.objects.get(id=banner_id)
            if video:
                banner.video = video
            else:
                banner.video = None
            banner.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}

        return Response(context)

class TeacherSendNotification(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            message = data['message']
            to_send = data['to']
            
            try:
                batch_ids = data['batch_ids']
                batch_list = batch_ids.strip('][').split(',')
            except:
                batch_list = None
                
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {'title':'New Notification','body': message,}
            
            if server_key != None:
                if batch_list:
                    for bat in batch_ids:
                        send_notification_to_multipurpose.delay(serverKey=server_key,notification=notification,batch_id=int(bat))
                else:
                    send_notification_to_multipurpose.delay(serverKey=server_key,notification=notification,institute_id=me.profile.institute.id)
                
                context = {'status': 'Success', 'message': 'Message Sent'}
                
            elif json_file_url != None:
                if batch_list:
                    for bat in batch_ids:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, institute_id = me.profile.institute.id)
                
                context = {'status': 'Success', 'message': 'Message Sent'}
                
            else:
                context = {'status': 'Failed', 'message': 'No Key found for Institute'}
                
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
            
        return Response(context)

class TeacherStartNativeBatchWiseLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_ids = data['package_ids']
            batch_list = batch_ids.strip('][').split(',')
            previous_live_videos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
            for plv in previous_live_videos:
                plv.live = False
                plv.save()

            nativeLiveVideo = NativeLiveVideo()
            nativeLiveVideo.teacher = me.profile
            nativeLiveVideo.title = data.get('title')
            nativeLiveVideo.live = True
            nativeLiveVideo.save()

            all_student_list = []
            if batch_list[0] == 0 or batch_list[0] == '0':
                students = Student.objects.filter(institute=me.profile.institute)
                for student in students:
                    all_student_list.append(student)
            else:
                try:
                    server_key = me.profile.institute.serverKey
                except Exception as e:
                    server_key = None
                    
                try:
                    json_file_url = me.profile.institute.json_file
                except Exception as e:
                    json_file_url = None
                    
                notification = {"title": f"LIVE CLASS","body": '{} has started a live video'.format(me.profile.name),}
                if me.profile.photo:
                    notification["image"] = f"{me.profile.photo}"
                    
                for batch_id in batch_list:
                    batch = Batch.objects.get(id=batch_id)
                    students = Student.objects.filter(batches=batch)
                    nativeLiveVideo.batches.add(batch)
                    nativeLiveVideo.save()
                    
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))
                      
                    for student in students:
                        all_student_list.append(student)
                        
            for student in all_student_list:
                nativeLiveVideo.students.add(student)
                
            try:
                main_student = Student.objects.get(studentuser__username='7732847694@ou')
                main_student2 = Student.objects.get(studentuser__username='9800895674')
                main_student3 = Student.objects.get(studentuser__username='8305030663@ou')

                nativeLiveVideo.students.add(main_student)
                nativeLiveVideo.students.add(main_student2)
                nativeLiveVideo.students.add(main_student3)
                
            except Exception as e:
                print(str(e))
                
            context = {'status': 'Success', 'message': 'Live Video Created', 'id': nativeLiveVideo.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherStartNativePackageWiseLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_ids = data['package_ids']
            package_list = package_ids.strip('][').split(',')
            previous_live_videos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
            
            for plv in previous_live_videos:
                plv.live = False
                plv.save()
                
            nativeLiveVideo = NativeLiveVideo()
            nativeLiveVideo.teacher = me.profile
            nativeLiveVideo.live = True
            nativeLiveVideo.save()
            
            for pack in package_list:
                package = Package.objects.get(id=pack)
                students = package.students.all()
                nativeLiveVideo.packages.add(package)
                nativeLiveVideo.save()
                
                try:
                    server_key = me.profile.institute.serverKey
                except Exception as e:
                    server_key = None
                    
                try:
                    json_file_url = me.profile.institute.json_file
                except Exception as e:
                    json_file_url = None
                    
                notification = {"title": f"LIVE CLASS","body": '{} has started a live video'.format(me.profile.name),}
                
                if me.profile.photo:
                    notification["image"] = f"{me.profile.photo}"
                    
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=int(pack))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=int(pack))
               
                for student in students:
                    nativeLiveVideo.students.add(student)
                    
            context = {'status': 'Success', 'message': 'Live Video Created', 'id': nativeLiveVideo.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherStopNativeLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            nativeLiveVideo = NativeLiveVideo.objects.get(id=video_id)
            nativeLiveVideo.live = False
            nativeLiveVideo.save()
            context = {'status': 'Success', 'message': 'Live Video Stopped'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherDeleteBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        banner_id = data['banner_id']
        try:
            banner = Banner.objects.get(id=banner_id)
            banner.delete()
            context = {'status': 'Success', 'message': 'Banner Deleted'}
        except:
            context = {'status': 'Failed', 'message': 'Banner not found'}
        return Response(context)
    
class TeacherDeleteBannerVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_id = data['banner_id']
            banner = Banner.objects.get(id=banner_id)
            banner.video = None  
            banner.save()
            context = {'status': True, 'message': 'Banner Video Deleted'}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)

class TeacherDeleteBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            first_batch = Batch.objects.filter(institute=me.profile.institute).order_by('id').first()
            if batch.id == first_batch.id:
                context = {'status': 'Failed','message': f'{batch.name} batch can\'t be deleted'}
                return Response(context)
            
            students = Student.objects.filter(batches=batch)
            for student in students:
                
                try:
                    joinRequest = StudentJoinRequest.objects.get(student=student,batches =batch)
                    joinRequest.delete()
                except:
                    pass
                
                student.batches.remove(batch)
                remaining_batches = student.batches.all()
                print('remaining batches {}'.format(remaining_batches))
                if len(remaining_batches) < 1:
                    outer = first_batch
                    student.batches.add(outer)
                student.save()
            batch.delete()
            context = {'status': 'Success', 'message': 'Batch Deleted!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherAddSubject(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            subject_name = data['subject_name']
            try:
                langauge_id = data['langauge_id']
            except:
                langauge_id = None
                
            try:
                icon = data['icon']
            except:
                icon = None
                
            subject_name = subject_name.replace("\"", "")
            subjects = me.profile.subjects.all()
            for sub in subjects:
                if sub.name == subject_name:
                    context = {'status': 'Failed', 'message': 'Subject with this name Already Exists'}
                    return Response(context)
                
            new_subject = Subject(name=subject_name)
            if icon:
                new_subject.icon = icon
            if langauge_id:
                lang = Language.objects.get(id=langauge_id)
                new_subject.language = lang
            new_subject.save()

            chapter = Chapter(subject=new_subject, code=1.1, name='All Categories')
            chapter.save()
            me.profile.subjects.add(new_subject)
            context = {'status': 'Success', 'message': 'Subject Added'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class TeacherDeleteSubject(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        try:
            subject = Subject.objects.get(id=subject_id)
            if me.profile.mainTeacher:
                teacherSubjects = Teacher.objects.filter(subjects=subject, institute=me.profile.institute)
                for ts in teacherSubjects:
                    ts.subjects.remove(subject)
                    ts.save()
            else:
                me.profile.subjects.remove(subject)
                me.profile.save()
                
            context = {'status': 'Success', 'message': 'Subject Removed Successfully'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentInstituteInformation(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        institute_dict = {
            'name': institute.name, 
            'logo': institute.logo, 
            'code': institute.code,
            'key': institute.serverKey, 
            'aboutUs': institute.aboutUs
            }
        return Response(institute_dict)

class StudentCheckAppVersion(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        version = data['version']

        if me.profile.institute.code != 'electriclearning':
            try:
                appStoreVersion = GoogleAppStoreLatestVersion.objects.get(institute=me.profile.institute)
                playVersion = appStoreVersion.version
                
                if int(version) >= playVersion:
                    appStoreVersion.version = version
                    appStoreVersion.student = me.profile
                    appStoreVersion.save()
                    if me.profile.institute.code == 'maths_classes' or\
                            me.profile.institute.code == 'ccbms' or\
                            me.profile.institute.code == 'academywings' or\
                            me.profile.institute.code == 'dharampalsir' or\
                            me.profile.institute.code == 'mathsprashantgoyal' or\
                            me.profile.institute.code == 'raghavsir' or\
                            me.profile.institute.code == 'bkclass' or\
                            me.profile.institute.code == 'clv' or\
                            me.profile.institute.code == 'ayan' or\
                            me.profile.institute.code == 'testwin' or\
                            me.profile.institute.code == 'himed' or\
                            me.profile.institute.code == 'atomix' or\
                            me.profile.institute.code == 'aryaclasses' or\
                            me.profile.institute.code == 'fomma' :
                        me.profile.accessVideo = True
                        me.profile.accessYouTubeLiveVideos = True 
                        me.profile.accessTestWinApp = True
                        me.profile.accessNotes = True
                        me.profile.accessTests = True
                        me.profile.accessCourses = True
                        me.profile.save()
                    context = {'status': 'Success','playStoreVersion': appStoreVersion.version, 'update': False}
                    return Response(context)
                
                elif int(version) < playVersion:
                    if me.profile.institute.code == 'aryaclasses' and int(version) < 53:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.accessCourses = False
                        me.profile.save()
                    
                    if me.profile.institute.code == 'fomma' and int(version) <= 15:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'himed' and int(version) <= 6:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.accessNotes = False
                        me.profile.accessTests = False
                        me.profile.save()

                    if me.profile.institute.code == 'atomix' and int(version) < 5:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.accessNotes = False
                        me.profile.accessTests = False
                        me.profile.save()

                    if me.profile.institute.code == 'maths_classes' and int(version) <= 15:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'ccbms' and int(version) <= 15:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'academywings' and int(version) <= 6:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'dharampalsir':
                        if int(version) < 25:
                            me.profile.accessVideo = False
                            me.profile.accessYouTubeLiveVideos = False
                            me.profile.save()
                        else:
                            me.profile.accessVideo = True
                            me.profile.accessYouTubeLiveVideos = True
                            me.profile.save()

                    if me.profile.institute.code == 'mathsprashantgoyal':
                        if int(version) < 31:
                            me.profile.accessVideo = False
                            me.profile.accessYouTubeLiveVideos = False
                            me.profile.save()
                        else:
                            me.profile.accessVideo = True
                            me.profile.accessYouTubeLiveVideos = True
                            me.profile.save()

                    if me.profile.institute.code == 'raghavsir':
                        if int(version) < 18:
                            me.profile.accessVideo = False
                            me.profile.accessYouTubeLiveVideos = False
                            me.profile.save()
                        else:
                            me.profile.accessVideo = True
                            me.profile.accessYouTubeLiveVideos = True
                            me.profile.save()

                    if me.profile.institute.code == 'edge' and int(version) <= 13:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'clv' and int(version) <= 47:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'bkclass':
                        if int(version) < 27:
                            me.profile.accessVideo = False
                            me.profile.accessYouTubeLiveVideos = False
                            me.profile.save()
                        else:
                            me.profile.accessVideo = True
                            me.profile.accessYouTubeLiveVideos = True
                            me.profile.save()

                    if me.profile.institute.code == 'ayan':
                        if int(version) < 7:
                            me.profile.accessVideo = False
                            me.profile.accessYouTubeLiveVideos = False
                            me.profile.save()
                        else:
                            me.profile.accessVideo = True
                            me.profile.accessYouTubeLiveVideos = True
                            me.profile.save()

                    if me.profile.institute.code == 'sirajam' and int(version) < 2:
                        me.profile.accessVideo = False
                        me.profile.accessYouTubeLiveVideos = False
                        me.profile.save()

                    if me.profile.institute.code == 'testwin' and int(version) < 12:
                        me.profile.accessTestWinApp = False
                        me.profile.save()

                    context ={'status': 'Success','playStoreVersion': appStoreVersion.version, 'update': True}
                    return Response(context)
                
            except GoogleAppStoreLatestVersion.DoesNotExist:
                appStoreVersion = GoogleAppStoreLatestVersion()
                appStoreVersion.student = me.profile
                appStoreVersion.institute = me.profile.institute
                appStoreVersion.version = version
                appStoreVersion.save()
                context = {'status': 'Success','playStoreVersion': appStoreVersion.version, 'update': False}
                return Response(context)

        else:
            context = {'status': 'Success','playStoreVersion': None, 'update': False}
            return Response(context)

class TeacherCheckAppVersion(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        version = data['version']
        playVersion = GoogleAppStoreTeacherLatestVersion.objects.all()
        if len(playVersion) == 0:
            playVersion = GoogleAppStoreTeacherLatestVersion()
            playVersion.version = version
            playVersion.teacher = me.profile
            playVersion.save()
            context = {'status': 'Success', 'playStoreVersion': playVersion.version, 'update': False}
        else:
            playVersion = playVersion[0]
            latestVersion = playVersion.version
            if int(version) >= latestVersion:
                playVersion.teacher = me.profile
                playVersion.version = version
                playVersion.save()
                context = {'status': 'Success', 'playStoreVersion': playVersion.version, 'update': False}
            elif int(version) < latestVersion:
                context = {'status': 'Success', 'playStoreVersion': playVersion.version, 'update': False}
                
        return Response(context)

class TeacherDeleteTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            if me.profile.mainTeacher or test.createdBy == me.profile:
                test.delete()
                context = {'status': 'Success', 'message': 'Test Deleted'}
            else:
                context = {'status': 'Failed', 'message': 'You do not have permission to delete this test.'}
        
        except Test.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Test not found.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentJoinNativeLiveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']
        time = data['join_time']
        try:
            try:
                nativeLiveVideo = NativeLiveVideo.objects.get(id=video_id, live=True)
            except:
                oldVideo = NativeLiveVideo.objects.get(id=video_id)
                teacher = oldVideo.teacher
                nativeLiveVideo = NativeLiveVideo.objects.get(teacher=teacher, live=True)
            try:
                studentInfo = LiveVideoStudentInformation.objects.get(video=nativeLiveVideo, student=me.profile, leaveTime=None)
                context = {'status': 'Success'}
            except:
                studentInfo = LiveVideoStudentInformation(video=nativeLiveVideo, student=me.profile, joinTime=time)
                studentInfo.save()
                context = {'status': 'Success', 'message': 'Student Joined'}
                
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Live video not found'}
            
        return Response(context)

class StudentJoinGoogleLiveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            try:
                googleMeet = GoogleMeetLive.objects.get(id=video_id, live=True)
            except:
                oldVideo = GoogleMeetLive.objects.get(id=video_id)
                teacher = oldVideo.teacher
                googleMeet = GoogleMeetLive.objects.get(teacher=teacher, live=True)
                
            try:
                studentInfo = GoogleLiveVideoStudentInformation.objects.get(video=googleMeet, student=me.profile, leaveTime=None)
                context = {'status': 'Success'}
            except:
                studentInfo = GoogleLiveVideoStudentInformation()
                studentInfo.video = googleMeet
                studentInfo.student = me.profile
                studentInfo.joinTime = timezone.now()
                studentInfo.save()
                context = {'status': 'Success', 'message': 'Student Joined'}
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Live video not found'}
        return Response(context)

class StudentLeaveLiveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            time = data['leaveTime']
            video_id = data['video_id']
            print('leave video {}'.format(video_id))
            nativeLiveVideo = NativeLiveVideo.objects.get(id=video_id)
            try:
                studentInfo = LiveVideoStudentInformation.objects.get(video=nativeLiveVideo, student=me.profile, leaveTime=None)
                studentInfo.leaveTime = time
                studentInfo.save()
                context = {'status': 'Success', 'message': 'Video Successfully Left.'}
            except Exception as e:
                context = {'status': 'Failed', 'message': 'No Joining Information Found'}
                
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetNumberLiveStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            nativeLiveVideo = NativeLiveVideo.objects.get(id=video_id)
            infos_id_list = []
            stillInfos = LiveVideoStudentInformation.objects.filter(video=nativeLiveVideo, leaveTime=None)

            for si in stillInfos:
                if si.id in infos_id_list:
                    pass
                else:
                    infos_id_list.append(si.id)
            numberLive = len(infos_id_list)

            context = {'live': numberLive, 'message': 'Success'}
        except Exception as e:
            context = {'live': 0, 'message': str(e)}
            
        return Response(context)

class TeacherGetLiveStudentsInfo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        student_list = []
        try:
            nativeLiveVideo = NativeLiveVideo.objects.get(id=video_id)
            stillInfos = LiveVideoStudentInformation.objects.filter(video=nativeLiveVideo, leaveTime=None)
            for si in stillInfos:
                try:
                    coHost = StudentHostLiveVideo.objects.get(student=si.student, video=nativeLiveVideo)
                    liveStatus = coHost.inProcess
                except:
                    liveStatus = False
                    
                si_dict = {
                    'student': si.student.name, 
                    'username': si.student.studentuser.username,
                    'joinTime': si.joinTime, 
                    'student_id': si.student.id, 
                    'live': liveStatus
                    }
                student_list.append(si_dict)
            context = {'students': student_list}
        except Exception as e:
            context = {'students': student_list, 'message': str(e)}
        return Response(context)

class StudentDeviceIdCheck(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        deviceId = data['deviceId']
        
        if me.profile.institute.deviceCheck == False:
            context = {'status': 'Success', 'logout': False}
        else:
            try:
                studentDeviceId = StudentDeviceId.objects.get(student=me.profile)
                if studentDeviceId.deviceId == deviceId:
                    context = {'status': 'Success', 'logout': False}
                else:
                    context = {'status': 'Success', 'logout': True}
                    
            except Exception as e:
                studentDeviceId = StudentDeviceId()
                studentDeviceId.student = me.profile
                studentDeviceId.deviceId = deviceId
                studentDeviceId.save()
                context = {'status': 'Success', 'logout': False}
                
        return Response(context)

class DeviceIdCheck(APIView):
    def post(self, request):
        data = request.data
        deviceId = data['deviceId']
        username = data['username']

        if deviceId != 'studentWebapp':
            try:
                student = Student.objects.get(studentuser__username=username)
            except Student.DoesNotExist:
                context = {'status': 'Failed'}
                return Response(context)
            
            if student.institute.deviceCheck == False:
                context = {'status': 'Success', 'logout': False}
            else:
                try:
                    studentDeviceId = StudentDeviceId.objects.get(student=student)
                    if studentDeviceId.deviceId == deviceId:
                        context = {'status': 'Success', 'logout': False}
                    else:
                        context = {'status': 'Success', 'logout': True}
                        
                except StudentDeviceId.DoesNotExist:
                    studentDeviceId = StudentDeviceId()
                    studentDeviceId.student = student
                    studentDeviceId.deviceId = deviceId
                    studentDeviceId.save()
                    context = {'status': 'Success', 'logout': False}
        else:
            try:
                student = Student.objects.get(studentuser__username=username)
                context = {'status': 'Success'}
            except Student.DoesNotExist:
                context = {'status': 'Failed'}

        return Response(context)

class DeviceIdCheckMultiInstitute(APIView):
    def post(self, request):
        data = request.data
        deviceId = data['deviceId']
        phone = data['phone']
        admin_code = data['admin_code']

        if deviceId != 'studentWebapp':
            try:
                username = phone + "@" + admin_code + "_"
                student = Student.objects.get(studentuser__username__startswith=username)
            except Student.DoesNotExist:
                context = {'status': 'Failed'}
                return Response(context)
            
            if student.institute.deviceCheck == False:
                context = {'status': 'Success', 'logout': False}
            else:
                try:
                    studentDeviceId = StudentDeviceId.objects.get(student=student)
                    if studentDeviceId.deviceId == deviceId:
                        context = {'status': 'Success', 'logout': False}
                    else:
                        context = {'status': 'Success', 'logout': True}
                        
                except StudentDeviceId.DoesNotExist:
                    studentDeviceId = StudentDeviceId()
                    studentDeviceId.student = student
                    studentDeviceId.deviceId = deviceId
                    studentDeviceId.save()
                    context = {'status': 'Success', 'logout': False}
        else:
            try:
                student = Student.objects.get(studentuser__username=username)
                context = {'status': 'Success'}
            except Student.DoesNotExist:
                context = {'status': 'Failed'}

        return Response(context)

class CreateDeviceId(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        deviceId = data['deviceId']
        try:
            studentDeviceId = StudentDeviceId.objects.get(student=me.profile)
            devId = studentDeviceId.deviceId
            context = {'deviceId': devId}
        except Exception as e:
            studentDeviceId = StudentDeviceId(student=me.profile, deviceId=deviceId)
            studentDeviceId.save()
            context = {'deviceId': deviceId}
        return Response(context)

class StudentGetAllBatches(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            my_batches = me.profile.batches.all()
            all_batches = []
            for batch in my_batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                all_batches.append(batch_dict)
            context = {'batches': all_batches}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class NewStudentBatches(APIView):
    def post(self, request):
        data = request.data
        institute_code = data['institute_code']
        print('institute code {}'.format(institute_code))
        try:
            institute = Institute.objects.get(code=institute_code.strip())
        except:
            institute_code_new = "'"+institute_code+"'"
            institute = Institute.objects.get(code=institute_code_new)
            
        batches = Batch.objects.filter(institute=institute).order_by('-id')
        all_batches = []
        for batch in batches:
            batch_dict = {'id': batch.id, 'name': batch.name}
            all_batches.append(batch_dict)
        context = {'batches': all_batches}
        return Response(context)

class StudentCheckJoinRequestProgress(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            joinRequest = StudentJoinRequest.objects.get(student=me.profile)
            progress = joinRequest.progress
            context = {'status': 'Success', 'joined': True}
        except:
            context = {'status': 'Success', 'joined': True}
        return Response(context)

class TeacherGetJoinRequests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        try:
            all_requests = []
            joinRequests =\
                StudentJoinRequest.objects.select_related("student").prefetch_related("batches").filter(
                    institute=institute, progress=True).order_by('-time')[:100]
            for jr in joinRequests:
                time = jr.time
                all_batches = []
                stud = jr.student
                try:
                    studentDetails = StudentDetails.objects.get(student=stud)
                    photo = studentDetails.photo
                except Exception as e:
                    photo = None
                    
                if me.profile.institute.name == 'Oxford':
                    student_info = {'id': stud.id, 'name': stud.name,'username': 'confidential', 'photo': photo}
                else:
                    student_info = {'id': stud.id, 'name': stud.name,'username': stud.studentuser.username, 'photo': photo}

                batches = jr.batches.all()
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    all_batches.append(bat_dict)
                jr_dict = {'id': jr.id, 'batches': all_batches,'student': student_info, 'date': jr.time}
                all_requests.append(jr_dict)
            context = {'joinRequests': all_requests}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherAcceptJoinRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            request_id = data['request_id']
            batches = data['batches']
            batch_list = batches.strip('][').split(',')
            joinRequest = StudentJoinRequest.objects.get(id=request_id)
            joinRequest.progress = False
            joinRequest.result = True
            joinRequest.save()
            student = joinRequest.student
            student.batches.clear()
            for bat in batch_list:
                student.batches.add(bat)
                student.save()
                try:
                    liveVideos = NativeLiveVideo.objects.filter(batches=bat, live=True)
                    for lv in liveVideos:
                        lv.students.add(student)
                        lv.save()
                except Exception as e:
                    print('join request current livve {}'.format(str(e)))
                    
            context = {'status': 'Success', 'message': 'Student added to Batches'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherRejectJoinRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            request_id = data['request_id']
            joinRequest = StudentJoinRequest.objects.get(id=request_id)
            joinRequest.progress = False
            joinRequest.result = True
            joinRequest.save()
            context = {'status': 'Success', 'message': 'Request Denied !'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetStudentDetails(APIView):
    def post(self, request):
        try:
            me = Teach(self.request.user)
            data = request.data
            student_id = data['student_id']
            student = Student.objects.get(id=student_id)
            student_details, created = StudentDetails.objects.get_or_create(student=student)
            boughtPackages = StudentPackage.objects.filter(student=student)
            boughtPackageshistory = StudentBoughtPackageHistory.objects.filter(student=student)
            context = {}
            packages = []
            for bp in boughtPackages:
                try:
                    name = bp.package.title
                    start_date = bp.startDate
                    end_date = bp.endDate
                    price = bp.package.price
                    pack_dict = {'name': name, 'start_date': start_date,'end_date': end_date, 'price': price}
                    packages.append(pack_dict)
                except:
                    pass
                
            for bph in boughtPackageshistory:
                try:
                    name = bph.package
                    price = bph.packagePrice
                    start_date = bph.startDate
                    end_date = bph.endDate
                    pack_dict = {'name': name, 'start_date': start_date,'end_date': end_date, 'price': price}
                    packages.append(pack_dict)
                except:
                    pass

            context['package_details'] = packages
            
            try:
                photo = student_details.photo
                email = student_details.email
                parentPhone = student_details.parentPhone
                address = student_details.address
                jdate = student_details.jdate
                isBlocked = student_details.isBlocked
                standard = student_details.standard
                goal = student_details.goal
                board = student_details.board
                medium = student_details.medium
                reference_teacher_name = student_details.reference_teacher_name
            except:
                photo = None
                email = None
                parentPhone = None
                address = None
                isBlocked = False
                standard = None
                goal = None
                board = None
                medium = None
                reference_teacher_name = None
                
            if student_details.fullName:
                fullName = student_details.fullName
            else:
                fullName = student.name

            if student_details.phone:
                phone = student_details.phone

            else:
                number = student.studentuser.username
                ph = number.split('@')
                phone = ph[0]
            
            if me.profile.institute.code =="eclassopedia":
                if me.profile.mainTeacher == True:
                    if student_details.email:
                        email = student_details.email
                    else:
                        number = student.studentuser.username
                        last_at_index = number.rfind('@')
                        if last_at_index != -1:
                            email = number[:last_at_index]
                else:
                    email = 'confidential'
                        
                if student_details.phone:
                    phone = student_details.phone
                    phone = "+"+str(phone)
                else:
                    phone = None
                    
                if student_details.parentPhone:
                    parentPhone = student_details.parentPhone
                    parentPhone = "+"+str(parentPhone)
                else:
                    parentPhone = None

            if me.profile.institute.name == 'Oxford':
                details_dict = {'photo': photo, 'phone': 'confidential', 'email': 'confidential', 'fullName': fullName, 'parentPhone': 'confidential', 'address': address, 'joining_date': jdate, 'isBlocked': isBlocked, 'standard': standard, }
            else:
                details_dict = {'photo': photo, 'phone': phone, 'email': email, 'fullName': fullName, 'parentPhone': parentPhone, 'address': address, 'joining_date': jdate, 'isBlocked': isBlocked, 'standard': standard,'medium':medium,'board':board,'goal':goal,'reference_teacher_name': reference_teacher_name}
            
            sub_institute_details = SubInstituteStudent.objects.filter(student=student).first()
            if sub_institute_details:
                sub_institute_details_dict = {'category': sub_institute_details.category, 'category_image':sub_institute_details.category_image, 'trusted_person_name': sub_institute_details.trusted_person_name, 'trusted_person_number': sub_institute_details.trusted_person_number, 'alternative_number': sub_institute_details.alternative_number, 'secondary_marksheet': sub_institute_details.secondary_marksheet, 'aadhar_card': sub_institute_details.aadhar_card,'aadhar_card_number': sub_institute_details.aadhar_card_number, 'slc': sub_institute_details.slc}
                context['sub_institute_details'] = sub_institute_details_dict

            batches = student.batches.all()
            student_batches_list = []
            for bat in batches:
                bat_dict = {'id': bat.id, 'name': bat.name}
                student_batches_list.append(bat_dict)
                
            student_dict = {'id': student.id, 'name': fullName,'batches': student_batches_list, 'details': details_dict}
            context['details'] = student_dict
            test_marks = StudentMarks.objects.filter(student=student)
            test_details = []
            
            for ma in test_marks:
                attempted_questions = ma.questions.all()
                right_number = 0
                wrong_number = 0
                skipped_number = 0
                total_marks = 0

                for aq in attempted_questions:
                    question = aq.question
                    attempted = aq.attempted
                    right = aq.right
                    if right:
                        total_marks += question.marks
                        right_number += 1
                    elif right == False:
                        total_marks -= question.negativeMarks
                        wrong_number += 1
                    if aq.attempted == False:
                        skipped_number += 1
                    time = aq.time

                ma_dict =\
                    {'id': ma.id, 'time': ma.time, 'attemptTime': ma.attemptTime, 'marks': total_marks,
                        'right': right_number, 'wrong': wrong_number, 'skipped': skipped_number}
                test_details.append(ma_dict)
            context['test_details'] =test_details

            attendance = Attendance.objects.filter(student=student)
            attendance_list = []
            for att in attendance:
                att_dict = {'id': att.id, 'date': att.date,'type': att.attendanceType}
                attendance_list.append(att_dict)
            context['attendance_details']= attendance_list
            
        except Exception as e:
            context = {'message':str(e)}
        
        return Response(context)

class TeacherRemoveStudentBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        student_id = data['student_id']
        try:
            batch = Batch.objects.get(id=batch_id)
            student = Student.objects.get(id=student_id)
            student.batches.remove(batch)
            context = {'status': 'Success', 'message': 'Student removed from {} batch'.format(batch.name)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            student = Student.objects.get(id=student_id)
            student_user = student.studentuser
            student_user.delete()
            context = {'status': 'Success','message': 'Student Delete Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCheckStudentTrade(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            student = Student.objects.select_related('student').get(id=student_id)
            trade = StudentTradePurchase.objects.filter(student=student)
            if trade:
                context = {'status': True, 'message': 'Student have Purchased Trade'}
            else:
                student_user = student.studentuser
                student_user.delete()
                context = {'status': 'Success', 'message': 'Student Deleted Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteChapter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        sub_list = [267, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 11, 12, 1680, 6628, 6629, 7178]
        try:
            chapter = Chapter.objects.get(id=chapter_id)
            sub = chapter.subject
            if sub.id in sub_list:
                context = {'status': 'Failed', 'message': 'This chapter can not be deleted'}
                return Response(context)
            chapter.delete()
            context = {'status': 'Success', 'message': 'Chapter Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddStudentBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_list = data['batches']
            student_id = data['student_id']
            batches = batch_list.strip('][').split(',')
            student = Student.objects.get(id=student_id)

            student_batches = student.batches.all()
            for bat in student_batches:
                liveVideos = NativeLiveVideo.objects.filter(batches=bat, live=True)
                for lv in liveVideos:
                    lv.students.remove(student)
                    lv.save()
            student.batches.clear()

            for bat in batches:
                batch = Batch.objects.get(id=bat)
                try:
                    batch_change = BatchChangeRequest.objects.get(student=student,batches = batch)
                    batch_change.delete()
                except:
                    pass
                
                student.batches.add(batch)
                student.save()
                liveVideos = NativeLiveVideo.objects.filter(batches=batch, live=True)
                for lv in liveVideos:
                    lv.students.add(student)
                    lv.save()
                    
            context = {'status': 'Success', 'message': 'Student added to batch'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentGetAllTeachers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            teachers_list = []
            for teacher in teachers:
                teacher_dict = {'id': teacher.id, 'name': teacher.name}
                teachers_list.append(teacher_dict)
            context = {'teachers': teachers_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherGetCurrentLiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        live_videos_list = []

        try:
            if me.profile.mainTeacher:
                liveVideos = NativeLiveVideo.objects.filter(teacher__institute=institute, live=True).select_related('teacher').prefetch_related('batches').order_by('-id')
            else:
                liveVideos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True).select_related('teacher').prefetch_related('batches').order_by('-id')

            for lv in liveVideos:
                teacher_dict = {
                    'id': lv.teacher.id,
                    'name': lv.teacher.name,
                    'username': lv.teacher.teacheruser.username
                }

                batches_list = [{'id': bat.id, 'name': bat.name} for bat in lv.batches.all()]

                lv_dict = {
                    'id': lv.id,
                    'teacher': teacher_dict,
                    'time': lv.time,
                    'batches': batches_list
                }

                live_videos_list.append(lv_dict)
            
            context = {'liveVideos': live_videos_list}

        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class TeacherGetCurrentLiveVideosOld(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        live_videos_list = []
        try:
            for teacher in teachers:
                liveVideos = NativeLiveVideo.objects.filter(teacher=teacher, live=True).order_by('-id')
                for lv in liveVideos:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username}
                    batches = lv.batches.all()
                    batches_list = []
                    for bat in batches:
                        bat_dict = {'id': bat.id, 'name': bat.name}
                        batches_list.append(bat_dict)
                        
                    lv_dict = {'id': lv.id, 'teacher': teacher_dict,'time': lv.time, 'batches': batches_list}
                    live_videos_list.append(lv_dict)
                    
            context = {'liveVideos': live_videos_list}
            
        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class TeacherGetPreviousLiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        live_videos_list = []
        try:
            if me.profile.mainTeacher:
                liveVideos = NativeLiveVideo.objects.filter(teacher__institute=me.profile.institute, live=False).select_related('teacher', 'teacher__teacheruser').prefetch_related('batches').order_by('-id')[:100]
            else:
                liveVideos = NativeLiveVideo.objects.filter(teacher=me.profile, live=False).select_related('teacher', 'teacher__teacheruser').prefetch_related('batches').order_by('-id')[:100]

            for lv in liveVideos:
                teacher_obj = lv.teacher
                teacher_dict = {
                    'id': teacher_obj.id,
                    'name': teacher_obj.name,
                    'username': teacher_obj.teacheruser.username
                }

                batches_list = [{'id': bat.id, 'name': bat.name} for bat in lv.batches.all()]

                lv_dict = {
                    'id': lv.id,
                    'teacher': teacher_dict,
                    'time': lv.time,
                    'batches': batches_list
                }

                live_videos_list.append(lv_dict)

            context = {'liveVideos': live_videos_list}

        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class TeacherGetPreviousLiveVideosOld(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        live_videos_list = []
        liveVideos = NativeLiveVideo.objects.select_related('teacher__teacheruser').prefetch_related('batches').filter(teacher__institute=me.profile.institute, live=False).order_by('-id')
        finalLiveVideos = liveVideos[:100]
        try:
            for lv in finalLiveVideos:
                teacher_obj = lv.teacher
                teacher_dict = {'id': teacher_obj.id, 'name': teacher_obj.name,'username': teacher_obj.teacheruser.username}
                batches = lv.batches.all()
                batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(bat_dict)
                lv_dict = {'id': lv.id, 'teacher': teacher_dict,'time': lv.time, 'batches': batches_list}
                live_videos_list.append(lv_dict)
            context = {'liveVideos': live_videos_list}
            
        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class TeacherGetAllStudentsLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        videoId = data['video_id']
        students_list = []
        try:
            liveVideo = NativeLiveVideo.objects.prefetch_related('liveinfo_video').get(id=videoId)
            studentInfo = LiveVideoStudentInformation.objects.filter(video=liveVideo).select_related('student')
            for std in studentInfo:
                student_dict = {
                    'id': std.student.id, 
                    'name': std.student.name,
                    'username': std.student.studentuser.username
                    }
                
                std_dict = {
                    'id': std.id, 
                    'jointTime': std.joinTime,
                    'leaveTime': std.leaveTime, 
                    'student': student_dict
                    }
                
                if std_dict in students_list:
                    pass
                else:
                    students_list.append(std_dict)
                    
            context = {'students': students_list}
        except Exception as e:
            context = {'students': students_list, 'message': str(e)}
            
        return Response(context)

class TeacherGetPreviousGoogleMeetLive(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        live_videos_list = []
        liveVideos =\
            GoogleMeetLive.objects.select_related('teacher__teacheruser').prefetch_related('batches').filter(
                teacher__institute=me.profile.institute, live=False).order_by('-id')
        finalLiveVideos = liveVideos[:100]
        try:
            for lv in finalLiveVideos:
                teacher_obj = lv.teacher
                teacher_dict = {'id': teacher_obj.id, 'name': teacher_obj.name,'username': teacher_obj.teacheruser.username}
                batches = lv.batches.all()
                batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(bat_dict)
                lv_dict = {'id': lv.id, 'teacher': teacher_dict,'time': lv.time, 'batches': batches_list}
                live_videos_list.append(lv_dict)
            context = {'liveVideos': live_videos_list}
        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class TeacherGetAllStudentsGoogleLive(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        videoId = data['video_id']
        students_list = []
        try:
            liveVideo = GoogleMeetLive.objects.get(id=videoId)
            studentInfo = GoogleLiveVideoStudentInformation.objects.filter(video=liveVideo).select_related('student')
            for std in studentInfo:
                student_dict = {
                    'id': std.student.id, 
                    'name': std.student.name,
                    'username': std.student.studentuser.username
                    }
                
                std_dict = {
                    'id': std.id, 
                    'jointTime': std.joinTime,
                    'leaveTime': std.leaveTime, 
                    'student': student_dict
                    }
                
                if std_dict in students_list:
                    pass
                else:
                    students_list.append(std_dict)
                    
            context = {'students': students_list}
            
        except Exception as e:
            context = {'students': students_list, 'message': str(e)}
            
        return Response(context)

class TeacherChangeMeetLeaveTime(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_live_id']
            leaveTime = data['leaveTime']
            studentInfo = GoogleLiveVideoStudentInformation.objects.get(id=student_id)
            studentInfo.leaveTime = leaveTime
            studentInfo.save()
            context = {'messages': 'Student meet level time Update Succesfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherGetLiveMessagesHistory(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            messages_list = []
            video_id = data['video_id']
            messageObjects = MessageLiveVideo.objects.filter(video__id=video_id).select_related('student').order_by('-id')
            for mo in messageObjects:
                mo_dict = {'id': mo.id, 'message': mo.message, 'student': mo.student.name}
                messages_list.append(mo_dict)
            context = {'messages': messages_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentGetProfile(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            details = StudentDetails.objects.get(student=me.profile)
            context ={  
                    'id': details.id, 
                    'photo': details.photo, 
                    'fullName': details.fullName, 
                    'address': details.address, 
                    'city': details.city, 
                    'state': details.state, 
                    'country': details.country, 
                    'standard': details.standard, 
                    'phone': details.phone, 
                    'email': details.email, 
                    'parentName': details.parentName, 
                    'parentPhone': details.parentPhone, 
                    'dob': details.dob, 
                    'studentDocumentType': details.studentDocumentType, 
                    'studentDocument': details.studentDocument,
                    'medium':details.medium,
                    'board':details.board,
                    'goal':details.goal,
                    'reference_teacher_name': details.reference_teacher_name,
                    }
        except Exception as e:
            context = {'id': None, 
                        'photo': None, 
                        'fullName': None, 
                        'address': None, 
                        'city': None, 
                        'state': None, 
                        'country': None, 
                        'standard': None, 
                        'phone': None, 
                        'email': None, 
                        'parentName': None, 
                        'parentPhone': None, 
                        'dob': None, 
                        'studentDocumentType': None, 
                        'studentDocument': None,
                        'medium': None,
                        'board': None,
                        'goal': None,
                        'reference_teacher_name': None,
                        }
        
        return Response(context)

class StudentGetSubInstituteProfile(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            try:
                details, created = StudentDetails.objects.get_or_create(student=me.profile)
                data = {}

                data['details_dict'] = {'id': details.id, 
                                'photo': details.photo, 
                                'fullName': details.fullName, 
                                'address': details.address, 
                                'city': details.city, 
                                'state': details.state, 
                                'country': details.country, 
                                'standard': details.standard, 
                                'phone': details.phone, 
                                'email': details.email, 
                                'parentName': details.parentName, 
                                'parentPhone': details.parentPhone, 
                                'dob': details.dob, 
                                'mother_name':details.mother_name,
                                'studentDocumentType': details.studentDocumentType, 
                                'studentDocument': details.studentDocument,
                                'rollNumber': details.rollNumber,
                            }
                sub_institute_details, created = SubInstituteStudent.objects.get_or_create(student=me.profile)
                trades_details_list = []
                sub_institute_list =[]
                trades_details = sub_institute_details.trades_details.all()  
                for trades_detail in trades_details:
                    trades_details_dict ={
                        'session_start':trades_detail.session_start,
                        'session_end':trades_detail.session_end,
                        'price':trades_detail.price,
                    }
                    trades_details_list.append(trades_details_dict)
                
                sub_institutes = sub_institute_details.sub_institute.all()
                for sub_institute in sub_institutes:
                    sub_institute_dict = {
                        'registration_number':sub_institute.registration_number,
                        'name':sub_institute.name,
                        'about_institute':sub_institute.about_institute}
                    sub_institute_list.append(sub_institute_dict)
                    
                data['sub_institute_details_dict'] = {
                    'category': sub_institute_details.category, 
                    'category_image':sub_institute_details.category_image,
                    'trusted_person_name': sub_institute_details.trusted_person_name, 
                    'trusted_person_number': sub_institute_details.trusted_person_number, 
                    'alternative_number': sub_institute_details.alternative_number, 
                    'secondary_marksheet': sub_institute_details.secondary_marksheet, 
                    'aadhar_card': sub_institute_details.aadhar_card, 
                    'aadhar_card_number': sub_institute_details.aadhar_card_number,
                    'slc': sub_institute_details.slc,
                    'trades_details': trades_details_list,
                    'student_registration_number':sub_institute_details.student_registration_number,
                    'sub_institute':sub_institute_list}

                context = {'status': True,'data': data}
            except Exception as e:
                context = {'status':False,'message': str(e)}
                
        except Exception as e:
            context = {'status':False,'message': str(e)}

        return Response(context)

class TeacherGetProfile(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        teacher = Teacher.objects.get(institute=me.profile.institute, teacheruser=me.profile.teacheruser)
        try:
            details = TeacherDetails.objects.get(teacher=me.profile)
            course = details.course.all()
            course_list = []
            for sub in course:
                course_list.append(sub.id)

            stc = details.subjectTeacherCourse.all()
            stc_list = []
            for s in stc:
                subjects_dict = {'id': s.id,'name': s.name + ' ' + s.course.name}
                stc_list.append(subjects_dict)

            context = {
                'id': teacher.id, 
                'name': details.name, 
                'address': details.address, 
                'phone': details.phone, 
                'email': details.email, 
                'course': course_list, 
                'expertise_subject': details.expertise_subject,
                'city': details.city, 
                'state': details.state, 
                'country': details.country, 
                'dateOfBirth': details.dateOfBirth, 
                'fromFreeTime': details.fromFreeTime, 
                'toFreeTime': details.toFreeTime, 
                'subjects': stc_list
                }
        except Exception as e:
            context = {
                'id': teacher.id, 
                'name': teacher.name, 
                'address': None, 
                'phone': None, 
                'email': None, 
                'course': None,
                'dateOfBirth': None, 
                'fromFreeTime': None, 
                'toFreeTime': None, 
                'state': None, 
                'country': None, 
                'subjects': None
                }
        return Response(context)

class StudentUpdateProfile(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        reference_teacher_name = data.get('reference_teacher_name')
       
        try:
            fullName = data.get('fullName')
        except:
            fullName = None
            
        try:
            address = data.get('address')
        except:
            address = None
            
        try:
            phone = data.get('phone')
        except:
            phone = None
            
        try:
            parentPhone = data.get('parentPhone')
        except:
            parentPhone = None
            
        try:
            email = data.get('email')
        except:
            email = None
            
        try:
            dob = data.get('dob')
        except:
            dob = None
            
        try:
            standard = data.get('standard')
        except:
            standard = None
            
        try:
            country = data.get('country')
        except:
            country = None
            
        try:
            parentName = data.get('parentName')
        except:
            parentName = None
            
        try:
            studentDocument = data.get('studentDocument')
        except:
            studentDocument = None
            
        try:
            studentDocumentType = data.get('studentDocumentType')
        except:
            studentDocumentType = None
            
        try:
            state = data.get('state')
        except:
            state = None
            
        try:
            profile_photo = data.get('profile_photo')
        except:
            profile_photo = None
            
        try:
            city = data.get('city')
        except:
            city = None
            
        try:
            medium = data.get('medium')
        except:
            medium = None
        
        try:
            goal = data.get('goal')
        except:
            goal = None
            
        try:
            board = data.get('board')
        except:
            board = None

        try:
            details = StudentDetails.objects.get(student=me.profile)
            details.reference_teacher_name = reference_teacher_name
            details.studentDocumentType = studentDocumentType
            if fullName != None or fullName != '':
                details.fullName = fullName
            if address != None or address != '':
                details.address = address
            if parentPhone != None or parentPhone != '':
                details.parentPhone = parentPhone
            if phone != None or phone != '':
                details.phone = phone
            if email != None or email != '':
                details.email = email
            if dob != None or dob != '':
                details.dob = dob
            if parentName != None or parentName != None:
                details.parentName = parentName
            if country != None or country != '':
                details.country = country
            if city != None or city != '':
                details.city = city
            if standard != None or standard != '':
                details.standard = standard
            if studentDocument != None or studentDocument != '':
                details.studentDocument = studentDocument
            if state != None or state != '':
                details.state = state
            if medium != None or medium != '':
                details.medium = medium
            if goal != None or goal != '':
                details.goal = goal
            if board != None or board != '':
                details.board = board
            if profile_photo:
                details.photo = profile_photo

            details.save()
            context = {'status': 'Success', 'message': 'Profile Updated'}

        except StudentDetails.DoesNotExist:
            details = StudentDetails()
            details.student = me.profile
            details.fullName = fullName
            details.address = address
            details.state = state
            details.phone = phone
            details.parentPhone = parentPhone
            details.email = email
            details.parentName = parentName
            details.dob = dob
            details.city = city
            details.country = country
            details.standard = standard
            details.studentDocument = studentDocument
            details.studentDocumentType = studentDocumentType
            details.reference_teacher_name = reference_teacher_name
            details.save()
            context = {'status': 'Success', 'message': 'Profile Created'}
        return Response(context)

class StudentUpdateSubInstituteProfile(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        details, created = StudentDetails.objects.get_or_create(student=me.profile)
        if data.get('fullName'):
            details.fullName = data.get('fullName')
        if data.get('profile_photo'):
            details.profile_photo = data.get('profile_photo')
        if data.get('address'):
            details.address = data.get('address')
        if data.get('phone'):
            details.phone = data.get('phone')
        if data.get('email'):
            details.email = data.get('email')
        if data.get('parentName'):
            details.parentName = data.get('parentName')
        if data.get('motherName'):
            details.mother_name = data.get('motherName')
        if data.get('parentPhone'):
            details.parentPhone = data.get('parentPhone')
        if data.get('standard'):
            details.standard = data.get('standard')
        if data.get('dob'):
            details.dob = data.get('dob')
        if data.get('city'):
            details.city = data.get('city')
        if data.get('state'):
            details.state = data.get('state')
        if data.get('country'):
            details.country = data.get('country')
        if data.get('studentDocumentType'):
            details.studentDocument = data.get('studentDocumentType')
        if data.get('studentDocument'):
            details.studentDocument = data.get('studentDocument')
        details.save()

        sub_institute_details, created = SubInstituteStudent.objects.get_or_create(student=me.profile)
        
        if data.get('category'):
            sub_institute_details.category = data.get('category')
        if data.get('trusted_person_name'):
            sub_institute_details.trusted_person_name = data.get('trusted_person_name')
        if data.get('trusted_person_number'):
            sub_institute_details.trusted_person_number = data.get('trusted_person_number')
        if data.get('alternative_number'):
            sub_institute_details.alternative_number = data.get('alternative_number')
        if data.get('secondary_marksheet'):
            sub_institute_details.secondary_marksheet = data.get('secondary_marksheet')
        if data.get('aadhar_card'):
            sub_institute_details.aadhar_card = data.get('aadhar_card')
        if data.get('aadhar_card_number'):
            sub_institute_details.aadhar_card_number = data.get('aadhar_card_number')
        if data.get('slc'):
            sub_institute_details.slc = data.get('slc')
        if data.get('category_image'):
            sub_institute_details.category_image = data.get('category_image')

        sub_institute_details.save()

        context = {'status': 'Success', 'message': 'Profile Updated'}

        return Response(context)

class TeacherUpdateProfile(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        phone = data['phone']
        email = data['email']
        try:
            course = data['course']
            course_list = course.strip('][').split(',')
        except:
            course_list = None
            
        address = data['address']
        city = data['city']
        
        try:
            expertise_subject = data['expertise_subject']
        except:
            expertise_subject = None
            
        try:
            language = data['language']
        except:
            language = None
            
        try:
            dateOfBirth = data['dateOfBirth']
        except:
            dateOfBirth = None
            
        try:
            fromFreeTime = data['fromFreeTime']
        except:
            fromFreeTime = None
            
        try:
            toFreeTime = data['toFreeTime']
        except:
            toFreeTime = None
            
        try:
            state = data['state']
        except:
            state = None
            
        try:
            country = data['country']
        except:
            country = None

        try:
            courseSubjects_ids = data['courseSubjects_ids']
            courseSubjects_ids = courseSubjects_ids.strip('][').split(',')
        except:
            courseSubjects_ids = None

        try:
            details = TeacherDetails.objects.get(teacher=me.profile)
            courses = details.course.all()
            for course in courses:
                details.course.remove(course)
            if name != None or name != '':
                details.name = name
            if address != None or address != '':
                details.address = address
            if phone != None or phone != '':
                details.phone = int(phone)
            if email != None or email != '':
                details.email = email
            if expertise_subject != None or expertise_subject != '':
                details.expertise_subject = expertise_subject
            if language != None or language != '':
                details.language = language
            if city != None or city != '':
                details.city = city
            if dateOfBirth:
                details.dateOfBirth = dateOfBirth
            if fromFreeTime:
                details.fromFreeTime = fromFreeTime
            if toFreeTime:
                details.toFreeTime = toFreeTime
            if state:
                details.state = state
            if country:
                details.country = country

            details.save()
            if len(course_list) > 0 and course_list != None:
                for cid in course_list:
                    try:
                        tc = TeacherCourse.objects.get(id=cid)
                        details.course.add(tc)
                    except:
                        pass

            if len(courseSubjects_ids) > 0 and courseSubjects_ids != None:
                details.subjectTeacherCourse.clear()
                for csid in courseSubjects_ids:
                    try:
                        tcs = SubjectDoubtApp.objects.get(id=csid)
                        details.subjectTeacherCourse.add(tcs)
                    except Exception as e:
                        pass

            context = {'status': 'Success','message': 'Teacher Profile Updated'}
            
        except TeacherDetails.DoesNotExist:
            details = TeacherDetails()
            details.teacher = me.profile
            details.name = name
            details.address = address
            details.phone = phone
            details.email = email
            details.expertise_subject = expertise_subject
            details.language = language
            details.city = city
            details.state = state
            details.country = country
            if dateOfBirth:
                details.dateOfBirth = dateOfBirth
            if fromFreeTime:
                details.fromFreeTime = fromFreeTime
            if toFreeTime:
                details.toFreeTime = toFreeTime
            details.save()
            if len(course_list) > 0 and course_list != None:
                for sid in course_list:
                    try:
                        course = TeacherCourse.objects.get(id=sid)
                        details.course.add(course)
                    except:
                        pass
                    
            if len(courseSubjects_ids) > 0 and courseSubjects_ids != None:
                for csid in courseSubjects_ids:
                    try:
                        tcs = SubjectDoubtApp.objects.get(id=csid)
                        details.subjectTeacherCourse.add(tcs)
                    except:
                        pass
                    
            context = {'status': 'Success', 'message': 'Profile Created'}
        return Response(context)

class CheckUsernameExistance(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        try:
            user = User.objects.get(username=username)

            try:
                student = Student.objects.get(studentuser=user)

                try:
                    StudentDetails.objects.get(student=student)
                    context = {'exist': True}
                except StudentDetails.DoesNotExist:
                    student.delete()
                    user.delete()
                    context = {'exist': False, 'message': 'Student Details not found'}

            except Student.DoesNotExist:
                user.delete()
                context = {'exist': False, 'message': 'Student not found'}

        except Exception as e:
            context = {'exist': False, 'message': str(e)}
        return Response(context)

class CheckUsernameExistanceMultiInstitute(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        admin_code = data['admin_code']
        try:
            username = phone + "@" + admin_code + "_"
            user = User.objects.get(username__startswith=username)

            try:
                student = Student.objects.get(studentuser=user)

                try:
                    StudentDetails.objects.get(student=student)
                    context = {'exist': True}
                    
                except StudentDetails.DoesNotExist:
                    student.delete()
                    user.delete()
                    context = {'exist': False, 'message': 'Student Details not found'}

            except Student.DoesNotExist:
                user.delete()
                context = {'exist': False, 'message': 'Student not found'}

        except Exception as e:
            context = {'exist': False, 'message': str(e)}
        return Response(context)

class StudentUpdateProfilePicture(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        photo = data['photo']
        try:
            details = StudentDetails.objects.get(student=me.profile)
            details.photo = photo
            details.save()
            context = {'photo': details.photo}
            
        except StudentDetails.DoesNotExist:
            details = StudentDetails()
            details.student = me.profile
            details.photo = photo
            details.save()
            context = {'photo': details.photo}
            
        return Response(context)

class StudentGetProfilePicture(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            details, created = StudentDetails.objects.get_or_create(student=me.profile)
            photo = details.photo
            fullName = details.fullName
            context = {'photo': photo, 'fullName': fullName}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherContactUsNumber(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            numbers = data['numbers']
            numbers_list = numbers.strip('][').split(',')
            for num in numbers_list:
                print('number {}'.format(num))
                if len(num) == 10:
                    print('if proper number {}'.format(num))
                    teacherNumber = TeacherNumber()
                    teacherNumber.institute = me.profile.institute
                    teacherNumber.phone = num
                    teacherNumber.save()
                else:
                    context = {'status': 'Failed', 'message': 'Improper Number'}
                    return Response(context)
            context = {'status': 'Success', 'message': 'Numbers saved'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetContactNumbers(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            numbers = TeacherNumber.objects.filter(institute=me.profile.institute)
            number_list = []
            for num in numbers:
                number_list.append(num.phone)
            context = {'numbers': number_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentGetContactNumbers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            numbers = TeacherNumber.objects.filter(institute=me.profile.institute)
            number_list = []
            for number in numbers:
                number_list.append(number.phone)
            context = {'numbers': number_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherDeleteContactNumber(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            number = data['number']
            contact = TeacherNumber.objects.filter(id=number)
            contact.delete()
            context = {'status': 'Success', 'message': 'Number Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)



class StudentBatchChangeRequest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            batch_ids = data['batch_ids']
            batch_list = batch_ids.strip('][').split(',')
            if not me.profile.institute.batchChangeRequestAutomatic:
                try:
                    previous_request = BatchChangeRequest.objects.get(student=me.profile)
                    if previous_request.active == False:
                        previous_request.student = me.profile
                        previous_request.save()
                        for batch_id in batch_list:
                            batch = Batch.objects.get(id=batch_id)
                            previous_request.batches.add(batch)
                            previous_request.active = True
                            previous_request.save()
                        context = {'status': 'Success','message': 'Request sent to teacher'}
                    else:
                        context = {'status': 'Failed', 'message': 'You have already requested for batch change'}
                    return Response(context)
                except:
                    pass
                batch_request = BatchChangeRequest()
                batch_request.student = me.profile
                batch_request.save()
                for batch_id in batch_list:
                    batch = Batch.objects.get(id=batch_id)
                    batch_request.batches.add(batch)
                    batch_request.save()
                context = {'status': 'Success','message': 'Request sent to teacher'}
            else:
                student = me.profile
                student.batches.clear()
                for bat in batch_list:
                    batch = Batch.objects.get(id=bat)
                    student.batches.add(batch)
                    student.save()
                    liveVideo = NativeLiveVideo.objects.filter(batches=batch, live=True)
                    for lv in liveVideo:
                        lv.students.add(student)
                        lv.save()
                context = {'status': 'Success', 'message': 'Successfully Transferred'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherShowBatchChangeRequests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            batch_change_request = BatchChangeRequest.objects.filter(student__institute=me.profile.institute, active=True).order_by('-id')
            bcr_list = []
            student_list = [student.student.id for student in batch_change_request]
            student_photos = StudentDetails.objects.filter(student__id__in=student_list)
            student_photos_dict = {photo.student_id: photo.photo for photo in student_photos}
            for bcr in batch_change_request:
                student_dict = {
                    'id': bcr.student.id, 
                    'name': bcr.student.name,
                    'username': bcr.student.studentuser.username, 
                    'photo': student_photos_dict.get(bcr.student.id)
                    }
                batches = bcr.batches.all()
                batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(bat_dict)
                bcr_dict = {'id': bcr.id, 'batches': batches_list,'student': student_dict}
                if len(batches_list) == 0:
                    continue
                bcr_list.append(bcr_dict)
                context = {'batch_change_requests': bcr_list}
        except Exception as e:
                context = {'message':str(e)}
        return Response(context)

class TeacherAcceptBatchChangeRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            bcr_id = data['bcr_id']
            batch_ids = data['batch_ids']
            batch_list = batch_ids.strip('][').split(',')
            bcr = BatchChangeRequest.objects.get(id=bcr_id)
            student = bcr.student
            student.batches.clear()
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                student.batches.add(batch)
                student.save()
                liveVideo = NativeLiveVideo.objects.filter(batches=batch, live=True)
                for lv in liveVideo:
                    lv.students.add(student)
                    lv.save()
            bcr.active = False
            bcr.save()
            context = {'status': 'Success', 'message': 'Student Transferred'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class TeacherDenyBatchChangeRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            bcr_id = data['bcr_id']
            bcr = BatchChangeRequest.objects.get(id=bcr_id)
            bcr.active = False
            bcr.save()
            context = {'status': 'Success', 'message': 'Request Denied'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
            
        return Response(context)

class GetInstituteAgoraCode(APIView):
    def post(self, request):
        data = request.data
        code = data['code']
        institite = Institute.objects.get(code=code)
        agoraCode = institite.agoraCode
        context = {'agoraCode': agoraCode}
        return Response(context)

class TeacherGetInstituteCode(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        code = me.profile.institute.code
        context = {'code': code}
        return Response(context)

class TeacherCodeAgora(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        agoraCode = me.profile.institute.agoraCode
        context = {'agoraCode': agoraCode}
        return Response(context)

class SaveTeacherFireBaseToken(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            token = data['token']
            try:
                deviceId = data['deviceId']
            except:
                deviceId = None
                
            me.profile.firebaseToken = token
            me.profile.save()

            if deviceId:
                try:
                    tft = TeacherFirebaseToken.objects.get(deviceId=deviceId, firebaseToken=token)
                    tft.teacher =me.profile
                    
                    tft.save()
                    teacher = Teacher.objects.get(teacherFirebaseTokens=tft)
                    teacher.teacherFirebaseTokens.remove(tft)
                    
                except TeacherFirebaseToken.DoesNotExist:
                    tft = TeacherFirebaseToken.objects.create(deviceId=deviceId, firebaseToken=token,teacher=me.profile)

                me.profile.teacherFirebaseTokens.add(tft)
                me.profile.save()

            context = {'status': 'Success', 'token': me.profile.firebaseToken}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class SavePrincipleFirebaseToken(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        try:
            token = data['token']
            try:
                deviceId = data['deviceId']
            except:
                deviceId = None
                
            me.profile.firebaseToken = token
            me.profile.save()

            if deviceId:
                try:
                    tft = PrincipleFirebaseToken.objects.get(deviceId=deviceId, firebaseToken=token)
                    tft.principle =me.profile
                    tft.save()

                except PrincipleFirebaseToken.DoesNotExist:
                    tft = PrincipleFirebaseToken.objects.create(deviceId=deviceId, firebaseToken=token,principle=me.profile)

                me.profile.save()

            context = {'status': 'Success', 'token': me.profile.firebaseToken}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)
    
class GetSocialMediaList(APIView):
    def get(self, request):
        try:
            social_medias = InstituteSocialMediaOptions.objects.all()
            response_list = []
            for sm in social_medias:
                dict_ = {
                    'title': sm.title,
                    'photo': sm.photo
                }
                response_list.append(dict_)
            context = {'status': True,'data': response_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class InstituteSocialMediaRecord(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        social_medias = IntituteSocialMedia.objects.select_related("social_media").filter(institute=me.profile.institute)
        response_list = []
        for sm in social_medias:
            dict_ = {
                "social_media": {
                    'title': sm.social_media.title,
                    'photo': sm.social_media.photo
                },
                "url": sm.url
            }
            response_list.append(dict_)
            
        context = {"status": True,"data": response_list}
        return Response(context)

    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            social_media = data['social_media']
            institute = me.profile.institute
            url = data['url']
            media = InstituteSocialMediaOptions.objects.get(title=social_media)
            try:
                inst_media = IntituteSocialMedia.objects.get(social_media=media,institute=institute)
                inst_media.url = url
                inst_media.save()
            except:
                IntituteSocialMedia.objects.create(social_media=media,institute=institute,url=url)

            context = {'status': True,'message': 'Social Media Added Successfully'}

        except Exception as e:
            context = {'status': False,'message': str(e)}
            
        return Response(context)

    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            social_media = data['social_media']
            institute = me.profile.institute
            IntituteSocialMedia.objects.get(
                social_media=InstituteSocialMediaOptions.objects.get(title=social_media)
                ,institute=institute).delete()
            context = {'status': True,'message': 'Social Media Deleted Successfully'}

        except Exception as e:
            context = {'status': False,'message': str(e)}
            
        return Response(context)

class TeacherUploadAboutUsBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_link = data['link']
            banner_link = banner_link.replace("\"", '')
            banner = AboutUsBanner(link=banner_link, institute=me.profile.institute)
            banner.save()
            context = {'status': 'Success','message': 'Banner Successfully Uploaded'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class TeacherDeleteAboutUsBanner(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            banner_id = data['banner_id']
            banner = AboutUsBanner.objects.get(id=banner_id)
            banner.delete()
            context = {'status': 'Success', 'message': 'Banner Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class TeacherAboutUsDescription(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        description = data['description']
        try:
            aboutUs = AboutUsDescription.objects.get(institute=me.profile.institute)
            aboutUs.description = description
            aboutUs.save()
            context = {'status': 'Success', 'message': 'Updated'}
        except:
            aboutUs = AboutUsDescription()
            aboutUs.institute = me.profile.institute
            aboutUs.description = description
            aboutUs.save()
            context = {'status': 'Success', 'message': 'Created'}
        return Response(context)

class TeacherGetAboutUsDescription(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            aboutUs = AboutUsDescription.objects.get(institute=me.profile.institute)
            description = aboutUs.description
            context = {'description': description}
        except:
            context = {'description': ''}
        return Response(context)

class TeacherAboutUsGetBanner(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            banners = AboutUsBanner.objects.filter(institute=me.profile.institute).order_by('id')
            banner_list = []
            for banner in banners:
                institute = banner.institute
                institute_dict = {'id': institute.id, 'name': institute.name}
                banner_dict = {'id': banner.id, 'link': banner.link, 'institute': institute_dict}
                banner_list.append(banner_dict)
            context = {'banners': banner_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class InstituteUpdateFacebook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            facebookURL = data['facebookURL']
            me.profile.institute.facebookURL = facebookURL
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Facebook URL Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteUpdateInstagram(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            instagramURL = data['instagramURL']
            me.profile.institute.instagramURL = instagramURL
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Instagram URL Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteUpdateEmail(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            email = data['email']
            me.profile.institute.email = email
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Email Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteUpdateTwitter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            twitter = data['twitter']
            me.profile.institute.twitterURL = twitter
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Twitter URL Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteUpdateWebSite(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            website = data['website']
            me.profile.institute.websiteURL = website
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Website URL Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteUpdateTelegram(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            telegram = data['telegramURL']
            me.profile.institute.telegramURL = telegram
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Telegram URL Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherUpdatePhoneNumber(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            name = data['name']
            number = data['phone']
            if len(number) in [9, 10]:
                teacherNumber = TeacherNumber()
                teacherNumber.institute = me.profile.institute
                teacherNumber.name = name
                teacherNumber.phone = number
                teacherNumber.save()
                context = {'status': 'Success', 'message': 'Number Updated'}
            else:
                context = {'status': 'Failed', 'message': 'Number Invalid'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetAboutUsBanners(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            banners = AboutUsBanner.objects.filter(institute=me.profile.institute)
            banner_list = []
            for banner in banners:
                banner_list.append(banner.link)
            context = {'banners': banner_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class StudentGetAboutUsDescription(APIView):
    def get(self, request):
        me = Studs(self.request.user)

        try:
            if me.profile.studentuser.username == '1112223330':
                context = {'description': description}
            else:
                aboutUs = AboutUsDescription.objects.get(institute=me.profile.institute)
                context = {'description': aboutUs.description}

        except Exception as e:
            aboutUs = ''
            context = {'description': 'No About us Added'}

        return Response(context)

class TeacherGetPhoneNumbers(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            teacherNumber = TeacherNumber.objects.filter(institute=me.profile.institute)
            numbers = []
            for number in teacherNumber:
                number_dict = {'id': number.id,'name': number.name, 'phone': number.phone}
                numbers.append(number_dict)
            context = {'numbers': numbers}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class StudentGetTeacherNumbers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            teacherNumber = TeacherNumber.objects.filter(institute=me.profile.institute)
            numbers = []
            for number in teacherNumber:
                number_dict = {'id': number.id,'name': number.name, 'phone': number.phone}
                numbers.append(number_dict)
            context = {'numbers': numbers}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class StudentGetSocialMediaContacts(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        facebookURL = me.profile.institute.facebookURL
        instagramURL = me.profile.institute.instagramURL
        email = me.profile.institute.email
        websiteURL = me.profile.institute.websiteURL
        twitterURL = me.profile.institute.twitterURL
        telegramURL = me.profile.institute.telegramURL
        context = {
            'facebookURL': facebookURL, 
            'instagramURL': instagramURL, 
            'email': email,
            'websiteURL': websiteURL, 
            'twitterURL': twitterURL, 
            'telegramURL': telegramURL
            }
        return Response(context)

class TeacherGetStudentDeviceIds(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            deviceInfos = StudentDeviceId.objects.filter(student__institute=me.profile.institute).select_related('student')[:100]
            student_list = [student.student.id for student in deviceInfos]
            student_photos = StudentDetails.objects.filter(student__id__in=student_list)
            student_photos_dict = {photo.student_id: photo.photo for photo in student_photos}
            device_ids = []
            for dev in deviceInfos:
                try:
                    photo = student_photos_dict.get(dev.student.id)
                except:
                    photo = None
                if me.profile.institute.name == 'Oxford':
                    student_dict = {'id': dev.student.id, 'name': dev.student.name,'username': 'confidential', 'photo': photo}
                else:
                    student_dict = {'id': dev.student.id, 'name': dev.student.name,'username': dev.student.studentuser.username, 'photo': photo}

                div_dict = {'id': dev.id, 'student': student_dict}
                device_ids.append(div_dict)
            context = {'deviceIds': device_ids}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class TeacherSearchStudentDeviceId(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_name = data['student_name']
            deviceInfos = StudentDeviceId.objects.filter(student__institute=me.profile.institute, student__name__icontains=student_name)
            device_ids = []
            for dev in deviceInfos:
                try:
                    details = StudentDetails.objects.get(student=dev.student)
                    photo = details.photo
                except:
                    photo = None
                    
                student_dict = {
                    'id': dev.student.id, 
                    'name': dev.student.name,
                    'username': dev.student.studentuser.username, 
                    'photo': photo
                    }
                div_dict = {'id': dev.id, 'student': student_dict}
                device_ids.append(div_dict)
            context = {'deviceIds': device_ids}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class TeacherRemoveDeviceId(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            device_id = data['device_id']
            device = StudentDeviceId.objects.get(id=device_id)
            device.delete()
            context = {'status': 'Success', 'message': 'Device Id Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeMarksChapter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        max_marks = data['max_marks']
        negative_marks = data['negative_marks']
        try:
            chapter = Chapter.objects.get(id=chapter_id)
            questions = Question.objects.filter(chapter=chapter)
            for question in questions:
                question.marks = max_marks
                question.negativeMarks = negative_marks
                question.save()
            context = {"status": 'Success', 'message': 'Marks Changed'}
        except Exception as e:
            context = {"status": 'Failed', 'message': str(e)}
        return Response(context)

class TeacherStudentRestriction(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        batch = Batch.objects.get(id=batch_id)
        students = Student.objects.filter(batches=batch)
        student_photos = StudentDetails.objects.filter(student__in=students)
        student_photos_dict = {i.student: i.photo for i in student_photos}
        student_list = []
        try:
            for student in students:
                try:
                    photo = student_photos_dict.get(student)
                except:
                    photo = None
                batches = student.batches.all()
                batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(bat_dict)
                    
                if me.profile.institute.name == 'Oxford':
                    student_dict = {
                        'name': student.name, 
                        'id': student.id, 
                        'username': 'confidential', 
                        'photo': photo, 
                        'batches': batches_list, 
                        'accessTest': student.accessTests,
                        'accessVideos': student.accessVideo, 
                        'accessNotes': student.accessNotes, 
                        'accessLiveVideos': student.accessLiveVideos, 
                        'accessYouTubeLiveVideos': student.accessYouTubeLiveVideos
                        }
                else:
                    student_dict = {
                        'name': student.name, 
                        'id': student.id, 
                        'username': student.studentuser.username, 
                        'photo': photo, 
                        'batches': batches_list, 
                        'accessTest': student.accessTests,
                        'accessVideos': student.accessVideo, 
                        'accessNotes': student.accessNotes, 
                        'accessLiveVideos': student.accessLiveVideos, 
                        'accessYouTubeLiveVideos': student.accessYouTubeLiveVideos
                        }

                student_list.append(student_dict)
            context = {'studentList': student_list}
        except Exception as e:
            context = {'studentList': [], 'message': str(e)}
        return Response(context)

class TeacherChangeStudentRestrictionTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
                
            student = Student.objects.get(id=student_id)
            student.accessTests = what
            student.save()
            context = {'status': 'Success', 'access': what}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeStudentRestrictionVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
            student = Student.objects.get(id=student_id)
            student.accessVideo = what
            student.save()
            context = {'status': 'Success', 'access': what}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeStudentRestrictionNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
            student = Student.objects.get(id=student_id)
            student.accessNotes = what
            student.save()
            context = {'status': 'Success', 'access': what}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeStudentRestrictionLiveVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
            student = Student.objects.get(id=student_id)
            student.accessLiveVideos = what
            student.save()
            context = {'status': 'Success', 'access': what}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeStudentRestrictionYouTubeLiveVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
            student = Student.objects.get(id=student_id)
            student.accessYouTubeLiveVideos = what
            student.save()
            context = {'status': 'Success', 'access': what}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRegisterIssue(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            mainFeature = data['mainFeature']
            feature = data['feature']
            description = data['description']
            typeIssue = data['typeIssue']
            try:
                screenshot = data['screenshot']
            except:
                screenshot = None
            issue = TeacherIssue()
            issue.teacher = me.profile
            issue.mainFeature = mainFeature
            issue.feature = feature
            issue.description = description
            issue.typeIssue = typeIssue
            if screenshot:
                issue.screenshot = screenshot
            issue.save()
            try:
                technical_teacher = Teacher.objects.get(teacheruser__username='tech_teacher')
                serverKey = list(AppServerKey.objects.all())[0]
                deviceId = technical_teacher.firebaseToken
                to_text = f'A new technical issue come from {me.profile.institute.name} institute under the {feature} feature of {mainFeature}'
                send_notification_individual(serverKey, deviceId, to_text)
            except Exception as e:
                print(str(e))
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            context = {'status': 'Success', 'message': 'Issue sent!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetAllIssues(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            issues = TeacherIssue.objects.filter(teacher=me.profile).order_by('-id')
            issue_list = []
            for issue in issues:
                issue_dict = {
                    'id': issue.id, 
                    'mainFeature': issue.mainFeature, 
                    'feature': issue.feature, 
                    'description': issue.description, 
                    'typeIssue': issue.typeIssue, 
                    'time': issue.time,
                    'received': issue.received, 
                    'receiveTime': issue.receiveTime, 
                    'resolved': issue.resolved, 
                    'resolveTime': issue.resolveTime, 
                    'revertMessage': issue.revertMessage
                    }
                issue_list.append(issue_dict)
            context = {'issues': issue_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class TeacherEditBatchName(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_id = data['batch_id']
            batch_name = data['batch_name']
            first_batch = Batch.objects.filter(institute=me.profile.institute).order_by('id').first()
            batch = Batch.objects.get(id=batch_id)
            if batch.id == first_batch.id:
                context = {'status': 'Failed','message': f'{batch.name} batch cannot be renamed.'}
            else:
                batch.name = batch_name
                batch.save()
                context = {'status': 'Success','message': 'Batch Name Changed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditSubjectName(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        sub_list = [267, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 11, 12, 1680, 6628, 6629, 7178, 33688, 43691]
        subject_id = data['subject_id']
        subject_name = data['subject_name']
        try:
            langauge_id = data['langauge_id']
        except:
            langauge_id = None
            
        try:
            icon = data['icon']
        except:
            icon = None
            
        try:
            subject = Subject.objects.get(id=subject_id)
            if subject.id in sub_list:
                context = {'status': 'Failed','message': 'This Subject Can not be Renamed'}
            else:
                subject.name = subject_name
                if icon:
                    subject.icon = icon
                subject.save()
                context = {'status': 'Success', 'message': 'Subject Renamed'}
                
            if langauge_id:
                lang = Language.objects.get(id=langauge_id)
                subject.language = lang
                subject.save()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditCourseName(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course_name = data['course_name']
            course = Course.objects.get(id=course_id)
            course.name = course_name
            course.save()
            context = {'status': 'Success', 'message': 'Course Renamed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CreateBranch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        try:
            branch = Branch.objects.get(name=name, institute=me.profile.institute)
            context = {'status': 'Failed', 'message': 'Already exists!'}
        except Exception as e:
            branch = Branch()
            branch.name = name
            branch.institute = me.profile.institute
            branch.save()
            context = {'status': 'Success', 'message': 'Created'}
        return Response(context)

class TeacherAllBranches(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            branches_list = []
            if me.profile.mainTeacher:
                branches = Branch.objects.filter(institute=me.profile.institute)
                for branch in branches:
                    branch_dict = {'id': branch.id, 'name': branch.name}
                    branches_list.append(branch_dict)
                context = {'branches': branches_list}
            else:
                batches = me.profile.batches.all()
                for batch in batches:
                    branch = batch.branch.all()
                    bra_list = []
                    for bra in branch:
                        bra_dict = {'id': bra.id, 'name': bra.name}
                        bra_list.append(bra_dict)
                    branches_list.extend(bra_list)
                context = {'branches': branches_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class CreateBatchBranch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        branch_id = data['branch_id']
        branch = Branch.objects.get(id=branch_id)
        try:
            batch = Batch.objects.get(name=name, branch=branch)
            context = {'status': 'Failed', 'message': 'Batch already exists'}
            return Response(context)
        except:
            batch = Batch()
            batch.name = name
            batch.institute = me.profile.institute
            batch.save()
            batch.branch.add(branch)
            batch.save()
            me.profile.batches.add(batch)
            me.profile.save()
            context = {'status': 'Success', 'message': 'Batch Created'}
        return Response(context)

class TeacherBranchBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            branch_id = data['branch_id']
            branch = Branch.objects.get(id=branch_id)
            batches = Batch.objects.filter(branch=branch)
            batches_list = []
            for batch in batches:
                batch_id = {'id': batch.id, 'name': batch.name}
                batches_list.append(batch_id)
            context = {'batches': batches_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class StudentRegisterNoteCount(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        note_id = data['note_id']
        note = Note.objects.prefetch_related('noteview_note').get(id=note_id)
        try:
            noteView = NoteView.objects.get(note=note)
            noteView.views += 1
            noteView.save()
            studentNoteView = StudentNoteView()
            studentNoteView.noteview = noteView
            studentNoteView.student = me.profile
            studentNoteView.save()
            context = {'status': 'Success'}
        except Exception as e:
            noteView = NoteView()
            noteView.note = note
            noteView.views = 1
            noteView.save()
            studentNoteView = StudentNoteView()
            studentNoteView.noteview = noteView
            studentNoteView.student = me.profile
            studentNoteView.save()
            context = {'status': 'Success1'}
        return Response(context)

class StudentRegisterVideoCount(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']

        video = Video.objects.get(id=video_id)
        video_id = data['video_id']
        try:
            video = Video.objects.get(id=video_id)
            try:
                videoView = VideoView.objects.get(video=video)
                videoView.views += 1
                videoView.save()
                studentVideoView = StudentVideoView()
                studentVideoView.videoview = videoView
                studentVideoView.student = me.profile
                studentVideoView.save()
                context = {'status': 'Success'}
            except Exception as e:
                videoView = VideoView()
                videoView.video = video
                videoView.views = 1
                videoView.save()
                studentVideoView = StudentVideoView()
                studentVideoView.videoview = videoView
                studentVideoView.student = me.profile
                studentVideoView.save()
                context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)
 
class StudentRegisterTestCount(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        test_id = data['test_id']
        viewedTest = Test.objects.get(id=test_id)
        try:
            testView = TestView.objects.get(test=viewedTest)
            testView.views += 1
            testView.save()

            studentTestView = StudentTestView()
            studentTestView.testview = testView
            studentTestView.student = me.profile
            studentTestView.save()
            context = {'status': 'success'}
        except Exception as e:
            testView = TestView()
            testView.test = viewedTest
            testView.views = 1
            testView.save()

            studentTestView = StudentTestView()
            studentTestView.testview = testView
            studentTestView.student = me.profile
            studentTestView.save()
            context = {'status': 'success'}
        return Response(context)

class TeacherStudentRestrictionSearch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        student_name = data['name']
        batch = Batch.objects.get(id=batch_id)
        students = Student.objects.filter(batches=batch, name__icontains=student_name)
        student_list = []
        try:
            for student in students:
                details = StudentDetails.objects.get(student=student)
                photo = details.photo
                batches = student.batches.all()
                batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(bat_dict)
                if me.profile.institute.name == 'Oxford':
                    student_dict =\
                        {'name': student.name, 'id': student.id, 'username': 'confidential', 'photo': photo, 'batches': batches_list, 'accessTest': student.accessTests,
                            'accessVideos': student.accessVideo, 'accessNotes': student.accessNotes, 'accessLiveVideos': student.accessLiveVideos, 'accessYouTubeLiveVideos': student.accessYouTubeLiveVideos}
                else:
                    student_dict =\
                        {'name': student.name, 'id': student.id, 'username': student.studentuser.username, 'photo': photo, 'batches': batches_list, 'accessTest': student.accessTests,
                            'accessVideos': student.accessVideo, 'accessNotes': student.accessNotes, 'accessLiveVideos': student.accessLiveVideos, 'accessYouTubeLiveVideos': student.accessYouTubeLiveVideos}

                student_list.append(student_dict)
            context = {'studentList': student_list}
        except Exception as e:
            context = {'studentList': [], 'message': str(e)}
        return Response(context)

class AntMediaGetNumberOfStudents(APIView):
    def post(self, request):
        me = Teacher(self.request.user)
        data = request.data
        stream_id = data['stream_id']
        headers = {'Accept': 'application/json','Content-Type': 'application/x-www-form-urlencoded'}
        try:
            url = 'https://bodhilive.info:5443/WebRTCAppEE/rest/v2/broadcasts/{}/broadcast-statistics'.format(stream_id)
            response = requests.get(url, headers=headers)
            json_response = response.json()
            context = {'viewers': json_response['totalWebRTCWatchersCount']}
        except Exception as e:
            context = {'viewers': 0, 'message': str(e)}
        return Response(context)

class AdminTeacherAllPermissions(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            permissions = TeacherPermission.objects.all()
            permission_list = []
            for permission in permissions:
                permission_dict = {
                    'id': permission.id, 
                    'name': permission.name,
                    'family': permission.family
                    }
                permission_list.append(permission_dict)
            context = {'permissions': permission_list}
        except Exception as e:
            context = {'permissions': permission_list, 'message': str(e)}
        return Response(context)

class AdminAssignTeacherPermissions(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            permission_list = data['permission_list']
            teacher = Teacher.objects.get(id=teacher_id)
            permissions_final = permission_list.strip('][').split(',')
            for permission in permissions_final:
                permission_obj = TeacherPermission.objects.get(id=permission)
                teacher.permissions.add(permission_obj)
                teacher.save()
            context = {'status': 'Success', 'message': 'Permissions Added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetPermissions(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            permission_list = []
            permissions = teacher.permissions.all()
            for permission in permissions:
                permission_dict = {'id': permission.id, 'name': permission.name,'family': permission.family}
                permission_list.append(permission_dict)
            context = {'permissions': permission_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class AdminRemoveTeacherPermission(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        permission_id = data['permission_id']
        try:
            teacher = Teacher.objects.get(id=teacher_id)
            permission = TeacherPermission.objects.get(id=permission_id)
            if permission == TeacherPermission.objects.get(id=52):
                queryset = Package.objects.filter(teacher=me.profile)
                for package in queryset:
                    for sub_teacher in package.sub_teacher.all():
                        if sub_teacher == teacher:
                            package.sub_teacher.remove(sub_teacher)
            teacher.permissions.remove(permission)
            teacher.save()
            context = {'status': 'Success', 'message': 'Permission Removed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetMyPermissionsTeacher(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            permission_list = []
            permissions = me.profile.permissions.all()
            for permission in permissions:
                permission_dict = {'id': permission.id, 'name': permission.name,'family': permission.family}
                permission_list.append(permission_dict)
            context = {'permissions': permission_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class GetMyServer(APIView):
    def post(self, request):
        data = request.data
        try:
            institute_code = data['institute_code']
            institute = Institute.objects.get(code=institute_code)
            server = institute.server
            context = {'server': server}
        except Exception as e:
            context = {'message':str(e)}
        return Response(context)

class TeacherSearchStudentDeviceIdByNumber(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_number = data['number']
            deviceInfos = StudentDeviceId.objects.filter(student__institute=me.profile.institute, student__studentuser__username__icontains=student_number)
            device_ids = []
            for dev in deviceInfos:
                try:
                    details = StudentDetails.objects.get(student=dev.student)
                    photo = details.photo
                except:
                    photo = None
                student_dict = {
                    'id': dev.student.id, 
                    'name': dev.student.name,
                    'username': dev.student.studentuser.username, 
                    'photo': photo
                    }
                div_dict = {'id': dev.id, 'student': student_dict}
                device_ids.append(div_dict)
            context = {'deviceIds': device_ids}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class TeacherAntMediaGetCurrentLiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        live_videos_list = []
        try:
            for teacher in teachers:
                liveVideos = NativeLiveVideo.objects.filter(teacher=teacher, live=True, antVideo=True).order_by('-id')
                for lv in liveVideos:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username}
                    batches = lv.batches.all()
                    batches_list = []
                    for bat in batches:
                        bat_dict = {'id': bat.id, 'name': bat.name}
                        batches_list.append(bat_dict)
                    lv_dict = {'id': lv.id, 'teacher': teacher_dict,'time': lv.time, 'batches': batches_list}
                    live_videos_list.append(lv_dict)
                    
            context = {'liveVideos': live_videos_list}
        except Exception as e:
            context = {'liveVideos': live_videos_list, 'message': str(e)}

        return Response(context)

class StaffGetInstitute(APIView):
    def get(self, request):
        institutes = Institute.objects.all().order_by('name')
        all_institute = []
        for ins in institutes:
            institute_dict = {'institute_id': ins.id,'institute_name': ins.name}
            all_institute.append(institute_dict)
        context = {'all_institute': all_institute}
        return Response(context)

class StaffGetSubjectList(APIView):
    def get(self, request):
        sub_id_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 267, 1680, 6629,
                       6628, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 7178,]
        subject_list = []
        for sid in sub_id_list:
            subject = Subject.objects.get(id=sid)
            subject_dict = {"id": subject.id, "subject_name": subject.name}
            subject_list.append(subject_dict)
        context = {'subject_list': subject_list}
        return Response(context)

class StaffGetInstituteSubjectList(APIView):
    def post(self, request):
        data = request.data
        try:
            institute_id = data['instituteId']
            institute = Institute.objects.get(id=institute_id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            subject = teacher.subjects.all()
            subject_list = []
            for sub in subject:
                subject_dict = {"id": sub.id, "subject_name": sub.name}
                subject_list.append(subject_dict)
            context = {'subject_list': subject_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}
        return Response(context)

class StaffAddSubject(APIView):
    def post(self, request):
        data = request.data
        try:
            institute_id = data['instituteId']
            subjects_ids = data['subject_ids']
            subject_list = subjects_ids.strip('][').split(',')
            institute = Institute.objects.get(id=institute_id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            for sid in subject_list:
                subject = Subject.objects.get(id=sid)
                teacher.subjects.add(subject)
                subject.save()
            context = {'status': 'Success', 'message': 'Subject Added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffRemoveSubject(APIView):
    def post(self, request):
        data = request.data
        institute_id = data['instituteId']
        subjects_ids = data['subject_ids']
        try:
            subject_list = subjects_ids.strip('][').split(',')
            institute = Institute.objects.get(id=institute_id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            for sid in subject_list:
                subject = Subject.objects.get(id=sid)
                teacher.subjects.remove(subject)
                subject.save()
            context = {'status': 'Success', 'message': 'Subject Removed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)









class CurrentAffairPermission(APIView):
    def post(self, request):
        data = request.data
        instituteId = data['instituteId']
        status = data['permission']
        try:
            institute = Institute.objects.get(id=instituteId)
            if status == 'true':
                institute.showBodhiCurrentAffairs = True
            else:
                institute.showBodhiCurrentAffairs = False
            institute.save()
            context = {'status': 'Success','message': 'Able to See Bodhiai Current Affairs'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class JoinRequestStatus(APIView):
    def post(self, request):
        data = request.data
        try:
            instituteId = data['instituteId']
            status = data['status']
            institute = Institute.objects.get(id=instituteId)
            if status == 'true':
                institute.joinRequestAutomatic = True
            else:
                institute.joinRequestAutomatic = False
            institute.save()
            context = {'status': 'Success','message': 'Join Request Automatic Accepted Allow'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)



class OSN_RegisterStudentNew(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        try:
            user_batches = data['batches']
            batch_list = user_batches.strip('][').split(',')
        except:
            batch_list = None
            
        try:
            email = data['email']
        except:
            email = None
            
        username = username.strip()
        try:
            institute = Institute.objects.get(id=379)
            try:
                new_username = username + '@' + 'osn_academy'
                user = User.objects.create_user(username=new_username, password=password, email=None)
                first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                batch = first_batch
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                teacher = list(Teacher.objects.filter(institute=institute))[0]

                student = Student()
                student.name = name
                student.institute = institute
                student.studentuser = user
                student.save()
                student.batches.add(batch)
                student.save()
                
                studentDetails = StudentDetails()
                studentDetails.student = student
                if email != None:
                    studentDetails.email = email
                    
                studentDetails.save()
                if batch_list:
                    joinRequest = StudentJoinRequest()
                    joinRequest.student = student
                    joinRequest.institute = institute
                    joinRequest.save()
                    
                    for bat in batch_list:
                        try:
                            batch_obj = Batch.objects.get(id=bat)
                            joinRequest.batches.add(batch_obj)
                            joinRequest.save()
                        except Exception as e:
                            print(str(e))
                            
                    if institute.joinRequestAutomatic:
                        student.batches.clear()
                        try:
                            for bat in batch_list:
                                batch_obj = Batch.objects.get(id=bat)
                                student.batches.add(batch_obj)
                                student.save()
                        except Exception as e:
                            print(str(e))
                            
                f_sent = 'register'
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    deviceId = teacher.firebaseToken
                    to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                    send_notification_individual(app_token, deviceId, to_text)
                except Exception as f:
                    f_sent = f
                    print(str(f))

                context = {'status': 'Success', 'name': student.name,'institute': student.institute.name}
                me = Studs(user)
                me.add_subjects()
                me.add_tests()
                return Response(context)

            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute code not found'}
            return Response(context)

from datetime import datetime, timedelta
class InstituteSubscriptionDate(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            subscription_date = me.profile.jdate
            plan_duration = me.profile.planValidity
            if plan_duration != None:
                expiry_date = subscription_date + timedelta(plan_duration)
            else:
                expiry_date = subscription_date
                
            current_date = datetime.now()
            if expiry_date == current_date:
                context = {'subscription_date': subscription_date, 'current_date': current_date,
                        'plan_validity_days': plan_duration, 'expiry_date': expiry_date, 'message': 'plan expired please make payment'}
            else:
                context = {'subscription_date': subscription_date, 'current_date': current_date,
                        'plan_validity_days': plan_duration, 'expiry_date': expiry_date, 'message': 'subscripation period'}

        except Exception as e:
            context = {'status': False, 'message':str(e)}

        return Response(context)

class InstituteRazorpayKey(APIView):
    def post(self, request):
        try:
            data = request.data
            institute_code = data['institute_code']
            institute = Institute.objects.get(code=institute_code)
            key = institute.razorpaykey
            secret_key = getattr(institute, 'razorpay_secret_key', None)
            context = {'razorpaykey': key, 'secret_key':secret_key}
        except Exception as e:
            context = {'message':str(e)}
        return Response(context)

class InstituteRazorpayKeyToken(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        key = me.profile.institute.razorpaykey
        context = {'razorpaykey': key}
        return Response(context)

class TeacherAddRazorpayKey(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        institute_code = data['institute_code']
        razorpaykey = data['key']
        institute = Institute.objects.get(code=institute_code)
        if razorpaykey != '':
            institute.razorpaykey = razorpaykey
            institute.save()
            context = {'razorpaykey': razorpaykey, 'message': 'Institute Razor Pay Key Added'}
        else:
            context = {'status': 'Failed', 'message': 'Institute Razor Pay Key have Some Character'}
        return Response(context)

class TeacherGetStudentLeadData(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            details = TeacherDetails.objects.get(teacher=me.profile)
            teacher_city = details.city
            if teacher_city != None and teacher_city != "":
                teacher_city = teacher_city.lower()
                students = StudentLeadData.objects.filter(city=teacher_city)
                student_list = []
                for st in students:
                    student_dict = {'id': st.id, 'name': st.name, 'phone': 'confidential',
                                    'city': st.city, 'standard': st.standard, 'isUsed': st.is_used}
                    student_list.append(student_dict)
                context = {'student_leads': student_list}
            else:
                context = {'message': 'Please Provide your City in Profile Section'}

        except TeacherDetails.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Teacher Details not found'}
            
        return Response(context)

class TeacherChangeLeadStatus(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            lead_id = data['lead_id']
            lead = StudentLeadData.objects.get(id=lead_id)
            if lead.is_used == False:
                lead.is_used = True
                lead.save()
                context = {'lead_id': lead_id, 'isUsed': lead.is_used, 'message': 'Lead already used'}
            else:
                context = {'status': 'Failed', 'message': 'Lead not available or not used'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}

        return Response(context)

class CheckInstituteCode(APIView):
    def post(self, request):
        data = request.data
        code = data['code']
        try:
            institute = Institute.objects.get(code=code)
            context = {'status': 'Success', 'message': 'Code Already Exist'}
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute Code not Found'}
        return Response(context)

class StudentForceLogOut(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        user = User.objects.get(username=username)
        try:
            token = Token.objects.get(user=user)
            token.delete()
            context = {'userLoggedOut': True}
        except Exception as e:
            context = {'message': str(e)}
        return Response(context)

class TeacherGetAllReferrallPost(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        refferal = RefferalUrl.objects.get(teacher=me.profile)
        refferral_dict = {'id': refferal.id, 'refferal_link': refferal.facebook, 'thumbnail': refferal.instagram,
                          'sharedLead': refferal.sharedLead, 'count': refferal.number, 'date': refferal.date}
        context = {'refferal': refferral_dict}
        return Response(context)



class TeacherGetStudentsDataReport(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            if me.profile.mainTeacher == True:
                if me.profile.institute.name == 'Oxford':
                    all_students = Student.objects.filter(institute=me.profile.institute).order_by('-id')[:100]
                else:
                    all_students = Student.objects.filter(institute=me.profile.institute).order_by('-id')
            else:
                all_students = []
                mybatches = me.profile.batches.all()
                for teachbatch in mybatches:
                    students = Student.objects.filter(institute=me.profile.institute, batches=teachbatch).order_by('-id')
                    all_students.extend(students)
                    
            all_students_list = []
            for stud in all_students:
                try:
                    student_details = StudentDetails.objects.get(student=stud)
                    photo = student_details.photo
                    fullName = student_details.fullName
                    if me.profile.institute.name == 'Oxford':
                        phone = 'No data shown'
                    else:
                        phone = student_details.phone
                    if me.profile.institute.name == 'Oxford':
                        email = 'No data'
                    else:
                        email = student_details.email

                except:
                    phone = None
                    photo = None
                    fullName = None
                    email = None
                    
                if me.profile.institute.name == 'Oxford':
                    details_dict = {'photo': photo, 'phone': 'confidential', 'email': 'confidential', 'fullName': fullName}
                else:
                    details_dict = {'photo': photo, 'phone': stud.studentuser.username, 'email': email, 'fullName': fullName}
                    
                batches = stud.batches.all()
                student_batches_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    student_batches_list.append(bat_dict)
                try:
                    package_list = []
                    packages = StudentPackage.objects.filter(student=stud)
                    if packages:
                        for sp in packages:
                            paidPackage = PaidAmountStudentPackage.objects.filter(
                                studentPackage=sp)
                            paid_list = []
                            for pp in paidPackage:
                                pp_dict = {'total paid Amount': pp.paidAmount, 'date': pp.date}
                                paid_list.append(pp_dict)

                            name = sp.package.title
                            startDate = sp.startDate
                            endDate = sp.endDate
                            price = sp.package.price
                            pack_dict = {'package_name': name, 'package_start_date': startDate,
                                        'package_end_date': endDate, 'package_price': price, 'paid_details': paid_list}
                            package_list.append(pack_dict)
                except:
                    package_list = 'Package Not Purchased'
                    
                student_dict =\
                    {'id': stud.id, 'name': stud.name, 'batches': student_batches_list,
                        'details': details_dict, 'package_details': package_list}
                all_students_list.append(student_dict)
            context = {'studentList': all_students_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}

        return Response(context)

class TeacherStudentChangePassword(APIView):
    def get(self, request, id):
        try:
            institute = Institute.objects.get(id=id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            students = Student.objects.filter(institute=teacher.institute)
            for student in students:
                user = student.studentuser
                print(user)
                user.set_password('123')
                user.save()
                print('student password changed', teacher.institute)
            context = {'message': 'finally done'}
        except Exception as e:
            context = {'status': False, 'message':str(e)}

        return Response(context)

class TeacherGetUsername(APIView):
    def get(self, request, id):
        institute = Institute.objects.get(id=id)
        teacher = Teacher.objects.filter(institute=institute)
        teacher_list = []
        for t in teacher:
            details = {'username': t.teacheruser.username, 'mainTeacher': t.mainTeacher}
            teacher_list.append(details)
        return Response({'teachers': teacher_list})

class TeacherGetStudentDataCSV(APIView):
    def get(self, request):
        institute = Institute.objects.get(id=365)
        response = HttpResponse(content_type='text/csv')

        writer = csv.writer(response)
        writer.writerow(['First Name', 'Contact', 'Email', 'Joining_date', 'Address', 'Batches', 'Packages'])

        for stud in Student.objects.filter(institute=institute).order_by('-id'):
            detail = StudentDetails.objects.get(student=stud)
            contact = stud.studentuser.username
            batches = stud.batches.all()
            batch_list = []
            for bat in batches:
                batch_list.append(bat.name)
            try:
                package_list = []
                packages = StudentPackage.objects.filter(student=stud)
                if packages:
                    for sp in packages:
                        paidPackage = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                        paid_list = []
                        for pp in paidPackage:
                            pp_dict = {'total paid Amount': pp.paidAmount, 'date': pp.date}
                            paid_list.append(pp_dict)

                        name = sp.package.title
                        startDate = sp.startDate
                        endDate = sp.endDate
                        price = sp.package.price
                        pack_dict = {'package_name': name, 'package_start_date': startDate,
                                     'package_end_date': endDate, 'package_price': price, 'paiddetails': paid_list}
                        package_list.append(pack_dict)
                else:
                    package_list = []
            except:
                package_list = 'Package Not Purchased'
                
            print('ppppppppppppp', package_list)
            writer.writerow([stud.name, contact, detail.email,detail.jdate, detail.address, batch_list, package_list])

        response['Content-Disposition'] = 'attachment; filename="report.csv"'
        return response

class TeacherGetStudentSDataCSV(APIView):
    def get(self, request, code):
        institute = Institute.objects.get(code=code)

        if institute.id != 1:
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['First Name', 'Contact', 'Email', 'Joining_date', 'Address', 'Batches', 'Packages'])

            for stud in Student.objects.filter(institute=institute).order_by('-id'):
                try:
                    detail = StudentDetails.objects.get(student=stud)
                    email = detail.email
                    jdate = detail.jdate
                    address = detail.address
                    
                except StudentDetails.DoesNotExist:
                    email = None
                    jdate = None
                    address = None

                student_username = stud.studentuser.username
                contact = student_username.split('@')[0]
                batches = stud.batches.all()
                batch_list = []
                
                for bat in batches:
                    batch_list.append(bat.name)
                try:
                    package_list = []
                    packages = StudentPackage.objects.filter(student=stud)
                    if packages:
                        for sp in packages:
                            paidPackage = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                            paid_list = []
                            for pp in paidPackage:
                                pp_dict = {'total paid Amount': pp.paidAmount, 'date': pp.date}
                                paid_list.append(pp_dict)

                            name = sp.package.title
                            startDate = sp.startDate
                            endDate = sp.endDate
                            price = sp.package.price
                            pack_dict = {
                                'package_name': name, 
                                'package_start_date': startDate,
                                'package_end_date': endDate, 
                                'package_price': price, 
                                'paiddetails': paid_list
                                }
                            package_list.append(pack_dict)
                    else:
                        package_list = []
                        
                except:
                    package_list = 'Package Not Purchased'
                    
                writer.writerow([stud.name, contact, email, jdate, address, batch_list, package_list])

            response['Content-Disposition'] = 'attachment; filename="report.csv"'
            return response
        else:
            return HttpResponse('Failed ! Because you are try to log-in demo institue')

class TeacherGetShowOtherCourses(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            showCourses = me.profile.institute.showOtherCourses
            courses_list = []
            otherCourses = me.profile.institute.otherCourses.all()
            for oc in otherCourses:
                oc_dict = {'id': oc.id, 'name': oc.name}
                courses_list.append(oc_dict)
            context = {'showCourse': showCourses, 'courses': courses_list}
        except Exception as e:
            context = {'status': False, 'message':str(e)}

        return Response(context)

class TeacherSetToShowCourses(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        course_ids = data['course_ids']
        courses_list = course_ids.strip('][').split(',')
        otherCourses = me.profile.institute.otherCourses.all()
        
        for oc in otherCourses:
            course = TeacherCourse.objects.get(id=oc.id)
            me.profile.institute.otherCourses.remove(course)
            me.profile.institute.save()

        try:
            me.profile.institute.showOtherCourses = True
            me.profile.institute.save()
            courses_list = course_ids.strip('][').split(',')
            for cl in courses_list:
                course = TeacherCourse.objects.get(id=cl)
                me.profile.institute.otherCourses.add(course)

            me.profile.institute.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class DoubtCallNotification(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        toSendId = data['student_username']
        try:
            student = Student.objects.get(studentuser__username=toSendId)
            serverKey = me.profile.institute.serverKey
            
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"Doubt Solving","body": 'Doubt solving call from {}'.format(me.profile.name),}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"
                
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = serverKey, notification = notification, student_id=student.id)
            else:
                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, student_id=student.id)
               
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class WebAppCreate(APIView):
    def institute_code_generate(self):
        letters = string.ascii_lowercase
        code = ''.join(random.choice(letters) for i in range(5))
        try:
            code = Institute.objects.get(code=code)
            institute_code_generate()
        except:
            return code

    def post(self, request):
        data = request.data
        webappuser = WebAppUser.objects.get(webappuser=self.request.user)
        try:
            teacher = Teacher.objects.get(teacheruser=self.request.user)
            context = {'status': 'Failed', 'message': 'App already created'}
            return Response(context)
        except:
            pass
        institute_name = data['institute_name']
        folder_name = institute_name.replace(' ', '')
        institute_name_lower = institute_name.lower()
        logo = data['logo']
        try:
            logo_download_url = data['logo_download_url']
        except:
            logo_download_url = None
            
        code = self.institute_code_generate()
        finalAppName = folder_name + '-' + str(code)
        institute = Institute(name=institute_name, code=code, typeInstitute='webapp')
        institute.joinRequestAutomatic = True
        institute.batchChangeRequestAutomatic = True
        institute.easebuzzMerchanKey = 'E4PGYN5DSD'
        institute.easebuzzSaltKey = 'LLQW7Y6VSG'
        institute.easebuzzSubMerchanKey = 'S501888Z6C'
        institute.save()

        instituteDetails = InstituteDetails()
        instituteDetails.institute = institute
        instituteDetails.save()

        teacher = Teacher()
        teacher.teacheruser = self.request.user
        name = webappuser.name
        teacher.institute = institute
        teacher.teacheruser = self.request.user
        teacher.mainTeacher = True
        teacher.webAppTeacher = True
        teacher.name = name
        teacher.save()
        batch = Batch(name='Outer', institute=institute)
        batch.save()
        teacher.batches.add(batch)
        webappuser.teacher = teacher
        webappuser.instituteName = institute_name
        webappuser.save()

        TeacherDetails.objects.create(teacher=teacher, name=name)

        if logo_download_url != None:
            webappuser.logo = logo_download_url
            banner = Banner(link=logo_download_url, institute=institute)
            banner.save()
        else:
            webappuser.logo = logo
            
        webappuser.save()
        banner = Banner(link='https://d1mhn0gss3ayo4.cloudfront.net/WhatsApp+Image+2021-07-22+at+3.53.00+PM.jpeg', institute=institute)
        banner.save()

        self.copy_folder(finalAppName)
        self.createFirebaseJson(finalAppName, code)
        self.changeAppSettings(finalAppName, code, institute_name)
        self.changeLogo(finalAppName, logo)
        flutter_build_deploy.delay(finalAppName, code)
        token, created = Token.objects.get_or_create(user=self.request.user)
        groups = self.request.user.groups.all()
        context = {'status': 'Success', 'key': token.key, 'user_type': groups[0].name, 'name': teacher.name, 'username': self.request.user.username,
                'institute': teacher.institute.name, 'code': teacher.institute.code, 'mainTeacher': teacher.mainTeacher}

        return Response(context)

    def copy_folder(self, fileName):
        home_dir = '/home/bodhiai/webapps/'
        command = 'cp -r {}Student_web_new {}{}'.format(
            home_dir, home_dir, fileName)
        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as e:
            print('copy folder error {}'.format(e.output))

    def createFirebaseJson(self, fileName, code):
        home_dir = '/home/bodhiai/webapps/'
        kk = os.system('cd {}{}'.format(home_dir, fileName))
        print(kk)
        whole_name = fileName
        first_part = whole_name.split('-')[0]
        if len(first_part) < 9:
            site_name = fileName
        else:
            site_name = first_part[:7] + '-' + code

        f = open('{}{}/firebase.json'.format(home_dir, fileName), "w+")
        f.write(str(data))
        f.close()

    def changeAppSettings(self, fileName, instituteCode, realName):
        home_dir = '/home/bodhiai/webapps/'
        directory = '{}{}/lib/helpers'.format(home_dir, fileName)
        manifest_dir = '{}{}/web'.format(home_dir, fileName)
        f = 'app_settings.dart'
        manifiest_file = 'manifest.json'
        index_file = 'index.html'
        kk = subprocess.check_output(
            'sed -i "s/ou/{}/g"  {}/{}'.format(instituteCode, directory, f), shell=True)
        ii = subprocess.check_output(
            'sed -i "s/Bodhi AI/{}/g" {}/{}'.format(realName, directory, f), shell=True)
        mm_name = subprocess.check_output(
            'sed -i "s/bodhiaiweb/{}/g" {}/{}'.format(realName, manifest_dir, manifiest_file), shell=True)
        index_name = subprocess.check_output(
            'sed -i "s/bodhiaiweb/{}/g" {}/{}'.format(realName, manifest_dir, index_file), shell=True)

    def changeLogo(self, fileName, logoURL):
        home_dir = '/home/bodhiai/webapps/'
        extention = logoURL.split('.')[-1]
        print(extention)
        directory = '{}{}/assets'.format(home_dir, fileName)
        manifest_folder = '{}{}/web'.format(home_dir, fileName)
        os.chdir(directory)
        jj = subprocess.check_output(
            'gsutil cp {} {}/logo.{}'.format(logoURL, directory, extention), shell=True)
        img = Image.open('logo.{}'.format(extention))
        img.save('logo.png')
        print(jj)
        cp_logo = subprocess.check_output(
            'cp {}/logo.png  {}/icons'.format(directory, manifest_folder), shell=True)
        cp_favicon = subprocess.check_output(
            'cp {}/logo.png  {}'.format(directory, manifest_folder), shell=True)
        move_favicon = subprocess.check_output(
            'mv {}/logo.png  {}/favicon.png'.format(manifest_folder, manifest_folder), shell=True)

class CheckWebAppURL(APIView):
    def get(self, request):
        webappuser = WebAppUser.objects.get(webappuser=self.request.user)
        me = webappuser.teacher
        webAppUrl = me.institute.webAppUrl
        context = {'url': webAppUrl}
        return Response(context)

class TeacherSeeBatchWiseStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        all_students = Student.objects.filter(institute=me.profile.institute, batches=batch_id).prefetch_related('student').order_by('-id')
        all_students_list = []
        for stud in all_students:
            details_dict = {}
            try:
                student_details = StudentDetails.objects.get(student=stud)
                details_dict = {'photo': student_details.photo, 'phone': stud.studentuser.username,
                                'email': student_details.email, 'fullName': student_details.fullName}
            except:
                pass
            
            batches = stud.batches.all()
            student_batches_list = []
            for bat in batches:
                bat_dict = {'id': bat.id, 'name': bat.name}
                student_batches_list.append(bat_dict)
                
            student_dict = {'id': stud.id, 'name': stud.name, 'batches': student_batches_list, 'details': details_dict}
            all_students_list.append(student_dict)
        context = {'studentList': all_students_list}
        return Response(context)

class TeacherSeePackageWiseStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        all_students = package.students.filter(institute=me.profile.institute)
        all_students_list = []
        for stud in all_students:
            details_dict = {}
            try:
                student_details = StudentDetails.objects.get(student=stud)
                details_dict = {'photo': student_details.photo, 'phone': stud.studentuser.username,
                                'email': student_details.email, 'fullName': student_details.fullName}
            except:
                pass
            
            batches = stud.batches.all()
            student_batches_list = []
            for bat in batches:
                bat_dict = {'id': bat.id, 'name': bat.name}
                student_batches_list.append(bat_dict)
            student_dict = {'id': stud.id, 'name': stud.name, 'batches': student_batches_list, 'details': details_dict}
            all_students_list.append(student_dict)
        context = {'studentList': all_students_list}
        return Response(context)

class TeacherGetBatchWiseStudentReportCSV(APIView):
    def get(self, request, institute_code, batch_id):
        institute = Institute.objects.get(code=institute_code)

        if institute.id != 1:
            batch = Batch.objects.get(id=batch_id)
            allStudents = Student.objects.filter(institute=institute, batches=batch).order_by('-id')

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['First Name', 'Contact', 'Email', 'Joining_date', 'Address', 'Batches', 'Packages'])

            for stud in allStudents:
                try:
                    detail = StudentDetails.objects.get(student=stud)
                    email = detail.email
                    jdate = detail.jdate
                    address = detail.address
                    
                except StudentDetails.DoesNotExist:
                    email = None
                    jdate = None
                    address = None

                contact = stud.studentuser.username
                batches = stud.batches.all()
                batch_list = []
                for bat in batches:
                    batch_list.append(bat.name)
                try:
                    package_list = []
                    packages = StudentPackage.objects.filter(student=stud)
                    if packages:
                        for sp in packages:
                            paidPackage = PaidAmountStudentPackage.objects.filter(
                                studentPackage=sp)
                            paid_list = []
                            for pp in paidPackage:
                                pp_dict = {'total paid Amount': pp.paidAmount, 'date': pp.date}
                                paid_list.append(pp_dict)

                            name = sp.package.title
                            startDate = sp.startDate
                            endDate = sp.endDate
                            price = sp.package.price
                            pack_dict = {'package_name': name, 'package_start_date': startDate,
                                         'package_end_date': endDate, 'package_price': price, 'paiddetails': paid_list}
                            package_list.append(pack_dict)
                    else:
                        package_list = []
                except:
                    package_list = 'Package Not Purchased'
                writer.writerow([stud.name, contact, email, jdate, address, batch_list, package_list])

            response['Content-Disposition'] = 'attachment; filename="studentsReport.csv"'
            return response
        else:
            return HttpResponse('Failed! because you are try to log-in demo institue')

class TeacherGetPackageWiseStudentReportCSV(APIView):
    def get(self, request, institute_code, package_id):

        institute = Institute.objects.get(code=institute_code)

        if institute.id != 1:
            package = Package.objects.get(id=package_id)
            allStudents = package.students.filter(institute=institute)

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['First Name', 'Contact', 'Email',
                            'Joining_date', 'Address', 'Batches', 'Packages_name', 'Packages_start_date', 'Packages_end_date', 'Packages_price', 'paid_details'])

            for stud in allStudents:
                try:
                    detail = StudentDetails.objects.get(student=stud)
                    email = detail.email
                    jdate = detail.jdate
                    address = detail.address
                except StudentDetails.DoesNotExist:
                    email = None
                    jdate = None
                    address = None

                contact = stud.studentuser.username
                batches = stud.batches.all()
                batch_list = []
                for bat in batches:
                    batch_list.append(bat.name)
                try:
                    package_list = []
                    packages = StudentPackage.objects.filter(student=stud)
                    if packages:
                        for sp in packages:
                            paidPackage = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                            paid_list = []
                            for pp in paidPackage:
                                pp_dict = {
                                    'total paid Amount': pp.paidAmount, 'date': pp.date}
                                paid_list.append(pp_dict)

                            name = sp.package.title
                            startDate = sp.startDate
                            endDate = sp.endDate
                            price = sp.package.price
                            pack_dict = {'package_name': name, 'package_start_date': startDate,
                                         'package_end_date': endDate, 'package_price': price, 'paiddetails': paid_list}
                            package_list.append(pack_dict)
                            writer.writerow([stud.name, contact, email,
                                            jdate, address, batch_list, name, startDate, endDate, price, paid_list])
                    else:
                        package_list = []
                except:
                    package_list = 'Package Not Purchased'
                    writer.writerow([stud.name, contact, email,
                                     jdate, address, batch_list, 'Package Not Purchased', None, None, None, None])

            response['Content-Disposition'] = 'attachment; filename="studentsReport.csv"'
            return response
        else:
            return HttpResponse('Failed! because you are try to log-in demo institue')

class StudentGetContentNumbers(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        notes = Note.objects.filter(teacher__institute=me.profile.institute).count()
        videos = Video.objects.filter(teacher__institute=me.profile.institute).count()
        tests = Test.objects.filter(createdBy__institute=me.profile.institute).count()
        context = {'number_videos': videos, 'number_notes': notes, 'number_tests': tests}
        return Response(context)

class TeacherGetWebAppLink(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        appLink = institute.webAppUrl
        context = {'appLink': appLink}
        return Response(context)

class TeacherGetAllWebApps(APIView):
    def get(self, request):
        all_webApp = Institute.objects.filter(typeInstitute='webapp', teacherinstitute__mainTeacher=True,
                                              teacherinstitute__jdate__date=timezone.now().date()).order_by('-id')
        all_webApp_list = []
        for i in all_webApp:
            try:
                main_teacher = Teacher.objects.get(institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                date = None
                username = None
                
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
                
            if WebappFeedback.objects.filter(institute=i).exists():
                feedback = True
            else:
                feedback = False
                
            wApp_dict = {'id': i.id, 'name': i.name, 'date': date,'username': username, 'contact': contact, 'feedback': feedback}
            all_webApp_list.append(wApp_dict)
            
        context = {'allWebApps': all_webApp_list}
        return Response(context)

class TeacherSeeIndividualWebApp(APIView):
    def post(self, request):
        data = request.data
        webApp_id = data['webApp_id']
        webApp_institute = Institute.objects.get(id=webApp_id)
        all_student = Student.objects.filter(institute=webApp_institute)
        all_teacher = Teacher.objects.filter(institute=webApp_institute)
        try:
            main_teeacher = all_teacher.get(mainTeacher=True)
            teacherIp = main_teeacher.teacherIpAddress
            appDevelopedDate = main_teeacher.jdate.date()
            username = main_teeacher.teacheruser.username
            try:
                teacherdetails = TeacherDetails.objects.get(teacher=main_teeacher)
                contact = teacherdetails.phone
            except TeacherDetails.DoesNotExist:
                contact = None
        except:
            appDevelopedDate = None
            username = None
            contact = None
            teacherIp = None

        teachers_list = []
        for teach in all_teacher:
            batches = teach.batches.all()
            subjects = teach.subjects.all()
            teach_batches_list = []
            for bat in batches:
                batch_dict = {'id': bat.id, 'name': bat.name}
                teach_batches_list.append(batch_dict)
                
            subjects_list = []
            for sub in subjects:
                subject_dict = {'id': sub.id, 'name': sub.name}
                subjects_list.append(subject_dict)

            try:
                teacherdetails = TeacherDetails.objects.get(teacher=teach)
                contact = teacherdetails.phone
            except TeacherDetails.DoesNotExist:
                contact = None

            teach_dict = {'id': teach.id, 'name': teach.name, 'username': teach.teacheruser.username, 'contact': contact,
                          'mainTeacher': teach.mainTeacher, 'photo': teach.photo, 'jdate': teach.jdate, 'batches': teach_batches_list, 'subjects': subjects_list}
            teachers_list.append(teach_dict)

        students_list = []
        for stud in all_student:
            batches_list = []
            batches = stud.batches.all()
            for bat in batches:
                batch_dict = {'id': bat.id, 'name': bat.name}
                batches_list.append(batch_dict)
            stud_dict = {'id': stud.id, 'name': stud.name,'username': stud.studentuser.username, 'batches': batches_list}
            students_list.append(stud_dict)

        teachers = all_teacher.values_list('id', flat=True)
        all_package = Package.objects.filter(teacher__in=teachers)

        package_list = []
        for pack in all_package:
            all_package_videos = pack.videos.all()
            all_package_notes = pack.notes.all()

            video_list = []
            for v in all_package_videos:
                video_dict = {'id': v.id, 'title': v.title, 'urlLink': v.urlLink}
                video_list.append(video_dict)

            notes_list = []
            for n in all_package_notes:
                note_dict = {'id': n.id, 'title': n.title}
                notes_list.append(note_dict)
            package_dict = {'id': pack.id, 'title': pack.title, 'price': pack.price,
                            'duration': pack.duration, 'packageVideo': video_list, 'packageNote': notes_list}
            package_list.append(package_dict)

        totalNotes = Note.objects.filter(
            teacher__in=teachers).distinct().count()
        totalVideos = Video.objects.filter(
            teacher__in=teachers).distinct().count()
        totalYoutubeVideo = LiveVideoLink.objects.filter(
            teacher__in=teachers).distinct().count()
        totalBatches = Batch.objects.filter(institute=webApp_institute).count()

        banner = Banner.objects.filter(institute=webApp_institute)
        banner_list = []
        for bn in banner:
            banner_dict = {'id': bn.id, 'link': bn.link}
            banner_list.append(banner_dict)

        if teacherIp:
            response = requests.get('http://ip-api.com/json/'+teacherIp).json()
        else:
            response = None

        context = {'id': webApp_institute.id, 
                   'name': webApp_institute.name, 
                   'code': webApp_institute.code, 
                   'webURl': webApp_institute.webAppUrl, 
                   'banner': banner_list, 
                   'webApp_created_date': appDevelopedDate, 
                   'username': username, 
                   'contact': contact, 
                   'typeInstitute': webApp_institute.typeInstitute, 
                   'totalTeachers': len(all_teacher),
                   'all_teachers': teachers_list, 
                   'totalStudents': len(all_student), 
                   'all_students': students_list, 
                   'all_package': package_list, 
                   'totalNotes': totalNotes, 
                   'totalVideos': totalVideos, 
                   'totalYoutubeVideo': totalYoutubeVideo, 
                   'totalBatches': totalBatches, 
                   'WebAppUserInfo': response,
                   'facebookURL': webApp_institute.facebookURL, 
                   'instagramURL': webApp_institute.instagramURL, 
                   'twitterURL': webApp_institute.twitterURL, 
                   'email': webApp_institute.email, 
                   'websiteURL': webApp_institute.websiteURL, 
                   'telegramURL': webApp_institute.telegramURL
                   }
        return Response(context)

class TeacherGetWebAppsDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        finalDate = datetime.strptime(date, "%Y-%m-%d")
        all_webApp = Institute.objects.filter(
            typeInstitute='webapp', teacherinstitute__mainTeacher=True, teacherinstitute__jdate__date=finalDate.date()).order_by('-id')
        all_webApp_list = []
        for i in all_webApp:
            try:
                main_teacher = Teacher.objects.get(institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                data = None
                username = None
                
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
                
            if WebappFeedback.objects.filter(institute=i).exists():
                feedback = True
            else:
                feedback = False

            if i.webAppUrl:
                unCompleteWebApps = False
            else:
                unCompleteWebApps = True

            wApp_dict = {'id': i.id, 'name': i.name, 'date': date, 'username': username,
                         'contact': contact, 'feedback': feedback, 'unCompleteWebApps': unCompleteWebApps}
            all_webApp_list.append(wApp_dict)
        context = {'allWebApps': all_webApp_list}
        return Response(context)

class GiveFeedbackToWebapp(APIView):
    def post(self, request):
        data = request.data
        institute_id = data['institute_id']
        feedback = data['feedback']
        user_name = data['user_name']
        try:
            feedbackType = data['feedbackType']
        except:
            feedbackType = None
            
        try:
            callrecording = data['callrecording']
        except:
            callrecording = None
            
        try:
            institute = Institute.objects.get(id=institute_id)
            if callrecording:
                WebappFeedback.objects.create(institute=institute, user=user_name, feedback=feedback, callrecording=callrecording, feedbackType=feedbackType)
            else:
                WebappFeedback.objects.create(institute=institute, user=user_name, feedback=feedback, feedbackType=feedbackType)
                
            context = {'status': 'Success', 'message': 'Feedback Successfully'}
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
            
        return Response(context)

class TeacherGetWebappFeedbacks(APIView):
    def post(self, request):
        data = request.data
        institute_id = data['institute_id']
        try:
            institute = Institute.objects.get(id=institute_id)
            webFeedbacks = WebappFeedback.objects.filter(institute=institute)
            feedback_list = []
            for wf in webFeedbacks:
                feedback_dict = {
                    'id': wf.id, 
                    'user': wf.user, 
                    'feedback': wf.feedback,
                    'feedbackType': wf.feedbackType, 
                    'date': wf.date, 
                    'callrecording': wf.callrecording
                    }
                feedback_list.append(feedback_dict)
            context = {'feedbacks': feedback_list}
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
        return Response(context)

class TeacherGetFeedbackWiseWebapps(APIView):
    def post(self, request):
        data = request.data
        feedback = data['feedback']
        feedbackType = data['feedbackType']

        if feedbackType:
            webApps = Institute.objects.filter(webappfeedback__feedbackType=feedbackType).distinct().order_by('-webappfeedback__id')
        else:
            webApps = Institute.objects.filter(webappfeedback__feedback__icontains=feedback).distinct().order_by('-webappfeedback__id')

        webApp_list = []
        for i in webApps:
            webAppsFeedbackes = WebappFeedback.objects.filter(institute=i)
            webApp_feedbackes_list = []
            for wf in webAppsFeedbackes:
                webApp_feedback_dict = {'feedback_id': wf.id, 'feedbackUser': wf.user, 'feedback': wf.feedback,
                                        'feedbackType': wf.feedbackType, 'date': wf.date, 'callrecording': wf.callrecording}
                webApp_feedbackes_list.append(webApp_feedback_dict)

            try:
                main_teacher = Teacher.objects.get(institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                date = None
                username = None
                
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
                
            wApp_dict = {'id': i.id, 'name': i.name, 'date': date, 'username': username,
                         'contact': contact, 'feedbackes': webApp_feedbackes_list}
            webApp_list.append(wApp_dict)
            
        context = {'status': 'Success', 'webApps': webApp_list}
        return Response(context)

class TeacherGetAllStudentNumber(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = me.profile.institute
        students = Student.objects.filter(institute=institute).count()
        context = {'numberStudents': students}
        return Response(context)

class WebAppLogo(APIView):
    def get(self, request):
        user = self.request.user
        webappuser = WebAppUser.objects.get(webappuser=user)
        logo = webappuser.logo
        context = {'logo': logo}
        return Response(context)

class StaffChangeAgoraCode(APIView):
    def get(self, request, agoraCode):
        Institute.objects.all().update(agoraCode=agoraCode)
        return HttpResponse('successfully updated')

class LastSevenDaysVideos(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            videos_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseVideos = Video.objects.filter(
                    teacher__institute__typeInstitute='webapp', publishDate__date=start_date).distinct().count()
                days_dict = {'day': days, 'date': start_date,
                             'count': dayWiseVideos}
                videos_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'videos': videos_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysNotes(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            notes_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseNotes = Note.objects.filter(
                    teacher__institute__typeInstitute='webapp', publishDate__date=start_date).distinct().count()
                days_dict = {'day': days, 'date': start_date,
                             'count': dayWiseNotes}
                notes_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'notes': notes_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysStudents(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            students_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                daysWiseStudent = Student.objects.filter(
                    institute__typeInstitute='webapp', jdate__date=start_date).count()
                days_dict = {'day': days, 'date': start_date,
                             'count': daysWiseStudent}
                students_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'students': students_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysInstitutes(APIView):
    def get(self, request):
        date = timezone.now() - timedelta(days=6)
        start_date = datetime.date(date)
        end_date = datetime.date(timezone.now())
        delta = timedelta(days=1)
        institute_list = []
        while start_date <= end_date:
            days = start_date.strftime("%A")
            dayWiseInstitute = Teacher.objects.filter(
                mainTeacher=True, institute__typeInstitute='webapp', jdate__date=start_date).count()
            days_dict = {'day': days, 'date': start_date,
                         'count': dayWiseInstitute}
            institute_list.append(days_dict)
            start_date += delta
        context = {'status': 'success', 'institutes': institute_list}
        return Response(context)

class TeacherUploadTutorialPoster(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        title = data['title']
        url = data['url']
        thumbnail = data['thumbnail']
        publish = data['publish']
        try:
            tp = TutorialPoster(
                institute=me.profile.institute, title=title, link=url)
            if thumbnail:
                tp.thumbnail = thumbnail
            if publish == 'false':
                tp.publish = False
            tp.save()
            context = {'status': 'success',
                       'message': 'successfully uploaded', 'link': tp.link}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetTutorialPoster(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        tps = TutorialPoster.objects.filter(
            institute=me.profile.institute, publish=True).order_by('-id')
        tps_list = []
        for tp in tps:
            tp_dict = {'id': tp.id, 'title': tp.title, 'link': tp.link,
                       'thumbnail': tp.thumbnail, 'uploadDate': tp.uploadDate, 'publish': tp.publish}
            tps_list.append(tp_dict)
        context = {'status': 'success', 'allTutorialPosters': tps_list}
        return Response(context)

class TeacherEditTutorialPoster(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        tutorialposter_id = data['tutorialposter_id']
        title = data['title']
        publish = data['publish']
        thumbnail = data['thumbnail']
        try:
            tp = TutorialPoster.objects.get(
                id=tutorialposter_id, institute=me.profile.institute)
            tp.title = title
            tp.thumbnail = thumbnail
            if publish == 'false':
                tp.publish = False
            else:
                tp.publish = True
            tp.save()
            context = {'status': 'Failed', 'message': 'successfully updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteTutorialPoster(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        tutorialposter_id = data['tutorialposter_id']
        try:
            TutorialPoster.objects.get(id=tutorialposter_id, institute=me.profile.institute).delete()
            context = {'status': 'Failed', 'message': 'Successfully Deleted'}
        except TutorialPoster.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Tutorial poster not found'}
        return Response(context)

class TeacherGetAllAvailableCourses(APIView):
    def get(self, request):
        courses = TeacherCourse.objects.all()
        course_list = []
        for course in courses:
            course_dict = {'id': course.id, 'name': course.name}
            course_list.append(course_dict)
        context = {'courses': course_list}
        return Response(context)

class TeacherRegisterCourses(APIView):
    def post(self, request):
        me = Teach(self, request.user)
        details = TeacherDetails.objects.get(teacher=me.profile)
        data = request.data
        courses_ids = data['courses_list']
        courses_list = courses_ids.strip('][').split(',')
        for cl in courses_list:
            teacher_course = TeacherCourse.objects.get(id=cl)
            details.course.add(teacher_course)
        details.save()
        context = {'status': 'Success'}
        return Response(context)

class GetWebappNotesInfoDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        try:
            notes_list = []
            notes = Note.objects.filter(teacher__institute__typeInstitute='webapp', publishDate__date=date).distinct()
            for nt in notes:
                teachers = nt.teacher.all()
                teachers_list = []
                for teach in teachers:
                    institute = teach.institute.name
                    teach_dict = {'id': teach.id, 'teacher_Username': teach.teacheruser.username, 'name': teach.name + ' '+institute}
                    teachers_list.append(teach_dict)
                batches = nt.batches.all()
                batches_list = []
                for bat in batches:
                    batch_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(batch_dict)
                noteUrl = NoteURL.objects.get(note=nt)

                institute_id = teachers[0].institute.id
                try:
                    main_teacher = Teacher.objects.get(
                        institute=teachers[0].institute, mainTeacher=True)
                    appDevelopedDate = main_teacher.jdate.date()
                except:
                    appDevelopedDate = None

                note_dict = {'id': nt.id, 'title': nt.title, 'institute_id': institute_id, 'institute_name': institute, 'appDevelopedDate': appDevelopedDate,
                             'noteUrl': noteUrl.link, 'subject': nt.subject.name, 'chapter': nt.chapter.name, 'batches': batches_list, 'teachers': teachers_list}
                notes_list.append(note_dict)
            context = {'status': 'success', 'notes': notes_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetWebappVideosInfoDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        try:
            videos_list = []
            videos = Video.objects.filter(
                teacher__institute__typeInstitute='webapp', publishDate__date=date).distinct()
            for vi in videos:
                teachers = vi.teacher.all()
                teachers_list = []
                for teach in teachers:
                    institute = teachers[0].institute.name
                    teach_dict = {
                        'id': teach.id, 'teacher_Username': teach.teacheruser.username, 'name': teach.name + ' '+institute}
                    teachers_list.append(teach_dict)
                batches = vi.batches.all()
                batches_list = []
                for bat in batches:
                    batch_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(batch_dict)

                institute_id = teachers[0].institute.id
                try:
                    main_teacher = Teacher.objects.get(
                        institute=teachers[0].institute, mainTeacher=True)
                    appDevelopedDate = main_teacher.jdate.date()
                except:
                    appDevelopedDate = None

                note_dict = {'id': vi.id, 'title': vi.title, 'institute_id': institute_id, 'institute_name': institute, 'appDevelopedDate': appDevelopedDate,
                             'urlLink': vi.urlLink, 'subject': vi.subject.name, 'chapter': vi.chapter.name, 'batches': batches_list, 'teachers': teachers_list}
                videos_list.append(note_dict)
            context = {'status': 'success', 'videos': videos_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class GetWebappStudentsInfoDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        try:
            students = Student.objects.filter(
                institute__typeInstitute='webapp', jdate__date=date)
            students_list = []
            newInstituteStudents = []
            for stud in students:
                batches = stud.batches.all()
                batches_list = []
                for bat in batches:
                    batch_dict = {'id': bat.id, 'name': bat.name}
                    batches_list.append(batch_dict)
                subjects = stud.subjects.all()
                subjects_list = []
                for sub in subjects:
                    subject_dict = {'id': sub.id, 'name': sub.name}
                    subjects_list.append(subject_dict)
                student_dict = {'id': stud.id, 'name': stud.name, 'username': stud.studentuser.username,
                                'institute_id': stud.institute.id, 'institute': stud.institute.name, 'subjects': subjects_list, 'batches': batches_list}

                try:
                    mainTeacher = stud.institute.teacherinstitute.get(
                        mainTeacher=True)
                    if str(mainTeacher.jdate.date()) == date:
                        newInstituteStudents.append(student_dict)
                    else:
                        students_list.append(student_dict)
                except:
                    students_list.append(student_dict)

            institutes = students.values_list(
                'institute__id', flat=True).distinct()
            ins_list = []
            for i in institutes:
                students = Student.objects.filter(
                    institute=i, jdate__date=date)
                institute_name = students[0].institute.name
                institute_id = students[0].institute.id
                ins_dict = {'institute_id': institute_id,
                            'institute_name': institute_name, 'totalStudents': len(students)}
                ins_list.append(ins_dict)
            context = {'status': 'success', 'institute': ins_list, 'students_Detailes': students_list,
                       'newInstituteStudents': newInstituteStudents, 'totalInstitute': len(ins_list)}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class GetWebappContentInfoDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        try:
            students = Student.objects.filter(
                institute__typeInstitute='webapp', jdate__date=date).count()
            videos = Video.objects.filter(
                teacher__institute__typeInstitute='webapp', publishDate__date=date).distinct().count()
            notes = Note.objects.filter(
                teacher__institute__typeInstitute='webapp', publishDate__date=date).distinct().count()
            institutes = Teacher.objects.filter(
                mainTeacher=True, institute__typeInstitute='webapp', jdate__date=date).count()
            info_list = []
            students = {'name': 'students', 'count': students}
            videos = {'name': 'videos', 'count': videos}
            notes = {'name': 'notes', 'count': notes}
            institutes = {'name': 'institutes', 'count': institutes}
            info_list.append(students)
            info_list.append(videos)
            info_list.append(notes)
            info_list.append(institutes)

            context = {'status': 'success', 'all_info': info_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetDateWiseFeedbackWebapps(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        time = data['date']
        webApps = Institute.objects.filter(
            webappfeedback__date=time).distinct()
        webApp_list = []
        for i in webApps:
            webAppsFeedbackes = WebappFeedback.objects.filter(institute=i)
            webApp_feedbackes_list = []
            for wf in webAppsFeedbackes:
                webApp_feedback_dict = {'feedback_id': wf.id, 'feedbackUser': wf.user, 'feedback': wf.feedback,
                                        'feedbackType': wf.feedbackType, 'date': wf.date, 'callrecording': wf.callrecording}
                webApp_feedbackes_list.append(webApp_feedback_dict)

            try:
                main_teacher = Teacher.objects.get(
                    institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                date = None
                username = None
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
            wApp_dict = {'id': i.id, 'name': i.name, 'date': date, 'username': username,
                         'contact': contact, 'feedbackes': webApp_feedbackes_list}
            webApp_list.append(wApp_dict)
        context = {'status': 'success', 'webApps': webApp_list}
        return Response(context)

class StudentAddQuestionBookmark(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        question_id = data['question_id']
        ques = Question.objects.get(id=question_id)
        try:
            sBookmark = StudentBookmark.objects.get(student=me.profile)
            if sBookmark.questions.filter(id=ques.id).exists():
                sBookmark.questions.remove(ques)
                sBookmark.save()
                context = {
                    'status': 'success', 'message': 'Question removed from bookmark', 'Bookmark': False}
            else:
                sBookmark.questions.add(ques)
                sBookmark.save()
                context = {
                    'status': 'success', 'message': 'Question added in bookmark', 'Bookmark': True}
        except StudentBookmark.DoesNotExist:
            sBookmark = StudentBookmark()
            sBookmark.student = me.profile
            sBookmark.save()
            sBookmark.questions.add(ques)
            context = {'status': 'success',
                       'message': 'Question added in bookmark', 'Bookmark': True}
        return Response(context)

class StudentAddVideoBookmark(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']
        vid = Video.objects.get(id=video_id)
        try:
            sBookmark = StudentBookmark.objects.get(student=me.profile)
            if sBookmark.videos.filter(id=vid.id).exists():
                sBookmark.videos.remove(vid)
                sBookmark.save()
                context = {'status': 'success',
                           'message': 'video removed', 'Bookmark': False}
            else:
                sBookmark.videos.add(vid)
                sBookmark.save()
                context = {'status': 'success',
                           'message': 'video added', 'Bookmarks': True}
        except StudentBookmark.DoesNotExist:
            sBookmark = StudentBookmark()
            sBookmark.student = me.profile
            sBookmark.save()
            sBookmark.videos.add(vid)
            context = {'status': 'success',
                       'message': 'video added', 'Bookmark': True}
        return Response(context)

class StudentAddNoteBookmark(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        note_id = data['note_id']
        note = Note.objects.get(id=note_id)
        try:
            sBookmark = StudentBookmark.objects.get(student=me.profile)
            if sBookmark.notes.filter(id=note.id).exists():
                sBookmark.notes.remove(note)
                sBookmark.save()
                context = {
                    'status': 'success', 'message': 'Note removed from bookmark', 'Bookmark': False}
            else:
                sBookmark.notes.add(note)
                sBookmark.save()
                context = {'status': 'success',
                           'message': 'Note added in bookmark', 'Bookmarks': True}
        except StudentBookmark.DoesNotExist:
            sBookmark = StudentBookmark()
            sBookmark.student = me.profile
            sBookmark.save()
            sBookmark.notes.add(note)
            context = {'status': 'success',
                       'message': 'Notes added in bookmark', 'Bookmark': True}
        return Response(context)

class StudentGetAllBookmarks(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            sBookmark = StudentBookmark.objects.get(student=me.profile)
            videos_list = []
            if me.profile.accessVideo != False:
                videos = sBookmark.videos.filter(publish=True)
                boughtPackagesVideos_ids = StudentPackage.objects.filter(
                    student=me.profile).values_list('package__videos__id', flat=True)
                for vi in videos:
                    bought = False
                    if vi.id in boughtPackagesVideos_ids:
                        bought = True

                    if vi.locked == False:
                        bought = True

                    try:
                        subject_dict = {'id': vi.subject.id,'name': vi.subject.name}
                    except:
                        subject_dict = {}

                    try:
                        chapter_dict = {'id': vi.chapter.id, 'name': vi.chapter.name}
                    except:
                        chapter_dict = {}

                    video_dict = {
                        'id': vi.id, 
                        'title': vi.title, 
                        'urlLink': vi.urlLink, 
                        'thumbnail': vi.thumbnail,
                        'bought': bought, 
                        'subject': vi.subject.name, 
                        'chapter': vi.chapter.name,
                        'subject_dict': subject_dict,
                        'chapter_dict': chapter_dict,
                        }
                    videos_list.append(video_dict)

            questions = sBookmark.questions.all()
            questions_list = []
            for question in questions:
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    option_dict = {
                        'id': option.id, 
                        'text': option.text, 
                        'picture': option.picture, 
                        'explanationText': option.explanationText,
                        'explanationPicture': option.explanationPicture, 
                        'correct': option.correct}
                    options_list.append(option_dict)

                try:
                    subject = question.subject.name
                except:
                    subject = None

                try:
                    chapter= question.chapter.name
                except:
                    chapter = None

                try:
                    subject_dict = {'id': question.subject.id,'name': question.subject.name}
                except:
                    subject_dict = {}

                try:
                    chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name}
                except:
                    chapter_dict = {}

                question_dict = {
                    'id': question.id, 
                    'text': question.text, 
                    'dynamicText': question.dynamicText,
                    'picture': question.picture, 
                    'language': question.language, 
                    'options': options_list,
                    'subject': subject, 
                    'chapter': chapter,
                    'subject_dict': subject_dict,
                    'chapter_dict': chapter_dict,
                    }
                questions_list.append(question_dict)

            notes = sBookmark.notes.all().order_by('-id')
            notes_list = []
            bought_notes = StudentPackage.objects.filter(student=me.profile).values_list('package__notes__id', flat=True)
            
            for note in notes:
                try:
                    subject_dict = {'id': note.subject.id,'name': note.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}
                try:
                    chapter_dict = {'id': note.chapter.id, 'name': note.chapter.name, 'code': note.chapter.code}
                except:
                    chapter_dict = {'id': None,'name': 'General', 'code': None}

                bought = False
                if note.id in bought_notes:
                    bought = True
                if note.locked == False:
                    bought = True

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                notes_dict = {'id': note.id, 'title': note.title, 'locked': note.locked, 'link': note_link,
                              'bought': bought, 'publishDate': note.publishDate.date(), 'subject': subject_dict, 'chapter': chapter_dict}
                notes_list.append(notes_dict)

            context = {
                'status': 'success', 
                'questions': questions_list,
                'videos': videos_list, 
                'notes': notes_list}
            
        except StudentBookmark.DoesNotExist:
            context = {'status': 'Failed','message': 'You dont have any bookmarks yet'}

        return Response(context)

class WelcomeReminderTesting(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        to_email = data['to_email']
        html_message = render_to_string(
            'basicinformation/send_mail.html', {'student_name': me.profile.name})
        mail.send_mail(
            subject='Welcome! You are now part of the EduZina.',
            message='from EduZina',
            from_email=settings.EMAIL_HOST_USER2,
            recipient_list=[to_email],
            html_message=html_message,
            auth_user='eduzinabox@gmail.com',
            auth_password='www.Eduzina.com9',
            fail_silently=True,
        )
        context = {'status': 'success', 'message': 'successfully sended'}
        return Response(context)

class email_test(APIView):
    def post(self, request):
        data = request.data
        to_email = data['to_email']
        app_link = data['app_link']
        teacher_name = data['name']
        institute = data['institute']
        try:
            welcome_notification_via_email(
                to_email, app_link, teacher_name, institute)
            context = {'status': "success", 'message': 'sent'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetTeacherIpAddress(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')

        response = requests.get('http://ip-api.com/json/'+ip).json()
        try:
            teach = Teacher.objects.get(id=me.profile.id)
            teach.teacherIpAddress = ip
            teach.save()

            teacherDetails = TeacherDetails.objects.get(teacher=teach)
            teacherDetails.city = response['city']
            teacherDetails.state = response['regionName']
            teacherDetails.country = response['country']
            teacherDetails.save()
        except:
            pass

        code = response['countryCode']
        if code == 'IN':
            country_code = '+91'
        else:
            import twilio
            from twilio.rest import Client
            os.environ['TWILIO_ACCOUNT_SID'] = 'ACd9737eae6df72d91d37fc35ae320da64'
            os.environ['TWILIO_AUTH_TOKEN'] = '487b53d3b5d8aee98c7f9cf8f7272652'
            account_sid = os.environ.get("TWILIO_ACCOUNT_SID")
            auth_token = os.environ.get("TWILIO_AUTH_TOKEN")
            client = Client(account_sid, auth_token)
            country = client.voice.dialing_permissions.countries(code).fetch()
            country_code = (str(country.country_codes)[1:-1]).replace("'", '')

        context = {'status': 'success', 'country_code': country_code}
        return Response(context)

class GetStudentDoubtsDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        sds = StudentDoubt.objects.filter(time__date=date)
        sd_count = 0
        for i in sds:
            if i.doubtFrom.studentuser.username.split('@')[1] == 'ou':
                sd_count += 1
        context = {'status': 'success', 'studentDoubts': sd_count}
        return Response(context)

class GetDoubtMeetingsDateWise(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        date = data['date']
        doubtMettings = DoubtMeeting.objects.filter(initiatedTime__date=date)
        doubtMetting_list = []
        for dm in doubtMettings:
            doubt_dict = {'id': dm.doubt.id, 'institute': dm.doubt.institute.name,
                          'title': dm.doubt.title, 'solved': dm.doubt.solved}
            try:
                teacher_name = dm.teacher.name
            except:
                teacher_name = None
            dm_dict = {'id': dm.id, 'student': dm.student.name, 'teacher': teacher_name, 'doubt': doubt_dict, 'timeStart': dm.timeStart, 'timeEnd': dm.timeEnd, 'initiatedTime': dm.initiatedTime,
                       'ringing': dm.ringing, 'answered': dm.answered, 'callRating': dm.callRating, 'onGoingCall': dm.onGoingCall, 'notificationCount': dm.notificationCount, 'numberTeachersNotified': dm.numberTeachersNotified}
            doubtMetting_list.append(dm_dict)

        context = {'status': 'success', 'DoubtMeetings': doubtMetting_list}
        return Response(context)

class EditWebAppFeedback(APIView):
    def post(self, request):
        data = request.data
        feedback_id = data['feedback_id']
        feedback = data['feedback']
        feedbackType = data['feedbackType']
        try:
            fb = WebappFeedback.objects.get(id=feedback_id)
            fb.feedback = feedback
            fb.feedbackType = feedbackType
            fb.save()
            context = {'status': 'success', 'message': 'update successfully'}
        except WebappFeedback.DoesNotExist:
            context = {'status': 'Failed', 'message': 'feedback not found'}
        return Response(context)

class GetTopTenWebappUsesUser(APIView):
    def get(self, request):
        topTenInstituteOfMaxStudent = Institute.objects.filter(typeInstitute='webapp').annotate(
            studentsCount=Count('studentinstitute')).order_by('-studentsCount')[:10].values('id', 'name', 'studentsCount')
        topTenInstituteOfMaxVideos = Institute.objects.filter(typeInstitute='webapp').annotate(videosCount=Count(
            'teacherinstitute__video_teacher')).order_by('-videosCount')[:10].values('id', 'name', 'videosCount')
        topTenInstituteOfMaxNotes = Institute.objects.filter(typeInstitute='webapp').annotate(notesCount=Count(
            'teacherinstitute__note_teacher')).order_by('-notesCount')[:10].values('id', 'name', 'notesCount')
        context = {'topTenInstituteOfMaxStudent': topTenInstituteOfMaxStudent,
                   'topTenInstituteOfMaxVideos': topTenInstituteOfMaxVideos, 'topTenInstituteOfMaxNotes': topTenInstituteOfMaxNotes}
        return Response(context)

class GetAllWebAppAnalytics(APIView):
    def get(self, request):
        institute = Institute.objects.filter(typeInstitute='webapp').annotate(studentsCount=Count(
            'studentinstitute')).order_by('-studentsCount').values('id', 'name', 'studentsCount')
        videosWise = Institute.objects.filter(typeInstitute='webapp').annotate(videosCount=Count(
            'teacherinstitute__video_teacher')).order_by('-videosCount').values('id', 'name', 'videosCount')
        notesWise = Institute.objects.filter(typeInstitute='webapp').annotate(notesCount=Count(
            'teacherinstitute__note_teacher')).order_by('-notesCount').values('id', 'name', 'notesCount')
        context = {'studentsWise': institute,
                   'videosWise': videosWise, 'notesWise': notesWise}
        return Response(context)

class GetDateFeedbackWiseWebApp(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        feedback = data['feedback']
        date = data['date']

        webApps = Institute.objects.filter(webappfeedback__feedbackType=feedback,
                                           teacherinstitute__jdate__date=date, teacherinstitute__mainTeacher=True).distinct()
        webApp_list = []
        for i in webApps:
            webAppsFeedbackes = WebappFeedback.objects.filter(institute=i)
            webApp_feedbackes_list = []
            for wf in webAppsFeedbackes:
                webApp_feedback_dict = {'feedback_id': wf.id, 'feedbackUser': wf.user, 'feedback': wf.feedback,
                                        'feedbackType': wf.feedbackType, 'date': wf.date, 'callrecording': wf.callrecording}
                webApp_feedbackes_list.append(webApp_feedback_dict)

            try:
                main_teacher = Teacher.objects.get(
                    institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                date = None
                username = None
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
            wApp_dict = {'id': i.id, 'name': i.name, 'date': date, 'username': username,
                         'contact': contact, 'feedbackes': webApp_feedbackes_list}
            webApp_list.append(wApp_dict)
        context = {'status': 'success', 'webApps': webApp_list}
        return Response(context)

class GetUserCountry(APIView):
    def get(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')

        response = requests.get('http://ip-api.com/json/'+ip).json()
        code = response['countryCode']
        context = {'status': 'success', 'country_code': code}
        return Response(context)

class GetTeachersListCourseWise(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        courses = me.profile.courses.all().values_list('id', flat=True)
        teachers = Teacher.objects.filter(
            teacher__course__in=courses).distinct()
        teachers_list = []
        for teacher in teachers:
            teacher_dict = {'id': teacher.id, 'name': teacher.name,
                            'profile_picture': teacher.photo, 'institute': teacher.institute.name}
            teachers_list.append(teacher_dict)
        context = {'status': 'success', 'teachers': teachers_list}
        return Response(context)

class TeacherChangeAgoraCode(APIView):
    def get(self, request):
        agora_code = AgoraCodeLive.objects.order_by('?').first()
        if agora_code:
            Institute.objects.all().update(agoraCode=agora_code.code)
            agora_code.delete()
        return Response('Successfully Updated')

class CheckInstituteEasebuzzAcount(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.institute.easebuzzMerchanKey and me.profile.institute.easebuzzSaltKey:
            easebuzzAccount = True
        else:
            easebuzzAccount = False
        context = {'easebuzzAccount': easebuzzAccount}
        return Response(context)

class TeacherGetAllBatchesStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        batches = me.profile.batches.all()
        all_batches_list = []
        for batch in batches:
            total_students = batch.studentbatch.count()
            batch_dict = {'id': batch.id, 'name': batch.name,
                          'total_students': total_students}
            all_batches_list.append(batch_dict)
        context = {'batches': all_batches_list}
        return Response(context)

class TeacherGetRegisteredIssues(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        if self.request.user.username == 'tech_teacher':
            try:
                mainFeature = data['mainFeature']
                feature = data['feature']
                issues = TeacherIssue.objects.filter(
                    mainFeature=mainFeature, feature=feature).order_by('-id')
                issue_list = []
                for issue in issues:
                    issue_dict =\
                        {'id': issue.id, 'mainFeature': issue.mainFeature, 'feature': issue.feature, 'description': issue.description, 'typeIssue': issue.typeIssue,
                            'time': issue.time, 'received': issue.received, 'receiveTime': issue.receiveTime, 'resolved': issue.resolved, 'resolveTime': issue.resolveTime}
                    issue_list.append(issue_dict)
                context = {'status': 'Success', 'issues': issue_list}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed',
                       'message': "You don't have permission to see teacher issues"}
        return Response(context)

class GetWelcomeNote(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        context = {'status': 'success',
                   'welcomeNote': me.profile.institute.welcomeNoteText}
        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        welcomeNote = data['welcomeNote']
        me.profile.institute.welcomeNoteText = welcomeNote
        me.profile.institute.save()
        context = {'status': 'success', 'message': 'successfully updated',
                   'welcomeNote': me.profile.institute.welcomeNoteText}
        return Response(context)

class TeacherGetAllLanguages(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        languages = Language.objects.all().values()
        context = {'status': 'success', 'languages': languages}
        return Response(context)

class StudentGetAllLanguages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        languages = Language.objects.all().values()
        context = {'status': 'success', 'languages': languages}
        return Response(context)

class StudentSeeSelectedLanguages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        languages = Language.objects.filter(students=me.profile).values()
        context = {'status': 'success', 'languages': languages}
        return Response(context)

class StudentAddLanguages(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        language_ids = data['language_ids']
        language_ids = language_ids.strip('][').split(',')

        languages = Language.objects.filter(students=me.profile)
        for language in languages:
            language.students.remove(me.profile)

        languages = Language.objects.filter(id__in=language_ids)
        for language in languages:
            language.students.add(me.profile)

        context = {'status': 'success',
                   'message': 'langauge successfully updated'}
        return Response(context)

class StudentGetChaptersTestWinApp(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        my_languages = me.profile.student_language.all().values_list('id', flat=True)
        chapters = Chapter.objects.filter(
            subject__teachersubject__institute=me.profile.institute, subject__language__id__in=my_languages).distinct().values()
        context = {'chapters': chapters}
        return Response(context)

class TeacherGetOwnCourseWiseStudents(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        students_list = []
        try:
            td = TeacherDetails.objects.get(teacher=me.profile)
            courses = td.course.all().values_list('id', flat=True)
            students = Student.objects.filter(
                courses__in=courses).distinct().order_by('-id')[:15]
            for student in students:
                courses = student.courses.all()
                course_dict = {'id': courses[0].id, 'course': courses[0].name}
                city = student.student.city
                state = student.student.state
                student_dict = {'id': student.id, 'name': student.name, 'profile_picture':
                                student.student.photo, 'courses': course_dict, 'city': city, 'state': state}
                students_list.append(student_dict)
            context = {'status': 'success', 'students': students_list}
        except TeacherDetails.DoesNotExist:
            td = TeacherDetails.objects.create(
                teacher=me.profile, name=me.profile.name)
            context = {'status': 'success', 'students': students_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetStudentAddressThroughIpAddress(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
            if x_forwarded_for:
                ip = x_forwarded_for.split(',')[0]
            else:
                ip = request.META.get('REMOTE_ADDR')
            data = requests.get('http://ip-api.com/json/'+ip).json()

            studentDetail = StudentDetails.objects.get(student=me.profile)
            studentDetail.city = data['city']
            studentDetail.state = data['regionName']
            studentDetail.country = data['country']
            studentDetail.studentIpAddress = ip
            studentDetail.save()
            context = {'status': 'success', 'message': 'successfully stored'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetNewStudents(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        students_list = []
        try:
            students = Student.objects.filter(
                Q(typeUser='doubt_solving') & ~Q(courses=None)).order_by('-id')[:15]
            for student in students:
                courses = student.courses.all()
                course_dict = {'id': courses[0].id, 'course': courses[0].name}
                city = student.student.city
                state = student.student.state
                student_dict = {'id': student.id, 'name': student.name, 'profile_picture':
                                student.student.photo, 'courses': course_dict, 'city': city, 'state': state}
                students_list.append(student_dict)
            context = {'status': 'success', 'students': students_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherUpdateCourse(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        courses_ids = data['courses_ids']
        course_list = courses_ids.strip('][').split(',')
        try:
            details = TeacherDetails.objects.get(teacher=me.profile)
            details.course.clear()
            for cid in course_list:
                try:
                    tc = TeacherCourse.objects.get(id=cid)
                    details.course.add(tc)
                except:
                    pass
        except TeacherDetails.DoesNotExist:
            details = TeacherDetails()
            details.teacher = me.profile
            details.name = me.profile.name
            details.save()
            for cid in course_list:
                try:
                    tc = TeacherCourse.objects.get(id=cid)
                    details.course.add(tc)
                except:
                    pass
        context = {'status': 'success', 'message': 'Successffully Added'}
        return Response(context)

class StudentGetSubjectsOwnCourseWiseDoubtApp(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        courses = me.profile.courses.all().values_list('id', flat=True)
        subjects = SubjectDoubtApp.objects.filter(course__in=courses).values()
        context = {'status': 'success', 'subjects': subjects}
        return Response(context)

class StudentGetChaptersSubjectWiseDoubtApp(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        try:
            subject = SubjectDoubtApp.objects.get(id=subject_id)
            chapters = ChapterDoubtApp.objects.filter(subject=subject).values()
            context = {'status': 'success', 'chapters': chapters}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffSendNotificationForTesting(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        serverKey = data['serverKey']
        message = data['message']
        try:
            serverKey = serverKey
            deviceId = me.profile.firebaseToken
            to_text = message
            send_notification_individual(serverKey, deviceId, to_text)
            context = {'status': 'success', 'message': 'successfull sent'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubjectsDoubtApp(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        courses_ids = data['courses_ids']
        courses_ids = courses_ids.strip('][').split(',')
        subjects = SubjectDoubtApp.objects.filter(
            course__in=courses_ids).values('id', 'name', 'course__name')
        context = {'status': 'success', 'subjects': subjects}
        return Response(context)

class StaffAddCourseToTeacher(APIView):
    def get(self, request, username, course_ids):
        course_ids = course_ids.strip('][').split(',')
        try:
            details = TeacherDetails.objects.get(
                teacher__teacheruser__username=username)
            courses = TeacherCourse.objects.filter(id__in=course_ids)
            details.course.add(*courses)
            context = {'status': 'success', 'message': 'successfull added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetWebAppsDateWiseMoh(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        date = data['date']
        finalDate = datetime.strptime(date, "%Y-%m-%d")
        all_webApp = Institute.objects.filter(
            typeInstitute='webapp', teacherinstitute__mainTeacher=True, teacherinstitute__jdate__date=finalDate.date()).order_by('-id')
        all_webApp_list = []
        number_apps = len(all_webApp)
        to_make_apps = 3 * number_apps
        apps_list = []
        for j in all_webApp:
            apps_list.append(j)
        all_apps = list(Institute.objects.filter(typeInstitute='webapp'))
        while len(apps_list) < to_make_apps:
            now_app = random.choice(all_apps)
            apps_list.append(now_app)

        for i in apps_list:
            try:
                main_teacher = Teacher.objects.get(
                    institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                data = None
                username = None
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
            if WebappFeedback.objects.filter(institute=i).exists():
                feedback = True
            else:
                feedback = False

            if i.webAppUrl:
                unCompleteWebApps = False
            else:
                unCompleteWebApps = True

            wApp_dict =\
                {'id': i.id, 'name': i.name, 'date': date, 'username': username, 'contact': contact,
                    'feedback': feedback, 'unCompleteWebApps': unCompleteWebApps, 'tomakeapps': to_make_apps}
            all_webApp_list.append(wApp_dict)

        context = {'allWebApps': all_webApp_list}
        return Response(context)

class TeacherGetAllWebAppsMoh(APIView):
    def get(self, request):
        all_webApp = Institute.objects.filter(typeInstitute='webapp', teacherinstitute__mainTeacher=True,
                                              teacherinstitute__jdate__date=timezone.now().date()).order_by('-id')
        all_webApp_list = []
        number_apps = len(all_webApp)
        to_make_apps = 3 * number_apps
        apps_list = []
        for j in all_webApp:
            apps_list.append(j)
        all_apps = list(Institute.objects.filter(typeInstitute='webapp'))
        while len(apps_list) < to_make_apps:
            now_app = random.choice(all_apps)
            apps_list.append(now_app)

        for i in apps_list:
            try:
                main_teacher = Teacher.objects.get(
                    institute=i, mainTeacher=True)
                date = main_teacher.jdate.date()
                username = main_teacher.teacheruser.username
            except Teacher.DoesNotExist:
                date = None
                username = None
            try:
                detail = TeacherDetails.objects.get(teacher=main_teacher)
                contact = detail.phone
            except TeacherDetails.DoesNotExist:
                contact = None
            if WebappFeedback.objects.filter(institute=i).exists():
                feedback = True
            else:
                feedback = False
            wApp_dict = {'id': i.id, 'name': i.name, 'date': date,
                         'username': username, 'contact': contact, 'feedback': feedback}
            all_webApp_list.append(wApp_dict)
        context = {'allWebApps': all_webApp_list}
        return Response(context)

class LastSevenDaysVideosMoh(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            videos_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseVideos = 10 * Video.objects.filter(
                    teacher__institute__typeInstitute='webapp', publishDate__date=start_date).distinct().count()
                days_dict = {'day': days, 'date': start_date,
                             'count': dayWiseVideos}
                videos_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'videos': videos_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysNotesMoh(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            notes_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseNotes = 10 * Note.objects.filter(teacher__institute__typeInstitute='webapp', publishDate__date=start_date).distinct().count()
                days_dict = {'day': days, 'date': start_date, 'count': dayWiseNotes}
                notes_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'notes': notes_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysStudentsMoh(APIView):
    def get(self, request):
        data = request.data
        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            students_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                daysWiseStudent = 10 * \
                    Student.objects.filter(
                        institute__typeInstitute='webapp', jdate__date=start_date).count()
                days_dict = {'day': days, 'date': start_date,
                             'count': daysWiseStudent}
                students_list.append(days_dict)
                start_date += delta
            context = {'status': 'success', 'students': students_list}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class LastSevenDaysInstitutesMoh(APIView):
    def get(self, request):
        date = timezone.now() - timedelta(days=6)
        start_date = datetime.date(date)
        end_date = datetime.date(timezone.now())
        delta = timedelta(days=1)
        institute_list = []
        while start_date <= end_date:
            days = start_date.strftime("%A")
            dayWiseInstitute = 3 * Teacher.objects.filter(
                mainTeacher=True, institute__typeInstitute='webapp', jdate__date=start_date).count()
            days_dict = {'day': days, 'date': start_date,
                         'count': dayWiseInstitute}
            institute_list.append(days_dict)
            start_date += delta
        context = {'status': 'success', 'institutes': institute_list}
        return Response(context)

class StaffDownloadWebappStudentsInfoDateWise(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        toDate = data['date']

        df = pd.DataFrame()

        try:

            date_list = []
            usernames_list = []
            teachername_list = []
            institutename_list = []
            contacts_lists = []
            tStudents_list = []

            institutes = Institute.objects.filter(
                typeInstitute='webapp').order_by('-id')[7500:10000]

            for i in institutes:
                students = Student.objects.filter(institute=i)
                institute_name = i.name
                tStudents = len(students)

                try:
                    mainTeacher = Teacher.objects.get(
                        institute=i, mainTeacher=True)
                    appDevelopedDate = mainTeacher.jdate.date()
                    name = mainTeacher.name
                    username = mainTeacher.teacheruser.username
                    try:
                        teacherdetails = TeacherDetails.objects.get(
                            teacher=mainTeacher)
                        contact = teacherdetails.phone
                    except TeacherDetails.DoesNotExist:
                        contact = None
                except Teacher.DoesNotExist:
                    appDevelopedDate = None
                    username = None
                    name = None
                    contact = None

                date_list.append(appDevelopedDate)
                usernames_list.append(username)
                teachername_list.append(name)
                institutename_list.append(institute_name)
                contacts_lists.append(contact)
                tStudents_list.append(tStudents)

            teach_dict = {'Created date': date_list, 'Username/Contact': usernames_list, 'Teacher name': teachername_list,
                          'Institute name': institutename_list, 'Contact': contacts_lists, 'Students': tStudents_list}
            df1 = pd.DataFrame(teach_dict, columns=[
                               'Created date', 'Username/Contact', 'Teacher name', 'Institute name', 'Contact', 'Students'])
            df1.sort_values(by=['Students'], inplace=True)
            pd2 = df1.to_excel('webDetails.xls', index=False)

            context = {'status': 'success', 'message': 'successfully created'}
        except Exception as e:
            print('error --', str(e))
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetCurrencyTypes(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        allTypes = CurrencyType.objects.all().values('id', 'type', 'icon')
        try:
            type = CurrencyType.objects.get(institutes=me.profile.institute)
            selectedType = type.id
        except CurrencyType.DoesNotExist:
            selectedType = 1
        context = {'status': 'success', 'allTypes': allTypes,
                   'selectedType': selectedType}
        return Response(context)

class TeacherUpdateCurrencyType(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        currencyType_id = data['currencyType_id']
        try:
            me.profile.institute.institute_Currency.clear()
            newType = CurrencyType.objects.get(id=currencyType_id)
            newType.institutes.add(me.profile.institute)
            newType.save()
            context = {'status': 'success', 'message': 'successfully changed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetCurrencyType(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        types = CurrencyType.objects.get(institutes=me.profile.institute)
        selectedType = types.id
        typesText = types.type

        context = {'status': 'success', 'types': selectedType}
        return Response(context)

class StudentGetCurrencyTypeNew(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        types = CurrencyType.objects.get(institutes=me.profile.institute)
        selectedType = types.id
        typesText = types.type

        context = {'status': 'success', 'types': typesText,"id":selectedType}
        return Response(context)

class TeacherGetFooterBanner(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        banners = TeacherAppFooterBanner.objects.filter(disable=False).values()
        context = {'status': 'success', 'banners': banners}
        return Response(context)

class TeacherGetAllCotegoryFooterBanner(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        banners = TeacherAppFooterBanner.objects.filter(Q(disable=False) & ~Q(bannerCategory='HomePage')).values()
        context = {'status': 'success', 'banners': banners}
        return Response(context)

class TeacherPostEnquiry(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        courses_ids = data['courses_ids']
        courses_list = courses_ids.strip('][').split(',')
        contact = data['contact']
        experience = data['experience']
        address = data['address']

        try:
            courses = Course.objects.filter(id__in=courses_list)
            te = TeacherEnquiry.objects.create(
                teacher=me.profile, contact=contact, experience=experience, address=address)
            te.courses.add(*courses)
            context = {'status': 'success', 'message': 'successfully sent'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetEnquirys(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            teacherEnquirys_list = []
            if me.profile.mainTeacher:
                teacherEnquiry = TeacherEnquiry.objects.filter(
                    teacher__institute=me.profile.institute)
                for te in teacherEnquiry:
                    courses = te.courses.all().values()
                    te_dict = {'id': te.id, 'teacher': te.teacher.name, 'contact': te.contact, 'experience': te.experience,
                               'address': te.address, 'resolved': te.resolved, 'enquiryTime': te.enquiryTime, 'courses': courses}
                    teacherEnquirys_list.append(te_dict)
            context = {'status': 'success',
                       'teacherEnquirys': teacherEnquirys_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentDoPackageActivitie(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            StudentPackageActivitie.objects.get(
                package=package_id, student=me.profile)
        except StudentPackageActivitie.DoesNotExist:
            package = Package.objects.get(id=package_id)
            StudentPackageActivitie.objects.create(
                package=package, student=me.profile)
        context = {'status': 'success'}
        return Response(context)

class StaffDownloadTestwinStudentsInfo(APIView):
    def get(self, request, *args, **kwargs):
        data = request.data
        df = pd.DataFrame()
        try:
            contacts_list = []
            name_list = []
            students = Student.objects.filter(
                institute__code='testwin').order_by('-id')
            for i in students:
                contact = i.studentuser.username.split('@')[0]
                name = i.name
                name_list.append(name)
                contacts_list.append(contact)

            teach_dict = {'Student name': name_list,
                          'Username/Contact': contacts_list}
            df1 = pd.DataFrame(teach_dict, columns=[
                               'Student name', 'Username/Contact'])
            pd2 = df1.to_excel('testwin_details.xls', index=False)

            context = {'status': 'success', 'message': 'successfully created'}
        except Exception as e:
            print('error --', str(e))
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class SaveBuyPackageError(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        packageName = data['packageName']
        payPrice = data['payPrice']
        error = data['error']
        Error.objects.create(
            student=me.profile, package=packageName, payPrice=payPrice, error=error)
        context = {'status': 'success'}
        return Response(context)

class StaffGetTopWebappInstitute(APIView):
    def get(self, request):
        topWebappInstitute = Institute.objects.filter(typeInstitute='webapp').annotate(studentsCount=Count(
            'studentinstitute')).order_by('-studentsCount')[:1000].values('id', 'name', 'studentsCount')
        context = {'topWebappInstitute': topWebappInstitute}
        return Response(context)

class StaffGetTopPremiumInstitute(APIView):
    def get(self, request):
        topWebappInstitute = Institute.objects.filter(typeInstitute='Premium').annotate(studentsCount=Count(
            'studentinstitute')).order_by('-studentsCount')[:100].values('id', 'name', 'studentsCount')
        context = {'topWebappInstitute': topWebappInstitute}
        return Response(context)

class TeacherBuySMSPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        amount = data['amount']
        sms = float(amount) * 5
        smsPackageBought = SMSPackageBought(institute=me.profile.institute)
        smsPackageBought.count = sms

        from datetime import datetime
        smsPackageBought.date = datetime.now()
        smsPackageBought.amount = amount
        smsPackageBought.save()
        try:
            payment = EaseBuzzPaymentResponseRecord.objects.get(payment=data['txnid'])
            payment.sms_package = smsPackageBought
            payment.save()
        except:
            pass

        try:
            smsCount = SMSCount.objects.get(institute=me.profile.institute)
            smsCount.remaining += sms
            smsCount.save()
        except SMSCount.DoesNotExist:
            smsCount = SMSCount(institute=me.profile.institute)
            smsCount.remaining = 500 + sms
            smsCount.sent = 0
            smsCount.save()
        except Exception as e:
            context = {'statuc': 'Failed',
                       'message': 'Some issue. Please contect to Bodhiai CRM team'}
            return Response(context)

        context = {'statuc': 'success', 'message': 'recharge successfully'}
        return Response(context)

class TeacherGetSMSBalanceInfo(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:

            smsCount = SMSCount.objects.get(institute=me.profile.institute)
            boughtSmsHistory = SMSPackageBought.objects.filter(institute=me.profile.institute).order_by('-id')
            history_list = []
            for bsh in boughtSmsHistory:
                history_dict = {'id': bsh.id, 'count': bsh.count,'amount': bsh.amount, 'date': bsh.date}
                history_list.append(history_dict)

            context = {'status': 'success', 'remaining': smsCount.remaining,
                       'sent': smsCount.sent, 'boughtSmsHistory': history_list}

        except SMSCount.DoesNotExist:
            context = {'status': 'success',
                       'message': "You do not have any SMS history "}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class UnknownUserPostEnquiry(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data

        name = data['name']
        contact = data['contact']
        userClass = data['userClass']
        subject = data['subject']
        experience = data['experience']
        address = data['address']
        idProof = data['idProof']
        fees = data['fees']
        timeWiseFees = data['timeWiseFees']
        userType = data['userType']
        aboutUser = data['aboutUser']
        institute_code = data['institute_code']
        address2 = data['address2']
        tutorPreference = data['tutorPreference']
        idProof2 = data['idProof2']
        profilePicture = data['profilePicture']
        gender = data['gender']
        landmark = data['landmark']
        alternativeContact = data['alternativeContact']

        if not fees:
            fees = None

        if not alternativeContact:
            alternativeContact = None

        institute = Institute.objects.get(code=institute_code)
        uue = UnknownUserEnquiry.objects.create(institute=institute, name=name, contact=contact, userClass=userClass, subject=subject, experience=experience, address=address, idProof=idProof, aboutUser=aboutUser, fees=fees,
                                                timeWiseFees=timeWiseFees, userType=userType, address2=address2, tutorPreference=tutorPreference, idProof2=idProof2, profilePicture=profilePicture, gender=gender, landmark=landmark, alternativeContact=alternativeContact)

        try:
            teacher = Teacher.objects.get(
                institute=institute, mainTeacher=True)
            app_token = list(AppServerKey.objects.all())[0]
            deviceId = teacher.firebaseToken
            message = 'You have received a new enquiry of {} '.format(name)
            title = 'New Enquiry ☎☎'
            send_clickable_notification(
                app_token, deviceId, message, title, None, 'New Enquiry', None, uue.id, 20000)
        except Exception as f:
            f_sent = f
            print(str(f))

        context = {'status': 'success',
                   'message': 'Your request send successfully'}
        return Response(context)

class TeacherGetUnknownUserEnquiry(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data

        uue = UnknownUserEnquiry.objects.filter(
            institute=me.profile.institute).order_by('-id').values()
        context = {'status': 'success', 'all_Enquir': uue}
        return Response(context)

class TeacherDeleteUnknownUserEnquiry(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        enquiry_id = data['enquiry_id']
        uue = UnknownUserEnquiry.objects.get(id=enquiry_id).delete()
        context = {'status': 'success', 'message': 'successfully deleted'}
        return Response(context)

class GetAllMarketingVideos(APIView):
    def get(self, request, *args, **kwargs):
        videos = MarketingVideo.objects.all().order_by('-id').values()
        context = {'status': 'success', 'videos': videos}
        return Response(context)

class StaffSeeLastSevenDaysUploadedInstituteData(APIView):
    def get(self, request, *args, **kwargs):

        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            videos_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseVideos = Video.objects.filter(
                    teacher__institute__typeInstitute='Premium', publishDate__date=start_date).distinct()

                institute_wise_details_list = []
                institute_ids_list = []

                for i in dayWiseVideos:
                    institute = i.teacher.all()[0].institute

                    if institute.id not in institute_ids_list:

                        institute_wise_videos = Video.objects.filter(
                            teacher__institute=institute, publishDate__date=start_date).distinct().count()
                        details_dict = {
                            'id': institute.id, 'institute': institute.name, 'count': institute_wise_videos}
                        institute_wise_details_list.append(details_dict)
                        institute_ids_list.append(institute.id)

                days_dict = {'day': days, 'date': start_date,
                             'institute_wise_details': institute_wise_details_list}
                videos_list.append(days_dict)
                start_date += delta
        except Exception as e:
            videos_list.append(str(e))

        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            notes_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")
                dayWiseNotes = Note.objects.filter(
                    teacher__institute__typeInstitute='Premium', publishDate__date=start_date).distinct()

                institute_wise_details_list = []
                institute_ids_list = []
                for i in dayWiseNotes:
                    institute = i.teacher.all()[0].institute

                    if institute.id not in institute_ids_list:
                        institute_wise_notes = Note.objects.filter(
                            teacher__institute=institute, publishDate__date=start_date).distinct().count()
                        details_dict = {
                            'id': institute.id, 'institute': institute.name, 'count': institute_wise_notes}
                        institute_wise_details_list.append(details_dict)
                        institute_ids_list.append(institute.id)

                days_dict = {'day': days, 'date': start_date,
                             'institute_wise_details': institute_wise_details_list}
                notes_list.append(days_dict)
                start_date += delta
        except Exception as e:
            notes_list.append(str(e))

        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            students_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")

                daysWiseStudents = Student.objects.filter(
                    institute__typeInstitute='Premium', jdate__date=start_date).distinct()
                institute_wise_details_list = []
                institute_ids_list = []

                for i in daysWiseStudents:
                    institute = i.institute
                    if institute.id not in institute_ids_list:
                        institute_wise_students = Student.objects.filter(
                            institute=institute, jdate__date=start_date).distinct().count()
                        details_dict = {
                            'id': institute.id, 'institute': institute.name, 'count': institute_wise_students}
                        institute_wise_details_list.append(details_dict)
                        institute_ids_list.append(institute.id)

                days_dict = {'day': days, 'date': start_date,
                             'institute_wise_details': institute_wise_details_list}
                students_list.append(days_dict)
                start_date += delta
        except Exception as e:
            students_list.append(str(e))

        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            tests_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")

                daysWiseTests = Test.objects.filter(
                    createdBy__institute__typeInstitute='Premium', published__date=start_date).distinct()
                institute_wise_details_list = []
                institute_ids_list = []

                for i in daysWiseTests:
                    institute = i.createdBy.institute
                    if institute.id not in institute_ids_list:
                        institute_wise_tests = Test.objects.filter(
                            createdBy__institute=institute, published__date=start_date).distinct().count()
                        details_dict = {
                            'id': institute.id, 'institute': institute.name, 'count': institute_wise_tests}
                        institute_wise_details_list.append(details_dict)
                        institute_ids_list.append(institute.id)

                days_dict = {'day': days, 'date': start_date,
                             'institute_wise_details': institute_wise_details_list}
                tests_list.append(days_dict)
                start_date += delta
        except Exception as e:
            tests_list.append(str(e))

        try:
            date = timezone.now() - timedelta(days=6)
            start_date = datetime.date(date)
            end_date = datetime.date(timezone.now())
            delta = timedelta(days=1)
            packages_list = []
            while start_date <= end_date:
                days = start_date.strftime("%A")

                daysWisePackages = Package.objects.filter(
                    teacher__institute__typeInstitute='Premium', date__date=start_date).distinct()
                institute_wise_details_list = []
                institute_ids_list = []

                for i in daysWisePackages:
                    institute = i.teacher.institute
                    if institute.id not in institute_ids_list:
                        institute_wise_packages = Package.objects.filter(
                            teacher__institute=institute, date__date=start_date).distinct().count()
                        details_dict = {
                            'id': institute.id, 'institute': institute.name, 'count': institute_wise_packages}
                        institute_wise_details_list.append(details_dict)
                        institute_ids_list.append(institute.id)

                days_dict = {'day': days, 'date': start_date,
                             'institute_wise_details': institute_wise_details_list}
                packages_list.append(days_dict)
                start_date += delta
        except Exception as e:
            packages_list.append(str(e))

        context = {'status': 'success', 'videos_list': videos_list, 'notes_list': notes_list,
                   'tests_list': tests_list, 'students_list': students_list, 'packages_list': packages_list}

        return Response(context)

class GetTeacherAppMarquee(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        marquee = TeacherAppMarquee.objects.filter(instituteType=me.profile.institute.typeInstitute, active=True).first()
        if marquee:
            announcement = marquee.announcement
        else:
            announcement = None
        context = {'status': 'success', 'announcement': announcement}
        return Response(context)

class TeacherDoPackageActivitie(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            TeacherPackageActivitie.objects.get(
                package=package_id, teacher=me.profile)
        except TeacherPackageActivitie.DoesNotExist:
            package = Package.objects.get(id=package_id)
            TeacherPackageActivitie.objects.create(
                package=package, teacher=me.profile)
        context = {'status': 'success'}
        return Response(context)

class StaffDeleteInstituteData(APIView):
    def post(self, request, *args, **kwargs):

        data = request.data

        teacher_username = data['teacher_username']
        institute_code = data['institute_code']

        is_student_delete = data['is_student_delete']
        is_video_delete = data['is_video_delete']
        is_note_delete = data['is_note_delete']
        is_test_delete = data['is_test_delete']
        is_liveVideo_delete = data['is_liveVideo_delete']
        is_nativeLiveVideo_delete = data['is_nativeLiveVideo_delete']

        try:
            teacher = Teacher.objects.get(
                teacheruser__username=teacher_username)
            if is_student_delete == 'true':
                if institute_code:
                    user = User.objects.filter(
                        username__icontains='@'+str(institute_code)).delete()
                else:
                    context = {
                        'status': 'Failed', 'message': 'Institute code is required, when you want to delete students'}
                    return Response(context)

            if is_video_delete == 'true':
                Video.objects.filter(teacher=teacher).delete()

            if is_note_delete == 'true':
                Note.objects.filter(teacher=teacher).delete()

            if is_test_delete == 'true':
                Test.objects.filter(createdBy=teacher).delete()

            if is_liveVideo_delete == 'true':
                LiveVideoLink.objects.filter(teacher=teacher).delete()

            if is_nativeLiveVideo_delete == 'true':
                NativeLiveVideo.objects.filter(teacher=teacher).delete()

            context = {'status': 'success',
                       'message': 'successfully deleted all data'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffAddSubjectInstitute(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        subject_id = data['subject_id']
        teacher_username = data['teacher_username']

        try:
            subject = Subject.objects.get(id=subject_id)
            teacher = Teacher.objects.get(
                teacheruser__username=teacher_username)
            teacher.add_subject(subject)
            context = {'status': 'success', 'message': 'successfully added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffCreateTest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data

        time = data['time']
        title = data['title']
        number_of_questions = data['number_of_questions']

        subject_id = data['subject_id']
        chapter_id = data['chapter_id']

        chapter_codes = chapter_id.strip('][').split(',')

        try:

            test = Test()
            test.name = title
            test.published = timezone.now()
            test.createdBy = me.profile
            test.time = time
            test.totalMarks = 0
            test.save()

            total_marks = 0.0

            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(
                subject=subject, code__in=chapter_codes)
            questions = Question.objects.filter(
                subject=subject, chapter__in=chapters)
            test.add_subject(subject)
            test.chapters.add(*chapters)


            used_questions_ids = TimesUsed.objects.filter(
                institute=me.profile.institute).values_list('question__id', flat=True)

            for question in questions:

                if test.questions.count() < int(number_of_questions):
                    if question.id not in used_questions_ids:
                        test.questions.add(question)
                        total_marks += float(question.marks)

                        try:
                            timesUsed =\
                                TimesUsed.objects.get(
                                    institute=me.profile.institue, question=question)
                            timesUsed.used += 1
                            timesUsed.save()
                        except:
                            timesUsed = TimesUsed()
                            timesUsed.question = question
                            timesUsed.institute = me.profile.institute
                            timesUsed.used = 1
                            timesUsed.save()
                    else:
                        pass

                else:
                    break

            test.totalMarks = total_marks
            passing_marks = total_marks/3
            test.passing_marks = passing_marks
            test.save()

            context = {'status': 'Success',
                       'message': 'Test successfully created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRequestStudyContentAPI(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        message = data['message']
        teacher_course = data['teacher_course']

        try:
            teacher_course = TeacherCourse.objects.get(id=teacher_course)
            request = TeacherRequestStudyContent.objects.create(
                teacher=me.profile, teacher_course=teacher_course, message=message)
            context = {'status': 'success', 'message': 'Your request Sent..'}
        except Exception as e:
            context = {'satus': 'Failed', 'message': str(e)}
        return Response(context)

class SatffGetStudyContentRequest(APIView):
    def get(self, request, *args, **kwargs):
        content_requests = TeacherRequestStudyContent.objects.all().values()
        context = {'status': 'success', 'content_requests': content_requests}
        return Response(context)

class WebAppStepOne(APIView):
    def institute_code_generate(self):
        letters = string.ascii_lowercase
        code = ''.join(random.choice(letters) for i in range(5))
        try:
            code = Institute.objects.get(code=code)
            institute_code_generate()
        except:
            return code

    def post(self, request, *args, **kwargs):
        data = request.data
        webappuser = WebAppUser.objects.get(webappuser=self.request.user)
        try:
            teacher = Teacher.objects.get(teacheruser=self.request.user)
            context = {'status': 'Failed', 'message': 'App already created'}
            return Response(context)
        except:
            pass
        institute_name = data['institute_name']
        folder_name = institute_name.replace(' ', '')
        institute_name_lower = institute_name.lower()
        logo = data['logo']
        try:
            logo_download_url = data['logo_download_url']
        except:
            logo_download_url = None
        code = self.institute_code_generate()
        finalAppName = folder_name + '-' + str(code)
        institute =\
            Institute(name=institute_name, code=code, typeInstitute='webapp')
        institute.joinRequestAutomatic = True
        institute.batchChangeRequestAutomatic = True
        institute.easebuzzMerchanKey = 'E4PGYN5DSD'
        institute.easebuzzSaltKey = 'LLQW7Y6VSG'
        institute.easebuzzSubMerchanKey = 'S501888Z6C'
        institute.save()

        instituteDetails = InstituteDetails()
        instituteDetails.institute = institute
        instituteDetails.save()

        teacher = Teacher()
        teacher.teacheruser = self.request.user
        name = webappuser.name
        teacher.institute = institute
        teacher.teacheruser = self.request.user
        teacher.mainTeacher = True
        teacher.webAppTeacher = True
        teacher.name = name
        teacher.save()
        batch = Batch(name='Outer', institute=institute)
        batch.save()
        teacher.batches.add(batch)
        webappuser.teacher = teacher
        webappuser.instituteName = institute_name
        webappuser.save()

        TeacherDetails.objects.create(teacher=teacher, name=name)

        if logo_download_url != None:
            webappuser.logo = logo_download_url
            banner =\
                Banner(link=logo_download_url, institute=institute)
            banner.save()
        else:
            webappuser.logo = logo
        webappuser.save()
        banner =\
            Banner(link='https://d1mhn0gss3ayo4.cloudfront.net/WhatsApp+Image+2021-07-22+at+3.53.00+PM.jpeg', institute=institute)
        banner.save()
        token, created = Token.objects.get_or_create(user=self.request.user)
        groups = self.request.user.groups.all()

        context =\
            {'status': 'Success', 'key': token.key, 'user_type': groups[0].name, 'name': teacher.name, 'username': self.request.user.username,
                'institute': teacher.institute.name, 'code': teacher.institute.code, 'mainTeacher': teacher.mainTeacher}

        return Response(context)

class WebAppStepTwo(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        institute_name = data['institute_name']
        code = data['code']
        logo = data['logo']
        folder_name = institute_name.replace(' ', '')
        institute_name_lower = institute_name.lower()
        finalAppName = folder_name + '-' + str(code)
        self.copy_folder(finalAppName)
        self.createFirebaseJson(finalAppName, code)
        self.changeAppSettings(finalAppName, code, institute_name)
        self.changeLogo(finalAppName, logo)
        flutter_build_deploy.delay(finalAppName, code)
        token, created = Token.objects.get_or_create(user=self.request.user)
        groups = self.request.user.groups.all()
        institute = Institute.objects.get(code=code)
        institute.webAppCreationStarted = True
        institute.name = institute_name
        institute.save()
        context =\
            {'status': 'Success'}

        return Response(context)

    def copy_folder(self, fileName):
        home_dir = '/home/bodhiai/webapps/'
        command = 'cp -r {}Student_web_new {}{}'.format(
            home_dir, home_dir, fileName)
        try:
            subprocess.check_output(command, shell=True)
        except subprocess.CalledProcessError as e:
            print('copy folder error {}'.format(e.output))

    def createFirebaseJson(self, fileName, code):
        home_dir = '/home/bodhiai/webapps/'
        kk = os.system('cd {}/{}'.format(home_dir, fileName))
        print(kk)
        whole_name = fileName
        first_part = whole_name.split('-')[0]
        if len(first_part) < 9:
            site_name = fileName
        else:
            site_name = first_part[:7] + '-' + code

        f = open('{}{}/firebase.json'.format(home_dir, fileName), "w+")
        f.write(str(data))
        f.close()

    def changeAppSettings(self, fileName, instituteCode, realName):
        home_dir = '/home/bodhiai/webapps/'
        directory = '{}{}/lib/helpers'.format(home_dir, fileName)
        manifest_dir = '{}{}/web'.format(home_dir, fileName)
        f = 'app_settings.dart'
        manifiest_file = 'manifest.json'
        index_file = 'index.html'
        kk = subprocess.check_output(
            'sed -i "s/ou/{}/g"  {}/{}'.format(instituteCode, directory, f), shell=True)
        ii = subprocess.check_output(
            'sed -i "s/Bodhi AI/{}/g" {}/{}'.format(realName, directory, f), shell=True)
        mm_name = subprocess.check_output(
            'sed -i "s/bodhiaiweb/{}/g" {}/{}'.format(realName, manifest_dir, manifiest_file), shell=True)
        index_name = subprocess.check_output(
            'sed -i "s/bodhiaiweb/{}/g" {}/{}'.format(realName, manifest_dir, index_file), shell=True)

    def changeLogo(self, fileName, logoURL):
        home_dir = '/home/bodhiai/webapps/'
        extention = logoURL.split('.')[-1]
        print(extention)
        directory = '{}{}/assets'.format(home_dir, fileName)
        manifest_folder = '{}{}/web'.format(home_dir, fileName)
        os.chdir(directory)
        jj = subprocess.check_output(
            'gsutil cp {} {}/logo.{}'.format(logoURL, directory, extention), shell=True)
        img = Image.open('logo.{}'.format(extention))
        img.save('logo.png')
        print(jj)
        cp_logo = subprocess.check_output(
            'cp {}/logo.png  {}/icons'.format(directory, manifest_folder), shell=True)
        cp_favicon = subprocess.check_output(
            'cp {}/logo.png  {}'.format(directory, manifest_folder), shell=True)
        move_favicon = subprocess.check_output(
            'mv {}/logo.png  {}/favicon.png'.format(manifest_folder, manifest_folder), shell=True)

class GetAllPremiumInstitute(APIView):
    def get(self, request, *args, **kwargs):
        institutes = Institute.objects.filter(typeInstitute='Premium').values('name')
        context = {
            'status': 'success',
            'institutes': institutes,
        }
        return Response(context)

class GetWebAppCreationProgress(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        progress = me.profile.institute.webAppCreationStarted
        context = {'progress': progress}
        return Response(context)

class StudentDoingComplaint(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        contact = data['contact']
        name = data['name']
        complaint = data['complaint']
        pictures = data['picture']
        pictures = pictures.strip('][').split(',')
        father_name = data['father_name']
        area = data['area']

        try:
            complaint = Complaint.objects.create(
                student=me.profile, contact=contact, name=name, complaint=complaint, father_name=father_name, area=area)
            for picture in pictures:
                cp = ComplaintPicture.objects.create(picture=picture)
                complaint.complaint_pictures.add(cp)

            context = {'status': 'success', 'message': 'Your complaint Sent..'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetComplaint(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        try:
            complaints = Complaint.objects.filter(student__institute=me.profile.institute)
            complaints_list = []
            for c in complaints:
                pictures = c.complaint_pictures.all().values()
                c_dict = {'id': c.id, 'contact': c.contact, 'name': c.name, 'father_name': c.father_name,
                          'area': c.area, 'complaint': c.complaint, 'resolved': c.resolved, 'time': c.time, 'pictures': pictures}
                complaints_list.append(c_dict)

            context = {'status': 'success', 'complaints': complaints_list}
        except Exception as e:
            context = {'satus': 'Failed', 'message': str(e)}
        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        complaint_id = data['complaint_id']
        resolved = data['resolved']

        try:
            complaint = Complaint.objects.get(id=complaint_id)
            if resolved == 'true':
                complaint.resolved = True
            else:
                complaint.resolved = False
            complaint.save()
            context = {'status': 'success',
                       'message': 'Successfully changed status!'}
        except Exception as e:
            context = {'satus': 'Failed', 'message': str(e)}
        return Response(context)

class NotificationTesting(APIView):
    def post(self, request):
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
        data = request.data
        try:
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
            
            if json_file_url == None:    
                send_notification_to_multipurpose.delay(
                    serverKey=server_key,
                    notification=data.get('notification'),
                    data=data.get('data'),
                    teacher_id=data.get('teacher_id'),
                    student_id=data.get('student_id'),
                    batch_id=data.get('batch_id'),
                    package_id=data.get('package_id'),
                    group_id=data.get('group_id'),
                    institute_id=data.get('institute_id'),
                )
            else:
                send_notification_to_multipurpose_new.delay(
                    json_file_url=json_file_url,
                    notification=data.get('notification'),
                    data=data.get('data'),
                    teacher_id=data.get('teacher_id'),
                    student_id=data.get('student_id'),
                    batch_id=data.get('batch_id'),
                    package_id=data.get('package_id'),
                    group_id=data.get('group_id'),
                    institute_id=data.get('institute_id'),
                )
                
            context = ["success"]
        except Exception as e:
            context = f"{e}"

        return Response(context)

class TeacherGetSubInstituteStudentProfile(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        try:
            details = StudentDetails.objects.get(student=student_id)
            data = {}

            data['details_dict'] = {
                'id': details.id, 
                'photo': details.photo, 
                'fullName': details.fullName, 
                'address': details.address, 
                'city': details.city, 
                'state': details.state, 
                'country': details.country, 
                'standard': details.standard, 
                'phone': details.phone, 
                'email': details.email, 
                'parentName': details.parentName, 
                'parentPhone': details.parentPhone, 
                'dob': details.dob, 
                'studentDocumentType': details.studentDocumentType, 
                'studentDocument': details.studentDocument,
                'rollNumber': details.rollNumber,
                }
            
            sub_institute_details = SubInstituteStudent.objects.filter(student=student_id).first()
            
            data['sub_institute_details_dict'] = {
                'category': sub_institute_details.category, 
                'category_image':sub_institute_details.category_image, 
                'trusted_person_name': sub_institute_details.trusted_person_name, 
                'trusted_person_number': sub_institute_details.trusted_person_number, 
                'alternative_number': sub_institute_details.alternative_number, 
                'secondary_marksheet': sub_institute_details.secondary_marksheet, 
                'aadhar_card': sub_institute_details.aadhar_card, 
                'aadhar_card_number': sub_institute_details.aadhar_card_number,
                'slc': sub_institute_details.slc,
                'student_registration_number': sub_institute_details.student_registration_number,
                }

            context = {'status': True,'data': data}
        except Exception as e:
            context = {'status':False,'message': str(e)}
        
        return Response(context)

class TeacherUpdateSubInstituteStudentProfile(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']

        try:
            details = StudentDetails.objects.get(student=student_id)
            if data.get('fullName'):
                details.fullName = data.get('fullName')
            if data.get('profile_photo'):
                details.photo = data.get('profile_photo')
            if data.get('address'):
                details.address = data.get('address')
            if data.get('phone'):
                details.phone = data.get('phone')
            if data.get('email'):
                details.email = data.get('email')
            if data.get('parentName'):
                details.parentName = data.get('parentName')
            if data.get('parentPhone'):
                details.parentPhone = data.get('parentPhone')
            if data.get('standard'):
                details.standard = data.get('standard')
            if data.get('dob'):
                details.dob = data.get('dob')
            if data.get('city'):
                details.city = data.get('city')
            if data.get('state'):
                details.state = data.get('state')
            if data.get('country'):
                details.country = data.get('country')
            if data.get('studentDocumentType'):
                details.studentDocument = data.get('studentDocumentType')
            if data.get('studentDocument'):
                details.studentDocument = data.get('studentDocument')
            if data.get('rollNumber'):
                details.rollNumber = data.get('rollNumber')
            details.save()

            sub_institute_details = SubInstituteStudent.objects.get(student=student_id)
            if data.get('category'):
                sub_institute_details.category = data.get('category')
            if data.get('trusted_person_name'):
                sub_institute_details.trusted_person_name = data.get('trusted_person_name')
            if data.get('trusted_person_number'):
                sub_institute_details.trusted_person_number = data.get('trusted_person_number')
            if data.get('alternative_number'):
                sub_institute_details.alternative_number = data.get('alternative_number')
            if data.get('secondary_marksheet'):
                sub_institute_details.secondary_marksheet = data.get('secondary_marksheet')
            if data.get('aadhar_card'):
                sub_institute_details.aadhar_card = data.get('aadhar_card')
            if data.get('aadhar_card_number'):
                sub_institute_details.aadhar_card_number = data.get('aadhar_card_number')
            if data.get('slc'):
                sub_institute_details.slc = data.get('slc')
            if data.get('category_image'):
                sub_institute_details.category_image = data.get('category_image')
            if data.get('student_registration_number'):
                sub_institute_details.student_registration_number = data.get('student_registration_number')

            sub_institute_details.save()
            context = {'status': True, 'message': 'Student Profile Updated'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class TeacherGetStudentsListBySubInstitute(APIView):
    def post(self, request):
        user = request.user
        me = Teach(user)
        data = request.data
        try:
            institute_id = data['institute_id']
            students = Student.objects.filter(institute = institute_id).order_by('-id')
            student_phone = StudentDetails.objects.filter(student__in = students)
            student_phone_dict = {i.student: i.phone for i in student_phone}
            students_list = []
            for student in students:
                phone = student_phone_dict.get(student)
                student_dict = {
                    'id': student.id,
                    'name': student.name,
                    'phone': phone,
                }
                students_list.append(student_dict)

            context = {'status':True,'students_list':students_list}

        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)    

class InstituteManagementAdminCreateInstitute(APIView):
    def post(self, request, *args, **kwargs):
        try:
            with transaction.atomic():
                user = self.request.user
                me = InstituteAdmin(user)
                admin_code = me.profile.admin_code
                data = request.data
                institute_name = data['institute_name']
                username = data['teacher_username']
                code = admin_code + '_' + data['code']
                if len(code) > 19:
                    context = {
                        "status" : False,
                        "message" : "code length is too long"
                    }
                    return Response(context)

                try:
                    Institute.objects.get(code=code)
                    context = {'status': 'Failed',
                            'message': 'already created this code'}

                except:
                    institute = Institute()
                    institute.AdminUser = me.profile
                    institute.name = institute_name
                    institute.code = code
                    institute.save()

                    instituteDetails = InstituteDetails()
                    instituteDetails.institute = institute
                    instituteDetails.save()

                    batch = Batch()
                    batch.name = 'Outer'
                    batch.institute = institute
                    batch.save()
                    user = User.objects.create_user(
                        username=username, password='123', email=None)
                    group = Group.objects.get(name='Teachers')
                    group.user_set.add(user)
                    teacher = Teacher(teacheruser=user, name=institute_name +
                                    ' Teacher', institute=institute, mainTeacher=True)
                    batches = Batch.objects.filter(institute=institute)
                    teacher.save()
                    teacher.batches.add(*batches)
                    context = {'status': True, 'message': "Institute created successfully"}
        except Exception as e:
            context = {'status': False, 'message': f"{e}"}

        return Response(context)


    def put(self, request, *args, **kwargs):
        user = self.request.user
        me = InstituteAdmin(user)
        data = request.data
        code = data['code']
        try:
            institute = Institute.objects.get(code=code)
            if institute.AdminUser != me.profile:
                context = {
                    "status": False,
                    "message": "not allowed"
                }
                return Response(context)
            
            institute_name = data.get('institute_name')
            if institute_name:
                institute.name = institute

            adminUserPublish = data.get('adminUserPublish')
            if adminUserPublish:
                institute.adminUserPublish = adminUserPublish

            institute.save()

            context = {'status': True, 'message': "record updated"}
        except Exception as e:
            context = {'status': False, 'message': f"{e}"}

        return Response(context)

class RetriveInstituteListAdmin(APIView):
    def get(self, request):
        me = InstituteAdmin(self.request.user)
        institutes = Institute.objects.filter(AdminUser=me.profile).order_by('id')
        Instiutes_list = []
        for institute in institutes:
            institute_dict = {
                "name" : institute.name,
                "logo" : institute.logo,
                "Publish" : institute.adminUserPublish,
                "username" : institute.mainTeacherUsername(),
                "code" : institute.code
            }
            Instiutes_list.append(institute_dict)
        context = {
            "status":True,
            "instiute_list" : Instiutes_list
        }
        return Response(context)

    def post(self, request):
        me = InstituteAdmin(self.request.user)
        data = request.data
        username = data['username']
        user = User.objects.get(username=username)

        token, created = Token.objects.get_or_create(user=user)
        teacher = Teacher.objects.get(teacheruser=user)
        appUrl = teacher.institute.webAppUrl
        context =\
            {'status': True, 'key': token.key, 'name': teacher.name, 'username': user.username,
                'institute': teacher.institute.name, 'code': teacher.institute.code, 'mainTeacher': teacher.mainTeacher, 'appUrl': appUrl}
        return Response(context)

class RetriveInstituteListStudent(APIView):
    def post(self, request):
        try:
            data = request.data
            admin_code = data['admin_code']
            AdminUser = InstituteManagementAdmin.objects.get(admin_code=admin_code)
            institutes = Institute.objects.filter(AdminUser=AdminUser, adminUserPublish=True).order_by('id')
            Instiutes_list = []
            for institute in institutes:
                institute_dict = {
                    "name" : institute.name,
                    "logo" : institute.logo,
                    "institute_Code" : institute.code
                }
                Instiutes_list.append(institute_dict)
            context = {
                "status":True,
                "instiute_list" : Instiutes_list
            }
        except Exception as e:
            context = {
                "status":False,
                "message": f"{e}"
            }
        return Response(context)

class StudentCheckAppVersionUpdate(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        institute= me.profile.institute
        data = request.data
        version = data['version']
        appStoreVersion = GoogleAppStoreLatestVersion.objects.get(institute=me.profile.institute)
        playVersion = appStoreVersion.version

        if request.user.username == '1112223330':
            appStoreVersion.version = playVersion
            appStoreVersion.student = me.profile
            me.profile.save()
            context = {'message': 'Demo student'}
            return Response(context)

        if me.profile.institute.code == 'jkpsmart':
            if int(version) < playVersion:
                me.profile.accessVideo = False
                me.profile.accessYouTubeLiveVideos = False
                me.profile.save()
                context = {'message': 'Please update to the latest version of the app'}
                return Response(context)
            
        if int(version) >= playVersion:
            appStoreVersion.version = version
            appStoreVersion.student = me.profile
            appStoreVersion.save()
            me.profile.accessVideo = True
            me.profile.accessYouTubeLiveVideos = True
            me.profile.accessTestWinApp = True
            me.profile.save()
            context = {'status': 'Success','playStoreVersion': appStoreVersion.version, 'update': False}
               
        
        else:
            banners = Banner.objects.filter(institute=institute).order_by('id')
            banner_list = []
            for banner in banners:
                banner_list.append(banner.link)
            context = {'banners': banner_list}
        return Response(context)

class GetDetailsOfInstitute(APIView):
    def post(self,request):
        data = request.data
        try:
            institute_code = data['code']
            institute = Institute.objects.get(code = institute_code)
            details = {
                'name':institute.name,
                'number':institute.phoneNumber,
                'email':institute.email,
                'facebookURL':institute.facebookURL,
                'instagramURL':institute.instagramURL,
                'twitterURL': institute.twitterURL,
                'telegramURL': institute.telegramURL,
                'websiteURL': institute.websiteURL,
            }
            return Response(details)
        except Exception as e:
            return Response(str(e))
        
class TeacherRestrictionAllStudent(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            what = data['access']
            if what == 'true':
                what = True
            else:
                what = False
            all_students =Student.objects.filter(institute=me.profile.institute)
            for student in all_students:
                student.accessVideo = what
                student.accessTests = what
                student.accessNotes = what
                student.accessLiveVideos = what
                student.accessYouTubeLiveVideos = what
                student.save()

            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddStudentBatchLimit(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_list = data['batches']
            student_id = data['student_id']
            batches = batch_list.strip('][').split(',')
            student = Student.objects.get(id=student_id)
            student_batches = student.batches.all()
            for bat in student_batches:
                liveVideos = NativeLiveVideo.objects.filter(
                    batches=bat, live=True)
                for lv in liveVideos:
                    lv.students.remove(student)
                    lv.save()
            student.batches.clear()

            for bat in batches:
                batch = Batch.objects.get(id=bat)
                isAddLimit = batch.addLimit
                if isAddLimit:
                    batch_count=batch.count
                    max_student = batch.max_student
                    if batch_count >= max_student:
                        return Response ({
                                'status':False,
                                'detail':'You have exceeded the student add limit. Kindly contact our  Main teacher.'
                                })
                    batch.count = batch_count +1
                    student.batches.add(batch)
                    batch.save()
                else:
                    student.batches.add(batch)
                    batch.save()
                liveVideos = NativeLiveVideo.objects.filter(
                    batches=batch, live=True)
                for lv in liveVideos:
                    lv.students.add(student)
                    lv.save()
            context = {'status': 'Success',
                       'message': 'Student added to batch'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
    
class DetailTeacherFireBaseToken(APIView):
    def get(self, request, *args, **kwargs):
        institute = Institute.objects.all()


        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="report.csv"'

        writer = csv.writer(response)
        writer.writerow(['Institute', 'Teacher Name', 'Last Test Start Date'])


            

        tft_list = (
            Video.objects
            .filter(teacher__mainTeacher=True)
            .values('teacher__institute', 'teacher')
            .annotate(last_test_date=Max('publishDate'))
            .order_by('teacher__institute', 'teacher')
            .prefetch_related('teacher')  # Fetch related teachers efficiently
        )
        for note in tft_list:
            institute_name = note['teacher__institute']
            last_test_date = note['last_test_date']
            teacher = note['teacher']
            
            try:
                teacher = Teacher.objects.get(id=teacher, mainTeacher=True)
                institute = Institute.objects.get(id=institute_name, typeInstitute="Premium")
                if institute:
                    last_test_date = last_test_date.date()
                    old, created = OldInstitute.objects.get_or_create(
                    teacher=teacher,
                    institute=institute.name,
                    defaults={'time': last_test_date}
                    )
                    if not created and old.time < last_test_date:
                        old.time = last_test_date
                        old.save()
            except (Teacher.DoesNotExist, Institute.DoesNotExist):
                pass

        return response

class DetailTeacherFireBaseToken(APIView):
    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="institutes_details.csv"'

        writer = csv.writer(response)
        writer.writerow(['Institute', 'Teacher Name', 'Last Activity Date'])

        tft_list = OldInstitute.objects.all().order_by('institute')

        for test in tft_list:
            writer.writerow([test.institute,test.teacher.teacheruser.username, test.time])

        return response


 



class CSABiharCreateIDCard(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            name = data['name']
            phone_number = data['phone_number']
            institute = data['institute']
            address = data['address']
            photo = data['photo']
            board = data['board']
            classes = data['classes']
            medium = data['medium']
            try:
                register = CSAIdCard.objects.get(student =me.profile)
                register.name = name
                register.institute = institute
                register.address = address
                register.phone_number = phone_number
                register.board = board
                register.classes = classes
                register.medium = medium
                register.institute = institute
                register.photo = photo
                register.student = me.profile
                csa_id = "CSA00"+str(register.id)
                register.id_card_number = csa_id
                register.save()

            except CSAIdCard.DoesNotExist:
                register = CSAIdCard()
                register.name = name
                register.institute = institute
                register.address = address
                register.phone_number = phone_number
                register.board = board
                register.classes = classes
                register.medium = medium
                register.institute = institute
                register.photo = photo
                register.student = me.profile
                register.save()
                register_id = register.id
                csa_id = "CSA00"+str(register_id)
                register.id_card_number = csa_id
                register.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CSABiharIDCardGet(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            paidStudent = PaidCSAIdCardStudent.objects.filter(name__student=me.profile).first()
            if paidStudent:
                studentCard = CSAIdCard.objects.get(student=me.profile)
                student_dict = {
                    'id': studentCard.id,
                    'name': studentCard.name,
                    'institute': studentCard.institute,
                    'address': studentCard.address,
                    'board': studentCard.board,
                    'medium': studentCard.medium,
                    'phone_number': studentCard.phone_number,
                    'photo': studentCard.photo,
                    'classes': studentCard.classes,
                    'id_card_number':studentCard.id_card_number
                }
                
                context = {'status': 'Success', 'data': student_dict}
                return Response(context)
            else:
                context = {'status': 'Failed', 'data': 'This student not pay'}
                return Response(context)
        except Exception as e:
            context = {'status': 'Failed', 'message': {str(e)}}
            return Response(context)

class CSABiharallCards(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        print(me.profile.institute)
        try:
            paid_students = PaidCSAIdCardStudent.objects.filter(name__student__institute=me.profile.institute)
            print(paid_students)
            student_list = []

            for paid_student in paid_students:
                id = paid_student.name.id
                student_card = CSAIdCard.objects.get(id=id)  # Use get_object_or_404 to handle not found case
                student_dict = {
                    'id': student_card.id,
                    'name': student_card.name,
                    'institute': student_card.institute,
                    'address': student_card.address,
                    'board': student_card.board,
                    'medium': student_card.medium,
                    'phone_number': student_card.phone_number,
                    'photo': student_card.photo,
                    'classes': student_card.classes,
                    'id_card_number': student_card.id_card_number
                }
                student_list.append(student_dict)
                
            context = {'status': 'Success', 'data': student_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': {str(e)}}
        return Response(context)

class CSABiharteachergetCard(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        card_id= data['card_id']
        try:
            studentCard = CSAIdCard.objects.get(id=card_id)
            student_dict = {
                'id': studentCard.id,
                'name': studentCard.name,
                'institute': studentCard.institute,
                'address': studentCard.address,
                'board': studentCard.board,
                'medium': studentCard.medium,
                'phone_number': studentCard.phone_number,
                'photo': studentCard.photo,
                'classes': studentCard.classes,
                'id_card_number':studentCard.id_card_number
            }
            
            context = {'status': 'Success', 'data': student_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': {str(e)}}
        return Response(context)

class Function(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        appStoreVersion = GoogleAppStoreLatestVersion.objects.filter(institute=me.profile.institute).order_by("-id")
        app_list =[]
        for i in appStoreVersion:
            stude_dict ={"playVersion":i.version,"student":i.student.studentuser.username}
            app_list.append(stude_dict)
        
        context = {'status': 'success', 'data': app_list}
        return Response(context)
    
class StudentGetPackageHistory(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            boughtPackages = StudentPackage.objects.filter(student=me.profile)
            boughtPackageshistory = StudentBoughtPackageHistory.objects.filter(student=me.profile)
            packages = []
            for bp in boughtPackages:
                try:
                    name = bp.package.title
                    start_date = bp.startDate
                    end_date = bp.endDate
                    price = bp.package.price
                    pack_dict = {
                        'name': name, 
                        'start_date': start_date,
                        'end_date': end_date, 
                        'price': price
                        }
                    packages.append(pack_dict)
                except:
                    pass
                
            for bph in boughtPackageshistory:
                try:
                    name = bph.package
                    price = bph.packagePrice
                    start_date = bph.startDate
                    end_date = bph.endDate
                    pack_dict = {
                        'name': name, 
                        'start_date': start_date,
                        'end_date': end_date, 
                        'price': price
                        }
                    packages.append(pack_dict)
                except:
                    pass
                
            context = {'status': True, 'packages': packages}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        
        return Response(context)

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/Paytm_Python_Checksum/setup.py
--------------------------------------------------

import setuptools

long_description = "https://developer.paytm.com/docs/checksum/#python"
    
setuptools.setup(
    name="paytmchecksum",
    version="1.7.0",
    description="This is for paytm checksum creation and verification in python",
    url="https://github.com/paytm/Paytm_Python_Checksum",
    author="Soumya Vats",
    license="MIT",
    packages=setuptools.find_packages(),
    keywords='Paytm Checksum Python Signature Payment',
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",

        "Programming Language :: Python",
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',

        "Topic :: Software Development :: Libraries :: Python Modules",
    ]
 )

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/Paytm_Python_Checksum/sample.py
--------------------------------------------------


import requests
import json

from paytmchecksum import PaytmChecksum

paytmParams = {}

paytmParams["MID"] = "YOUR_MID_HERE"
paytmParams["ORDERID"] = "YOUR_ORDER_ID_HERE"

paytmChecksum = PaytmChecksum.generateSignature(paytmParams, "YOUR_MERCHANT_KEY")
verifyChecksum = PaytmChecksum.verifySignature(paytmParams, "YOUR_MERCHANT_KEY",paytmChecksum)

print("generateSignature Returns:" + str(paytmChecksum))
print("verifySignature Returns:" + str(verifyChecksum))

body = "{\"mid\":\"YOUR_MID_HERE\",\"orderId\":\"YOUR_ORDER_ID_HERE\"}"

paytmChecksum = PaytmChecksum.generateSignature(body, "YOUR_MERCHANT_KEY")
verifyChecksum = PaytmChecksum.verifySignature(body, "YOUR_MERCHANT_KEY", paytmChecksum)

print("generateSignature Returns:" + str(paytmChecksum))
print("verifySignature Returns:" + str(verifyChecksum))

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/Paytm_Python_Checksum/paytmchecksum/__init__.py
--------------------------------------------------

from .PaytmChecksum import generateSignature, verifySignature, encrypt, decrypt


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/Paytm_Python_Checksum/paytmchecksum/PaytmChecksum.py
--------------------------------------------------

import base64
import string
import random
import hashlib
import sys

from Crypto.Cipher import AES


iv = '@@@@&&&&####$$$$'
BLOCK_SIZE = 16

if (sys.version_info > (3, 0)):
    __pad__ = lambda s: bytes(s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE), 'utf-8')
else:
    __pad__ = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)

__unpad__ = lambda s: s[0:-ord(s[-1])]    

def encrypt(input, key):
    input = __pad__(input)
    c = AES.new(key.encode("utf8"), AES.MODE_CBC, iv.encode("utf8"))
    input = c.encrypt(input)
    input = base64.b64encode(input)
    return input.decode("UTF-8")

def decrypt(encrypted, key):
    encrypted = base64.b64decode(encrypted)
    c = AES.new(key.encode("utf8"), AES.MODE_CBC, iv.encode("utf8"))
    param = c.decrypt(encrypted)
    if type(param) == bytes:
        param = param.decode()
    return __unpad__(param)

def generateSignature(params, key):
    if not type(params) is dict and not type(params) is str:
        raise Exception("string or dict expected, " + str(type(params)) + " given")
    if type(params) is dict:
        params = getStringByParams(params)
    return generateSignatureByString(params, key)

def verifySignature(params, key, checksum):
    if not type(params) is dict and not type(params) is str:
        raise Exception("string or dict expected, " + str(type(params)) + " given")
    if "CHECKSUMHASH" in params:
        del params["CHECKSUMHASH"]
        
    if type(params) is dict:
        params = getStringByParams(params)
    return verifySignatureByString(params, key, checksum)

def generateSignatureByString(params, key):    
    salt = generateRandomString(4)
    return calculateChecksum(params, key, salt)

def verifySignatureByString(params, key, checksum):
    paytm_hash = decrypt(checksum, key)    
    salt = paytm_hash[-4:]
    return paytm_hash == calculateHash(params, salt)

def generateRandomString(length):
    chars = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits + string.ascii_lowercase) for _ in range(length))
    return chars

def getStringByParams(params):
    params_string = []
    for key in sorted(params.keys()):
        value = params[key] if params[key] is not None and params[key].lower() != "null" else ""
        params_string.append(str(value))
    return '|'.join(params_string)

def calculateHash(params, salt):    
    finalString = '%s|%s' % (params, salt)
    hasher = hashlib.sha256(finalString.encode())
    hashString = hasher.hexdigest() + salt
    return hashString

def calculateChecksum(params, key, salt): 
    hashString = calculateHash(params, salt)
    return encrypt(hashString, key)

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/models.py
--------------------------------------------------

import datetime
from uuid import uuid4
from cgitb import enable
from django.db import models
from django.contrib.auth.models import User
from membership.models import *
from content.models import *
from basicinformation.models import *
from basicinformation.models import SMSPackageBought
from picklefield.fields import PickledObjectField

class Attendance(models.Model):
    student = models.ForeignKey(Student, related_name='studentattendance', on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, related_name='teacherattendance', on_delete=models.CASCADE)
    attendanceType = models.CharField(max_length=100)
    date = models.DateTimeField()

    def __str__(self):
        return self.student.name + ' ' + self.student.institute.name + ' ' +\
            self.attendanceType + str(self.date)

class Fees(models.Model):
    student = models.ForeignKey(Student, related_name='studentfeese',on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, related_name='teacherfees',on_delete=models.CASCADE)
    totalFees = models.FloatField(default=1000)
    duration = models.IntegerField(default=30)

    def __str__(self):
        try:
            return self.student.name + ' ' + self.teacher.institute.name
        except:
            return '-'

class PaidFees(models.Model):
    fees = models.ForeignKey(Fees, related_name='feesPaid',on_delete=models.CASCADE)
    amountPaid = models.FloatField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        try:
            return str(self.amountPaid) + ' ' + str(self.fees.student.name)
        except:
            return '-'

class TimeTable(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='timeTable_teacher', on_delete=models.CASCADE)
    startTime = models.DateTimeField()
    endTime = models.DateTimeField()
    description = models.TextField()
    subject = models.ForeignKey(Subject, related_name='timeTable_subject', on_delete=models.CASCADE)
    chapter = models.ForeignKey(Chapter, related_name='timeTable_chapter', on_delete=models.CASCADE)
    batches = models.ManyToManyField(Batch, blank=True,)
    package = models.ForeignKey(Package, related_name='package_timetable', blank=True, null=True, on_delete=models.CASCADE)
    thumbnail = models.URLField(max_length=2000, blank=True, null=True)
    enableOfflineBooking = models.BooleanField(default=True)

    def __str__(self):
        return str(self.subject.name) + ' ' + str(self.startTime)

class FeesManagement(models.Model):
    student = models.ForeignKey(Student, related_name='studentchoosefeetype', on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, related_name='teacherchoosefeetype', on_delete=models.CASCADE)
    totalFees = models.FloatField(default=1000)
    duration = models.IntegerField(default=30)
    paidfee = models.FloatField(default=1000)
    feeType = models.CharField(max_length=100, blank=True, null=True)
    startDate = models.DateTimeField()
    endDate = models.DateTimeField()

    def __str__(self):
        return self.student.name + ' ' + self.teacher.institute.name

class PaidFeesManagement(models.Model):
    fees = models.ForeignKey(FeesManagement, related_name='PaidFeeManagement', on_delete=models.CASCADE)
    amountPaid = models.FloatField()
    date = models.DateTimeField(auto_now_add=True)
    active = models.BooleanField(default=True)
    detail = models.TextField(default='details about fees', null=True, blank=True)
    paymentMode = models.CharField(max_length=100, default='Cash', blank=True, null=True)

    def __str__(self):
        return str(self.amountPaid) + ' ' + str(self.fees.student.name)

class CourseFees(models.Model):
    batch = models.ForeignKey(Batch, related_name='batch_feescourse',on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, related_name='teacher_feescourse', on_delete=models.CASCADE)
    totalAmount = models.FloatField()
    duration = models.IntegerField()
    emi = models.BooleanField(default=False)
    numberOfEmi = models.IntegerField(null=True, blank=True)
    costPerEmi = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.teacher.name + ' ' + str(self.totalAmount)

class StudentCourseFees(models.Model):
    student = models.ForeignKey(Student, related_name='paidcoursefees_student', on_delete=models.CASCADE)
    coursefees = models.ForeignKey(CourseFees, related_name='coursefees',on_delete=models.CASCADE)
    amountPaid = models.FloatField()
    datePaid = models.DateTimeField()
    amountRemaining = models.FloatField()
    nextDuePayment = models.BooleanField()
    typePayment = models.CharField(max_length=50)
    modePayment = models.CharField(max_length=10)
    nextPaymentDate = models.DateField(null=True, blank=True)
    accepted = models.CharField(max_length=10, default='in-review')

    def __str__(self):
        return self.student.name + ' ' + self.modePayment + ' ' + str(self.amountPaid)

class HowToDoVideos(models.Model):
    title = models.CharField(max_length=500)
    link = models.URLField(max_length=2000)
    thumbnail = models.URLField(max_length=2000, null=True, blank=True)
    which_side_video = models.CharField(default='Teacher', max_length=20)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    locked = models.BooleanField(default=False)

    def __str__(self):
        return self.title

class BookOfflineClass(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, on_delete=models.SET_NULL, null=True, blank=True)
    timetable = models.ForeignKey(TimeTable, on_delete=models.SET_NULL, null=True, blank=True, related_name='booked_timetable')
    course = models.CharField(max_length=100)
    bookingPrice = models.FloatField(null=True, blank=True)
    bookingTime = models.DateTimeField(auto_now_add=True, editable=True)
    status = models.CharField(max_length=200, null=True, blank=True)
    classAttempedTime = models.DateTimeField(null=True, blank=True)
    isSuccessfullyAttemptedBookedClassByStudent = models.BooleanField(default=None)
    isClassCancelByTeacher = models.BooleanField(default=False)
    classCancelTime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        try:
            return self.student.name + ' ' + self.course
        except:
            return '-'

class PaytmPayoutResponseHistory(models.Model):
    student = models.ForeignKey(Student, related_name='payout_student', on_delete=models.SET_NULL, null=True, blank=True)
    number = models.BigIntegerField(null=True, blank=True)
    rupees = models.FloatField(null=True, blank=True)
    coin = models.FloatField(null=True, blank=True)
    status = models.CharField(max_length=100, default='PENDING')
    time = models.DateTimeField(auto_now_add=True)
    response = PickledObjectField(editable=True, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.rupees) + ' ' + self.status

class MeetHourDeveloperAccountPakages(models.Model):
    name = models.CharField(max_length=31)
    price = models.FloatField()
    days = models.IntegerField()
    
    def __str__(self) -> str:
        return self.name 

class MeetHourDeveloperAccountPayment(models.Model):
    developer_account = models.ForeignKey(MeetHourDeveloperAccountClientCredentials, on_delete=models.PROTECT)
    datetime = models.DateTimeField(auto_now_add=True)
    amount = models.FloatField(null=True, blank=True)
    expire_date = models.DateField()
    subcription_upto = models.DateField(null=True, blank=True)

class MeetHourPayment(models.Model):
    institute = models.ForeignKey(to=Institute, on_delete=models.PROTECT)
    datetime = models.DateTimeField(auto_now_add=True)
    amount = models.FloatField(null=True, blank=True)
    expire_date = models.DateField()

class EaseBuzzPayment(models.Model):
    txnid = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    firstname = models.CharField(max_length=127)
    email = models.EmailField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    productinfo = models.TextField()
    tcode = models.CharField(max_length=100, blank=True, null=True)
    phone = models.CharField(max_length=63)
    udf1 = models.TextField(null=True, blank=True)
    udf2 = models.TextField(null=True, blank=True)
    udf3 = models.TextField(null=True, blank=True)
    udf4 = models.TextField(null=True, blank=True)
    udf5 = models.TextField(null=True, blank=True)
    udf6 = models.TextField(null=True, blank=True)
    udf7 = models.TextField(null=True, blank=True)
    zipcode = models.CharField(max_length=63, null=True, blank=True)
    address1 = models.CharField(max_length=127, null=True, blank=True)
    address2 = models.CharField(max_length=127, null=True, blank=True)
    city = models.CharField(max_length=63, null=True, blank=True)
    state = models.CharField(max_length=63, null=True, blank=True)
    country = models.CharField(max_length=63, null=True, blank=True)
    merchant_key = models.CharField(max_length=63, null=True, blank=True)
    salt = models.CharField(max_length=63, null=True, blank=True)
    sub_merchant_id = models.CharField(max_length=63, null=True, blank=True)
    payment_type_choices = [('easebuzz', 'easebuzz'),('payu', 'payu')]
    payment_type = models.CharField(max_length=31, choices=payment_type_choices, null=True, blank=True)
    datetime = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        return str(self.txnid)

    def paymentstatus(self):
        try:
            return self.EaseBuzzPaymentResponse.status
        except:
            return None
        
    def success(self):
        try:
            package_buy = self.EaseBuzzPaymentResponse.package_buy
            books_buy = self.EaseBuzzPaymentResponse.books_buy
            feespaid = self.EaseBuzzPaymentResponse.feespaid
            sms_package = self.EaseBuzzPaymentResponse.sms_package
            mobile_iti_fees = self.EaseBuzzPaymentResponse.mobile_iti_fees
            meethour_payment_developer = self.EaseBuzzPaymentResponse.meethour_payment_developer
            meethour_payment_enterprise = self.EaseBuzzPaymentResponse.meethour_payment_enterprise
            subject_buy = self.EaseBuzzPaymentResponse.subject_buy
            subject_buy = self.EaseBuzzPaymentResponse.subject_buy
            registertion_exam = self.EaseBuzzPaymentResponse.registertion_exam

            if package_buy or books_buy or feespaid or sms_package or mobile_iti_fees or meethour_payment_developer or meethour_payment_enterprise or subject_buy or registertion_exam :
                return "✅"
            else:
                return "🙅‍♂️"
        except:
            return "❌"

class EaseBuzzPaymentResponseRecord(models.Model):
    payment = models.OneToOneField(primary_key=True, to=EaseBuzzPayment,on_delete=models.PROTECT, related_name='EaseBuzzPaymentResponse')
    datetime = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=63)
    data = models.TextField()
    package_buy = models.OneToOneField(to=PaidAmountStudentPackage, on_delete=models.SET_NULL,related_name='package_buy_payment_record', blank=True, null=True)
    books_buy = models.OneToOneField(to=PaidAmountStudentBook, on_delete=models.SET_NULL,related_name='books_buy_payment_record', blank=True, null=True)
    feespaid = models.OneToOneField(to=StudentCourseFees, on_delete=models.SET_NULL,related_name='feespaid_payment_record', blank=True, null=True)
    sms_package = models.OneToOneField(to=SMSPackageBought, on_delete=models.SET_NULL,related_name='sms_package_payment_record', blank=True, null=True)
    mobile_iti_fees = models.OneToOneField(to=StudentTradePurchase, on_delete=models.SET_NULL, related_name='mobile_iti_fees_payment_record', blank=True, null=True)
    meethour_payment_developer = models.OneToOneField(to=MeetHourDeveloperAccountPayment, on_delete=models.SET_NULL, related_name='meethour_payment_developer_payment_record', blank=True, null=True)
    meethour_payment_enterprise = models.OneToOneField(to=MeetHourPayment, on_delete=models.SET_NULL, related_name='meethour_payment_enterprise_payment_record', blank=True, null=True)
    subject_buy = models.OneToOneField(to=PaidAmountSubject, on_delete=models.SET_NULL,related_name='subject_buy_payment_record', blank=True, null=True)
    registertion_exam = models.OneToOneField(to=PaidAmountStudentExam, on_delete=models.SET_NULL,related_name='register_exam_payment_records', blank=True, null=True)
    csa_admitcard = models.OneToOneField(to=PaidCSAIdCardStudent, on_delete=models.SET_NULL,related_name='csa_id_card_payment_record', blank=True, null=True)
    shop_buy = models.OneToOneField(to=PaidAmountClientShop, on_delete=models.SET_NULL,related_name='shop_buy_payment_record', blank=True, null=True)

    def __str__(self) -> str:
        return str(self.payment.txnid)

    def username(self):
        return self.payment.udf1
    
class WebhookDataLog(models.Model):
    webhook_data_response = models.JSONField(help_text="JSON data received from the webhook")
    txnid = models.CharField(max_length=500, blank=True, null=True)
    status = models.CharField(max_length=63, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def _str_(self):
        return f"Webhook Data Log - {self.created_at}"

class WireContacts(models.Model):
    wire_key = models.CharField(max_length=15,)
    contact_id = models.CharField(max_length=63, null=True, blank=True)
    user = models.ForeignKey(to=User, on_delete=models.SET_NULL, null=True, blank=True)
    name = models.CharField(max_length=31)
    email = models.EmailField(null=True, blank=True)
    phone = models.CharField(max_length=15, null=True, blank=True)
    status = models.CharField(max_length=15, null=True, blank=True)
    created_by = models.CharField(max_length=31, null=True, blank=True)
    successfully_created = models.BooleanField(default=False)

class WireContactsBeneficiary(models.Model):
    wire_key = models.CharField(max_length=15,)
    beneficiary_id = models.CharField(max_length=63, null=True, blank=True)
    contact = models.ForeignKey(to=WireContacts, on_delete=models.PROTECT)
    beneficiary_type_choices = [
        ('B', 'bank_account'),
        ('U', 'upi')
    ]
    beneficiary_type = models.CharField(max_length=2, choices=beneficiary_type_choices)
    beneficiary_name = models.CharField(max_length=31)
    bank_name = models.CharField(max_length=31, null=True, blank=True)
    account_number = models.CharField(max_length=31, null=True, blank=True)
    ifsc = models.CharField(max_length=15, null=True, blank=True)
    upi_handle = models.CharField(max_length=31, null=True, blank=True)
    is_active = models.BooleanField(default=False)
    is_primary = models.BooleanField(default=False)
    successfully_created = models.BooleanField(default=False)

    def __str__(self) -> str:
        if self.beneficiary_type == 'U':
            return f'{self.upi_handle}'
        else:
            return f'{self.account_number} + {self.ifsc}'

class WireTransferRecord(models.Model):
    from_account = models.CharField(max_length=15,)
    wire_key = models.CharField(max_length=15,)
    date_time = models.DateTimeField(auto_now_add=True)
    unique_request_number = models.CharField(primary_key=True, max_length=15, unique=True)
    beneficiary = models.ForeignKey(to=WireContactsBeneficiary, on_delete=models.PROTECT)
    source_virtual_account = models.CharField(max_length=31, null=True, blank=True)
    payment_mode_choices = [
        ('IMPS', 'IMPS'),
        ('NEFT', 'NEFT'),
        ('RTGS', 'RTGS'),
        ('UPI', 'UPI')
    ]
    payment_mode = models.CharField(max_length=7, choices=payment_mode_choices)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    failure_reason = models.CharField(max_length=127, null=True, blank=True)
    service_charge = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    gst_amount = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    created_at = models.DateTimeField(null=True, blank=True)
    transfer_date = models.DateTimeField(null=True, blank=True)
    scheduled_for = models.DateTimeField(null=True, blank=True)
    successfully_executed = models.BooleanField(default=False)
    udf1 = models.TextField(null=True, blank=True)
    udf2 = models.TextField(null=True, blank=True)
    udf3 = models.TextField(null=True, blank=True)
    udf4 = models.TextField(null=True, blank=True)
    udf5 = models.TextField(null=True, blank=True)

class CrmExecutive(models.Model):
    unique_id = models.IntegerField(primary_key=True)
    teacher = models.ForeignKey(Teacher, default=1, on_delete=models.PROTECT)
    name = models.CharField(max_length=63)
    phone = models.CharField(max_length=15)
    date = models.DateTimeField(auto_now_add=True)
    status = models.BooleanField(default=True)

    def __str__(self):
        return self.name

    def teacher_username(self):
        return self.teacher.teacheruser.username

class TrainingSheaduleCode(models.Model):
    crm_executive = models.ForeignKey(to=CrmExecutive, on_delete=models.CASCADE)
    traning_code = models.CharField(max_length=6)
    start_time = models.DateTimeField()

class InstituteFees(models.Model):
    institute = models.ForeignKey(Institute, related_name='institute_feescourse',on_delete=models.CASCADE,null=True)
    principle = models.ForeignKey(Principle, related_name='principle_institute_fees', on_delete=models.CASCADE)
    totalAmount = models.FloatField()
    emi = models.BooleanField(default=False)
    numberOfEmi = models.IntegerField(null=True, blank=True)
    def __str__(self):
        return self.principle.name + ' ' + str(self.totalAmount)

class InstituteMainTeacherFees(models.Model):
    institute = models.ForeignKey(Institute, related_name='feesinstitute', on_delete=models.CASCADE,null=True)
    institutefees = models.ForeignKey(InstituteFees, related_name='institutefees',on_delete=models.CASCADE)
    amountPaid = models.FloatField()
    datePaid = models.DateTimeField()
    joinDate = models.DateTimeField(null=True)
    amountRemaining = models.FloatField()
    nextDuePayment = models.BooleanField()
    typePayment = models.CharField(max_length=50)
    modePayment = models.CharField(max_length=10)
    nextPaymentDate = models.DateField(null=True, blank=True)
    accepted = models.CharField(max_length=10, default='Success')
    emiRemaining = models.IntegerField(null=True,blank=True)

    def __str__(self):
        return self.institute.name + ' ' + self.modePayment + ' ' + str(self.amountPaid)

class CCAVenuePayment(models.Model):
    order_id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    datetime = models.DateTimeField(auto_now_add=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=127)
    email = models.EmailField()
    billing_name = models.CharField(max_length=127)
    phone = models.CharField(max_length=15)
    merchant_param1 = models.TextField(null=True, blank=True)
    merchant_param2 = models.TextField(null=True, blank=True)
    merchant_param3 = models.TextField(null=True, blank=True)
    merchant_param4 = models.TextField(null=True, blank=True)
    merchant_param5 = models.TextField(null=True, blank=True)
    billing_zip = models.CharField(max_length=25, null=True, blank=True)
    billing_state = models.CharField(max_length=127, null=True, blank=True)
    billing_address = models.CharField(max_length=127, null=True, blank=True)
    billing_city = models.CharField(max_length=31, null=True, blank=True)
    billing_country = models.CharField(max_length=31, null=True, blank=True)
    merchant_key = models.CharField(max_length=30, null=True, blank=True)
    accessCode = models.CharField(max_length=30, null=True, blank=True)

    def __str__(self) -> str:
        return str(self.order_id)

class CCAVenuePaymentResponseRecord(models.Model):
    payment = models.OneToOneField(primary_key=True, to=CCAVenuePayment, on_delete=models.PROTECT, related_name='CCAVenuePaymentResponse')
    datetime = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=63)
    data = models.TextField()

    def __str__(self) -> str:
        return str(self.payment.order_id)
    
class PayuPayment(models.Model):
    txnid = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    firstname = models.CharField(max_length=127)
    email = models.EmailField()
    phone = models.CharField(max_length=15)
    productinfo = models.TextField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    udf1 = models.TextField(null=True, blank=True)
    udf2 = models.TextField(null=True, blank=True)
    udf3 = models.TextField(null=True, blank=True)
    udf4 = models.TextField(null=True, blank=True)
    udf5 = models.TextField(null=True, blank=True)
    address1 = models.CharField(max_length=31, null=True, blank=True)
    address2 = models.CharField(max_length=127, null=True, blank=True)
    city = models.CharField(max_length=31, null=True, blank=True)
    state = models.CharField(max_length=31, null=True, blank=True)
    zipcode = models.CharField(max_length=15, null=True, blank=True)
    merchant_key = models.CharField(max_length=15, null=True, blank=True)
    salt = models.CharField(max_length=15, null=True, blank=True)
    sub_merchant_id = models.CharField(max_length=15, null=True, blank=True)
    datetime = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        return str(self.txnid)
    
    def paymentstatus(self):
        try:
            return self.PayuPaymentResponse.status
        except:
            return None
    
class PayuPaymentResponseRecord(models.Model):
    payment = models.OneToOneField(primary_key=True, to=PayuPayment, on_delete=models.PROTECT, related_name='PayuPaymentResponse')
    status = models.CharField(max_length=63)
    data = models.TextField()
    datetime = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        return str(self.payment.txnid)
    
class PayuWebhookDataLog(models.Model):
    webhook_data_response = models.JSONField(help_text="JSON data received from the webhook")
    txnid = models.CharField(max_length=500, blank=True, null=True)
    status = models.CharField(max_length=63, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def _str_(self):
        return f"Webhook Data Log - {self.created_at}"

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/apps.py
--------------------------------------------------

from django.apps import AppConfig


class ManagementConfig(AppConfig):
    name = 'management'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/admin.py
--------------------------------------------------

from datetime import datetime
from django.contrib import admin
from rangefilter.filters import DateRangeFilterBuilder, DateTimeRangeFilterBuilder, NumericRangeFilterBuilder
from django.contrib import admin
from .models import *

@admin.register(Attendance)
class AttendanceAdmin(admin.ModelAdmin):
    list_display = ['id', 'student','attendanceType']
    search_fields = ['student__id']
    readonly_fields = ['student', 'teacher']

@admin.register(Fees)
class FeesAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student', 'teacher']

@admin.register(PaidFees)
class PaidFeesAdmin(admin.ModelAdmin):
    list_display = ['id', 'fees']
    readonly_fields = ['fees']

@admin.register(FeesManagement)
class FeesManagementAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student', 'teacher']

@admin.register(TimeTable)
class TimeTableAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher', 'subject', 'chapter', 'batches', 'package']

@admin.register(CourseFees)
class CourseFeesAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher', 'batch',]

@admin.register(StudentCourseFees)
class StudentCourseFeesAdmin(admin.ModelAdmin):
    search_fields = ['student__studentuser__username']
    list_display = ['id', 'student']
    readonly_fields = ['student', 'coursefees',]

@admin.register(HowToDoVideos)
class HowToDoVideosAdmin(admin.ModelAdmin):
    pass

@admin.register(BookOfflineClass)
class BookOfflineClassAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', 'institute']
    readonly_fields = ['student', 'institute', 'timetable',]

@admin.register(PaytmPayoutResponseHistory)
class PaytmPayoutResponseHistoryAdmin(admin.ModelAdmin):
    list_display = ['id', 'student', ]
    readonly_fields = ['student',]
    
class EaseBuzzPaymentResponseRecordInline(admin.StackedInline):
    model = EaseBuzzPaymentResponseRecord
    readonly_fields = ['payment','status','package_buy', 'books_buy', 'feespaid', 'sms_package', 'mobile_iti_fees', 'meethour_payment_developer', 'meethour_payment_enterprise','data',]
    extra = 0

@admin.register(EaseBuzzPayment)
class EaseBuzzPaymentAdmin(admin.ModelAdmin):
    search_fields = ["txnid", "udf1", "udf2", "udf3", "udf4",]
    list_display = ["udf1", "txnid", "paymentstatus", "success",  "datetime", "amount", "productinfo", "firstname", "phone", "udf2", "udf3", "udf4", "udf5","tcode","payment_type"]
    readonly_fields = ["udf1", "txnid", "paymentstatus",  "datetime", "amount", "productinfo", "firstname", "email","phone", "udf2", "udf3", "udf4", "udf5", "udf6", "udf7"]
    ordering = ['-datetime']
    list_filter = [("datetime", DateTimeRangeFilterBuilder(title="Transactions Date"),), "udf2", "udf3", "EaseBuzzPaymentResponse__status"]
    list_display_links = ["udf1"]
    inlines = [EaseBuzzPaymentResponseRecordInline,]

@admin.register(EaseBuzzPaymentResponseRecord)
class EaseBuzzPaymentResponseRecordAdmin(admin.ModelAdmin):
    search_fields = ["data","payment__txnid"]
    list_display = ["username", "payment", "status", "datetime", "package_buy", "books_buy", "feespaid", "sms_package", "mobile_iti_fees"]
    fields = ["data",]
    readonly_fields = ["data",]
    ordering = ['-datetime']
    list_filter = ["status",]
    
@admin.register(WebhookDataLog)
class WebhookDataLogAdmin(admin.ModelAdmin):
    search_fields = ["data","txnid"]
    list_display = ["txnid", "status", "created_at"]

class WireContactsBeneficiaryInline(admin.TabularInline):
    model = WireContactsBeneficiary
    readonly_fields = ['wire_key',"beneficiary_id", "beneficiary_type", "account_number", "ifsc", "upi_handle"]
    extra = 0

@admin.register(WireContacts)
class WireContactsAdmin(admin.ModelAdmin):
    list_display = ["user", "contact_id", "successfully_created"]
    readonly_fields = ['wire_key','contact_id']
    autocomplete_fields = ['user',]
    search_fields = ["user__username", "wirecontactsbeneficiary__upi_handle"]
    inlines = [WireContactsBeneficiaryInline]

@admin.register(WireTransferRecord)
class WireTransferRecordAdmin(admin.ModelAdmin):
    list_display = ["unique_request_number", 'date_time', "beneficiary", 'successfully_executed', 'failure_reason',  'amount']
    list_filter = ['successfully_executed', 'failure_reason',]
    ordering = ['-date_time']
    readonly_fields = ['successfully_executed']
    
@admin.register(CrmExecutive)
class CrmExecutiveAdmin(admin.ModelAdmin):
    list_display = ['unique_id', 'name', 'phone', 'status', 'teacher_username']
    list_editable = ['status']
    readonly_fields = ['teacher']

@admin.register(MeetHourDeveloperAccountPakages)
class MeetHourDeveloperAccountPakagesAdmin(admin.ModelAdmin):
    list_display = ['name', 'id', 'price', 'days']
    
@admin.register(MeetHourDeveloperAccountPayment)
class MeetHourDeveloperAccountPaymentAdmin(admin.ModelAdmin):
    search_fields = ['developer_account__username']
    list_display = ['developer_account', 'datetime', 'amount', 'subcription_upto', 'expire_date']
    ordering = ['-datetime']
    list_editable = ['subcription_upto']

@admin.register(MeetHourPayment)
class MeetHourPaymentAdmin(admin.ModelAdmin):
    list_display = ['institute', 'datetime', 'amount', 'expire_date']
    ordering = ['-datetime']
    autocomplete_fields = ['institute']

@admin.register(InstituteFees)
class InstituteFeesAdmin(admin.ModelAdmin):
    list_display = ['id', 'principle']
    readonly_fields = ['principle', 'institute',]

@admin.register(InstituteMainTeacherFees)
class InstituteMainTeacherFeesAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute']
    readonly_fields = ['institute', 'institutefees',]
    
admin.site.register(CCAVenuePayment)
admin.site.register(CCAVenuePaymentResponseRecord)

class PayuPaymentResponseRecordInline(admin.StackedInline):
    model = PayuPaymentResponseRecord
    readonly_fields = ['payment','status','data']
    extra = 0
    
@admin.register(PayuPayment)
class PayuPaymentAdmin(admin.ModelAdmin):
    search_fields = ["txnid", "udf1", "udf2", "udf3", "udf4",]
    list_display = ["udf1", "txnid", "paymentstatus",  "datetime", "amount", "productinfo", "firstname", "phone", "udf2", "udf3", "udf4", "udf5"]
    readonly_fields = ["udf1", "txnid", "paymentstatus",  "datetime", "amount", "productinfo", "firstname", "email","phone", "udf2", "udf3", "udf4", "udf5"]
    ordering = ['-datetime']
    list_filter = [("datetime", DateTimeRangeFilterBuilder(title="Transactions Date"),), "udf2", "udf3"]
    list_display_links = ["udf1"]
    inlines = [PayuPaymentResponseRecordInline,]

@admin.register(PayuPaymentResponseRecord)
class PayuPaymentResponseRecordAdmin(admin.ModelAdmin):
    search_fields = ["data","payment__txnid"]
    list_display = ["payment", "status", "datetime"]
    fields = ["data",]
    readonly_fields = ["data",]
    ordering = ['-datetime']
    list_filter = ["status",]
    
@admin.register(PayuWebhookDataLog)
class PayuWebhookDataLogAdmin(admin.ModelAdmin):
    search_fields = ["data","txnid"]
    list_display = ["txnid", "status", "created_at"]

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/urls.py
--------------------------------------------------

from django.urls import path
from . import views
from django.http.response import HttpResponse

urlpatterns = [
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/views.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/serialziers.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/urls.py
--------------------------------------------------

from django.urls import include, re_path as url
from django.urls import path
from management.api import views
urlpatterns = [
    path('easebuzz_payment_solution/', views.PaymentGateWayThroughEaseBuzz.as_view(),name='easebuzz_payment_solution'),
    path('easebuzz_payment_transaction_record/', views.PaymentGateWayThroughEaseBuzzTransactions.as_view(),name='easebuzz_payment_transaction_record'),
    path('transaction_response/',views.PaymentResponseHandle.as_view(), name='easebuzz_payment_response'),
    path('transaction_refresh/', views.PaymentRefreshHandle.as_view(),name='easebuzz_payment_refresh'),
    path('refresh_all_transaction_manually/', views.RefreshAllTransactionManually.as_view(),name='refresh_all_transaction_manually'),

    path('easebuzz_payout_solution/', views.PayoutThroughEaseBuzz.as_view(),name='easebuzz_payout_solution'),
    path('my_beneficiary/', views.BodhiaiAllMyBeneficiary.as_view(),name='get_bodhiai_beneficiary'),
    path('get_institute_beneficiary/', views.InstitutesAllMyBeneficiaryAPI.as_view(),name='get_institute_beneficiary'),
    
    url(r'ccavenue_payment_solution/$', views.PaymentGateWayThroughCCAVenue.as_view(),name='PaymentGateWayThroughCCAVenue'),
    url(r'ccavenue_payment_response/$', views.CCAVenueResponseHandle.as_view(),name='CCAVenueResponseHandle'),
    url(r'ccavenue_payment_cancel/$', views.CCAVenueCancelOrder.as_view(),name='CCAVenueCancelOrder'),
    
    path(r'meethour_packages/', views.MeetHourPackage.as_view(),name='MeetHourPackage'),
    path(r'refresh_all_meethour_payments/', views.MeetHourRefreshALLPayments.as_view(),name='MeetHourRefreshALLPayments'),
    path(r'meethour_payment/<str:subscription>/', views.MeetHourPayments.as_view(),name='MeetHourPayments'),

    url(r'get_crm_executive/$', views.GetCrmExecutiveList.as_view(),name='get_crm_executive'),
    url(r'register_crm_executive/$', views.CreateCrmExecutiveAPI.as_view(),name='register_crm_executive'),
    url(r'teacher_list_attendance_datewise/$', views.TeacherGetListAttendanceDateWise.as_view(),name='teacherGetListAttendanceDateWise'),
    url(r'teacher_mark_attendance/$',views.TeacherMarkAttendance.as_view(), name='teacherMarkAttendance'),
    url(r'teacher_get_already_attendance/$',views.TeacherGetAlreadyMarkedAttendance.as_view(), name='getAlreadyAttendance'),
    url(r'teacher_create_fees/$', views.TeacherCreateFees.as_view(),name='teacherCreateFees'),
    url(r'teacher_get_all_fees/$',views.TeacherGetCreatedFees.as_view(), name='teacherGetAllFees'),
    url(r'teacher_get_individual_fees/$', views.IndividualFeesDetail.as_view(),name='teacherIndividualFeesDetails'),
    url(r'teacher_fees_add_payment/$',views.TeacherFeesAddPayment.as_view(), name='teacherFeesAddPayment'),
    url(r'teacher_fees_delete_payment/$',views.TeacherDeleteFeesPayment.as_view(), name='teacherDeleteFeesPayment'),
    url(r'teacher_create_time_table/$',views.TeacherCreateTimeTable.as_view(), name='teacherCreateTimeTable'),
    url(r'teacher_get_time_table/$',views.TeacherGetTimeTable.as_view(), name='teacherGetTimeTable'),
    url(r'student_get_attendance/$', views.StudentGetAttendance.as_view(),name='studentGetAttendance'),
    url(r'teacher_delete_time_table/$',views.TeacherDeleteTimeTable.as_view(), name='teacherDeleteTimeTable'),
    url(r'student_get_timetable/$', views.StudentGetTimeTable.as_view(),name='studentGetTimeTable'),
    url(r'teacher_multiple_timetables/$', views.TeacherTimeTableMultipleCreate.as_view(),name='teacherTimeTableMultipleCreate'),
    url(r'student_fees_info/$', views.StudentGetPaidFeesInformation.as_view(),name='StudentGetPaidFeesInformation'),
    url(r'student_get_reminder/$', views.TeacherSendReminderCourseFees.as_view(),name='TeacherSendReminderCourseFees'),
    url(r'teacher_create_fees_new/$', views.TeacherCreateFeesManagement.as_view(),name='TeacherCreateFeesManagement'),
    url(r'teacher_get_individual_fees_new/$', views.IndividualFeesDetailManagement.as_view(),name='teacherIndividualFeesDetailsManagement'),
    url(r'teacher_get_all_new_fees/$', views.TeacherGetCreatedFeesManagement.as_view(),name='teacherGetallfeesManagement'),
    url(r'teacher_fees_accept_request/$', views.TeacherFeesAddPaymentManagement.as_view(),name='teacherFeesAddPaymentManagement'),
    url(r'student_fees_info_new/$', views.StudentGetPaidFeesInformationManagement.as_view(),name='studentPaidFeesInformationManagement'),
    url(r'teacher_deny_fee_request/$', views.TeacherDenyFeePayRequest.as_view(),name='TeacherDenyFeePayRequest'),
    url(r'student_send_fee_approval_request/$',views.StudentFeePayRequest.as_view(), name='studentFeePayRequest'),
    url(r'student_pay_fee_online/$',views.StudentPayFeesOnline.as_view(), name='sudentPayFeesOnline'),
    url(r'teacher_fees_delete/$',views.TeacherDeleteSpecificFees.as_view(), name='teacherDeleteFees'),
    url(r'teacher_delete_fee/$', views.TeacherDeleteFees.as_view(),name='teacherDeletedFees'),
    url(r'student_get_package_timetable/$',views.StudentGetPackageTimeTable.as_view(), name='studentGetPackageTimeTable'),
    url(r'teacher_create_coursefees/$',views.TeacherCreateCourseFees.as_view(), name='teacherCreateCourseFees'),
    url(r'teacher_update_coursefees/$',views.TeacherCreateCourseFees.as_view(), name='teacherCreateCourseFees'),
    url(r'teacher_get_batchwise_coursefees/$',views.TeacherGetCreatedCourseFees.as_view(), name='teacherGetCreatedCourseFees'),
    url(r'student_get_batchwise_coursefees/$',views.StudentSeeCourseFees.as_view(), name='studentSeeCourseFees'),
    url(r'student_pay_batchwise_coursefees/$',views.StudentPayCourseFees.as_view(), name='StudentPayCourseFees'),
    url(r'get_all_teachers_institute_wise/$',views.GetAllTeachersInstituteWise.as_view(), name='GetAllTeachersInstituteWise'),
    url(r'teacher_get_paid_course_fees/$',views.TeacherGetPaidCourseFees.as_view(), name='teacherGetPaidCourseFees'),
    url(r'teacher_paid_fees_offline_request/$',views.TeacherPaidFeesOfflineRequests.as_view(), name='teacherPaidFeesOfflineRequests'),
    url(r'teacher_accept_offline_fees/$',views.TeacherAcceptOfflineFees.as_view(), name='teacherAcceptOfflineFees'),
    url(r'student_paid_coursefees_paid_history/$',views.StudentFeesSecondTime.as_view(), name='studentFeesSecondTime'),
    url(r'teacher_delete_coursefees/$',views.TeacherDeleteCourseFees.as_view(), name='TeacherDeleteCourseFees'),
    url(r'teacher_delete_student_coursefees/$',views.TeacherDeleteStudentCourseFees.as_view(), name='TeacherDeleteStudentCourseFees'),
    url(r'teacher_pay_student_coursefees/$',views.TeacherPayStudentCourseFees.as_view(), name='TeacherPayStudentCourseFees'),
    url(r'teacher_update_student_coursefees/$',views.TeacherPayStudentCourseFees.as_view(), name='TeacherPayStudentCourseFees'),
    url(r'pay_with_easebuzz/$', views.PayWithEaseBuzz.as_view(),name='PayWithEaseBuzz'),
    url(r'transaction_successfull_temprary/(?P<institute_code>[\w\-]+)/$',
        views.TransactionSuccessfullyTemprary.as_view(), name='TransactionSuccessfullyTemprary'),
    url(r'transaction_failed_temprary/$',views.TransactionFailedTemprary.as_view(), name='TransactionFailedTemprary'),
    url(r'pay_with_easebuzz_gateway/$',views.PayWithEaseBuzzGateway.as_view(), name='PayWithEaseBuzzGateway'),
    url(r'pay_with_easebuzz_on_web/$',views.PayWithEaseBuzzOnWeb.as_view(), name='PayWithEaseBuzzOnWeb'),
    url(r'teacher_get_how_to_do_videos/$',views.TeacherGetHowToDoVideos.as_view(), name='TeacherGetHowToDoVideos'),
    url(r'guest_nearby_institute_list/$', views.GuestGetCourseWiseInstituteNearBy.as_view(),name='GuestGetCourseWiseInstituteNearBy'),
    url(r'guest_get_institutewise_timetables/$',views.GuestGetInstituteWiseTimeTables.as_view(), name='GuestGetInstituteWiseTimeTables'),
    url(r'guest_booking_class/$', views.GuestBookingClass.as_view(),name='GuestBookingClass'),
    url(r'student_get_allbooking/$', views.StudentGetAllBookingClass.as_view(),name='StudentGetAllBookingClass'),
    url(r'teacher_see_timetable_wise_booking/$',views.TeacherSeeTimeTableWiseBooking.as_view(), name='TeacherSeeTimeTableWiseBooking'),
    url(r'teacher_attendence_bookedclass/$',views.TeacherAttendenceBookedClass.as_view(), name='TeacherAttendenceBookedClass'),
    url(r'teacher_cancel_booked_classes/$',views.TeacherCancelBookedClasses.as_view(), name='TeacherCancelBookedClasses'),
    url(r'teacher_disable_enable_offlinebooking/$',views.TeacherDisableEnableOfflineBooking.as_view(), name='TeacherDisableEnableOfflineBooking'),
    url(r'student_withraw_amount/$', views.StudentWithrawAmount.as_view(),name='StudentWithrawAmount'),
    url(r'paytm_accounts_details/$', views.PaytmAccountsDetails.as_view(),name='PaytmAccountsDetails'),
    url(r'teacher_pay_institute_fees/$',views.TeacherPayInstituteFees.as_view(), name='TeacherPayInstituteFees'),
    
    url(r'principle_create_institute_fees/$',views.PrincipleCreateInstituteFees.as_view(), name='PrincipleCreateInstituteFees'),
    url(r'principle_pay_institute_fees/$',views.PrinciplePayInstituteFees.as_view(), name='PrinciplePayInstituteFees'),
    url(r'principle_get_institutefees/$',views.PrincipleGetCreatedInstituteFees.as_view(), name='PrincipleGetCreatedInstituteFees'),
    url(r'principle_paid_history/$',views.PrincipleSecondTime.as_view(), name='PrincipleSecondTime'),
    url(r'principle_delete_institutefees/$',views.PrincipleDeleteInstituteFees.as_view(), name='PrincipleDeleteInstituteFees'),
    
    url(r'teacher_get_institutefees/$',views.InstituteTeacherSeeInstituteFees.as_view(), name='InstituteTeacherSeeInstituteFees'),
    url(r'institute_paid_history/$',views.InstitutePaySecondTime.as_view(), name='InstitutePaySecondTime'),
    
    url(r'create_payment_link/$',views.CreatePaymentLink.as_view(), name='create_payment_link'), # only for testing
    url(r'payment_gateway_using_payu/$',views.PaymentGateWayUsingPayu.as_view(), name='payment_gateWay_using_payu'),
    url(r'payu_transaction_response/$',views.PayuPaymentResponseHandle.as_view(), name='payu_transaction_response'),
    url(r'payu_payment_verify/$',views.PayuPaymentVerify.as_view(), name='payu_payment_verify'),
    url(r'payu_get_transaction_details/$',views.PayuGetTransactionDetails.as_view(), name='payu_get_transaction_details'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/views.py
--------------------------------------------------

import hashlib
from hashlib import sha512
import time
import string
import random
import requests
import re
import json
import traceback
from Paytm_Python_Checksum.paytmchecksum import PaytmChecksum
from .easebuzz.paymentsGateway.easebuzz_payment_gateway import Easebuzz as Payment
from .easebuzz.payout.easebuzz_payout_gateway import Easebuzz as Payout
from .easebuzz.paymentsGateway.response_handlers import *
from .payu.response_handlers import *
from email import message
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import permissions, authentication
from rest_framework.authtoken.models import Token
from basicinformation.models import *
from management.models import *
from basicinformation.api.helperFunctions import *
from membership.models import *
from django.utils import timezone
import datetime
from django.shortcuts import redirect, render
from basicinformation.tasks import *
from django.db.models.query_utils import Q
from django.http import HttpResponse
from .ccavenue.ccavenue_payment_gateway import CCAVenue
from django.utils.timezone import make_aware
from datetime import datetime as dt
from .ccavenue.ccavutil import *


class RefreshAllTransactionManually(APIView):
    def get(self,request):
        try:
            
            
            completed_transaction_status = ['success', 'dropped', 'bounced', 'userCancelled', 'failure', 'False']
            

            
            target_date = date(2024, 8, 8)

            payments = EaseBuzzPayment.objects.filter(
                datetime__date=target_date
            ).exclude(
                txnid__in=EaseBuzzPaymentResponseRecord.objects.filter(status__in=completed_transaction_status).values_list('payment', flat=True)
            )
            
            url = 'https://bodhiai.live/api/management/transaction_refresh/'
            
            with requests.Session() as session:
                session.headers.update({'Content-Type': 'application/json'})
                
                for payment in payments:
                    body = {'txnid': str(payment.txnid)}
                    try:
                        response = session.post(url, json=body)
                        response.raise_for_status()  # Raises an HTTPError for bad responses
                    except requests.RequestException as e:
                        print(f"Failed to update transaction {payment.txnid}: {str(e)}")
            context = {'status':True,'message':'Success'}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        
        return Response(context)

class PaymentGateWayThroughEaseBuzz(APIView):
    def post(self, request):
        user = request.user
        data = request.data
        try:
            if data['transaction_to'] == 'institute_account':
                try:
                    me = Studs(self.request.user)
                except:
                    me = Teach(self.request.user)

                merchant_key = me.profile.institute.easebuzzMerchanKey
                salt = me.profile.institute.easebuzzSaltKey
                sub_merchant_id = me.profile.institute.easebuzzSubMerchanKey

            elif data['transaction_to'] == 'bodhiai_account':
                merchant_key = 'E4PGYN5DSD'
                salt = 'LLQW7Y6VSG'
                sub_merchant_id = 'S501888Z6C'

            else:
                return Response({'status': 'Failed', 'message': 'transaction_to not define properly'})

        except:
            return Response({'status': 'Failed', 'message': "User doesn't Belongs to institute"})

        try:
            firstname = user.username
            email = data['email']
            phone = data['phone']
            productinfo = data['productinfo']
            
            if data.get('udf3') == 'meethour':
                try:
                    pack = MeetHourDeveloperAccountPakages.objects.get(id=data['udf4'])
                    amount = pack.price
                except:
                    amount = None
            else:
                amount = data['amount']
                
            params = {
                'firstname': firstname,
                'email': email,
                'amount': amount,
                'phone': phone,
                'productinfo': productinfo,
                'payment_type': 'easebuzz',
            }
            
            try:
                tcode = data['tcode']
                if tcode and tcode != 'No-Code':
                    try:
                        isCode = Teacher.objects.get(teacher_code=tcode)
                    except:
                        isCode = None  # Handle case where teacher with the provided code doesn't exist
                    
                    if isCode is None:
                        return Response({'status': 'failed', 'message': 'Teacher Code is incorrect'})
                else:
                    tcode = 'No-Code'  # Handle case where tcode is empty in the POST data

            except KeyError:
                tcode = 'No-Code'  # Handle case where tcode is not provided in the POST data
            
            params['tcode'] = tcode
            
            if sub_merchant_id != None:
                params['sub_merchant_id'] = sub_merchant_id

            zipcode = data.get('zipcode')
            if zipcode != None:
                params['zipcode'] = zipcode
                
            address1 = data.get('address1')
            if address1 != None:
                params['address1'] = address1
                
            address2 = data.get('address2')
            if address2 != None:
                params['address2'] = address2
                
            city = data.get('city')
            if city != None:
                params['city'] = city
                
            state = data.get('state')
            if state != None:
                params['state'] = state
                
            country = data.get('country')
            if country != None:
                params['country'] = country

            params['udf1'] = user.username

            udf2 = data.get('udf2')
            if udf2 in ['web', 'app']:
                params['udf2'] = udf2
            else:
                return Response({'status': 'failed', 'message': 'udf2 not define properly'})

            udf3 = data.get('udf3')
            if udf3 in ['package_buy', 'sms_package', 'books_buy', 'feespaid', 'mobileiti_fee', 'meethour','subject_buy','registertion_exam','csa_admitcard','shop_pay']:
                params['udf3'] = udf3
            else:
                return Response({'status': 'failed', 'message': 'udf3 Not Define Properly'})

            udf4 = data.get('udf4')
            if udf4 != None:
                if params['udf3'] == 'package_buy':
                    try:
                        package = Package.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "Package doesn't exist"})
                    
                elif params['udf3'] == 'books_buy':
                    try:
                        book = Book.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "book id doesn't exist"})
                    
                elif params['udf3'] == 'feespaid':
                    try:
                        fees = CourseFees.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "fees id doesn't exist"})
                    
                elif params['udf3'] == 'mobileiti_fee':
                    try:
                        fees = TradeDetails.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "trade details id doesn't exist"})
                    
                elif params['udf3'] == 'meethour':
                    try:
                        MeetHourDeveloperAccountPakages.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "meethour pack id doesn't exist"})
                    
                elif params['udf3'] == 'subject_buy':
                    try:
                        subject = Subject.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "subject id doesn't exist"})
                    
                elif params['udf3'] == 'shop_pay':
                    try:
                        shop = OwnerShopListing.objects.get(id=udf4)
                        params['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "shop id doesn't exist"})
                    
                else:
                    params['udf4'] = udf4

            udf5 = data.get('udf5')
            if udf5 != None:
                if params['udf3'] == 'feespaid':
                    if udf5 in ['emi', 'onetime']:
                        params['udf5'] = udf5
                    else:
                        return Response({'status': 'failed', 'message': "udf5 not define properly"})
                    
                elif params['udf3'] == 'meethour':
                    if udf5 in ['developer', 'enterprise']:
                        params['udf5'] = 'developer'
                    else:
                        return Response({'status': 'failed', 'message': "udf5 not define properly"})
                else:
                    params['udf5'] = udf5

            udf6 = data.get('udf6')
            if True:
                if params['udf3'] == 'meethour' and params['udf5'] == 'developer':
                    try:
                        me = Teach(self.request.user)
                        institute = me.profile.institute
                        developer_account = MeetHourDeveloperAccountClientCredentials.objects.get(institute=institute)
                        params['udf6'] = developer_account.id
                    except Exception as e:
                        return Response({'status': 'failed', 'message': "udf6 not define properly"})
                else:
                    params['udf6'] = udf6

            udf7 = data.get('udf7')
            if udf7 != None:
                if True:
                    params['udf7'] = udf7
                else:
                    params['udf7'] = udf7
                    
            easebuzzObj = Payment(merchant_key, salt, env='prod')
            final_response = easebuzzObj.initiatePaymentAPI(params=params)

            if final_response["status"]:
                return Response(final_response)
            else:
                return Response({"status":'Failed', "message":"Please contact to administration", "data":final_response})

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class PaymentGateWayThroughEaseBuzzTransactions(APIView):
    def post(self, request):
        user = request.user
        data = request.data.dict()
        try:
            txnid = data['txnid']
            record = EaseBuzzPayment.objects.get(txnid=txnid)
            easebuzzObj = Payment(record.merchant_key, record.salt, env='prod')
        except:
            context = {"status": "failed","message": "No record exist for given txnid"}

        try:
            if data['ACTION'] == 'transaction':
                txnid = data['txnid']
                email = data['email']
                amount = data['amount']
                phone = data['phone']
                params = {
                    'txnid': txnid,
                    'email': email,
                    'amount': amount,
                    'phone': phone,
                }
                final_response = easebuzzObj.transactionAPI(params=params)
                return Response(final_response)




            else:
                context = {'status': 'failed', 'message': 'ACTION not Define'}
                return Response(context)
        except:
            pass

class PaymentResponseHandle(APIView):
    def post(self, request):
        try:
            payment_response = request.data.dict()
            txnid = payment_response['txnid']
            
            try:
                whdl = WebhookDataLog.objects.get(txnid = txnid)
                whdl.webhook_data_response = payment_response
                whdl.status = payment_response['status'] 
                whdl.save()
            except WebhookDataLog.DoesNotExist:
                WebhookDataLog.objects.create(webhook_data_response = payment_response,txnid=txnid,status=payment_response['status'])
            
            record = EaseBuzzPaymentResponseRecord.objects.create(
                    payment=EaseBuzzPayment.objects.get(txnid=txnid),
                    status=payment_response['status'],
                    data=json.dumps(payment_response, indent=4))
            
            response = json.loads(record.data)
            if response["status"] == "success":
                if response.get('udf3') == 'package_buy':
                    context = easebuzz_package_buy(response)
                elif response.get('udf3') == 'books_buy':
                    context = easebuzz_books_buy(response)
                elif response.get('udf3') == 'feespaid':
                    context = easebuzz_feespaid(response)
                elif response.get('udf3') == 'sms_package':
                    context = easebuzz_otprecharge(response)
                elif response.get('udf3') == 'mobileiti_fee':
                    context = mobile_iti_feepayment(response)
                elif response.get('udf3') == 'meethour':
                    context = meethour_recharge(response)
                elif response.get('udf3') == 'subject_buy':
                    context = easebuzz_subject_buy(response)
                elif response.get('udf3') == 'registertion_exam':
                    context = easebuzz_registertion_exam(response)
                elif response.get('udf3') == 'csa_admitcard':
                    context = easebuzz_csa_admit_card(response)
                elif response.get('udf3') == 'shop_pay':
                    context = easebuzz_payFor_shop_details(response)
                else:
                    context = {
                        "status": "success",
                        "txnid": response['txnid'],
                        "transaction_status": response['status'],
                        'message': "Transaction successful but save credentials for further reference",
                    }

            else:
                context = {
                    "status": "failed",
                    "txnid": response['txnid'],
                    "transaction_status": response['status'],
                    'message': "Transaction Failed",
                }

            if response['udf2'] == 'app':
                return Response(context)
            else:
                return render(request, 'management/response.html', context)
            
        except Exception as e:
            print(str(e))
            return redirect('https://www.bodhiai.co.in/')

class PaymentRefreshHandle(APIView):
    def post(Self, request):
        try:
            data = request.data
            txnid = data['txnid']
            try:
                easebuzz_payement = EaseBuzzPayment.objects.get(txnid=txnid)
            except:
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": "No Record Found",
                    "message": "No record exist for given txnid"
                }
                if data.get('platform') == 'app':
                    return Response(context)
                
                return render(request, 'management/response.html', context)

            params = {
                'ACTION': 'transaction',
                'txnid': easebuzz_payement.txnid,
                'email': easebuzz_payement.email,
                'amount': easebuzz_payement.amount,
                'phone': easebuzz_payement.phone,
            }

            url = "https://bodhiai.live/api/management/easebuzz_payment_transaction_record/"
            response = requests.post(url, params)
            response = json.loads(response.content)
            status = response['status']

            if not status:
                context = {
                    "status": "No Such Transaction Happen",
                    "txnid": txnid,
                    "transaction_status": status,
                    'message': response['msg'],
                }
                payment_data = {
                    'txnid': str(easebuzz_payement.txnid),
                    'amount': str(easebuzz_payement.amount),
                    'email': easebuzz_payement.email,
                    'productinfo': easebuzz_payement.productinfo,
                    'firstname': easebuzz_payement.firstname,
                    'phone': easebuzz_payement.phone,
                    'udf1': easebuzz_payement.udf1,
                    'udf2': easebuzz_payement.udf2,
                    'udf3': easebuzz_payement.udf3,
                    'udf4': easebuzz_payement.udf4,
                    'udf5': easebuzz_payement.udf5,
                    'udf6': easebuzz_payement.udf6,
                    'udf7': easebuzz_payement.udf7,
                }
                response.update(payment_data)
                record = EaseBuzzPaymentResponseRecord.objects.create(
                    payment=easebuzz_payement,
                    status=response['status'],
                    data=json.dumps(response, indent=4)
                )

                if easebuzz_payement.udf2 == 'app':
                    return Response(context)
                else:
                    return render(request, 'management/response.html', context)

            response = response['msg']
            try:
                record = EaseBuzzPaymentResponseRecord.objects.get(payment=EaseBuzzPayment.objects.get(txnid=txnid))
                record.status = response['status']
                record.data = json.dumps(response, indent=4)
                record.save()

            except Exception as e:
                record = EaseBuzzPaymentResponseRecord \
                    .objects \
                    .create(
                        payment=EaseBuzzPayment.objects.get(txnid=txnid),
                        status=response['status'],
                        data=json.dumps(response, indent=4)
                    )

            response = json.loads(record.data)

            if response["status"] == "success":
                if response.get('udf3') == 'package_buy':
                    context = easebuzz_package_buy(response)
                elif response.get('udf3') == 'books_buy':
                    context = easebuzz_books_buy(response)
                elif response.get('udf3') == 'feespaid':
                    context = easebuzz_feespaid(response)
                elif response.get('udf3') == 'sms_package':
                    context = easebuzz_otprecharge(response)
                elif response.get('udf3') == 'mobileiti_fee':
                    context = mobile_iti_feepayment(response)
                elif response.get('udf3') == 'meethour':
                    context = meethour_recharge(response)
                elif response.get('udf3') == 'subject_buy':
                    context = easebuzz_subject_buy(response)
                elif response.get('udf3') == 'registertion_exam':
                    context = easebuzz_registertion_exam(response)
                elif response.get('udf3') == 'csa_admitcard':
                    context = easebuzz_csa_admit_card(response)
                elif response.get('udf3') == 'shop_pay':
                    context = easebuzz_payFor_shop_details(response)
                else:
                    context = {
                        "status": "success",
                        "txnid": response['txnid'],
                        "transaction_status": response['status'],
                        'message': "transaction successful but save credentials for further reference",
                    }
            else:
                context = {
                    "status": "failed",
                    "txnid": response['txnid'],
                    "transaction_status": response['status'],
                    'message': "transaction failed",
                }

            if response['udf2'] == 'app':
                return Response(context)
            elif response['udf2'] == 'web':
                return render(request, 'management/response.html', context)
            else:
                return render(request, 'management/response.html', context)

        except:
            return redirect('https://www.bodhiai.co.in/')

class PayoutThroughEaseBuzz(APIView):
    permission_classes = [permissions.IsAdminUser,permissions.IsAuthenticated,]
    authentication_classes = [authentication.TokenAuthentication]

    def post(self, request):
        user = request.user
        data = request.data.dict()
        try:
            if data['payout_from'] == 'institute_account':
                try:
                    me = Studs(self.request.user)
                except:
                    me = Teach(self.request.user)
                    
                if me.profile.institute.wire_access:
                    wire_key = me.profile.institute.wire_key
                    salt = me.profile.institute.wire_salt
                    env = 'prod'
                    wire_error_sms_report_number = me.profile.institute.wire_error_sms_report_number
                else:
                    context = {
                        "status": "failed",
                        "message": "Institute does not have access to payout now."
                    }

            elif data['payout_from'] == 'bodhiai_account':
                wire_key = '2496239823'
                salt = 'D58213025E'
                env = 'prod'
                wire_error_sms_report_number = 9306263362

            else:
                return Response({'status': 'Failed', 'message': 'payout_from not define properly'})

        except:
            return Response({'status': 'Failed', 'message': "issue raise from payout_from account"})

        easebuzzObj = Payout(wire_key, salt, env)

        try:
            if data['ACTION'] == 'create_contact':
                name = data['name']
                email = data.get('email', "")
                phone = data.get('phone', "")

                params = {
                    'name': name,
                    'email': email,
                    'phone': phone
                }
                if WireContacts.objects.filter(user=user, wire_key=wire_key).first():
                    wire_contact = WireContacts.objects.filter(
                        user=user, wire_key=wire_key).first()
                    final_response = ({
                        'status': 'failed',
                        'message': 'Already Exist',
                        'data': {
                            'id': f'{wire_contact.id}',
                            'contact_id': f'{wire_contact.contact_id}',
                            'name': f'{wire_contact.name}',
                            'email': f'{wire_contact.email}',
                            'phone': f'{wire_contact.phone}',
                        }
                    })
                else:
                    response = easebuzzObj.createContactAPI(
                        params=params, user=user)
                    if response[0]:
                        wire_contact = response[2]
                        final_response = (
                            {
                                'status': 'success',
                                'message': 'Created New',
                                'data': {
                                    'id': f'{wire_contact.id}',
                                    'contact_id': f'{wire_contact.contact_id}',
                                    'name': f'{wire_contact.name}',
                                    'email': f'{wire_contact.email}',
                                    'phone': f'{wire_contact.phone}',
                                }
                            }
                        )
                    else:
                        final_response = response[1]
                return Response(final_response)

            elif data['ACTION'] == 'add_beneficiary':
                contact = WireContacts.objects.filter(
                    user=user, wire_key=wire_key).first()
                try:
                    contact_id = contact.contact_id
                except:
                    context = {
                        'status': 'failed',
                        'message': 'No contact_id exist'
                    }
                    return Response(context)
                beneficiary_name = data['beneficiary_name']
                beneficiary_type = data['beneficiary_type']
                account_number = data.get('account_number')
                ifsc = data.get('ifsc')
                upi_handle = data.get('upi_handle')

                params = {
                    'contact_id': contact_id,
                    'beneficiary_type': beneficiary_type,
                    'beneficiary_name': beneficiary_name,
                    'account_number': account_number,
                    'ifsc': ifsc,
                    'upi_handle': upi_handle,
                }
                all_beneficiary = WireContactsBeneficiary.objects.filter(
                    contact=contact, wire_key=wire_key)
                exist_beneficiary = None
                for benf in all_beneficiary:
                    if params['upi_handle'] and benf.upi_handle == params['upi_handle']:
                        exist_beneficiary = benf
                    elif params['account_number'] and benf.account_number == params['account_number']:
                        exist_beneficiary = benf

                if exist_beneficiary:
                    final_response = {
                        'beneficiary_id': f'{exist_beneficiary.beneficiary_id}',
                        'beneficiary_type': f'{exist_beneficiary.beneficiary_type}',
                        'beneficiary_name': f'{exist_beneficiary.beneficiary_name}',
                        'bank_name': f'{exist_beneficiary.bank_name}',
                        'account_number': f'{exist_beneficiary.account_number}',
                        'ifsc': f'{exist_beneficiary.ifsc}',
                        'upi_handle': f'{exist_beneficiary.upi_handle}',
                    }
                else:
                    response = easebuzzObj.addBeneficiaryAPI(
                        params=params, contact=contact)
                    if response[0]:
                        new_beneficiary = response[2]
                        final_response = {
                            'beneficiary_id': f'{new_beneficiary.beneficiary_id}',
                            'beneficiary_type': f'{new_beneficiary.beneficiary_type}',
                            'beneficiary_name': f'{new_beneficiary.beneficiary_name}',
                            'bank_name': f'{new_beneficiary.bank_name}',
                            'account_number': f'{new_beneficiary.account_number}',
                            'ifsc': f'{new_beneficiary.ifsc}',
                            'upi_handle': f'{new_beneficiary.upi_handle}',
                        }
                    else:
                        final_response = response[1]
                return Response(final_response)

            elif data['ACTION'] == 'fast_add_beneficiary':
                beneficiary_name = data['beneficiary_name']
                email = data.get('email', "")
                phone = data.get('phone', "")
                user = User.objects.get(id=data['User'])
                params = {
                    'name': beneficiary_name,
                    'email': email,
                    'phone': phone
                }
                if WireContacts.objects.filter(user=user, wire_key=wire_key).first():
                    wire_contact = WireContacts.objects.filter(
                        user=user).first()
                else:
                    response = easebuzzObj.createContactAPI(
                        params=params, user=user)
                    if response[0]:
                        wire_contact = response[2]
                    else:
                        return Response(response[1])

                contact = wire_contact
                contact_id = wire_contact.contact_id
                beneficiary_name = data['beneficiary_name']
                beneficiary_type = data['beneficiary_type']
                account_number = data.get('account_number')
                ifsc = data.get('ifsc')
                upi_handle = data.get('upi_handle')

                params = {
                    'contact_id': contact_id,  # M
                    'beneficiary_type': beneficiary_type,  # M --> bank_account / upi
                    'beneficiary_name': beneficiary_name,  # M
                    'account_number': account_number,  # M1
                    'ifsc': ifsc,  # M1
                    'upi_handle': upi_handle,  # M2
                }

                all_beneficiary = WireContactsBeneficiary.objects.filter(
                    contact=contact, wire_key=wire_key)
                exist_beneficiary = None
                for benf in all_beneficiary:
                    if params['upi_handle'] and benf.upi_handle == params['upi_handle']:
                        exist_beneficiary = benf
                    elif params['account_number'] and benf.account_number == params['account_number']:
                        exist_beneficiary = benf

                if exist_beneficiary:
                    final_response = {
                        'beneficiary_id': f'{exist_beneficiary.beneficiary_id}',
                        'beneficiary_type': f'{exist_beneficiary.beneficiary_type}',
                        'beneficiary_name': f'{exist_beneficiary.beneficiary_name}',
                        'bank_name': f'{exist_beneficiary.bank_name}',
                        'account_number': f'{exist_beneficiary.account_number}',
                        'ifsc': f'{exist_beneficiary.ifsc}',
                        'upi_handle': f'{exist_beneficiary.upi_handle}',
                    }
                else:
                    response = easebuzzObj.addBeneficiaryAPI(
                        params=params, contact=contact)
                    if response[0]:
                        new_beneficiary = response[2]
                        final_response = {
                            'beneficiary_id': f'{new_beneficiary.beneficiary_id}',
                            'beneficiary_type': f'{new_beneficiary.beneficiary_type}',
                            'beneficiary_name': f'{new_beneficiary.beneficiary_name}',
                            'bank_name': f'{new_beneficiary.bank_name}',
                            'account_number': f'{new_beneficiary.account_number}',
                            'ifsc': f'{new_beneficiary.ifsc}',
                            'upi_handle': f'{new_beneficiary.upi_handle}',
                        }
                    else:
                        final_response = response[1]
                return Response(final_response)

            elif data['ACTION'] == 'initiate_transfer':

                beneficiary_code = data['beneficiary_code']
                beneficiary = WireContactsBeneficiary.objects.get(
                    beneficiary_id=beneficiary_code, wire_key=wire_key)

                virtual_account_number = data.get('virtual_account_number')
                payment_mode = data['payment_mode']
                amount = data['amount']
                scheduled_for = data.get('scheduled_for')
                narration = data.get('narration')
                udf1 = data.get('udf1', '')
                udf2 = data.get('udf2', '')
                udf3 = data.get('udf3', '')
                udf4 = data.get('udf4', '')
                udf5 = data.get('udf5', '')

                params = {
                    'beneficiary_code': beneficiary_code,  # M
                    'payment_mode': payment_mode,  # M  Allowed values: IMPS NEFT RTGS UPI
                    'amount': amount,  # M
                    'udf1': udf1,
                    'udf2': udf2,
                    'udf3': udf3,
                    'udf4': udf4,
                    'udf5': udf5,
                }
                if virtual_account_number:
                    params['virtual_account_number'] = virtual_account_number
                if scheduled_for:
                    params['scheduled_for'] = scheduled_for
                if narration:
                    params['narration'] = narration

                final_response = easebuzzObj.initiateTransferAPI(
                    params=params, beneficiary=beneficiary, from_account=data['payout_from'])
                return Response(final_response)

            else:
                context = {'status': 'failed', 'message': 'ACTION not Define'}
                return Response(context)

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class BodhiaiAllMyBeneficiary(APIView):
    def get(self, request):
        data = request.data
        try:
            bodhiai_wire_key = '2496239823'
            beneficiary = WireContactsBeneficiary.objects.filter(
                contact__user=request.user, wire_key=bodhiai_wire_key)
            beneficiary_list = []
            for benf in beneficiary:
                benef_dict = {
                    'beneficiary_id': benf.beneficiary_id,
                    'beneficiary_type_choices': benf.beneficiary_type_choices,
                    'beneficiary_type': benf.beneficiary_type,
                    'beneficiary_name': benf.beneficiary_name,
                    'bank_name': benf.bank_name,
                    'account_number': benf.account_number,
                    'ifsc': benf.ifsc,
                    'upi_handle': benf.upi_handle
                }
                beneficiary_list.append(benef_dict)
            context = {
                'status': "success",
                'message': beneficiary_list
            }
        except Exception as e:
            context = {
                'status': "failed",
                'message': str(e)
            }
        return Response(context)

    def post(self, request):
        user_id = request.user.id
        data = request.data
        name = data['beneficiary_name']
        email = data.get("email")
        phone = data.get("phone")
        beneficiary_type = data.get("beneficiary_type", "upi")
        account_number = data.get("account_number", "")
        ifsc = data.get("ifsc", "")
        upi_handle = data.get("upi_handle", "")
        Header = {
            "Authorization": "token snkedr7toes87thruew95t7orhgun4p59se8he78"
        }

        body = {
            'payout_from': 'bodhiai_account',
            "ACTION": "fast_add_beneficiary",
            "User": user_id,
            "beneficiary_name": name,
            "email": email,
            "phone": phone,
            "account_number": account_number,
            "ifsc": ifsc,
            "beneficiary_type": beneficiary_type,
            "upi_handle": upi_handle
        }

        r = requests.post(
            "https://bodhiai.live/api/management/easebuzz_payout_solution/", body, headers=Header)

        return Response(json.loads(r.content))

class InstitutesAllMyBeneficiaryAPI(APIView):
    def get(self, request):
        try:
            try:
                me = Studs(self.request.user)
            except:
                me = Teach(self.request.user)

            if me.profile.institute.wire_access:
                wire_key = me.profile.institute.wire_key
            else:
                context = {
                    "status": "failed",
                    "message": "institute does not have access to payout at the moment."
                }
                return Response(context)

            beneficiary = WireContactsBeneficiary.objects.filter(
                contact__user=request.user, wire_key=wire_key)
            beneficiary_list = []
            for benf in beneficiary:
                benef_dict = {
                    'beneficiary_id': benf.beneficiary_id,
                    'beneficiary_type_choices': benf.beneficiary_type_choices,
                    'beneficiary_type': benf.beneficiary_type,
                    'beneficiary_name': benf.beneficiary_name,
                    'bank_name': benf.bank_name,
                    'account_number': benf.account_number,
                    'ifsc': benf.ifsc,
                    'upi_handle': benf.upi_handle
                }
                beneficiary_list.append(benef_dict)
            context = {
                'status': "success",
                'message': beneficiary_list
            }
        except Exception as e:
            context = {
                'status': "failed",
                'message': str(e)
            }
        return Response(context)

    def post(self, request):
        user_id = request.user.id
        data = request.data
        name = data['beneficiary_name']
        email = data.get("email")
        phone = data.get("phone")
        beneficiary_type = data.get("beneficiary_type")
        upi_handle = data.get("upi_handle", "")
        account_number = data.get("account_number", "")
        ifsc = data.get("ifsc", "")
        Header = {
            "Authorization": "token snkedr7toes87thruew95t7orhgun4p59se8he78"
        }
        body = {
            'payout_from': 'institute_account',
            "ACTION": "fast_add_beneficiary",
            "User": user_id,
            "beneficiary_name": name,
            "email": email,
            "phone": phone,
            "account_number": account_number,
            "ifsc": ifsc,
            "beneficiary_type": beneficiary_type,
            "upi_handle": upi_handle
        }

        r = requests.post(
            "https://bodhiai.live/api/management/easebuzz_payout_solution/", body, headers=Header)

        return Response(json.loads(r.content))

class MeetHourPackage(APIView):
    def get(self, request):
        package_list = []
        packages = MeetHourDeveloperAccountPakages.objects.all()
        for package in packages:
            temp_dict = {
                "id": package.id,
                "name": package.name,
                "price": package.price,
                "days": package.days
            }
            package_list.append(temp_dict)
        context = {
            "status": True,
            "package_list":package_list
        }
        return Response(context)

class MeetHourRefreshALLPayments(APIView):
    def get(self, request):
        meethour_developer_pack_payment_refresh.delay()
        return Response("success")

class MeetHourPayments(APIView):
    def get(self, request, subscription):
        me = Teach(self.request.user)
        payment_list = []
        if subscription == "enterprise":
            records = MeetHourPayment.objects.filter(institute=me.profile.institute).order_by('-expire_date')
            expire_date = None
            for record in records:
                temp_dict = {
                    "datetime" : record.datetime,
                    "amount": record.amount,
                    "expire_date": record.expire_date
                }
                if expire_date == None:
                    expire_date = record.expire_date
                payment_list.append(temp_dict)
            date = datetime.datetime.now().date()
            active = False
            if date <= expire_date:
                active = True
            context = {
                "status":True,
                "payment_list": payment_list,
                "expire_date": expire_date,
                "active" : active
            }


        elif subscription == "developer":
            try:
                developer_account = MeetHourDeveloperAccountClientCredentials.objects.get(institute=me.profile.institute)
            except Exception as e:
                context = {
                    "status" : False,
                    "message" : f"{e}"
                }
                return Response(context)
            records = MeetHourDeveloperAccountPayment.objects.filter(developer_account=developer_account).order_by('-expire_date')
            expire_date = None
            for record in records:
                temp_dict = {
                    "datetime" : record.datetime,
                    "amount": record.amount,
                    "expire_date": record.expire_date
                }
                if expire_date == None:
                    expire_date = record.expire_date
                payment_list.append(temp_dict)
            date = datetime.datetime.now().date()
            active = False
            if date <= expire_date:
                active = True
            context = {
                "status":True,
                "payment_list": payment_list,
                "expire_date": expire_date,
                "active" : active
            }
            
        else:
            context = {
                "status": False,
                "message": "'subscription' not define properly"
            }
        
        return Response(context)

class GetCrmExecutiveList(APIView):
    def get(self, request):
        queryset = CrmExecutive.objects.filter(status=True)
        crm_list = []
        for crm_executive in queryset:
            dict_ = {
                'name': crm_executive.name,
                'phone': crm_executive.phone
            }
            crm_list.append(dict_)

        return Response({"status": "success", "response": crm_list})
    
class CreateCrmExecutiveAPI(APIView):
    def post(self, request):
        data = request.data
        crm_ex_dict = {}
        crm_ex_dict['unique_id'] = data["unique_id"]
        crm_ex_dict['name'] = data["name"]
        crm_ex_dict['phone'] = data["phone"]
        teacher_username = data["teacher_username"]
        try:
            crm_ex_dict['teacher'] = Teacher.objects.get(teacheruser__username=teacher_username)
            CrmExecutive.objects.create(**crm_ex_dict)

            context = {
                "status":True,
                "message":"Crm Executive register successfully"
            }        
        except Exception as e:
            context = {
                "status":False,
                "message":str(e)
            }

        return Response(context)

    def put(self, request):
        data = request.data

        unique_id = data['unique_id']
        name = data.get("name")
        phone = data.get("phone")
        teacher_username = data.get("teacher_username")
        try:
            crm_ex = CrmExecutive.objects.get(unique_id=unique_id)
            if name:
                crm_ex.name = name
            if phone:
                crm_ex.phone = phone
            if teacher_username:
                teacher = Teacher.objects.get(teacheruser__username=teacher_username)
                crm_ex.teacher = teacher
            
            crm_ex.save()
            
            context = {
                "status":True,
                "message":"Crm Executive record updated successfully"
            }        
        except Exception as e:
            context = {
                "status":False,
                "message":str(e)
            }
        return Response(context)

class TeacherGetListAttendanceDateWise(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        date = data['date']
        attendance_objects =\
            Attendance.objects.filter(teacher=me.profile, date=date)
        if attendance_objects.count() > 0:
            attendance_list = []
            for attendance in attendance_objects:
                student = attendance.student
                studentDetails = StudentDetails.objects.get(student=student)
                photo = studentDetails.photo
                username = student.studentuser.username
                attendance_dict =\
                    {'student_id': student.id, 'name': student.name, 'photo': photo, 'username': username,
                        'date': attendance.date, 'attendance_type': attendance.attendanceType}
                attendance_list.append(attendance_dict)
            context = {'attendance_list': attendance_list}
            return Response(context)
        else:
            attendance_list = []
            context = {'attendance_list': attendance_list}
            return Response(context)

class TeacherMarkAttendance(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        present_type = data['present_type']
        date = data['date']
        
        try:
            attendance_list = json.loads(present_type)
            print('attendance list {} type list {}'.format(attendance_list, type(attendance_list)))
            att_date = []
            for i, p in attendance_list.items():
                if p != None:
                    student = Student.objects.get(id=i)

                    attendance_object = Attendance.objects.filter(student=student, date=date)
                    if len(attendance_object) > 0:
                        attendance_object = attendance_object[0]
                        attendance_object.attendanceType = p
                        attendance_object.save()

                        att_date.append(attendance_object.date)
                    else:
                        attendance_object = Attendance(student=student, teacher=me.profile, attendanceType=p, date=date)
                        attendance_object.save()
                        att_date.append(attendance_object.date)

                    if student.institute.code == 'drushti' and p == 'AB':
                        whatsapp_number = student.studentuser.username.split('@')[0]
                        message = f'{student.name} आज  अनुपस्थित आहे. उपस्थिती आवश्यक. \n{student.name} is absent today. Regular Attendance Required.'
                        number = str(91)+''+str(whatsapp_number)
                        response = send_whatsapp_message(number, message)

            context = {'status': 'Success', 'date': att_date,'attendanceType': attendance_object.attendanceType}
            return Response(context)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class TeacherGetAlreadyMarkedAttendance(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            date1 = data['date']
            students_list = []
            student_list = student_id.strip('][').split(',')
            
            for si in student_list:
                student = Student.objects.get(id=si)
                try:
                    attendance = Attendance.objects.filter(date=date1, student=student)
                    if len(attendance) > 0:
                        attendance = attendance[0]
                        attendance_type = attendance.attendanceType
                        attendance_dict = {'student_id': si, 'attendance_type': attendance_type}
                        students_list.append(attendance_dict)
                    elif len(attendance) == 0:
                        attendance_dict = {'student_id': si, 'attendance_type': 'no','reason': 'not marked'}
                        students_list.append(attendance_dict)

                except Exception as e:
                    attendance_type = None
                    attendance_dict ={'student_id': si, 'attendance_type': attendance_type,'reason': str(e)}
                    students_list.append(attendance_dict)




            context = {'students_list': students_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherCreateFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        total_amount = data['total_amount']
        paid = data['paid']
        date = data['date']
        student = Student.objects.get(id=student_id)
        try:
            fees = Fees.objects.get(student=student)
            context = {'status': 'Failed', 'message': 'Fees Already exists'}
            return Response(context)
        except Exception as e:
            fees = Fees()
            fees.student = student
            fees.teacher = me.profile
            fees.totalFees = total_amount
            fees.save()
            paidFees = PaidFees()
            paidFees.fees = fees
            paidFees.amountPaid = paid
            paidFees.date = date
            paidFees.save()
            context = {'status': 'Success',
                       'message': 'Fees successfully created'}
            return Response(context)

class TeacherCreateFeesManagement(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        total_amount = data['total_amount']
        feeType = data['fee_type']
        paid = data['paid']
        date = data['date']
        endDate = data['endDate']
        startDate = data['startDate']
        student = Student.objects.get(id=student_id)
        try:
            fees = FeesManagement.objects.get(student=student)
            context = {'status': 'Failed', 'message': 'Fees Already exists'}
            return Response(context)
        except Exception as e:
            fees = FeesManagement()
            fees.student = student
            fees.teacher = me.profile
            fees.totalFees = total_amount
            fees.endDate = endDate
            fees.startDate = startDate
            fees.feeType = feeType
            fees.save()
            paidFees = PaidFeesManagement()
            paidFees.fees = fees
            paidFees.amountPaid = paid
            paidFees.date = date
            paidFees.save()
            context = {'status': 'Success',
                       'message': 'Fees successfully created'}
            return Response(context)

class TeacherGetCreatedFeesManagement(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        fees = FeesManagement.objects.filter(teacher=me.profile)
        fees_list = []
        for fee in fees:
            total_paid = 0
            total_due = fee.totalFees
            paid_fees_list = []
            paidFees = PaidFeesManagement.objects.filter(fees=fee)
            for pf in paidFees:
                pf_dict = {'amountPaid': pf.amountPaid, 'date': pf.date}
                total_paid += pf.amountPaid
                total_due -= pf.amountPaid
                paid_fees_list.append(pf_dict)
            student = fee.student
            studentDetails = StudentDetails.objects.get(student=student)
            student_dict =\
                {'id': student.id, 'name': student.name,
                    'photo': studentDetails.photo, 'phone': studentDetails.phone}
            teacher_dict = {'id': me.profile.id, 'name': me.profile.name}
            fee_dict =\
                {'id': fee.id, 'feeType': fee.feeType, 'student': student_dict, 'teacher': teacher_dict, 'duration': fee.duration,
                    'totalFees': fee.totalFees, 'end_date': fee.endDate, 'paid_history': paid_fees_list, 'totalDueFee': total_due}
            fees_list.append(fee_dict)
        context = {'fees': fees_list}
        return Response(context)




class TeacherGetCreatedFees(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        fees_list = []
        if me.profile.mainTeacher:
            teachers =\
                Teacher.objects.filter(
                    institute=me.profile.institute).prefetch_related('teacherfees')
            for teacher in teachers:
                fees =\
                    Fees.objects.filter(teacher=teacher).select_related(
                        'student').prefetch_related('feesPaid')
                for fee in fees:
                    total_paid = 0
                    paid_fees_list = []
                    paidFees = PaidFees.objects.filter(fees=fee)
                    for pf in paidFees:
                        pf_dict = {
                            'amountPaid': pf.amountPaid, 'date': pf.date}
                        total_paid += pf.amountPaid
                        paid_fees_list.append(pf_dict)
                    student = fee.student
                    studentDetails = StudentDetails.objects.get(
                        student=student)
                    student_dict = {'id': student.id, 'name': student.name,
                                    'photo': studentDetails.photo, 'phone': studentDetails.phone}
                    teacher_dict = {'id': me.profile.id,
                                    'name': me.profile.name}
                    fee_dict = {'id': fee.id, 'student': student_dict, 'teacher': teacher_dict, 'duration': fee.duration,
                                'totalFees': fee.totalFees, 'history': paid_fees_list, 'totalPaid': total_paid}
                    fees_list.append(fee_dict)
            context = {'fees': fees_list}
            return Response(context)
        else:
            fees_list = Fees.objects.filter(teacher=me.profile)

        teacher_fee_list = []
        for fee in fees_list:
            total_paid = 0
            paid_fees_list = []
            paidFees = PaidFees.objects.filter(fees=fee)
            for pf in paidFees:
                pf_dict = {'amountPaid': pf.amountPaid, 'date': pf.date}
                total_paid += pf.amountPaid
                paid_fees_list.append(pf_dict)
            student = fee.student
            studentDetails = StudentDetails.objects.get(student=student)
            student_dict = {'id': student.id, 'name': student.name,
                            'photo': studentDetails.photo, 'phone': studentDetails.phone}
            teacher_dict = {'id': me.profile.id, 'name': me.profile.name}
            fee_dict = {'id': fee.id, 'student': student_dict, 'teacher': teacher_dict, 'duration': fee.duration,
                        'totalFees': fee.totalFees, 'history': paid_fees_list, 'totalPaid': total_paid}
            teacher_fee_list.append(fee_dict)
        context = {'fees': teacher_fee_list}
        return Response(context)

class IndividualFeesDetail(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fee_id = data['fee_id']
        fees = Fees.objects.get(id=fee_id)
        paid_fees = PaidFees.objects.filter(fees=fees)
        paid_fees_list = []
        total_paid = 0
        for pf in paid_fees:
            pf_dict = {'date': pf.date, 'amountPaid': pf.amountPaid}
            total_paid += pf.amountPaid
            paid_fees_list.append(pf_dict)
        student = fees.student
        studentDetails = StudentDetails.objects.get(student=student)
        student_dict =\
            {'id': student.id, 'name': student.name,
                'photo': studentDetails.photo, 'phone': studentDetails.phone}
        teacher_dict = {'id': me.profile.id, 'name': me.profile.name}
        fees_dict =\
            {'id': fees.id, 'student': student_dict, 'teacher': teacher_dict, 'duration': fees.duration,
                'history': paid_fees_list, 'totalFees': fees.totalFees, 'totalPaid': total_paid}
        context = {'fees_details': fees_dict}
        return Response(context)

class IndividualFeesDetailManagement(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fee_id = data['fee_id']
        fees = FeesManagement.objects.get(id=fee_id)
        paid_fees = PaidFeesManagement.objects.filter(fees=fees)
        paid_fees_list = []
        total_paid = 0
        for pf in paid_fees:
            pf_dict = {'date': pf.date, 'amountPaid': pf.amountPaid}
            total_paid += pf.amountPaid
            paid_fees_list.append(pf_dict)
        student = fees.student
        studentDetails = StudentDetails.objects.get(student=student)
        student_dict =\
            {'id': student.id, 'name': student.name,
                'photo': studentDetails.photo, 'phone': studentDetails.phone}
        teacher_dict = {'id': me.profile.id, 'name': me.profile.name}
        fees_dict =\
            {'id': fees.id, 'feeType': fees.feeType, 'student': student_dict, 'teacher': teacher_dict,
                'duration': fees.duration, 'history': paid_fees_list, 'totalFees': fees.totalFees, 'totalPaid': total_paid}
        context = {'fees_details': fees_dict}
        return Response(context)

class TeacherFeesAddPayment(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            feesId = data['fees_id']
            amount = data['amount']
            date = data['date']
            fees = Fees.objects.get(id=feesId)
            payment_fees = PaidFees()
            payment_fees.amountPaid = amount
            payment_fees.date = date
            payment_fees.fees = fees
            payment_fees.save()
            context = {'status': 'Success',
                       'message': 'Payment added successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherFeesAddPaymentManagement(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            fee_id = data['fee_id']
            amount = data['amount']
            date = data['date']
            paymentMode = data['paymentMode']
            feeDetail = data['feeDetail']

            fee = FeesManagement.objects.get(id=fee_id)
            fee_request = PaidFeesManagement()
            fee_request.fees = fee
            fee_request.amountPaid = amount
            fee_request.date = date
            fee_request.paymentMode = paymentMode
            fee_request.active = False
            fee_request.save()
            context = {'status': 'Success', 'message': 'fee payment deposite'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteFeesPayment(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        payment_fees_id = data['payment_fees_id']
        try:
            paid_fees = PaidFees.objects.get(id=payment_fees_id)
            paid_fees.delete()
            context = {'status': 'Success',
                       'message': 'Fees successfully deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteSpecificFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fee_id = data['fee_id']
        try:
            fees = FeesManagement.objects.get(id=fee_id)
            fees.delete()
            context = {'status': 'Success',
                       'message': 'Fees successfully deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fee_id = data['fee_id']
        try:
            fees = Fees.objects.get(id=fee_id)
            fees.delete()
            context = {'status': 'Success',
                       'message': 'Fees successfully deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateTimeTable(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        teacher_id = data['teacher']
        subject_id = data['subject_id']
        chapter_id = data['chapter_id']
        description = data['description']
        batches_ids = data['batches_ids']
        startTime = data['startTime']
        endTime = data['endTime']
        timeStart = datetime.datetime.strptime(startTime, "%Y-%m-%d %H:%M")
        timeEnd = datetime.datetime.strptime(endTime, "%Y-%m-%d %H:%M")
        teacherObject = Teacher.objects.get(id=teacher_id)
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
        except Exception as e:
            package = None
        try:
            batch_list = batches_ids.strip('][').split(',')
            timeTable = TimeTable()
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            timeTable.subject = subject
            timeTable.teacher = teacherObject
            timeTable.chapter = chapter
            timeTable.description = description
            timeTable.startTime = timeStart
            timeTable.endTime = timeEnd
            if package != None:
                timeTable.package = package
            timeTable.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title":'New Notification', "body": 'New time table created for you !'}
            
            if len(batch_list) > 0:
                for bat in batch_list:
                    timeTable.batches.add(bat)
                    timeTable.save()
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=bat.id)
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=bat.id)
             
            context = {'status': 'Success', 'message': 'Time Table Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)


class TeacherGetTimeTable(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        data = request.data
        time_table_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                timeTable = TimeTable.objects.filter(teacher=teacher).order_by('-id')
                for tt in timeTable:
                    subject = {'id': tt.subject.id, 'name': tt.subject.name}
                    chapter = {'id': tt.chapter.id,
                               'name': tt.chapter.name, 'code': tt.chapter.code}
                    totalBooking = BookOfflineClass.objects.filter(
                        timetable=tt).count()

                    batch_list = tt.batches.all()
                    all_batches = []
                    for bat in batch_list:
                        batch_dict = {'id': bat.id, 'name': bat.name}
                        all_batches.append(batch_dict)
                    tt_dict = {'created_by': request.user.username, 'teacher_name': tt.teacher.name, 'id': tt.id, 'subject': subject, 'chapter': chapter, 'description': tt.description,
                               'startTime': tt.startTime, 'endTime': tt.endTime, 'batch_list': all_batches, 'totalBooking': totalBooking, 'enableOfflineBooking': tt.enableOfflineBooking}
                    time_table_list.append(tt_dict)
            context = {'timeTable': time_table_list}
            return Response(context)
        else:
            timeTable = TimeTable.objects.filter(
                teacher=me.profile).order_by('-id')

        teacher_time_table = []
        for tt in timeTable:
            subject = {'id': tt.subject.id, 'name': tt.subject.name}
            chapter = {'id': tt.chapter.id,
                       'name': tt.chapter.name, 'code': tt.chapter.code}

            totalBooking = BookOfflineClass.objects.filter(
                timetable=tt).count()

            batch_list = tt.batches.all()
            all_batches = []
            for bat in batch_list:
                batch_dict = {'id': bat.id, 'name': bat.name}
                all_batches.append(batch_dict)
                tt_dict = {'created_by': request.user.username, 'teacher_name': tt.teacher.name, 'id': tt.id, 'subject': subject,
                           'chapter': chapter, 'description': tt.description, 'startTime': tt.startTime, 'endTime': tt.endTime, 'batch_list': all_batches}
            tt_dict = {'created_by': request.user.username, 'teacher_name': tt.teacher.name, 'id': tt.id, 'subject': subject, 'chapter': chapter,
                       'description': tt.description, 'startTime': tt.startTime, 'endTime': tt.endTime, 'totalBooking': totalBooking, 'enableOfflineBooking': tt.enableOfflineBooking}
            teacher_time_table.append(tt_dict)
        context = {'timeTable': teacher_time_table}
        return Response(context)

class StudentGetAttendance(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        attendances = Attendance.objects.filter(student=me.profile)
        attendance_list = []
        present = 0
        absent = 0
        for attendance in attendances:
            if attendance.attendanceType == 'P':
                present += 1
            elif attendance.attendanceType == 'AB':
                absent += 1
            att_dict =\
                {'id': attendance.id, 'date': attendance.date,
                    'type': attendance.attendanceType}
            attendance_list.append(att_dict)
        try:
            present_percent = (present / len(attendances)) * 100
            absent_percent = (absent / len(attendances)) * 100
        except:
            present_percent = 0
            absent_percent = 0
        context =\
            {'present': present, 'absent': absent, 'present_percentage': present_percent,
                'absent_percentage': absent_percent, 'details': attendance_list}
        return Response(context)

class TeacherDeleteTimeTable(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        timeTable_id = data['timetable_id']
        try:
            timeTable = TimeTable.objects.get(id=timeTable_id)
            timeTable.delete()
            context = {'status': 'Success', 'message': 'Time table deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetTimeTable(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        timetable_list = []
        for batch in batches:
            timeTable = TimeTable.objects.select_related('teacher','subject','chapter').prefetch_related('batches').filter(batches=batch)
            for tt in timeTable:
                if tt in timetable_list:
                    pass
                else:
                    timetable_list.append(tt)
        final_timetable_list = []
        for tt in timetable_list:
            b_list = []
            for i in tt.batches.all():
                b_dict = {'id': i.id, 'batch': i.name}
                b_list.append(b_dict)
            t_dict =\
                {'id': tt.id, 'startTime': tt.startTime, 'endTime': tt.endTime, 'description': tt.description,
                    'subject': tt.subject.name, 'chapter': tt.chapter.name, 'teacher': tt.teacher.name, 'batches': b_list}
            final_timetable_list.append(t_dict)
        context = {'timetables': final_timetable_list}
        return Response(context)

class StudentGetPackageTimeTable(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        timetable_list = []
        timeTable = TimeTable.objects.filter(package=package)
        for tt in timeTable:
            if tt in timetable_list:
                pass
            else:
                timetable_list.append(tt)
        final_timetable_list = []
        for tt in timetable_list:
            t_dict =\
                {'id': tt.id, 'startTime': tt.startTime, 'endTime': tt.endTime, 'description': tt.description,
                    'subject': tt.subject.name, 'chapter': tt.chapter.name, 'thumbnail': tt.thumbnail}
            final_timetable_list.append(t_dict)
        context = {'timetables': final_timetable_list}
        return Response(context)

class StudentGetPaidFeesInformation(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            fees = Fees.objects.get(student=me.profile)
        except Fees.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Fees not created for student'}
            return Response(context)
        teacher = fees.teacher
        teacher_dict = {'id': teacher.id, 'name': teacher.name}
        fees_info =\
            {'id': fees.id, 'teacher': teacher_dict,
                'totalFees': fees.totalFees, 'duration': fees.duration}
        paid_fees = PaidFees.objects.filter(fees=fees)
        paid_fees_list = []
        for pf in paid_fees:
            pf_dict = {'id': pf.id,
                       'amountPaid': pf.amountPaid, 'date': pf.date}
            paid_fees_list.append(pf_dict)
        context = {'fees': fees_info, 'paid': paid_fees_list}
        return Response(context)

class StudentGetPaidFeesInformationManagement(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            fees = FeesManagement.objects.get(student=me.profile)
        except Fees.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Fees not created for student'}
            return Response(context)
        teacher = fees.teacher
        teacher_dict = {'id': teacher.id, 'name': teacher.name}
        fees_info =\
            {'id': fees.id, 'teacher': teacher_dict,
                'totalFees': fees.totalFees, 'duration': fees.duration}
        paid_fees = PaidFeesManagement.objects.filter(fees=fees)
        paid_fees_list = []
        for pf in paid_fees:
            pf_dict = {'id': pf.id,
                       'amountPaid': pf.amountPaid, 'date': pf.date}
            paid_fees_list.append(pf_dict)
        context = {'fees': fees_info, 'paid': paid_fees_list}
        return Response(context)

class TeacherDenyFeePayRequest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            fee_id = data['fee_id']
            fee_request = PaidFeesManagement.objects.get(id=fee_id)
            fee_request.active = False
            fee_request.save()
            context = {'status': 'Success', 'message': 'Fee Request denied'}
        except Exception as e:
            print(str(e))
        return Response(context)

class StudentFeePayRequest(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        try:
            fee_id = data['fee_id']
            fee = FeesManagement.objects.get(id=fee_id)
            amount = data['amount']
            date = data['date']
            detail = data['detail']
            paymentMode = data['paymentMode']
            try:
                previous_request = PaidFeesManagement.objects.get(
                    student=me.profile)
                if previous_request.active == False:
                    previous_request.student = me.profile
                    previous_request.fees = fee
                    previous_request.amountPaid = amount
                    previous_request.date = date
                    previous_request.detail = detail
                    previous_request.active = True
                    previous_request.save()
                    context = {'status': 'Success',
                               'message': 'Request sent to teacher'}
                else:
                    context = {
                        'status': 'Failed', 'message': 'You have already request for teacher approval'}
                return Response(context)
            except:
                pass
            fee_request = PaidFeesManagement()
            fee = FeesManagement.objects.get(id=fee_id)
            fee_request.student = me.profile
            fee_request.fees = fee
            fee_request.amountPaid = amount
            fee_request.date = date
            fee_request.paymentMode = paymentMode
            fee_request.detail = detail
            fee_request.save()
            context = {'status': 'Success',
                       'message': 'Request sent to teacher'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentPayFeesOnline(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        fee_id = data['fee_id']
        amount = data['amount']
        fee = FeesManagement.objects.get(id=fee_id)
        paid_detail = PaidFeesManagement.objects.get(fees=fee)
        paid_detail.amountPaid = amount
        paid_detail.date = timezone.now().date()
        paid_detail.save()
        context = {'status': 'Success', 'message': 'Fee successfully Deposite'}
        return Response(context)

class TeacherCreateCourseFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        totalAmount = data['totalAmount']
        duration = data['duration']
        emiOption = data['emiOption']
        numberEmi = data['numberEmi']
        try:
            batch = Batch.objects.get(id=batch_id)
            fees = CourseFees.objects.get(batch=batch)
            context = {'status': 'Failed', 'message': 'Fees already exists for this batch'}
        except CourseFees.DoesNotExist:
            fees = CourseFees()
            fees.batch = batch
            fees.teacher = me.profile
            fees.totalAmount = totalAmount
            fees.duration = int(duration)
            if emiOption == 'true':
                fees.emi = True
                fees.numberOfEmi = int(numberEmi)
                fees.costPerEmi = int(totalAmount) / int(numberEmi)
            else:
                fees.emi = False
            fees.save()

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW TEST","body": f'A new course fees of {batch.name} created for you'}
            
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=batch.id)
            else:
                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=batch.id)
            
            context = {'status': 'Success', 'message': 'Fees Created'}
        return Response(context)

class TeacherGetCreatedCourseFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        batch = Batch.objects.get(id=batch_id)
        try:
            fees = CourseFees.objects.get(batch=batch, teacher=me.profile)
            fees_dict =\
                {'id': fees.id, 'amount': fees.totalAmount, 'teacher': fees.teacher.name, 'duration': fees.duration,
                    'emiOption': fees.emi, 'numberOfEmi': fees.numberOfEmi, 'costPerEmi': fees.costPerEmi}
            context = {'status': 'Success', 'fees': fees_dict}
        except CourseFees.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Fees for this batch does not exist'}
        return Response(context)

class StudentSeeCourseFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        batch = Batch.objects.get(id=batch_id)
        teacher =\
            Teacher.objects.get(
                institute=me.profile.institute, mainTeacher=True)
        try:
            fees = CourseFees.objects.get(batch=batch, teacher=teacher)
            fees_dict =\
                {'id': fees.id, 'amount': fees.totalAmount, 'teacher': fees.teacher.name, 'duration': fees.duration,
                    'emiOption': fees.emi, 'numberOfEmi': fees.numberOfEmi, 'costPerEmi': fees.costPerEmi}
            context = {'fees': fees_dict}
        except CourseFees.DoesNotExist:
            context = {'fees': None}
        return Response(context)

class StudentPayCourseFees(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        amountPaid = data['amountPaid']
        modePayment = data['modePayment']
        typePayment = data['typePayment']
        fees = CourseFees.objects.get(id=fees_id)
        previousPaid = StudentCourseFees.objects.filter(coursefees=fees, student=me.profile)
        if len(previousPaid) > 0:
            totalPaid = 0
            remaining = fees.totalAmount
            for pp in previousPaid:
                if pp.accepted:
                    totalPaid = totalPaid + pp.amountPaid
            remaining = remaining - totalPaid
        else:
            totalPaid = 0
            remaining = fees.totalAmount
            
        if remaining > 0:
            paidFees = StudentCourseFees()
            paidFees.coursefees = fees
            paidFees.amountPaid = float(amountPaid)
            paidFees.datePaid = timezone.now()
            paidFees.amountRemaining = float(remaining) - float(amountPaid)
            paidFees.modePayment = modePayment
            paidFees.typePayment = typePayment
            if fees.emi:
                today = timezone.now().date()
                durationMonth = fees.duration / fees.numberOfEmi
                durationDays = 30 * durationMonth
                toAdd = timezone.timedelta(durationDays)
                nextPaymentDate = today + toAdd
                paidFees.nextPaymentDate = nextPaymentDate
            if modePayment == 'online':
                paidFees.accepted = 'true'
            paidFees.student = me.profile

            totalfee = fees.totalAmount
            totalPaid = totalPaid + float(amountPaid)
            if totalPaid == totalfee:
                paidFees.nextDuePayment = False
            else:
                paidFees.nextDuePayment = True
            paidFees.save()
            
            try:
                payment = EaseBuzzPaymentResponseRecord.objects.get(payment=data['txnid'])
                payment.feespaid = paidFees
                payment.save()
            except:
                pass
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None

            if modePayment == 'online':
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    deviceId = fees.teacher.firebaseToken
                    message = f'{me.profile.name} has deposited the {fees.batch.name} fees, Thankyou'
                    notification = {'title':'New Notification', 'body': message}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                        
                except Exception as e:
                    context = {'status': 'Failed', 'error': str(e)}
                    return Response(context)

            context = {'status': 'Success', 'message': paidFees.accepted}
        else:
            context = {'status': 'Already Paid all fees'}
        return Response(context)

class GetAllTeachersInstituteWise(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        teacher_list = []
        for teacher in teachers:
            teacher_dict = {'id': teacher.id,
                            'name': teacher.name + " " + teacher.institute.name}
            teacher_list.append(teacher_dict)
        context = {'allTeachers': teacher_list}
        return Response(context)

class TeacherGetPaidCourseFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        course_fees_id = data['course_fees_id']
        try:
            course_fees = CourseFees.objects.get(id=course_fees_id)
            studentpaidfees = StudentCourseFees.objects.filter(coursefees=course_fees, accepted='true')
            paid_fees_list = []
            for spf in studentpaidfees:
                student = spf.student
                student_dict = {'id': student.id, 'name': student.name}
                spf_dict =\
                    {'id': spf.id, 'student': student_dict, 'amountPaid': spf.amountPaid, 'datePaid': spf.datePaid, 'amountRemaining': spf.amountRemaining,
                        'nextDuePayment': spf.nextDuePayment, 'typePayment': spf.typePayment, 'modePayment': spf.modePayment}
                paid_fees_list.append(spf_dict)
            context = {'paid_fees': paid_fees_list}
        except CourseFees.DoesNotExist:
            context = {'status': 'failed', 'message': 'CourseFees not found'}
        return Response(context)

class TeacherSendReminderCourseFees(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_fees = CourseFees.objects.filter(teacher=me.profile)
            for courseFee in course_fees:
                studentpaidfees = StudentCourseFees.objects.filter(coursefees=courseFee)
                new_timezone = pytz.timezone('Asia/Kolkata')
                date_now = datetime.datetime.now(new_timezone).date()             
                
                for spf in studentpaidfees:
                    if spf.nextDuePayment ==True and spf.nextPaymentDate !=None:
                        next_payment_date = spf.nextPaymentDate
                        days_until_payment = (next_payment_date - date_now).days

                        try:
                            json_file = me.profile.institute.json_file
                        except Exception as e:
                            json_file = None
                        
                        if days_until_payment == 7:
                            try:
                                data = {"id":str(me.profile.id),"type": "fees","name":"","link":""}
                                serverKey = me.profile.institute.serverKey
                                deviceId = spf.student.firebaseToken
                                text = f" Course Emi next payment {next_payment_date}"
                                to_text = 'Message from {}: {}'.format(me.profile.name, text)
                                notification = {'title':'New Notification', 'body': to_text}
                                if json_file == None:
                                    send_notification_individual_second(serverKey=serverKey, notification=notification, deviceId=deviceId, data=data)
                                else:
                                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId, data=data)
                                    
                            except Exception as e:
                                print(str(e))

                
            context = {'status': True,'message':"Reminder send successfully"}
        except CourseFees.DoesNotExist:
            context = {'status': 'failed', 'message': 'CourseFees not found'}
        return Response(context)

class TeacherPaidFeesOfflineRequests(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        course_fees_id = data['course_fees_id']
        course_fees = CourseFees.objects.get(id=course_fees_id)
        studentpaidfees =\
            StudentCourseFees.objects.filter(
                coursefees=course_fees, accepted='in-review')
        review_fees_list = []
        for spf in studentpaidfees:
            student = spf.student
            student_dict = {'id': student.id, 'name': student.name}
            spf_dict =\
                {'id': spf.id, 'student': student_dict, 'amountPaid': spf.amountPaid, 'datePaid': spf.datePaid, 'amountRemaining': spf.amountRemaining,
                    'nextDuePayment': spf.nextDuePayment, 'typePayment': spf.typePayment, 'modePayment': spf.modePayment}
            review_fees_list.append(spf_dict)
        context = {'review_fees': review_fees_list}
        return Response(context)

class TeacherAcceptOfflineFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_fees_id = data['student_fees_id']
        try:
            studentpaidfees =\
                StudentCourseFees.objects.get(id=student_fees_id)
            accepted = data['accepted']
            studentpaidfees.accepted = accepted
            if accepted == 'false':
                studentpaidfees.nextDuePayment = True
            studentpaidfees.save()
            studentfees = StudentCourseFees.objects.filter(
                coursefees=studentpaidfees.coursefees, student=studentpaidfees.student, accepted='true')
            totalAmountPaid = 0
            for sf in studentfees:
                totalAmountPaid += sf.amountPaid
            remainingAmount = studentpaidfees.coursefees.totalAmount - totalAmountPaid
            studentpaidfees.amountRemaining = remainingAmount
            studentpaidfees.save()

            context = {'status': 'Success', 'accepted': accepted}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentFeesSecondTime(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        fees = CourseFees.objects.get(id=fees_id)
        previousPaid = StudentCourseFees.objects.filter(
            coursefees=fees, student=me.profile)
        paid_list = []
        for pp in previousPaid:
            pp_dict =\
                {'id': pp.id, 'amountPaid': pp.amountPaid, 'nextDuePayment': pp.nextDuePayment, 'typePayment': pp.typePayment, 'modePayment': pp.modePayment,
                    'accepted': pp.accepted, 'nextPaymentDate': pp.nextPaymentDate, 'datePaid': pp.datePaid, 'amountRemaining': pp.amountRemaining}
            paid_list.append(pp_dict)
        context = {'paidFees': paid_list}
        return Response(context)

class TeacherDeleteCourseFees(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        try:
            CourseFees.objects.get(id=fees_id).delete()
            context = {'status': 'Success', 'message': 'successfully delete'}
        except CourseFees.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Fees not found'}
        return Response(context)

class TeacherDeleteStudentCourseFees(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        record_id = data['record_id']
        try:
            StudentCourseFees.objects.get(id=record_id).delete()
            context = {'status': 'Success', 'message': 'successfully delete'}
        except StudentCourseFees.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Student Fees not found'}
        return Response(context)

class TeacherPayStudentCourseFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        amountPaid = data['amountPaid']
        modePayment = data['modePayment']
        typePayment = data['typePayment']
        student_id = data['student_id']
        fees = CourseFees.objects.get(id=fees_id)
        student = Student.objects.get(id=student_id)
        previousPaid = StudentCourseFees.objects.filter(coursefees=fees, student=student)
        if len(previousPaid) > 0:
            totalPaid = 0
            remaining = fees.totalAmount
            for pp in previousPaid:
                if pp.accepted:
                    totalPaid = totalPaid + pp.amountPaid
            remaining = remaining - totalPaid
        else:
            totalPaid = 0
            remaining = fees.totalAmount

        if remaining > 0:
            if remaining >= int(amountPaid):
                paidFees = StudentCourseFees()
                paidFees.coursefees = fees
                paidFees.amountPaid = float(amountPaid)
                paidFees.datePaid = timezone.now()
                paidFees.amountRemaining = float(remaining) - float(amountPaid)
                paidFees.modePayment = modePayment
                paidFees.typePayment = typePayment
                if fees.emi:
                    today = timezone.now().date()
                    durationMonth = fees.duration / fees.numberOfEmi
                    durationDays = 30 * durationMonth
                    toAdd = timezone.timedelta(durationDays)
                    nextPaymentDate = today + toAdd
                    paidFees.nextPaymentDate = nextPaymentDate

                paidFees.accepted = 'true'
                paidFees.student = student
                totalfee = fees.totalAmount
                totalPaid = totalPaid + float(amountPaid)
                if totalPaid == totalfee:
                    paidFees.nextDuePayment = False
                else:
                    paidFees.nextDuePayment = True

                paidFees.save()

                context = {'status': 'Success', 'message': paidFees.accepted}
            else:
                context = {'status': 'Failed', 'message': 'Please Enter Correct Amount'}
        else:
            context = {'status': 'Failed', 'message': 'Already Paid all fees'}

        return Response(context)

def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""

        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()

def _pay(params_array, salt_key, url):
    hash_key = None
    hash_key = _getHashKey(params_array, salt_key)

    params_array['hash'] = hash_key

    request_result = requests.post(url + 'payment/initiateLink', params_array)

    result = json.loads(request_result.content)

    if result['status'] == 1:
        accesskey = result['data']
    else:
        accesskey = ""

    if not accesskey:
        return result
    else:
        return {
            'status': 1,
            'data': accesskey
        }

def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testpay.easebuzz.in/"
    elif env == 'prod':
        url_link = 'https://pay.easebuzz.in/'
    else:
        url_link = "https://testpay.easebuzz.in/"

    return url_link

def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True

def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['txnid']:
        empty_value = 'Transaction ID'

    if not params['amount']:
        empty_value = 'Amount'

    if not params['firstname']:
        empty_value = 'First Name'

    if not params['email']:
        empty_value = 'Email'

    if not params['phone']:
        empty_value = 'Phone'

    if not params['productinfo']:
        empty_value = 'Product Infomation'

    if not params['surl']:
        empty_value = 'Success URL'

    if not params['furl']:
        empty_value = 'Failure URL'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True

def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['amount'], float)):
        type_value = "The amount should float up to two or one decimal."

    if not (isinstance(params['productinfo'], str)):
        type_value = "Product Information should be string"

    if not (isinstance(params['firstname'], str)):
        type_value = "First Name should be string"

    if not (isinstance(params['phone'], str)):
        type_value = "Phone Number should be number"

    if not (isinstance(params['email'], str)):
        type_value = "Email should be string"

    if not (isinstance(params['surl'], str)):
        type_value = "Success URL should be string"

    if not (isinstance(params['furl'], str)):
        type_value = "Failure URL should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True

def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary

def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True

def _payment(params, merchant_key, salt, env):

    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    try:
        params._mutable = True
    except:
        pass
    params['key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)
    postedArray = params

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    pay_result = _pay(postedArray, salt, URL)

    return pay_result

def _paymentResponse(params_array):
    if params_array['status'] == 1:
        return {
            "status": 1,
            "data": params_array['data'].encode('utf-8')
        }
    else:
        return params_array

class PayWithEaseBuzz(APIView):
    def post(self, request):
        data = request.data
        txnid = data['txnid']
        firstname = data['firstname']
        email = data['email']
        amount = data['amount']
        phone = data['phone']
        productinfo = data['productinfo']
        zipcode = data['zipcode']
        address1 = data['address1']
        address2 = data['address2']
        city = data['city']
        state = data['state']
        country = data['country']

        params = {
            'txnid': txnid,
            'firstname': firstname,
            'email': email,
            'amount': amount,
            'phone': phone,
            'productinfo': productinfo,
            'surl': 'https://bodhiai.live/api/management/transaction_successfull_temprary/',
            'furl': 'https://bodhiai.live/api/management/transaction_failed_temprary/',
            'status': 1,
            'zipcode': zipcode,
            'address1': address1,
            'address2': address2,
            'city': city,
            'state': state,
            'country': country
        }

        env = 'prod'
        merchant_key = 'BK6P8XUA68'
        salt = '0F2IJPUE7K'
        if data.get('env'):
            env = 'test'
        try:
            result = _payment(params, merchant_key, salt, env)
            result = _paymentResponse(result)
            return Response(result)

        except Exception as e:
            traceback.print_exc()
            print("#######Error on payment:initiate_payment#######")
            return ({"status": False, "reason": 'Exception occured'})

class PayWithEaseBuzzGateway(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
        except:
            me = Teach(self.request.user)

        data = request.data
        txnid = data['txnid'].strip()
        firstname = data['firstname'].strip()
        email = data['email'].strip()
        amount = data['amount']
        phone = data['phone']
        productinfo = data['productinfo'].strip()
        zipcode = data['zipcode']
        address1 = data['address1']
        address2 = data['address2']
        city = data['city']
        state = data['state']
        country = data['country']
        try:
            paymentMode = data['paymentMode']
        except:
            paymentMode = None

        params = {
            'txnid': txnid,
            'firstname': firstname,
            'email': email,
            'amount': amount,
            'phone': phone,
            'productinfo': productinfo,
            'surl': 'https://bodhiai.live/api/management/transaction_successfull_temprary/',
            'furl': 'https://bodhiai.live/api/management/transaction_failed_temprary/',
            'status': 1,
            'zipcode': zipcode,
            'address1': address1,
            'address2': address2,
            'city': city,
            'state': state,
            'country': country
        }

        if paymentMode != 'otp_recharge':

            if me.profile.institute.easebuzzMerchanKey and me.profile.institute.easebuzzSaltKey and me.profile.institute.easebuzzSubMerchanKey:

                merchant_key = me.profile.institute.easebuzzMerchanKey
                salt = me.profile.institute.easebuzzSaltKey
                sub_merchant_id = me.profile.institute.easebuzzSubMerchanKey

                params['sub_merchant_id'] = sub_merchant_id

            else:
                merchant_key = me.profile.institute.easebuzzMerchanKey
                salt = me.profile.institute.easebuzzSaltKey

        else:
            merchant_key = 'E4PGYN5DSD'
            salt = 'LLQW7Y6VSG'
            sub_merchant_id = 'S501888Z6C'

            params['sub_merchant_id'] = sub_merchant_id









        env = 'prod'
        try:
            result = _payment(params, merchant_key, salt, env)
            result = _paymentResponse(result)
            return Response(result)

        except Exception as e:
            traceback.print_exc()
            print("#######Error on payment:initiate_payment#######")
            context = {'status': False, 'reason': str(e)}
            return Response(context)

class PayWithEaseBuzzOnWeb(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        txnid = data['txnid']
        firstname = data['firstname'].strip()
        email = data['email'].strip()
        amount = data['amount']
        phone = data['phone']
        productinfo = data['productinfo'].strip()
        zipcode = data['zipcode']
        address1 = data['address1']
        address2 = data['address2']
        city = data['city']
        state = data['state']
        country = data['country']
        package_id = data['package_id']
        book_id = data['book_id']
        fees_list = data['fees_list']
        try:
            purchaseFrom = data['purchaseFrom']
        except:
            purchaseFrom = ''

        if package_id:
            try:
                Package.objects.get(id=package_id)
            except Package.DoesNotExist:
                context = {'status': 'Failed','message': 'Package id incorrect'}
                return Response(context)
            
        if book_id:
            try:
                Book.objects.get(id=book_id)
            except Book.DoesNotExist:
                context = {'status': 'Failed', 'message': 'Book id incorrect'}
                return Response(context)

        if fees_list:
            try:
                udf3 = fees_list[1:-1]
                print(udf3)
                fees_id = udf3.split(",")[0]
                CourseFees.objects.get(id=fees_id)
            except Book.DoesNotExist:
                context = {'status': 'Failed','message': 'CourseFees id incorrect'}
                return Response(context)
        else:
            udf3 = fees_list

        student_key = self.request.user.auth_token.key
        institute_code = me.profile.institute.code

        if me.profile.institute.easebuzzMerchanKey and me.profile.institute.easebuzzSaltKey and me.profile.institute.easebuzzSubMerchanKey:
            merchant_key = me.profile.institute.easebuzzMerchanKey
            salt = me.profile.institute.easebuzzSaltKey
            sub_merchant_id = me.profile.institute.easebuzzSubMerchanKey

            params = {
                'txnid': txnid,
                'firstname': firstname,
                'email': email,
                'amount': amount,
                'phone': phone,
                'productinfo': productinfo,
                'surl': f'https://bodhiai.live/api/management/transaction_successfull_temprary/{institute_code}/',
                'furl': 'https://bodhiai.live/api/management/transaction_failed_temprary/',
                'udf1': package_id,
                'udf2': book_id,
                'udf3': udf3,
                'udf4': student_key,
                'udf5': purchaseFrom,
                'status': 1,
                'zipcode': zipcode,
                'address1': address1,
                'address2': address2,
                'city': city,
                'state': state,
                'country': country,
                'sub_merchant_id': sub_merchant_id
            }

        else:
            merchant_key = me.profile.institute.easebuzzMerchanKey
            salt = me.profile.institute.easebuzzSaltKey
            params = {
                'txnid': txnid,
                'firstname': firstname,
                'email': email,
                'amount': amount,
                'phone': phone,
                'productinfo': productinfo,
                'surl': f'https://bodhiai.live/api/management/transaction_successfull_temprary/{institute_code}/',
                'furl': 'https://bodhiai.live/api/management/transaction_failed_temprary/',
                'udf1': package_id,
                'udf2': book_id,
                'udf3': udf3,
                'udf4': student_key,
                'udf5': purchaseFrom,
                'status': 1,
                'zipcode': zipcode,
                'address1': address1,
                'address2': address2,
                'city': city,
                'state': state,
                'country': country
            }

        env = 'prod'

        try:
            result = _payment(params, merchant_key, salt, env)
            result = _paymentResponse(result)

            if result['status'] == 1:
                url = 'https://pay.easebuzz.in/'
                result = url + 'pay/' + result['data'].decode("utf-8")
                context = {'status': 'success', 'data': result}
            else:
                context = {'data': result}

            return Response(context)

        except Exception as e:
            traceback.print_exc()
            print("#######Error on payment:initiate_payment#######")
            return Response({"status": False, "reason": str(e)})

class TransactionSuccessfullyTemprary(APIView):
    def post(self, request, institute_code):

        data = request.data
        headers = {'Authorization': 'Token ' + data['udf4']}
        if data['udf1']:
            param = {
                'package_id': data['udf1'],
                'amount': data['amount']
            }
            response = requests.post(
                'https://bodhiai.live/api/content/student_buy_package/', param, headers=headers).json()

        elif data['udf2']:
            param = {
                'book_id': data['udf2'],
                'amount': int(float(data['amount']))
            }
            response = requests.post(
                'https://bodhiai.live/api/content/student_buy_book/', param, headers=headers).json()

        else:
            d = data['udf3'].split(",")
            param = {
                'fees_id': d[0],
                'modePayment': d[1],
                'typePayment': d[2],
                'amountPaid': data['amount']
            }
            response = requests.post(
                'https://bodhiai.live/api/management/student_pay_batchwise_coursefees/', param, headers=headers).json()

        response = response['message']

        if data['udf5'] == 'psp':
            request.session['packagePurchaseStatus'] = 'success'
            request.session['phone'] = data['phone']

            try:
                package_id = data['udf1']
                package = Package.objects.get(id=package_id)
                apikey = 'NzE2YjRkNzc0NjY3NzA1NjM2NmY0NzYzMzE1NzcxMzg= '
                student_name = data['firstname']
                package_name = package.title
                institute_name = package.teacher.institute.name
                link = package.teacher.institute.webAppUrl
                sender = 'BODHII'
                username = data['phone']

                message = 'Hello {} thanks for purchasing package {} from {}. Login with the link {} and then your Number/Username {}. Thanks, Bodhi AI.'.format(
                    student_name, package_name, institute_name, link, username)
                response = requests.get(
                    f'https://api.textlocal.in/send/?apikey={apikey}&numbers={username}&message={message}&sender={sender}')

                s = message + '___' + 'success'
                UpdatedAgoraCode.objects.create(
                    code=s, updateTime=timezone.now())
                UpdatedAgoraCode.objects.create(
                    code=str(response.text), updateTime=timezone.now())

            except Exception as e:
                s = str(e) + '___' + 'error while sending package success sms'
                UpdatedAgoraCode.objects.create(
                    code=s, updateTime=timezone.now())

            return redirect('https://bodhiai.live/content/package_details/{}/{}'.format(data['udf1'], 'share-package'))
        else:
            return render(request, 'basicinformation/success_message.html', {'response': response, 'institute_code': institute_code})

    def get(self, request, institute_code):
        if institute_code == "gradous":
            return redirect('https://study.graduosexamprep.com/#')
        else:
            return redirect('https://student-website-8dd82.web.app/#/')

class TransactionFailedTemprary(APIView):
    def post(self, request):
        pass
        return HttpResponse('Transication failed please try again')

class TeacherGetHowToDoVideos(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        videos = HowToDoVideos.objects.filter(
            which_side_video='Teacher', locked=False).values()
        context = {'status': 'success', 'videos': videos}
        return Response(context)

class GuestGetCourseWiseInstituteNearBy(APIView):
    def post(self, request):
        data = request.data
        city = data['city']
        courses = data['courses']
        courses = courses.strip('][').split(',')

        institutes = Institute.objects.filter(Q(teacherinstitute__teacher__city__iexact=city) & Q(
            teacherinstitute__teacher__course__id__in=courses)).distinct()
        institutes_list = []
        for institute in institutes:
            teachers_ids = institute.teacherinstitute.all().values_list('id', flat=True)
            timetable = TimeTable.objects.filter(
                teacher__id__in=teachers_ids, enableOfflineBooking=True).order_by('-id')

            if len(timetable) != 0:
                mainTeacher = institute.teacherinstitute.get(mainTeacher=True)

                if institute.instituteAddress:
                    address = institute.instituteAddress
                else:
                    try:
                        address = mainTeacher.teacher.address + ',' + mainTeacher.teacher.city
                    except:
                        address = mainTeacher.teacher.city
                contact = mainTeacher.teacher.phone

                singleTimeTable = timetable[0]
                batches = singleTimeTable.batches.all().values()
                tt_dict = {'id': singleTimeTable.id, 'teacher_name': singleTimeTable.teacher.name, 'subject': singleTimeTable.subject.name, 'chapter': singleTimeTable.chapter.name,
                           'description': singleTimeTable.description, 'startTime': singleTimeTable.startTime, 'endTime': singleTimeTable.endTime, 'batch_list': batches}

                institute_dict = {'id': institute.id, 'institute_name': institute.name, 'logo': institute.logo,
                                  'address': address, 'contact': contact, 'totalClass': len(timetable), 'timetable': tt_dict}
                institutes_list.append(institute_dict)

        institutes_list = sorted(
            institutes_list, key=lambda i: i['totalClass'], reverse=True)
        context = {'status': 'success', 'institutes_list': institutes_list}
        return Response(context)

class GuestGetInstituteWiseTimeTables(APIView):
    def post(self, request):
        data = request.data
        institute_id = data['institute_id']
        try:
            time_table_list = []
            institute = Institute.objects.get(id=institute_id)
            teachers = Teacher.objects.filter(
                institute=institute).values_list('id', flat=True)
            timeTable = TimeTable.objects.filter(
                teacher__id__in=teachers, enableOfflineBooking=True).order_by('id')

            for tt in timeTable:
                batches = tt.batches.all().values()
                tt_dict = {'id': tt.id, 'teacher_name': tt.teacher.name, 'subject': tt.subject.name, 'chapter': tt.chapter.name,
                           'description': tt.description, 'startTime': tt.startTime, 'endTime': tt.endTime, 'batch_list': batches}
                time_table_list.append(tt_dict)

            context = {'status': 'success', 'timeTable': time_table_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class GuestBookingClass(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        timetable_id = data['timetable_id']
        course = data['course']
        data = data['bookingPrice']

        try:
            timeTable = TimeTable.objects.get(id=timetable_id)
            institute = timeTable.teacher.institute
            boc = BookOfflineClass.objects.create(
                institute=institute, student=me.profile, timetable=timeTable, course=course)

            startTime = timeTable.startTime
            endTime = timeTable.endTime
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None

            try:
                app_token = list(AppServerKey.objects.all())[0]
                deviceId = timeTable.teacher.firebaseToken
                to_text = f'{me.profile.name} booked your class that you scheduling at {startTime} to {endTime}.'
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                    
            except Exception as f:
                print(str(f))

            context = {'status': 'success', 'message': 'Class Booked Successfully'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentGetAllBookingClass(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        boc = BookOfflineClass.objects.filter(
            student=me.profile).order_by('-id')
        bookings_list = []
        for booking in boc:
            booking_dict = {'id': booking.id, 'student': booking.student.name, 'institute': booking.institute.name, 'course': booking.course, 'bookingPrice': booking.bookingPrice,
                            'bookingTime': booking.bookingTime, 'classAttempedTime': booking.classAttempedTime, 'isSuccessfullyAttemptedBookedClassByStudent': booking.isSuccessfullyAttemptedBookedClassByStudent}
            bookings_list.append(booking_dict)
        context = {'status': 'success', 'allBookings': bookings_list}
        return Response(context)

class TeacherSeeTimeTableWiseBooking(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        timetable_id = data['timetable_id']
        try:
            allBooking = BookOfflineClass.objects.filter(
                timetable__id=timetable_id).order_by('-id')
            bookings_list = []
            for ab in allBooking:
                student = ab.student
                studentDetail = student.student
                contact = student.studentuser.username.split('@')[0]
                courses = student.courses.all().values()
                studentDetail_dict = {'id': student.id, 'name': student.name, 'photo': studentDetail.photo,
                                      'contact': contact, 'courses': courses, 'address': studentDetail.address, 'city': studentDetail.city}
                booking_dict = {'id': ab.id, 'bookingTime': ab.bookingTime,
                                'classAttempt': ab.isSuccessfullyAttemptedBookedClassByStudent, 'student': studentDetail_dict}
                bookings_list.append(booking_dict)
            context = {'status': 'success', 'bookings': bookings_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAttendenceBookedClass(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        booking_id = data['booking_id']
        attendance = data['attendance']
        try:
            booking = BookOfflineClass.objects.get(id=booking_id)
            if attendance == 'true':
                booking.isSuccessfullyAttemptedBookedClassByStudent = True
            else:
                booking.isSuccessfullyAttemptedBookedClassByStudent = False
            context = {'status': 'success', 'message': 'successfully'}
        except BookOfflineClass.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Booking Not Found'}
        return Response(context)

class TeacherCancelBookedClasses(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        timetable_id = data['timetable_id']

        allBooking = BookOfflineClass.objects.filter(timetable__id=timetable_id)
        timetable = TimeTable.objects.get(id=timetable_id)
        startTime = str(timetable.startTime)
        endTime = str(timetable.endTime)
        message = f'Your booked class are cancelled that class scheduled at {startTime} to {endTime}.'

        for ab in allBooking:
            ab.isClassCancelByTeacher = True
            ab.classCancelTime = datetime.datetime.now()
            ab.save()
            student = ab.student
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None
                
            try:
                app_token = student.institute.serverKey
                deviceId = student.firebaseToken
                notification = {'title':'New Notification', 'body': message}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as e:
                context = {'status': 'Failed', 'error': str(e)}
                return Response(context)

        context = {'status': 'success', 'message': 'All booking has cancelled'}
        return Response(context)

class TeacherDisableEnableOfflineBooking(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        timetable_id = data['timetable_id']
        try:
            timetable = TimeTable.objects.get(id=timetable_id)
            if timetable.enableOfflineBooking == False:
                timetable.enableOfflineBooking = True
                message = 'successfully Enable'
            else:
                timetable.enableOfflineBooking = False
                message = 'successfully Disabled'
            timetable.save()
            context = {'status': 'success', 'message': message}
        except TimeTable.DoesNotExist:
            context = {'status': 'Failed', 'message': 'TimeTable not found'}
        return Response(context)






def CheckPaymentStatus(order_id, merchant_key, merchant_mid):

    paytmParams = dict()
    paytmParams["orderId"] = order_id
    post_data = json.dumps(paytmParams)
    checksum = PaytmChecksum.generateSignature(post_data, merchant_key)
    x_mid = merchant_mid
    x_checksum = checksum

    url = "https://dashboard.paytm.com/bpay/api/v1/disburse/order/query"
    response = requests.post(url, data=post_data, headers={
                             "Content-type": "application/json", "x-mid": x_mid, "x-checksum": x_checksum}).json()
    return response

def WithdrawPaymentInitialize(student_id, coins, amount_to_pay, student_paytm_wallet_number):

    try:
        studentCoin = Coin.objects.get(student__id=student_id)
        student = studentCoin.student
    except Coin.DoesNotExist:
        context = {'status': 'Failed', 'message': 'Wallet does not exist.'}
        return context

    merchant_key = 'RQ4s@neOk%kznBT&'
    merchant_mid = 'TESTWI88063980956920'
    subwalletGuid = 'abdb6e03-e2a3-4238-953d-ab20d2ace7ab'
    order_id = 'TESTWIN_' + \
        ''.join(random.choices(string.ascii_lowercase + string.digits, k=20))

    paytmParams = dict()
    paytmParams["subwalletGuid"] = subwalletGuid
    paytmParams["orderId"] = order_id
    paytmParams["beneficiaryPhoneNo"] = student_paytm_wallet_number
    paytmParams["amount"] = amount_to_pay

    post_data = json.dumps(paytmParams)
    checksum = PaytmChecksum.generateSignature(post_data, merchant_key)
    x_mid = merchant_mid
    x_checksum = checksum

    url = "https://dashboard.paytm.com/bpay/api/v1/disburse/order/wallet/gratification"
    response_walletPaymentInitializeAPI = requests.post(url, data=post_data, headers={
                                                        "Content-type": "application/json", "x-mid": x_mid, "x-checksum": x_checksum}).json()

    statusCode = response_walletPaymentInitializeAPI['statusCode']
    if statusCode == 'DE_001' or statusCode == 'DE_002':
        time.sleep(15)

        response_paymentStatusAPI = CheckPaymentStatus(
            order_id, merchant_key, merchant_mid)

        swch = StudentWithdrawCoinHistory()
        swch.student = student
        swch.coin = coins
        swch.number = student_paytm_wallet_number
        swch.rupees = amount_to_pay
        swch.status = response_paymentStatusAPI['status']
        swch.response = response_paymentStatusAPI
        swch.save()

        studentCoin.coins -= float(coins)
        studentCoin.save()

        try:
            token = list(AppServerKey.objects.all())[0]
            deviceId = Teacher.objects.get(
                teacheruser__username='testwin').firebaseToken
            message = f'{student.profile.name} withdraw {amount_to_pay} rupees'
            image = None
            title = 'New Withdraw'
            send_notification_testWinApp(
                token, deviceId, message, image, title, 6)
        except Exception as f:
            print(str(f))

        try:
            token = student.profile.institute.serverKey
            deviceId = student.profile.firebaseToken
            message = 'Your amount successfully credited in your paytm wallet.'
            image = None
            title = 'Successffully credited.'
            send_notification_testWinApp(
                token, deviceId, message, image, title, 6)
        except Exception as f:
            print(str(f))

        context = {'status': 'success', 'message': 'Your amount successfully credited in your paytm wallet.',
                   'response': response_paymentStatusAPI}

    else:
        pprh = PaytmPayoutResponseHistory()
        pprh.student = student
        pprh.number = student_paytm_wallet_number
        pprh.rupees = amount_to_pay
        pprh.coin = coins
        pprh.status = response_walletPaymentInitializeAPI['status']
        pprh.response = response_walletPaymentInitializeAPI
        pprh.save()
        context = {'status': 'Failed', 'message': 'Something went wrong, Please try after some time',
                   'response': response_walletPaymentInitializeAPI}

    return context

class StudentWithrawAmount(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        coins = data['coins']
        student_paytm_wallet_number = data['student_paytm_wallet_number']

        try:
            if me.profile.accessTestWinApp == True:

                limitetions = FunctionalityHandlerTestWin.objects.all().first()
                scs = StudentChallenge.objects.filter(Q(Q(challenger=me.profile) | Q(competitor=me.profile)) & Q(
                    Q(status='in-progress') | Q(status='challenge-complete')) & ~Q(test__marks_test=None)).count()

                studentWithdrawHistory = StudentWithdrawCoinHistory.objects.filter(Q(status='SUCCESS') | Q(
                    status='accept-withdraw-request'), student=me.profile).distinct().count()

                if me.profile.student.isBlocked == True:
                    context = {
                        'status': 'Failed', 'message': 'You are blocked by TestWin. To unblock yourself please write to TestWin under support tab.'}

                elif limitetions.active_wcr == False:
                    context = {
                        'status': 'Failed', 'message': 'This Feature is under maintenance, please come back after 12 hours.'}

                elif studentWithdrawHistory == 0:  # it means student withraw first time, then no need to check minimum challenge and minimum withdraw amount
                    amount_to_pay = float(coins) / limitetions.eachCoinValue
                    context = WithdrawPaymentInitialize(
                        me.profile.id, coins, amount_to_pay, student_paytm_wallet_number)

                elif scs < limitetions.minimumChallengeForWithdraw:
                    context = {
                        'status': 'Failed', 'message': f'To withdraw coins you have to Take or Create {limitetions.minimumChallengeForWithdraw} challenges.'}

                elif float(coins) < limitetions.minimumWithdrawCoin:
                    context = {
                        'status': 'Failed', 'message': f'coins will shoulb be {limitetions.minimumWithdrawCoin} and above'}

                else:
                    amount_to_pay = float(coins) / limitetions.eachCoinValue
                    context = WithdrawPaymentInitialize(
                        me.profile.id, coins, amount_to_pay, student_paytm_wallet_number)

            else:
                context = {
                    'status': 'Failed', 'message': 'Your app is not updated, please update it for keep playing and withdrawing.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PaytmAccountsDetails(APIView):
    def get(self, request):

        merchant_key = 'RQ4s@neOk%kznBT&'
        merchant_mid = 'TESTWI88063980956920'

        paytmParams = dict()
        post_data = json.dumps(paytmParams)
        checksum = PaytmChecksum.generateSignature(post_data, merchant_key)
        x_mid = merchant_mid
        x_checksum = checksum

        url = "https://dashboard.paytm.com/bpay/api/v1/account/list"
        response = requests.post(url, data=post_data, headers={
                                 "Content-type": "application/json", "x-mid": x_mid, "x-checksum": x_checksum}).json()
        return Response(response)

class TeacherTimeTableMultipleCreateOld(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        teacher_id = data['teacher']
        subject_id = data['subject_id']
        chapter_id = data['chapter_id']
        description = data['description']
        try:
            thumbnail = data['thumbnail']
        except:
            thumbnail = None

        try:
            batches_ids = data['batches_ids']
        except:
            batches_ids = None

        if batches_ids:
            batch_list = batches_ids.strip('][').split(',')
        else:
            batch_list = None

        startTime = data['startTime']
        endTime = data['endTime']
        startDate = data['startDate']
        endDate = data['endDate']
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
        except Exception as e:
            package = None

        dateStart = datetime.datetime.strptime(startDate, "%Y-%m-%d")
        dateEnd = datetime.datetime.strptime(endDate, "%Y-%m-%d")
        numDays = (dateEnd - dateStart).days
        timeStart = datetime.datetime.strptime(startTime, '%H:%M')
        timeEnd = datetime.datetime.strptime(endTime, '%H:%M')
        teacherObject = Teacher.objects.get(id=teacher_id)
        count = 0
        if numDays == 0:
            numDays = 1
        for count in range(numDays):
            if count == 0:
                dd = dateStart
            else:
                dd = dateStart + datetime.timedelta(days=count)
            tStart = datetime.datetime.combine(dd, timeStart.time())
            tEnd = datetime.datetime.combine(dd, timeEnd.time())
            timeTable = TimeTable()
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            timeTable.subject = subject
            timeTable.teacher = teacherObject
            timeTable.chapter = chapter
            timeTable.description = description
            timeTable.startTime = tStart
            timeTable.endTime = tEnd
            if thumbnail != None:
                timeTable.thumbnail = thumbnail
            timeTable.save()
            count += 1
            if package != None:
                timeTable.package = package
                timeTable.save()
            if batch_list != None:
                for bat in batch_list:
                    timeTable.batches.add(bat)
                    timeTable.save()

        context = {'status': 'Success','message': 'Time table successfully created'}
        return Response(context)
    
class TeacherTimeTableMultipleCreate(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        teacher_id = data['teacher']
        chapter_id = data['chapter_id']
        description = data['description']
        startTime = data['startTime']
        endTime = data['endTime']
        startDate = data['startDate']
        endDate = data['endDate']

        try:
            thumbnail = data['thumbnail']
        except:
            thumbnail = None

        try:
            batches_ids = data['batches_ids']
            batch_list = batches_ids.strip('][').split(',')
        except:
            batch_list = None
        
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
        except:
            package = None

        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        teacherObject = Teacher.objects.get(id=teacher_id)
        dateStart = datetime.datetime.strptime(startDate, "%Y-%m-%d")
        dateEnd = datetime.datetime.strptime(endDate, "%Y-%m-%d")
        numDays = (dateEnd - dateStart).days
        timeStart = datetime.datetime.strptime(startTime, '%H:%M')
        timeEnd = datetime.datetime.strptime(endTime, '%H:%M')
        
        try:
            if numDays == 0:
                numDays = 1

            if numDays >= 1:     
                tStart = datetime.datetime.combine(dateStart, timeStart.time())
                tEnd = datetime.datetime.combine(dateEnd, timeEnd.time())
            
            timeTable = TimeTable()
            timeTable.teacher = teacherObject
            timeTable.subject = subject
            timeTable.chapter = chapter
            timeTable.description = description
            timeTable.startTime = tStart
            timeTable.endTime = tEnd
            if thumbnail != None:
                timeTable.thumbnail = thumbnail
            timeTable.save()
            
            if package != None:
                timeTable.package = package
                timeTable.save()
            if batch_list != None:
                for bat in batch_list:
                    timeTable.batches.add(bat)
                    timeTable.save()

            context = {'status': 'Success','message': 'Time Table Successfully Created'}
            return Response(context)

        except Exception as e:
            context = {'status': 'Failed','message': str(e)}
            return Response(context)

class PrincipleCreateInstituteFees(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        totalAmount = data['totalAmount']
        emiOption = data['emiOption']
        numberEmi = data['numberEmi']
        try:
            institute = Institute.objects.get(id=institute_id)
            fees = InstituteFees.objects.get(institute=institute)
            context = {'status': 'Failed',
                       'message': 'Fees already exists for this Institutes'}
        except InstituteFees.DoesNotExist:
            fees = InstituteFees()
            fees.institute = institute
            fees.principle = me.profile
            fees.totalAmount = totalAmount
            if emiOption:
                fees.emi = True
                fees.numberOfEmi = int(numberEmi)
            else:
                fees.emi = False
            fees.save()
            context = {'status': 'Success', 'message': 'Fees created'}
        return Response(context)

class TeacherPayInstituteFees(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        amountPaid = data['amountPaid']
        modePayment = data['modePayment']
        teacher = Teacher.objects.get(institute=me.profile.institute,mainTeacher=True)
        fees = InstituteFees.objects.get(id=fees_id)
        previousPaid = InstituteMainTeacherFees.objects.filter(
            institutefees=fees, institute=me.profile.institute)
        if len(previousPaid) > 0:
            totalPaid = 0
            remaining = fees.totalAmount
            for pp in previousPaid:
                emiRemaining = pp.emiRemaining
                if pp.accepted:
                    totalPaid = totalPaid + pp.amountPaid
                
            remaining = remaining - totalPaid
            
        else:
            totalPaid = 0
            remaining = fees.totalAmount
            emiRemaining = fees.numberOfEmi
        if remaining > 0 and emiRemaining >0:
            paidFees = InstituteMainTeacherFees()
            paidFees.institutefees = fees
            paidFees.amountPaid = float(amountPaid)
            paidFees.joinDate = teacher.jdate
            paidFees.datePaid = timezone.now()
            paidFees.amountRemaining = float(remaining) - float(amountPaid)
            paidFees.modePayment = modePayment
            if fees.emi :
                today = timezone.now().date()
                durationMonth = 365/fees.numberOfEmi
                toAdd = timezone.timedelta(durationMonth)
                
                nextPaymentDate = toAdd +today
                paidFees.nextPaymentDate = nextPaymentDate
            if modePayment == 'online':
                paidFees.accepted = 'true'
            paidFees.institute = me.profile.institute
            totalfee = fees.totalAmount
            totalPaid = totalPaid + float(amountPaid)
            paidFees.emiRemaining = emiRemaining -1
            if totalPaid == totalfee:
                paidFees.nextDuePayment = False
            else:
                paidFees.nextDuePayment = True
            paidFees.save()
            
            
            context = {'status': 'Success', 'message': paidFees.accepted}
        else:
            context = {'status': 'Already Paid all fees'}
        return Response(context)

class PrinciplePayInstituteFees(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        amountPaid = data['amountPaid']
        modePayment = data['modePayment']
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        fees = InstituteFees.objects.get(id=fees_id)
        teacher = Teacher.objects.get(institute=institute,mainTeacher=True)
        previousPaid = InstituteMainTeacherFees.objects.filter(
            institutefees=fees, institute=institute)
        if len(previousPaid) > 0:
            totalPaid = 0
            remaining = fees.totalAmount
            for pp in previousPaid:
                emiRemaining = pp.emiRemaining
                if pp.accepted:
                    totalPaid = totalPaid + pp.amountPaid
            remaining = remaining - totalPaid
            
        else:
            totalPaid = 0
            remaining = fees.totalAmount
            emiRemaining = fees.numberOfEmi
        
        if remaining > 0 and emiRemaining >0:
            paidFees = InstituteMainTeacherFees()
            paidFees.institutefees = fees
            paidFees.amountPaid = float(amountPaid)
            paidFees.joinDate = teacher.jdate
            paidFees.datePaid = timezone.now()
            paidFees.amountRemaining = float(remaining) - float(amountPaid)
            paidFees.modePayment = modePayment
            if fees.emi :
                today = timezone.now().date()
                durationMonth = 365/fees.numberOfEmi
                toAdd = timezone.timedelta(durationMonth)
                
                nextPaymentDate = toAdd +today
                paidFees.nextPaymentDate = nextPaymentDate
            if modePayment == 'online':
                paidFees.accepted = 'true'
            paidFees.institute = institute
            totalfee = fees.totalAmount
            totalPaid = totalPaid + float(amountPaid)
            paidFees.emiRemaining = emiRemaining -1
            if totalPaid == totalfee:
                paidFees.nextDuePayment = False
            else:
                paidFees.nextDuePayment = True
            paidFees.save()

            context = {'status': 'Success', 'message': paidFees.accepted}
        else:
            context = {'status': 'Already Paid all fees'}
        return Response(context)

class PrincipleGetCreatedInstituteFees(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        try:
            fees = InstituteFees.objects.get(institute=institute, principle=me.profile)
            pay_list = []
            try:
                paid = InstituteMainTeacherFees.objects.filter(institutefees=fees, institute=institute).order_by("-id").first()
                dict_pay ={'id': paid.id, 'amountPaid': paid.amountPaid, 'nextDuePayment': paid.nextDuePayment, 'typePayment': paid.typePayment, 'modePayment': paid.modePayment, 'nextPaymentDate': paid.nextPaymentDate, 'datePaid': paid.datePaid, 'amountRemaining': paid.amountRemaining}
                pay_list.append(dict_pay)
            except:
                pay_list =[]

            fees_dict =\
                {'id': fees.id, 'amount': fees.totalAmount, 'principle': fees.principle.name,
                    'emiOption': fees.emi, 'numberOfEmi': fees.numberOfEmi,"history":pay_list}
            context = {'status': 'Success', 'fees': fees_dict}
        except InstituteFees.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Fees for this Institute does not exist'}
        return Response(context)

class InstituteTeacherSeeInstituteFees(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        teacher =\
            Teacher.objects.get(
                institute=me.profile.institute, mainTeacher=True)
        try:
            fees = InstituteFees.objects.get(institute=me.profile.institute)
            fees_dict =\
                {'id': fees.id, 'amount': fees.totalAmount, 'principle': fees.principle.name,
                    'emiOption': fees.emi, 'numberOfEmi': fees.numberOfEmi}
            context = {'fees': fees_dict}
        except InstituteFees.DoesNotExist:
            context = {'fees': None}
        return Response(context)

class InstitutePaySecondTime(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        fees = InstituteFees.objects.get(id=fees_id)
        previousPaid = InstituteMainTeacherFees.objects.filter(
            institutefees=fees, institute=me.profile.institute)
        paid_list = []
        for pp in previousPaid:
            pp_dict =\
                {'id': pp.id, 'amountPaid': pp.amountPaid, 'nextDuePayment': pp.nextDuePayment, 'typePayment': pp.typePayment, 'modePayment': pp.modePayment,
                    'accepted': pp.accepted, 'nextPaymentDate': pp.nextPaymentDate, 'datePaid': pp.datePaid, 'amountRemaining': pp.amountRemaining}
            paid_list.append(pp_dict)
        context = {'paidFees': paid_list}
        return Response(context)
    
class PrincipleSecondTime(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        fees = InstituteFees.objects.filter(institute=institute).first()
        previousPaid = InstituteMainTeacherFees.objects.filter(
            institutefees=fees, institute=institute)
        paid_list = []
        for pp in previousPaid:
            pp_dict =\
                {'id': pp.id, 'amountPaid': pp.amountPaid, 'nextDuePayment': pp.nextDuePayment, 'modePayment': pp.modePayment,
                    'accepted': pp.accepted, 'nextPaymentDate': pp.nextPaymentDate, 'datePaid': pp.datePaid, 'amountRemaining': pp.amountRemaining}
            paid_list.append(pp_dict)
        context = {'paidFees': paid_list}
        return Response(context)

class PrincipleDeleteInstituteFees(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        fees_id = data['fees_id']
        try:
            InstituteFees.objects.get(id=fees_id).delete()
            context = {'status': 'Success', 'message': 'successfully delete'}
        except InstituteFees.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Fees not found'}
        return Response(context)

class PaymentGateWayThroughCCAVenue(APIView):
    def post(self, request):
        user = request.user
        data = request.data
        try:
            
            try:
                me = Studs(self.request.user)
            except:
                me = Teach(self.request.user)

            merchant_key = "2891240"
            access_code = " AVMM23KJ13BL31MMLB"
            working_key ="0AD53FDA2D024EAC30092349589C62DC"
        except:
            return Response({'status': 'Failed', 'message': "user doesn't Belongs to institute"})
        try:
            amount = data['amount']
            phone = data['phone']
            currency = data['currency']
            language = "EN"
            merchant_param1 = user.username
            
            responeOrder = CCAVenuePayment()
            responeOrder.amount = amount
            responeOrder.phone = phone
            responeOrder.merchant_param1 = merchant_param1
            responeOrder.save()
            
            order_id = responeOrder.order_id
            redirect_url = "https://bodhiai.live/api/management/ccavenue_payment_response/"
            cancel_url ="https://bodhiai.live/api/management/ccavenue_payment_response/"
            params = {
                "merchant_id":merchant_key,
                "order_id":order_id,
                'currency': currency,
                'amount': amount,
                'redirect_url': redirect_url,
                'cancel_url':cancel_url,
                'language':language,
                'merchant_param1':merchant_param1  
            }
            order_id = str(order_id)
            merchant_data = 'merchant_id=' + merchant_key + '&' + 'order_id=' + order_id + '&' + "currency=" + currency + '&' + 'amount=' + amount + '&' + 'redirect_url=' + redirect_url + '&' + 'cancel_url=' + cancel_url + '&' + 'language=' + language + '&' +'merchant_param1=' + merchant_param1 
            hash_key = encrypt(merchant_data, working_key)
            data = {
                "access_code": access_code,
                "redirect_url": redirect_url,
                "cancel_url": cancel_url,
                "enc_val": hash_key,
            }
            context = {'status':True, 'data':data}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class CCAVenueResponseHandle(APIView):
    def post(self, request):
        data = request.data
        encResp = data['encResp']
        working_key ="0AD53FDA2D024EAC30092349589C62DC"
        try:
            decrypt_text = decrypt(encResp,working_key)
            context = {'status': 'Success', "data":decrypt_text}
        except :
            context = {'status': 'Failed', 'message': 'enc request not decrpt'}
        return Response(context)

class CCAVenueCancelOrder(APIView):
    def get(self, request):
        data = request.data
        working_key ="0AD53FDA2D024EAC30092349589C62DC"
        try:
            context = {'status': True,'message':"order cancel", "data":""}
        except :
            context = {'status': 'Failed', 'message': 'enc request not decrpt'}
        return Response(context)
    
def generate_hash(data, salt):
    hash_string = '|'.join(data) + '|' + salt
    return hashlib.sha512(hash_string.encode('utf-8')).hexdigest()

def get_access_token():
    url = "https://accounts.payu.in/oauth/token" # Production Environment
    payload = {
        "grant_type": "client_credentials",
        "scope": "create_payment_links",
        "client_id": "dd33d9679d6154bc28c261a7fbe3028372bc3e0d2d7d331aa5e8e25cf3887f28",  # Replace with your PayU client ID
        "client_secret": "ec790731fe523feb19ce499ab4fc06a8c3dde576e9cddce3e6f38c76e1f36305",  # Replace with your PayU client secret
    }
    headers = {
        "accept": "application/json",
        "Content-Type": "application/x-www-form-urlencoded"
    }

    response = requests.post(url, data=payload, headers=headers)
    if response.status_code == 200:
        return response.json().get("access_token")
    else:
        print("Failed to get access token:", response.text)
        return None

class CreatePaymentLink(APIView):
    def get(self, request):
        try:
            url = "https://uatoneapi.payu.in/payment-links"
            
            payload = {
                "isAmountFilledByCustomer": False,
                "customer": {
                    "name": "sonika",
                    "email": "sonikagarsha16@gmail.com",
                    "phone": "8442055593"
                },
                "address": {
                    "line1": "Krishna Puri",
                    "line2": "Sai Residency",
                    "city": "Jaipur",
                    "state": "Rajasthan",
                    "zipCode": "302020"
                },
                "udf": {
                    "udf1": "app",
                    "udf2": "package buy",
                    "udf3": "package_id",
                    "udf4": "emi",
                    "udf5": "demo"
                },
                "source": "API",
                "description": "10",
                "subAmount": 1,
                "successURL": "https://test-payment-middleware.payu.in/simulatorResponse",
                "failureURL": "https://test-payment-middleware.payu.in/simulatorResponse"
            }
            headers = {
                "accept": "application/json",
                "merchantId": "8333261",
                "content-type": "application/json",
                "authorization": "Bearer b7cc72a17be11f9bf479e9d35406cd7d02a3c8564e35a936a4f995c06e9db486"
            }


            response = requests.post(url, json=payload, headers=headers)

            print(response.text)

            context = {'status': True, 'data': response.text}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)
    
class PaymentGateWayUsingPayu(APIView):
    def post(self, request):
        user = request.user
        data = request.data
        try:
            me = Studs(self.request.user)
        except:
            me = Teach(self.request.user)





        try:
            merchant_id = '12210803'
            salt = 'adBr6aXx4vSguj88nEiQmkqdPIKmYKhT'
            
            payload = {
                "isAmountFilledByCustomer": False,
                "customer": {
                    "name": user.username,
                    "email": data['email'],
                    "phone": data['phone']
                },
                "address": {
                    "line1": data.get('address1', ''),
                    "line2": data.get('address2', ''),
                    "city": data.get('city', ''),
                    "state": data.get('state', ''),
                    "country": data.get('country', ''),
                    "zipCode": data.get('zipcode', '')
                },
                "udf": {
                    "udf1": user.username,
                    "udf2": data.get('udf2', ''),
                    "udf3": data.get('udf3', ''),
                    "udf4": data.get('udf4', ''),
                    "udf5": data.get('udf5', '')
                },
                "source": "API",
                "description": data.get('productinfo', ''),
                "subAmount": data.get('amount', 0),
            }
            
            udf1 = user.username
            
            udf2 = payload['udf']['udf2']
            if udf2 not in ['web', 'app']:
                return Response({'status': 'failed', 'message': 'udf2 not defined properly'})

            udf3 = payload['udf']['udf3']
            if udf3 not in ['package_buy', 'sms_package', 'books_buy', 'feespaid', 'mobileiti_fee', 'meethour', 'subject_buy', 'registertion_exam', 'csa_admitcard', 'shop_pay']:
                return Response({'status': 'failed', 'message': 'udf3 not defined properly'})

            udf4 = payload['udf']['udf4']
            if udf4 is not None:
                if udf3 == 'package_buy':
                    try:
                        Package.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "Package doesn't exist"})
                    
                elif udf3 == 'books_buy':
                    try:
                        Book.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "book id doesn't exist"})
                    
                elif udf3 == 'feespaid':
                    try:
                        CourseFees.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "fees id doesn't exist"})
                    
                elif udf3 == 'mobileiti_fee':
                    try:
                        TradeDetails.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "trade details id doesn't exist"})
                    
                elif udf3 == 'meethour':
                    try:
                        MeetHourDeveloperAccountPakages.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "meethour pack id doesn't exist"})
                    
                elif udf3 == 'subject_buy':
                    try:
                        Subject.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "subject id doesn't exist"})
                    
                elif udf3 == 'shop_pay':
                    try:
                        OwnerShopListing.objects.get(id=udf4)
                        payload['udf']['udf4'] = udf4
                    except:
                        return Response({'status': 'failed', 'message': "shop id doesn't exist"})
                    
                else:
                    payload['udf']['udf4'] = udf4

            udf5 = payload['udf']['udf5']
            if udf5 is not None:
                if  udf3 == 'feespaid':
                    if udf5 in ['emi', 'onetime']:
                        payload['udf']['udf5'] = udf5
                    else:
                        return Response({'status': 'failed', 'message': "udf5 not define properly"})
                    
                elif udf3 == 'meethour':
                    if udf4 in ['developer', 'enterprise']:
                        payload['udf']['udf5'] = 'developer'
                    else:
                        return Response({'status': 'failed', 'message': "udf5 not define properly"})
                else:
                    payload['udf']['udf5'] = udf5
                    
            record = EaseBuzzPayment(
                firstname=payload['customer']['name'],
                amount=payload['subAmount'],
                email=payload['customer']['email'],
                phone=payload['customer']['phone'],
                productinfo=payload['description'],
                udf1=udf1,
                udf2=udf2,
                udf3=udf3,
                udf4=udf4,
                udf5=udf5,
                zipcode=payload['address']['zipCode'],
                address1=payload['address']['line1'],
                address2=payload['address']['line2'],
                city=payload['address']['city'],
                state=payload['address']['state'],
                country=payload['address']['country'],
                merchant_key=merchant_id,
                salt=salt,
                payment_type='payu',
            )
            record.save()
            
            payload['transactionId'] = str(record.txnid)
            payload['successURL'] = f'https://bodhiai.live/api/management/payu_transaction_response/'
            payload['failureURL'] = f'https://bodhiai.live/api/management/payu_transaction_response/'
            
            access_token = get_access_token()
            if not access_token:
                return Response({"status": False, "error": "Failed to obtain access token"})

            url = "https://oneapi.payu.in/payment-links" # Production Environment
            headers = {
                "accept": "application/json",
                "merchantId": merchant_id,
                "content-type": "application/json",
                "authorization": f"Bearer {access_token}"
            }
                    
            response = requests.post(url, json=payload, headers=headers)
            response_data = json.loads(response.text)
            return Response({"status": True, "data": response_data})

        except Exception as e:
            return Response({'status': False, 'message': str(e)})
        
class PayuPaymentResponseHandle(APIView):
    def post(self, request):
        try:
            payment_response = request.data.dict()
            txnid = payment_response['txnid']
            
            try:
                whdl = WebhookDataLog.objects.get(txnid = txnid)
                whdl.webhook_data_response = payment_response
                whdl.status = payment_response['status'] 
                whdl.save()
            except WebhookDataLog.DoesNotExist:
                WebhookDataLog.objects.create(webhook_data_response = payment_response,txnid=txnid,status=payment_response['status'])
            
            record = EaseBuzzPaymentResponseRecord.objects.create(
                    payment=EaseBuzzPayment.objects.get(txnid=txnid),
                    status=payment_response['status'],
                    data=json.dumps(payment_response, indent=4))
            
            response = json.loads(record.data)
            if response["status"] == "success":
                if response.get('udf3') == 'package_buy':
                    context = payu_package_buy(response)
                elif response.get('udf3') == 'books_buy':
                    context = payu_books_buy(response)
                elif response.get('udf3') == 'feespaid':
                    context = payu_feespaid(response)
                elif response.get('udf3') == 'sms_package':
                    context = payu_otprecharge(response)
                elif response.get('udf3') == 'mobileiti_fee':
                    context = payu_mobile_iti_feepayment(response)
                elif response.get('udf3') == 'meethour':
                    context = payu_meethour_recharge(response)
                elif response.get('udf3') == 'subject_buy':
                    context = payu_subject_buy(response)
                elif response.get('udf3') == 'registertion_exam':
                    context = payu_registertion_exam(response)
                elif response.get('udf3') == 'csa_admitcard':
                    context = payu_csa_admit_card(response)
                elif response.get('udf3') == 'shop_pay':
                    context = payu_payFor_shop_details(response)
                else:
                    context = {
                        "status": "success",
                        "txnid": response['txnid'],
                        "transaction_status": response['status'],
                        'message': "Transaction Successful but save credentials for further reference",
                    }

            else:
                context = {
                    "status": "failed",
                    "txnid": response['txnid'],
                    "transaction_status": response['status'],
                    "message": "Transaction Failed",
                }

            if response['udf2'] == 'app':
                return Response(context)
            else:
                return render(request, 'management/response.html', context)
        except Exception as e:
            print(str(e))
            return redirect('https://mennta.page.link/jTpt')
    
class PayuPaymentVerify(APIView):
    def post(self, request):
        try:
            #     "postUrl": "https://test-payment-middleware.payu.in/simulatorResponse"
            
            payment_response = request.data
            salt = 'adBr6aXx4vSguj88nEiQmkqdPIKmYKhT'
            url = "https://info.payu.in/merchant/postservice?form=2" #Production Environment
            
            payload = {
                "key": payment_response['key'], #This parameter must contain the merchant key provided by PayU.
                "command": "verify_payment",
                "var1": payment_response['txnid'],
            }
            
            payload['hash'] = generate_hash([payment_response['key'],"verify_payment",payment_response['txnid']],salt)  
            
            headers = {
                "accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded"
            }
            response = requests.post(url, data=payload, headers=headers)

            print(response.text)
                        
            return Response({"response": response.text})

        except Exception as e:
            return Response({'status': False, 'message': str(e)})
        
class PayuGetTransactionDetails(APIView):
    def post(self, request):
        try:
            payment_response = request.data
            salt = 'adBr6aXx4vSguj88nEiQmkqdPIKmYKhT'
            url = "https://info.payu.in/merchant/postservice?form=2" #Production Environment
            
            payload = {
                "key": payment_response['key'], #This parameter must contain the merchant key provided by PayU.
                "command": "get_Transaction_Details",
                "var1": payment_response['start_date'],
                "var2": payment_response['end_date'], # example - "2020-10-27"
            }
            
            payload['hash'] = generate_hash([payment_response['key'],"verify_payment",payment_response['txnid']],salt)  
            
            headers = {
                "accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded"
            }
            response = requests.post(url, data=payload, headers=headers)

            print(response.text)
                        
            return Response({"response": response.text})

        except Exception as e:
            return Response({'status': False, 'message': str(e)})
        






    
    
        
            

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/payu/response_handlers.py
--------------------------------------------------

import json
import requests
import pytz
import datetime
from django.utils import timezone
from basicinformation.tasks import *
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from basicinformation.api.helperFunctions import *
from management.models import *
from content.models import *


def payu_package_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        
        if refresh:
            if PaidAmountStudentPackage.objects.filter(package_buy_payment_record=payment_response).exists():
                context = {
                    'status': 'failed',
                    'txnid': txnid,
                    'transaction_status': transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
            
        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        package_id = response.get('udf4')
        webapp = response.get('udf2')
        
        body = {
            'package_id': package_id,
            'amount': amount,
            'txnid': txnid,
        }

        url = 'https://bodhiai.live/api/content/student_buy_package/'
        response_buy = requests.post(url, body, headers=headers)
        response_buy = json.loads(response_buy.content)
        
        try:
            package = Package.objects.get(id=package_id)
            if webapp =="web":
                institute_name = package.teacher.institute.name
                webapp_link = package.teacher.institute.webAppUrl
                number = user.username.split('@')[0]
                package_name = f'[{package.title[:15]}...]'

                context = {
                    "phone": response['phone'],
                    "name": response['firstname'],
                    "package_name": package_name,
                    "institute_name": institute_name,
                    "webapp_link": webapp_link,
                    "username": number,
                }
                
                send_textlocal_package_buy(context)
        except:
            pass

        context = {
            'status': response['status'],
            'txnid': txnid,
            'transaction_status': transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            'status': 'failed',
            'txnid': txnid,
            'transaction_status': transaction_status,
            'message': str(e),
        }

    return context

def payu_books_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountStudentBook.objects.filter(books_buy_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        book_id = response.get('udf4')
            
        body = {
            'book_id': book_id,
            'amount': float(amount),
            'txnid': txnid,
        }
        url = 'https://bodhiai.live/api/content/student_buy_book/'

        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)
        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_feespaid(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if StudentCourseFees.objects.filter(feespaid_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}

        body = {
            'fees_id': response.get('udf4'),
            'typePayment': response.get('udf5'),
            'modePayment': 'online',
            'amountPaid': amount,
            'txnid': txnid,
        }

        url = 'https://bodhiai.live/api/management/student_pay_batchwise_coursefees/'
        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)

        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_otprecharge(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if SMSPackageBought.objects.filter(sms_package_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}

        body = {
            'amount': amount,
            'txnid': txnid
        }

        url = 'https://bodhiai.live/api/basicinformation/teacher_buy_sms_package/'
        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)

        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_mobile_iti_feepayment(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)

        if refresh:
            if StudentTradePurchase.objects.filter(mobile_iti_fees_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        student_trade_dict = {}
        student_trade_dict['student'] = Student.objects.get(studentuser=user)
        student_trade_dict['trade_details'] = TradeDetails.objects.get(id=response['udf4'])
        student_trade_dict['paidAmount'] = amount
        student_trade_dict['mode'] = "online"
        student_trade_dict['approved'] = True

        student_trade = StudentTradePurchase(**student_trade_dict)
        student_trade.save()

        payment_response.mobile_iti_fees = student_trade
        payment_response.save()

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_meethour_recharge(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)

        if response['udf5'] == "developer":
            if refresh:
                if MeetHourDeveloperAccountPayment.objects.filter(meethour_payment_developer_payment_record=payment_response).exists():
                    context = {
                        "status": "failed",
                        "txnid": txnid,
                        "transaction_status": transaction_status,
                        'message': 'Transaction Process already Completed',
                    }
                    return context

            developer_dict = {}
            developer_dict['developer_account'] = MeetHourDeveloperAccountClientCredentials.objects.get(id=response['udf6'])
            developer_dict['amount'] = amount
            payment_recharge = MeetHourDeveloperAccountPayment.objects.filter(developer_account=developer_dict['developer_account']).order_by('-expire_date').first()
            pack = MeetHourDeveloperAccountPakages.objects.get(id=response['udf4'])
            curr_expire_date = payment_recharge.expire_date
            new_timezone = pytz.timezone('Asia/Kolkata')
            date_now = datetime.datetime.now(new_timezone).date()
            start_date = max(curr_expire_date,date_now)
            Enddate = start_date + datetime.timedelta(days=pack.days)
            developer_dict['expire_date'] = Enddate

            meethour_recharge = MeetHourDeveloperAccountPayment(**developer_dict)
            meethour_recharge.save()

            payment_response.meethour_payment_developer = meethour_recharge
            payment_response.save()

            institute.meethour_account_type = 'developer'
            institute.save()


        elif response['udf5'] == "enterprise":
            if refresh:
                if MeetHourPayment.objects.filter(meethour_payment_enterprise_payment_record=payment_response).exists():
                    context = {
                        "status": "failed",
                        "txnid": txnid,
                        "transaction_status": transaction_status,
                        'message': 'Transaction Process already Completed',
                    }
                    return context

            enterprise_dict = {}
            institute = Teacher.objects.get(teacheruser__username=response['udf1']).institute
            enterprise_dict['institute'] = institute
            enterprise_dict['amount'] = amount
            payment_recharge = MeetHourPayment.objects.filter(institute=institute).order_by('-expire_date').first()
            pack = MeetHourDeveloperAccountPakages.objects.get(id=response['udf4'])
            curr_expire_date = payment_recharge.expire_date
            new_timezone = pytz.timezone('Asia/Kolkata')
            date_now = datetime.datetime.now(new_timezone).date()
            start_date = max(curr_expire_date,date_now)
            Enddate = start_date + datetime.timedelta(days=pack.days)
            enterprise_dict['expire_date'] = Enddate

            meethour_recharge = MeetHourPayment(**enterprise_dict)
            meethour_recharge.save()

            payment_response.meethour_payment_enterprise = meethour_recharge
            payment_response.save()

            institute.meethour_account_type = 'enterprise'
            institute.save()
        
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_subject_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountSubject.objects.filter(subject_buy_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        subject_dict = {}
        subject_dict['teacher'] = Teacher.objects.get(teacheruser=user)
        subject_dict['subject'] = Subject.objects.get(id=response['udf4'])
        subject_dict['paidAmount'] = amount
        subjectPaid = PaidAmountSubject(**subject_dict)
        subjectPaid.save()
        subject_id = response['udf4']
        teacher = Teacher.objects.get(teacheruser=user)
        teacher_id=teacher.id
        create_subject_replica_new.delay(teacher_id, subject_id,price=amount,subject_brought=True)
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_registertion_exam(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountStudentExam.objects.filter(register_exam_payment_records=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
        
        registertion_dict = {}
        registertion_dict['student'] = RegisterExam.objects.get(student__studentuser=user)
        registertion_dict['paidAmount'] = float(100)
        exam_register = PaidAmountStudentExam(**registertion_dict)
        exam_register.save()
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_csa_admit_card(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidCSAIdCardStudent.objects.filter(csa_id_card_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
        
        student_dict = {}
        student = Student.objects.get(studentuser = user)
        student_dict['name'] = CSAIdCard.objects.get(student=student)
        student_dict['paidAmount'] = amount
        card_register = PaidCSAIdCardStudent(**student_dict)
        card_register.save()
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def payu_payFor_shop_details(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountClientShop.objects.filter(shop_buy_payment_record = payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        shop_id = response.get('udf4')
        body = {
            'shop_id': shop_id,
            'amount': float(amount),
            'txnid': txnid
        }
        url = 'https://bodhiai.live/api/content/student_buy_shop_details/'

        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)
        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/ccavenue/payment_integrate.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/ccavenue/ccavutil.py
--------------------------------------------------

from Crypto.Cipher import AES
import hashlib

def pad(data):
    length = 16 - (len(data) % 16)
    data += chr(length) * length
    return data

def encrypt(plainText, workingKey):
    iv = b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'  # 16-byte IV
    plainText = pad(plainText).encode('utf-8')
    
    encDigest = hashlib.md5(workingKey.encode('utf-8'))
    enc_cipher = AES.new(encDigest.digest(), AES.MODE_CBC, iv)
    
    encryptedText = enc_cipher.encrypt(plainText).hex()
    return encryptedText

def decrypt(cipherText, workingKey):
    iv = b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'  # 16-byte IV
    
    decDigest = hashlib.md5(workingKey.encode('utf-8'))
    cipherText = bytes.fromhex(cipherText)
    
    dec_cipher = AES.new(decDigest.digest(), AES.MODE_CBC, iv)
    
    decryptedText = dec_cipher.decrypt(cipherText).decode('utf-8')
    return decryptedText

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/ccavenue/ccavenue_payment_gateway.py
--------------------------------------------------

import json
from management.models import CCAVenuePayment, CCAVenuePaymentResponseRecord

class CCAVenue:

    MERCHANT_KEY = ''
    ACCESS_CODE = ''
    ENV = ''

    def __init__(self, key, access_code, env):
        self.MERCHANT_KEY = key
        self.ACCESS_CODE = access_code
        self.ENV = env


    def initiatePaymentAPI(self, params):
        from . import payment
        try:
            record = CCAVenuePayment(
                amount = params.get('amount'),
                email = params.get('email'),
                billing_name = params.get('billing_name'),
                phone = params.get('phone'),
                merchant_param1 = params.get('merchant_param1') if params.get('merchant_param1') else "",
                merchant_param2 = params.get('merchant_param2') if params.get('merchant_param2') else "",
                merchant_param3 = params.get('merchant_param3') if params.get('merchant_param3') else "",
                merchant_param4 = params.get('merchant_param4') if params.get('merchant_param4') else "",
                merchant_param5 = params.get('merchant_param5') if params.get('merchant_param5') else "",
                
                billing_zip = params.get('billing_zip') if params.get('billing_zip') else "",
                billing_address = params.get('billing_address') if params.get('billing_address') else "",
                billing_city = params.get('billing_city') if params.get('billing_city') else "",
                billing_state = params.get('billing_state') if params.get('billing_state') else "",
                billing_country = params.get('billing_country') if params.get('billing_country') else "",
                merchant_key = self.MERCHANT_KEY,
                accessCode = self.ACCESS_CODE,
            )
            record.save()
            
        except Exception as e:
            return json.dumps(e)

        params['order_id'] = record.order_id
        print(record.order_id)
        params['surl'] = f'https://bodhiai.live/api/management/transaction_response/'
        params['furl'] = f'https://bodhiai.live/api/management/transaction_response/'


        result = payment.initiate_payment(params, self.MERCHANT_KEY, self.ACCESS_CODE, self.ENV)
        return result
 
    def transactionAPI(self, params):
        from . import transaction

        result = transaction.get_transaction_details(
            params, self.MERCHANT_KEY, self.ACCESS_CODE, self.ENV)
        return result



    def transactionDateAPI(self, params):
        from . import transaction_date
        result = transaction_date.get_transactions_by_date(
            params, self.MERCHANT_KEY, self.ACCESS_CODE, self.ENV)
        return result



    def refundAPI(self, params):
        from . import refund
        result = refund.initiate_refund(
            params, self.MERCHANT_KEY, self.ACCESS_CODE, self.ENV)
        return result

 

    def payoutAPI(self, params):
        from . import payout
        result = payout.get_payout_details_by_date(
            params, self.MERCHANT_KEY, self.ACCESS_CODE, self.ENV)
        return result

    

    def ccavenuseResponse(self, params):
        from . import payment
        txnid = params['order_id']
        CCAVenuePaymentResponseRecord \
            .objects \
            .create(
                payment=CCAVenuePayment.objects.get(order_id=txnid),
                status=params['status'],
                data=json.dumps(params, indent=2)
            )
        result = payment.ccavenuseResponse(params, self.ACCESS_CODE)
        return result


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/ccavenue/payment.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback

from .ccavutil import *


def initiate_payment(params, merchant_key, access_code, env):
    try:
        result = _payment(params, merchant_key, access_code, env)
        
        return _paymentResponse(result)

    except Exception as e:
        traceback.print_exc()
        print("#######Error on payment:initiate_payment#######")
        return ({"status": False, "reason": 'Exception occured'})




def _payment(params, merchant_key, access_code, env):

    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(params, merchant_key, access_code, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, access_code)
    if empty_validation != True:
        return empty_validation

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['amount']):
        postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, access_code, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    pay_result = _pay(postedArray, access_code, URL)

    return pay_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['amount'], float)):
        type_value = "The amount should float up to two or one decimal."

    

    if not (isinstance(params['billing_name'], str)):
        type_value = "First Name should be string"

    if not (isinstance(params['phone'], str)):
        type_value = "Phone Number should be number"

    if not (isinstance(params['email'], str)):
        type_value = "Email should be string"

    if not (isinstance(params['surl'], str)):
        type_value = "Success URL should be string"

    if not (isinstance(params['furl'], str)):
        type_value = "Failure URL should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True





def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['order_id']:
        empty_value = 'Transaction ID'

    if not params['amount']:
        empty_value = 'Amount'

    if not params['billing_name']:
        empty_value = 'Billing Name'

    if not params['email']:
        empty_value = 'Email'

    if not params['phone']:
        empty_value = 'Phone'


    if not params['surl']:
        empty_value = 'Success URL'

    if not params['furl']:
        empty_value = 'Failure URL'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True





def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://apitest.ccavenue.com/apis/servlet/DoWebTrans"
    elif env == 'prod':
        url_link = "https://api.ccavenue.com/apis/servlet/DoWebTrans"
    else:
        url_link = "https://apitest.ccavenue.com/apis/servlet/DoWebTrans"

    return url_link


def _pay(params_array, workingKey, url):
    hash_key = None
    workingKey = "0AD53FDA2D024EAC30092349589C62DC"
    access_code = "AVMM23KJ13BL31MMLB"

    hash_key = _getHashKey(params_array, workingKey)
    
    data ={
        "enc_request":hash_key,
        "access_code":access_code,
        "command":"confirmOrder",
        "response_type":"JSON",
        "request_type":"JSON",
        "version":1.1
    }


    url = "https://apitest.ccavenue.com/apis/servlet/DoWebTrans"
    response = requests.post(url,data)
    print(response)

    if response.status_code == 200:
        response_data = response.text.strip()
        print(response_data)

        access_key = ''

        if access_key is not None:
            print("Access Key:", access_key)
        else:
            print("No 'data' key in the response")
    else:
        return {
            'status': 1,
            'key': access_key,
            'weburl': url + 'pay/' + access_key,
        }





def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|order_id|currency|amount|redirect_url|cancel_url|language|billing_name|billing_address|billing_city|billing_state|billing_zip|billing_country|billing_tel|billing_email|merchant_param1|merchant_param2|merchant_param3|merchant_param4|merchant_param5"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()





def _paymentResponse(params_array):

    if params_array['status']:

        return {
            "status": 1,
            "accesskey": params_array['key'],
            "weburl": params_array['weburl'].encode('utf-8')
        }
    else:
        return params_array





def ccavenuseResponse(response_params, access_code):

    if len(response_params) == 0:
        return {
            'status': 0,
            'data': 'Response params is empty.'
        }

    ccavenuePaymentResponse = _removeSpaceAndPrepareAPIResponseArray(
        response_params)

    empty_validation = _emptyValidation(ccavenuePaymentResponse, access_code)
    if empty_validation != True:
        return empty_validation

    response_result = _getResponse(ccavenuePaymentResponse, access_code)

    return response_result


def _removeSpaceAndPrepareAPIResponseArray(response_array):
    temp_dictionary = {}
    for key in response_array:
        temp_dictionary[key] = str(response_array[key]).strip()
    return temp_dictionary





def _getResponse(response_array, access_code):

    reverse_hash_key = _getReverseHashKey(response_array, access_code)

    if reverse_hash_key == response_array['hash']:

        if response_array['status'] == 'success':
            return {
                'status': 1,
                'url': response_array['surl'],
                'data': response_array
            }
        elif response_array['status'] == 'failure':
            return {
                'status': 1,
                'url': response_array['furl'],
                'data': response_array
            }
        else:
            return {
                'status': 1,
                'data': response_array
            }
    else:
        return {
            'status': 0,
            'data': 'Hash key Mismatch'
        }




def _getReverseHashKey(response_array, s_key):
    reverse_hash_string_sequence = "udf10|udf9|udf8|udf7|udf6|udf5|udf4|udf3|udf2|udf1|email|firstname|productinfo|amount|txnid|key"

    reverse_hash_string = ""

    hash_sequence_array = reverse_hash_string_sequence.split("|")
    reverse_hash_string += s_key + '|' + response_array['status']

    for value in hash_sequence_array:
        reverse_hash_string += "|"
        if value in response_array:
            reverse_hash_string += str(response_array[value])
        else:
            reverse_hash_string += ""

    return sha512(reverse_hash_string.encode('utf-8')).hexdigest().lower()

from Crypto.Cipher import AES

def pad(data):
	length = 16 - (len(data) % 16)
	data += chr(length)*length
	return data






==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/response_handlers.py
--------------------------------------------------

import json
import requests
import pytz
import datetime
from django.utils import timezone
from basicinformation.tasks import *
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from basicinformation.api.helperFunctions import *
from management.models import *
from content.models import *



def easebuzz_package_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        
        try:
            get_code = EaseBuzzPayment.objects.get(txnid = txnid)
            tcode = get_code.tcode
            if tcode is None:
                tcode = 'No-Code'
                
        except EaseBuzzPayment.DoesNotExist:
            tcode = 'No-Code'
        
        if refresh:
            if PaidAmountStudentPackage.objects.filter(package_buy_payment_record=payment_response).exists():
                context = {
                    'status': 'failed',
                    'txnid': txnid,
                    'transaction_status': transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
            
        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        package_id = response.get('udf4')
        webapp = response.get('udf2')
        
        try:
            coupone_code = response.get('udf7')
        except:
            coupone_code = None
            
        body = {
            'package_id': package_id,
            'amount': amount,
            'txnid': txnid,
            'coupon_id': coupone_code,
            'tcode': tcode,
        }

        url = 'https://bodhiai.live/api/content/student_buy_package/'
        response_buy = requests.post(url, body, headers=headers)
        response_buy = json.loads(response_buy.content)
        
        try:
            package = Package.objects.get(id=package_id)
            if webapp =="web":
                institute_name = package.teacher.institute.name
                webapp_link = package.teacher.institute.webAppUrl
                number = user.username.split('@')[0]
                package_name = f'[{package.title[:15]}...]'

                context = {
                    "phone": response['phone'],
                    "name": response['firstname'],
                    "package_name": package_name,
                    "institute_name": institute_name,
                    "webapp_link": webapp_link,
                    "username": number,
                }
                
                send_textlocal_package_buy(context)
        except:
            pass

        context = {
            'status': response['status'],
            'txnid': txnid,
            'transaction_status': transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            'status': 'failed',
            'txnid': txnid,
            'transaction_status': transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_books_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountStudentBook.objects.filter(books_buy_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        book_id = response.get('udf4')
        try:
            coupon_id = response.get('udf7')
        except:
            coupon_id = None
            
        body = {
            'book_id': book_id,
            'amount': float(amount),
            'txnid': txnid,
            'coupon_id': coupon_id,
        }
        url = 'https://bodhiai.live/api/content/student_buy_book/'

        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)
        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_feespaid(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)
        if refresh:
            if StudentCourseFees.objects.filter(feespaid_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}

        body = {
            'fees_id': response.get('udf4'),
            'typePayment': response.get('udf5'),
            'modePayment': 'online',
            'amountPaid': amount,
            'txnid': txnid,
        }

        url = 'https://bodhiai.live/api/management/student_pay_batchwise_coursefees/'
        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)

        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_otprecharge(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if SMSPackageBought.objects.filter(sms_package_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}

        body = {
            'amount': amount,
            'txnid': txnid
        }

        url = 'https://bodhiai.live/api/basicinformation/teacher_buy_sms_package/'
        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)

        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def mobile_iti_feepayment(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)

        if refresh:
            if StudentTradePurchase.objects.filter(mobile_iti_fees_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        student_trade_dict = {}
        student_trade_dict['student'] = Student.objects.get(studentuser=user)
        student_trade_dict['trade_details'] = TradeDetails.objects.get(
            id=response['udf4'])
        student_trade_dict['paidAmount'] = amount
        student_trade_dict['mode'] = "online"
        student_trade_dict['approved'] = True

        student_trade = StudentTradePurchase(**student_trade_dict)
        student_trade.save()

        payment_response.mobile_iti_fees = student_trade
        payment_response.save()

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def meethour_recharge(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)

        if response['udf5'] == "developer":
            if refresh:
                if MeetHourDeveloperAccountPayment.objects.filter(meethour_payment_developer_payment_record=payment_response).exists():
                    context = {
                        "status": "failed",
                        "txnid": txnid,
                        "transaction_status": transaction_status,
                        'message': 'Transaction Process already Completed',
                    }
                    return context

            developer_dict = {}
            developer_dict['developer_account'] = MeetHourDeveloperAccountClientCredentials.objects.get(id=response['udf6'])
            developer_dict['amount'] = amount
            payment_recharge = MeetHourDeveloperAccountPayment.objects.filter(developer_account=developer_dict['developer_account']).order_by('-expire_date').first()
            pack = MeetHourDeveloperAccountPakages.objects.get(id=response['udf4'])
            curr_expire_date = payment_recharge.expire_date
            new_timezone = pytz.timezone('Asia/Kolkata')
            date_now = datetime.datetime.now(new_timezone).date()
            start_date = max(curr_expire_date,date_now)
            Enddate = start_date + datetime.timedelta(days=pack.days)
            developer_dict['expire_date'] = Enddate

            meethour_recharge = MeetHourDeveloperAccountPayment(**developer_dict)
            meethour_recharge.save()

            payment_response.meethour_payment_developer = meethour_recharge
            payment_response.save()

            institute.meethour_account_type = 'developer'
            institute.save()


        elif response['udf5'] == "enterprise":
            if refresh:
                if MeetHourPayment.objects.filter(meethour_payment_enterprise_payment_record=payment_response).exists():
                    context = {
                        "status": "failed",
                        "txnid": txnid,
                        "transaction_status": transaction_status,
                        'message': 'Transaction Process already Completed',
                    }
                    return context

            enterprise_dict = {}
            institute = Teacher.objects.get(teacheruser__username=response['udf1']).institute
            enterprise_dict['institute'] = institute
            enterprise_dict['amount'] = amount
            payment_recharge = MeetHourPayment.objects.filter(institute=institute).order_by('-expire_date').first()
            pack = MeetHourDeveloperAccountPakages.objects.get(id=response['udf4'])
            curr_expire_date = payment_recharge.expire_date
            new_timezone = pytz.timezone('Asia/Kolkata')
            date_now = datetime.datetime.now(new_timezone).date()
            start_date = max(curr_expire_date,date_now)
            Enddate = start_date + datetime.timedelta(days=pack.days)
            enterprise_dict['expire_date'] = Enddate

            meethour_recharge = MeetHourPayment(**enterprise_dict)
            meethour_recharge.save()

            payment_response.meethour_payment_enterprise = meethour_recharge
            payment_response.save()

            institute.meethour_account_type = 'enterprise'
            institute.save()
        
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_subject_buy(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)
        if refresh:
            if PaidAmountSubject.objects.filter(subject_buy_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        subject_dict = {}
        subject_dict['teacher'] = Teacher.objects.get(teacheruser=user)
        subject_dict['subject'] = Subject.objects.get(id=response['udf4'])
        subject_dict['paidAmount'] = amount
        subjectPaid = PaidAmountSubject(**subject_dict)
        subjectPaid.save()
        subject_id = response['udf4']
        teacher = Teacher.objects.get(teacheruser=user)
        teacher_id=teacher.id
        create_subject_replica_new.delay(teacher_id, subject_id,price=amount,subject_brought=True)
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_registertion_exam(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)
        if refresh:
            if PaidAmountStudentExam.objects.filter(register_exam_payment_records=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
        
        registertion_dict = {}
        registertion_dict['student'] = RegisterExam.objects.get(student__studentuser=user)
        registertion_dict['paidAmount'] = float(100)
        exam_register = PaidAmountStudentExam(**registertion_dict)
        exam_register.save()
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_csa_admit_card(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))
        payment_response = EaseBuzzPaymentResponseRecord.objects.get(
            payment__txnid=txnid)
        if refresh:
            if PaidCSAIdCardStudent.objects.filter(csa_id_card_payment_record=payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context
        
        student_dict = {}
        student = Student.objects.get(studentuser = user)
        student_dict['name'] = CSAIdCard.objects.get(student=student)
        student_dict['paidAmount'] = amount
        card_register = PaidCSAIdCardStudent(**student_dict)
        card_register.save()
        context = {
            "status": "success",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': "Trasaction Completed Successfully",
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context

def easebuzz_payFor_shop_details(response, refresh=True):
    txnid = response['txnid']
    amount = response['amount']
    transaction_status = response['status']
    try:
        user = User.objects.get(username=response.get('udf1'))

        payment_response = EaseBuzzPaymentResponseRecord.objects.get(payment__txnid=txnid)
        if refresh:
            if PaidAmountClientShop.objects.filter(shop_buy_payment_record = payment_response).exists():
                context = {
                    "status": "failed",
                    "txnid": txnid,
                    "transaction_status": transaction_status,
                    'message': 'Transaction Process already Completed',
                }
                return context

        token = Token.objects.get(user=user)
        headers = {'Authorization': f'token {token.key}'}
        shop_id = response.get('udf4')
        body = {
            'shop_id': shop_id,
            'amount': float(amount),
            'txnid': txnid
        }
        url = 'https://bodhiai.live/api/content/student_buy_shop_details/'

        response = requests.post(url, body, headers=headers)
        response = json.loads(response.content)
        context = {
            "status": response['status'],
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': response['message'],
        }

    except Exception as e:
        context = {
            "status": "failed",
            "txnid": txnid,
            "transaction_status": transaction_status,
            'message': str(e),
        }

    return context


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/transaction.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback


def get_transaction_details(params, merchant_key, salt, env):
    try:
        result = _transaction(params, merchant_key, salt, env)

        easebuzz_transaction_response = _validateTransactionResponse(result, salt)
        return easebuzz_transaction_response

    except Exception as e:
        traceback.print_exc()
        print("#######Error on transaction:get_transaction_details#######")
        return ({"status": False, "reason": 'Exception occured'})




def _transaction(params, merchant_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(
        params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = merchant_key


    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['amount']):
        postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    transaction_result = _getTransaction(postedArray, salt, URL)

    return transaction_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):

    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['txnid']:
        empty_value = 'Transaction ID'

    if not params['amount']:
        empty_value = 'Transaction Amount'

    if not params['email']:
        empty_value = 'Email'

    if not params['phone']:
        empty_value = 'Phone'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True




def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['txnid'], str)):
        type_value = "Merchant Transaction ID should be string"

    if not (isinstance(params['amount'], float)):
        type_value = "The amount should float up to two or one decimal."

    if not (isinstance(params['phone'], str)):
        type_value = "Phone Number should be number"

    if not (isinstance(params['email'], str)):
        type_value = "Email should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True




def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testdashboard.easebuzz.in/"
    elif env == 'prod':
        url_link = "https://dashboard.easebuzz.in/"
    else:
        url_link = "https://testdashboard.easebuzz.in/"

    return url_link




def _getTransaction(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)

    params_array['hash'] = hash_key

    request_result = requests.post(
        url + 'transaction/v1/retrieve', params_array)

    return json.loads(request_result.content)




def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|txnid|amount|email|phone"

    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()




def _validateTransactionResponse(response_array, salt_key):

    if response_array['status'] == True:

        reverse_hash_key = _getReverseHashKey(response_array['msg'], salt_key)

        if reverse_hash_key == response_array['msg']['hash']:

            return response_array

        else:
            return {
                'status': 0,
                'data': 'Hash key Mismatch'
            }

    return response_array




def _getReverseHashKey(response_array, s_key):
    reverse_hash_string_sequence = "udf10|udf9|udf8|udf7|udf6|udf5|udf4|udf3|udf2|udf1|email|firstname|productinfo|amount|txnid|key"

    reverse_hash_string = ""

    hash_sequence_array = reverse_hash_string_sequence.split("|")
    reverse_hash_string += s_key + '|' + str(response_array['status'])

    for value in hash_sequence_array:
        reverse_hash_string += "|"
        if value in response_array:
            reverse_hash_string += str(response_array[value])
        else:
            reverse_hash_string += ""

    return sha512(reverse_hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/payout.py
--------------------------------------------------

from hashlib import sha512
import requests
import json
import re
import traceback



def get_payout_details_by_date(params, merchant_key, salt, env):
    try:
        result = _payout(params, merchant_key, salt, env)
        return result

    except Exception as e:
        traceback.print_exc()
        print("#######Error on payout:get_payout_details_by_date#######")
        return ({"status": False, "reason": 'Exception occured'})




def _payout(params, merchant_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(
        params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['merchant_key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    email_validation = _email_validation(postedArray['merchant_email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    refund_result = _payoutPayment(postedArray, salt, URL)

    return refund_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):

    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _emptyValidation(params, salt):
    empty_value = False

    if not params['merchant_key']:
        empty_value = 'Merchant Key'

    if not params['merchant_email']:
        empty_value = 'Merchant email'

    if not params['payout_date']:
        empty_value = 'Payout date'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True




def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['merchant_key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['merchant_email'], str)):
        type_value = "Merchant email should be string"

    if not (isinstance(params['payout_date'], str)):
        type_value = "Payout should be date"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True




def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testdashboard.easebuzz.in/"
    elif env == 'prod':
        url_link = "https://dashboard.easebuzz.in/"
    else:
        url_link = "https://testdashboard.easebuzz.in/"

    return url_link




def _payoutPayment(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    params_array['hash'] = hash_key

    request_result = requests.post(url + 'payout/v1/retrieve', params_array)
    result = json.loads(request_result.content)

    return result




def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "merchant_key|merchant_email|payout_date"

    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/easebuzz_payment_gateway.py
--------------------------------------------------

import json
from management.models import EaseBuzzPayment, EaseBuzzPaymentResponseRecord

class Easebuzz:
    MERCHANT_KEY = ''
    SALT = ''
    ENV = ''


    def __init__(self, key, salt, env):
        self.MERCHANT_KEY = key
        self.SALT = salt
        self.ENV = env


    def initiatePaymentAPI(self, params):
        from . import payment
        try:
            record = EaseBuzzPayment(
                amount = params.get('amount'),
                email = params.get('email'),
                productinfo = params.get('productinfo'),
                tcode = params.get('tcode'),
                firstname = params.get('firstname'),
                phone = params.get('phone'),
                udf1 = params.get('udf1') if params.get('udf1') else "",
                udf2 = params.get('udf2') if params.get('udf2') else "",
                udf3 = params.get('udf3') if params.get('udf3') else "",
                udf4 = params.get('udf4') if params.get('udf4') else "",
                udf5 = params.get('udf5') if params.get('udf5') else "",
                udf6 = params.get('udf6') if params.get('udf6') else "",
                udf7 = params.get('udf7') if params.get('udf7') else "",
                zipcode = params.get('zipcode') if params.get('zipcode') else "",
                address1 = params.get('address1') if params.get('address1') else "",
                address2 = params.get('address2') if params.get('address1') else "",
                city = params.get('city') if params.get('city') else "",
                state = params.get('state') if params.get('state') else "",
                country = params.get('country') if params.get('country') else "",
                merchant_key = self.MERCHANT_KEY,
                salt = self.SALT,
                sub_merchant_id = params.get('sub_merchant_id'),
                payment_type = params.get('payment_type'),
            )
            record.save()
            
        except Exception as e:
            return json.dumps(e)

        params['txnid'] = record.txnid
        params['surl'] = f'https://bodhiai.live/api/management/transaction_response/'
        params['furl'] = f'https://bodhiai.live/api/management/transaction_response/'

        result = payment.initiate_payment(params, self.MERCHANT_KEY, self.SALT, self.ENV)
        return result
 

    def transactionAPI(self, params):
        from . import transaction

        result = transaction.get_transaction_details(params, self.MERCHANT_KEY, self.SALT, self.ENV)
        return result


    def transactionDateAPI(self, params):
        from . import transaction_date
        result = transaction_date.get_transactions_by_date(
            params, self.MERCHANT_KEY, self.SALT, self.ENV)
        return result


    def refundAPI(self, params):
        from . import refund
        result = refund.initiate_refund(params, self.MERCHANT_KEY, self.SALT, self.ENV)
        return result


    def payoutAPI(self, params):
        from . import payout
        result = payout.get_payout_details_by_date(
            params, self.MERCHANT_KEY, self.SALT, self.ENV)
        return result


    def easebuzzResponse(self, params):
        from . import payment
        txnid = params['txnid']
        EaseBuzzPaymentResponseRecord \
            .objects \
            .create(
                payment = EaseBuzzPayment.objects.get(txnid=txnid),
                status = params['status'],
                data = json.dumps(params, indent=2)
            )
        result = payment.easebuzzResponse(params, self.SALT)
        return result


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/payment.py
--------------------------------------------------

from hashlib import sha512
import requests
import json
import re
import traceback



def initiate_payment(params, merchant_key, salt, env):
    try:
        result = _payment(params, merchant_key, salt, env)
        return _paymentResponse(result)

    except Exception as e:
        traceback.print_exc()
        print("#######Error on payment:initiate_payment#######")
        return ({"status": False, "reason": 'Exception Occured'})


def _payment(params, merchant_key, salt, env):

    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['amount']):
        postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    pay_result = _pay(postedArray, salt, URL)

    return pay_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['amount'], float)):
        type_value = "The amount should float up to two or one decimal."

    if not (isinstance(params['productinfo'], str)):
        type_value = "Product Information should be string"

    if not (isinstance(params['firstname'], str)):
        type_value = "First Name should be string"

    if not (isinstance(params['phone'], str)):
        type_value = "Phone Number should be number"

    if not (isinstance(params['email'], str)):
        type_value = "Email should be string"

    if not (isinstance(params['surl'], str)):
        type_value = "Success URL should be string"

    if not (isinstance(params['furl'], str)):
        type_value = "Failure URL should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True



def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['txnid']:
        empty_value = 'Transaction ID'

    if not params['amount']:
        empty_value = 'Amount'

    if not params['firstname']:
        empty_value = 'First Name'

    if not params['email']:
        empty_value = 'Email'

    if not params['phone']:
        empty_value = 'Phone'

    if not params['productinfo']:
        empty_value = 'Product Infomation'
        
    if not params['surl']:
        empty_value = 'Success URL'

    if not params['furl']:
        empty_value = 'Failure URL'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True




def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testpay.easebuzz.in/"
    elif env == 'prod':
        url_link = 'https://pay.easebuzz.in/'
    else:
        url_link = "https://testpay.easebuzz.in/"

    return url_link



def _pay(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)

    params_array['hash'] = hash_key

    request_result = requests.post(url + 'payment/initiateLink', params_array)

    result = json.loads(request_result.content)

    if result['status'] == 1:
        accesskey = result['data']
    else:
        accesskey = ""

    if not accesskey:
        return result
    else:
        return {
            'status': 1,
            'key': accesskey,
            'weburl': url + 'pay/' + accesskey,
        }



def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|txnid|amount|productinfo|firstname|email|udf1|udf2|udf3|udf4|udf5|udf6|udf7|udf8|udf9|udf10"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()




def _paymentResponse(params_array):

    if params_array['status'] == 1:

        return {
            "status": 1,
            "accesskey": params_array['key'],
            "weburl": params_array['weburl'].encode('utf-8')
        }
    else:
        return params_array


def easebuzzResponse(response_params, salt_key):
    if len(response_params) == 0:
        return {
            'status': 0,
            'data': 'Response params is empty.'
        }

    easebuzzPaymentResponse = _removeSpaceAndPrepareAPIResponseArray(response_params)

    empty_validation = _emptyValidation(easebuzzPaymentResponse, salt_key)
    if empty_validation != True:
        return empty_validation

    response_result = _getResponse(easebuzzPaymentResponse, salt_key)

    return response_result




def _removeSpaceAndPrepareAPIResponseArray(response_array):
    temp_dictionary = {}
    for key in response_array:
        temp_dictionary[key] = str(response_array[key]).strip()
    return temp_dictionary




def _getResponse(response_array, s_key):

    reverse_hash_key = _getReverseHashKey(response_array, s_key)

    if reverse_hash_key == response_array['hash']:

        if response_array['status'] == 'success':
            return {
                'status': 1,
                'url': response_array['surl'],
                'data': response_array
            }
        elif response_array['status'] == 'failure':
            return {
                'status': 1,
                'url': response_array['furl'],
                'data': response_array
            }
        else:
            return {
                'status': 1,
                'data': response_array
            }
    else:
        return {
            'status': 0,
            'data': 'Hash key Mismatch'
        }



def _getReverseHashKey(response_array, s_key):
    reverse_hash_string_sequence = "udf10|udf9|udf8|udf7|udf6|udf5|udf4|udf3|udf2|udf1|email|firstname|productinfo|amount|txnid|key"

    reverse_hash_string = ""

    hash_sequence_array = reverse_hash_string_sequence.split("|")
    reverse_hash_string += s_key + '|' + response_array['status']

    for value in hash_sequence_array:
        reverse_hash_string += "|"
        if value in response_array:
            reverse_hash_string += str(response_array[value])
        else:
            reverse_hash_string += ""

    return sha512(reverse_hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/refund.py
--------------------------------------------------

from hashlib import sha512
import requests
import json
import re
import traceback



def initiate_refund(params, merchant_key, salt, env):
    try:
        result = _refund(params, merchant_key, salt, env)
        return result

    except Exception as e:
        traceback.print_exc()
        print("#######Error on refund:initiate_refund#######")
        return ({"status": False, "reason": 'Exception occured'})




def _refund(params, merchant_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(
        params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['refund_amount']):
        postedArray['refund_amount'] = float(postedArray['refund_amount'])

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['amount']):
        postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    refund_result = _refundPayment(postedArray, salt, URL)

    return refund_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):

    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['txnid']:
        empty_value = 'Transaction ID'

    if not params['refund_amount']:
        empty_value = 'Refund Amount'

    if not params['amount']:
        empty_value = 'Paid Amount'

    if not params['email']:
        empty_value = 'Email ID'

    if not params['phone']:
        empty_value = 'Phone'

    if not salt:
        empty_value = 'Merchant Salt Key'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True




def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['txnid'], str)):
        type_value = "Transaction ID should be string"

    if not (isinstance(params['phone'], str)):
        type_value = "Phone Number should be number"

    if not (isinstance(params['refund_amount'], float)):
        type_value = "The refund amount should float up to two or one decimal."

    if not (isinstance(params['amount'], float)):
        type_value = "The paid amount should float up to two or one decimal."

    if not (isinstance(params['email'], str)):
        type_value = "Email ID should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True




def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testdashboard.easebuzz.in/"
    elif env == 'prod':
        url_link = "https://dashboard.easebuzz.in/"
    else:
        url_link = "https://testdashboard.easebuzz.in/"

    return url_link




def _refundPayment(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    params_array['hash'] = hash_key

    request_result = requests.post(url + 'transaction/v1/refund', params_array)

    return json.loads(request_result.content)




def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|txnid|amount|refund_amount|email|phone"

    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/paymentsGateway/transaction_date.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback



def get_transactions_by_date(params, merchant_key, salt, env):
    try:
        result = _date_transaction(params, merchant_key, salt, env)
        return result

    except Exception as e:
        traceback.print_exc()
        print("#######Error on transaction_date:get_transactions_by_date#######")
        return ({"status": False, "reason": 'Exception occured'})




def _date_transaction(params, merchant_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(
        params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['merchant_key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    email_validation = _email_validation(postedArray['merchant_email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    date_transaction_result = _getDateTransaction(postedArray, salt, URL)

    return date_transaction_result




def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True




def _removeSpaceAndPreparePostArray(params):

    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary




def _emptyValidation(params, salt):
    empty_value = False

    if not params['merchant_key']:
        empty_value = "Merchant Key can not empty"

    if not params['merchant_email']:
        empty_value = "Merchat Email can not empty"

    if not params['transaction_date']:
        empty_value = "Transaction date can not empty"

    if empty_value != False:
        return {
            'status': 0,
            'data': empty_value
        }

    return True




def _email_validation(email):

    if not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True




def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testdashboard.easebuzz.in/"
    elif env == 'prod':
        url_link = "https://dashboard.easebuzz.in/"
    else:
        url_link = "https://testdashboard.easebuzz.in/"

    return url_link




def _getDateTransaction(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    params_array['hash'] = hash_key

    request_result = requests.post(
        url + 'transaction/v1/retrieve/date', params_array)
    temp_result = json.loads(request_result.content)

    return temp_result




def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "merchant_key|merchant_email|transaction_date"

    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/payout/beneficiary.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback


def add_beneficiary(params, merchant_key, salt, env):
    try:
        result = _addbeneficiary(params, merchant_key, salt, env)
        return result
    except Exception as e:
        traceback.print_exc()
        print("#######Error on beneficiary:add_beneficiary#######")
        return ({"status": False, "reason": 'Exception occured'})


def _addbeneficiary(params, merchant_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(
        params, merchant_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = merchant_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    beneficiary_type_validate = _beneficiaryTypeValidate(
        postedArray['beneficiary_type'])
    if beneficiary_type_validate != True:
        return beneficiary_type_validate

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    URL = _getURL(env)

    added_beneficiary = _beneficiary(postedArray, salt, URL)

    return added_beneficiary


def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True


def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary


def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Merchant Key should be string"

    if not (isinstance(params['contact_id'], str)):
        type_value = "Contact ID should be string"

    if not (isinstance(params['beneficiary_type'], str)):
        type_value = "Beneficiary Type should be string"

    if not (isinstance(params['beneficiary_name'], str)):
        type_value = "Beneficiary Name should be string"

    if not (isinstance(params['account_number'], str)):
        type_value = "Account Number should be Number"

    if not (isinstance(params['ifsc'], str)):
        type_value = "IFSC should be string"

    if not (isinstance(params['upi_handle'], str)):
        type_value = "UPI should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True


def _beneficiaryTypeValidate(beneficiary_type):
    if beneficiary_type not in ['bank_account', 'upi']:
        return {
            'status': 0,
            'data': beneficiary_type + 'give parameter value is not define'
        }
    return True


def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Merchant Key'

    if not params['contact_id']:
        empty_value = 'Contact ID'

    if not params['beneficiary_name']:
        empty_value = 'Beneficiary Name'

    if not params['beneficiary_type']:
        empty_value = 'Beneficiary Type'

    if params['beneficiary_type'] == 'upi':
        if not params['upi_handle']:
            empty_value = 'UPI'

    elif params['beneficiary_type'] == 'bank_account':
        if not params['account_number']:
            empty_value = 'Account Number'

        if not params['ifsc']:
            empty_value = 'IFSC'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True


def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testpay.easebuzz.in/"
    elif env == 'prod':
        url_link = 'https://wire.easebuzz.in/'
    else:
        url_link = "https://testpay.easebuzz.in/"

    return url_link


def _beneficiary(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    Headers = {'Authorization':  hash_key}
    body = params_array

    request_result = requests.post(
        url + 'api/v1/beneficiaries/', json=body, headers=Headers)

    result = json.loads(request_result.content)
    return result


def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|contact_id|beneficiary_name|account_number|ifsc|upi_handle"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/payout/payout.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback


def initiate_transfer(params, wire_key, salt, env):
    try:
        result = _initiatetransfer(params, wire_key, salt, env)
        return result
    except Exception as e:
        traceback.print_exc()
        print("#######Error on transfer:initiate_transfer#######")
        return ({"status": False, "reason": 'Exception occured'})


def _initiatetransfer(params, wire_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(params, wire_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = wire_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    if re.match(r"^([\d]+)\.([\d]?[\d])$", postedArray['amount']):
        postedArray['amount'] = float(postedArray['amount'])

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    URL = _getURL(env)

    transfered = _transfer(postedArray, salt, URL)

    return transfered


def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True


def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary


def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Wire Key should be string"

    if not (isinstance(params['beneficiary_code'], str)):
        type_value = "Beneficiary Code should be number"

    if not (isinstance(params['unique_request_number'], str)):
        type_value = "Unique Request Number should be string"

    if not (isinstance(params['payment_mode'], str)):
        type_value = "Payment Mode should be string"

    if not (isinstance(params['amount'], float)):
        type_value = "Amount should be float"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True


def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Wire Key'

    if not params['beneficiary_code']:
        empty_value = 'Beneficiary Code'

    if not params['unique_request_number']:
        empty_value = 'Unique Request Number'

    if not params['payment_mode']:
        empty_value = 'Payment Mode'

    if not params['amount']:
        empty_value = 'Amount'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True


def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testpay.easebuzz.in/"
    elif env == 'prod':
        url_link = 'https://wire.easebuzz.in/'
    else:
        url_link = "https://testpay.easebuzz.in/"

    return url_link


def _transfer(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    Headers = {"Authorization":  hash_key}
    body = params_array

    request_result = requests.post(
        url + 'api/v1/transfers/initiate/', json=body, headers=Headers)

    result = json.loads(request_result.content)
    return result


def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|beneficiary_code|unique_request_number|amount"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/payout/easebuzz_payout_gateway.py
--------------------------------------------------

import json
import random
import string
from django.db import transaction, DatabaseError
from management.models import WireContacts, WireContactsBeneficiary, WireTransferRecord


class Easebuzz:

    WIRE_KEY = ''
    SALT = ''
    ENV = ''


    def __init__(self, key, salt, env):
        self.WIRE_KEY = key
        self.SALT = salt
        self.ENV = env

    def createContactAPI(self, params, user):
        from . import contact

        try:
            contact_object = WireContacts.objects.create(
                user=user,
                name=params['name'],
                email=params['email'],
                phone=params['phone'],
                wire_key=self.WIRE_KEY,
            )

            result = contact.create_contact(
                params, self.WIRE_KEY, self.SALT, self.ENV)

            if result['success']:
                data = result['data']['contact']
                contact_object.contact_id = data['id']
                contact_object.status = data['status']
                contact_object.created_by = data['created_by']
                contact_object.successfully_created = True
                contact_object.save()

                response = True, result, contact_object

            else:
                response = False, result
                contact_object.delete()

            return response

        except Exception as e:
            return False, {'success': False, 'message': str(e)}

    def addBeneficiaryAPI(self, params, contact):
        from . import beneficiary

        try:
            created_beneficiary = WireContactsBeneficiary.objects.create(
                contact=contact,
                beneficiary_type='U' if params['beneficiary_type'] == 'upi' else 'B',
                beneficiary_name=params['beneficiary_name'],
                account_number=params.get('account_number') if params.get(
                    'account_number') != None else "",
                ifsc=params.get('ifsc') if params.get('ifsc') != None else "",
                upi_handle=params.get('upi_handle') if params.get(
                    'upi_handle') != None else "",
                wire_key=self.WIRE_KEY,
            )

            result = beneficiary.add_beneficiary(
                params, self.WIRE_KEY, self.SALT, self.ENV)

            if result['success']:
                data = result['data']['beneficiary']
                created_beneficiary.beneficiary_id = data['id']
                created_beneficiary.bank_name = data['bank_name']
                created_beneficiary.is_active = data['is_active']
                created_beneficiary.is_primary = data['is_primary']
                created_beneficiary.successfully_created = True
                created_beneficiary.save()

                response = True, result, created_beneficiary

            else:
                created_beneficiary.delete()
                response = False, result

            return response

        except Exception as e:
            return (False, {'success': False, 'message': str(e)})

    def initiateTransferAPI(self, params, beneficiary, from_account):
        from . import payout
        try:
            unique_request_number = ''.join(random.choices(
                string.ascii_uppercase + string.digits, k=15))
            params['unique_request_number'] = unique_request_number
            transaction_created = WireTransferRecord.objects.create(
                beneficiary=beneficiary,
                unique_request_number=unique_request_number,
                payment_mode=params['payment_mode'],
                scheduled_for=params.get('scheduled_for'),
                amount=params['amount'],
                udf1= params['udf1'],
                udf2= params['udf2'],
                udf3= params['udf3'],
                udf4= params['udf4'],
                udf5= params['udf5'],
                wire_key=self.WIRE_KEY,
                from_account=from_account,
            )

            result = payout.initiate_transfer(
                params, self.WIRE_KEY, self.SALT, self.ENV)

            if result['success']:
                data = result['data']['transfer_request']

                transaction_created.source_virtual_account = data['source_virtual_account']
                transaction_created.failure_reason = data['failure_reason']
                transaction_created.service_charge = data['service_charge']
                transaction_created.gst_amount = data['gst_amount']
                transaction_created.created_at = data['created_at']
                transaction_created.transfer_date = data['transfer_date']
                if data['status'] == 'success':
                    transaction_created.successfully_executed = True
                transaction_created.save()
            else:
                transaction_created.delete()

            return result

        except Exception as e:
            return {'success': False, 'message': str(e)}


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/management/api/easebuzz/payout/contact.py
--------------------------------------------------

from hashlib import sha512

import requests
import json
import re
import traceback


def create_contact(params, wire_key, salt, env):
    try:
        result = _createcontact(params, wire_key, salt, env)
        return result
    except Exception as e:
        traceback.print_exc()
        print("#######Error on contact:create_contact#######")
        return ({"status": False, "reason": 'Exception occured'})


def _createcontact(params, wire_key, salt, env):
    postedArray = {}
    URL = None

    argument_validation = _checkArgumentValidation(params, wire_key, salt, env)
    if type(argument_validation) == type({}) and argument_validation['status'] == 0:
        return argument_validation

    params['key'] = wire_key

    postedArray = _removeSpaceAndPreparePostArray(params)

    empty_validation = _emptyValidation(postedArray, salt)
    if empty_validation != True:
        return empty_validation

    type_validation = _typeValidation(postedArray, salt, env)
    if type_validation != True:
        return type_validation

    email_validation = _email_validation(postedArray['email'])
    if email_validation != True:
        return email_validation

    URL = _getURL(env)

    created_contact = _contact(postedArray, salt, URL)

    return created_contact


def _checkArgumentValidation(*arg):
    if len(arg) != 4:
        return {
            'status': 0,
            'data': 'Invalid number of arguments.'
        }
    return True


def _removeSpaceAndPreparePostArray(params):
    temp_dictionary = {}
    for key in params:
        temp_dictionary[key] = str(params[key]).strip()

    return temp_dictionary


def _typeValidation(params, salt, env):

    type_value = False

    if not (isinstance(params['key'], str)):
        type_value = "Wire API Key should be string"

    if not (isinstance(params['name'], str)):
        type_value = "Name should be string"

    if type_value != False:
        return {
            'status': 0,
            'data': type_value
        }

    return True


def _emptyValidation(params, salt):
    empty_value = False

    if not params['key']:
        empty_value = 'Wire Key'

    if not params['name']:
        empty_value = 'Name'

    if empty_value != False:
        return {
            'status': 0,
            'data': 'Mandatory Parameter ' + empty_value + ' can not empty'
        }

    return True


def _email_validation(email):

    if email and not re.match(r"^([\w\.-]+)@([\w-]+)\.([\w]{2,8})(\.[\w]{2,8})?", email):
        return {
            'status': 0,
            'data': 'Email invalid, Please enter valid email.'
        }
    return True


def _getURL(env):
    url_link = None

    if env == 'test':
        url_link = "https://testpay.easebuzz.in/"
    elif env == 'prod':
        url_link = 'https://wire.easebuzz.in/'
    else:
        url_link = "https://testpay.easebuzz.in/"

    return url_link


def _contact(params_array, salt_key, url):
    hash_key = None

    hash_key = _getHashKey(params_array, salt_key)
    Headers = {'Authorization':  hash_key}
    body = params_array

    request_result = requests.post(
        url + 'api/v1/contacts/', json=body, headers=Headers)

    result = json.loads(request_result.content)
    return result


def _getHashKey(posted, salt_key):
    hash_string = ""
    hash_sequence = "key|name|email|phone"
    hash_sequence_array = hash_sequence.split("|")

    for value in hash_sequence_array:
        if value in posted:
            hash_string += str(posted[value])
        else:
            hash_string += ""
        hash_string += "|"

    hash_string += salt_key

    return sha512(hash_string.encode('utf-8')).hexdigest().lower()





==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/models.py
--------------------------------------------------

from django.db import models
from django.contrib.auth.models import User
from datetime import date
from membership.models import Teacher, Student, Batch, Institute, SubInstitute, SubInstituteTeacher, TeacherCourse
from django.utils import timezone
from tinymce import models as tinymce_models
from ckeditor.fields import RichTextField
from picklefield.fields import PickledObjectField
from django.contrib.postgres.fields import ArrayField
from django.core.validators import MaxValueValidator, MinValueValidator
from django.core.exceptions import ValidationError

class Subject(models.Model):
    name = models.CharField(max_length=100)
    icon = models.URLField(max_length=2000, default='https://bodhifebbodhi.s3.amazonaws.com/teacherdemo/2022-02-24/uh7Ebfm/2022-02-24.jpg')
    language = models.ForeignKey('content.Language', related_name='subject_language',on_delete=models.SET_NULL, blank=True, null=True)
    replica_parent_subject = models.ForeignKey('content.Subject', related_name='parent_subject', on_delete=models.SET_NULL, blank=True, null=True)
    subject_brought = models.BooleanField(default=False)
    parentsubjectReplica = models.BooleanField(default=False)
    price = models.FloatField(null=True,blank=True)

    def __str__(self):
        return self.name

    def teachers(self):
        teachers = self.teachersubject.all()
        teachers_name_list = list(teachers.values_list('name'))
        return teachers_name_list

    def institute(self):
        try:
            teachers = self.teachersubject.all()
            teacher = teachers.first()
            return teacher.institute.name
        except:
            return None
        
    def save(self, *args, **kwargs):
        if self.subject_brought:
            raise ValidationError('Cannot add or update a subject that is available for purchase.')
        super().save(*args, **kwargs)
        
    def save_brought_save(self, *args, **kwargs):
        super().save(*args, **kwargs)

class Chapter(models.Model):
    name = models.CharField(max_length=100)
    subject = models.ForeignKey(Subject, related_name='chapter_subject', on_delete=models.CASCADE)
    code = models.FloatField()
    replica_parent_chapter = models.ForeignKey('content.Chapter', related_name='parent_chapter', on_delete=models.SET_NULL, blank=True, null=True)

    def __str__(self):
        return self.name + ' ' + self.subject.name
    
    def save(self, *args, **kwargs):
        if self.subject.subject_brought:
            raise ValidationError('Cannot add or update a subject that is available for purchase.')
        super().save(*args, **kwargs)

class QuestionTopic(models.Model):
    topic = models.CharField(max_length=100)
    chapters = models.ManyToManyField(Chapter, blank=True)
    thumbNail = models.URLField(max_length=2000, blank=True, null=True)
    replica_parent_topic = models.ForeignKey('content.QuestionTopic', related_name='parent_topic', on_delete=models.SET_NULL, blank=True, null=True)

    def __str__(self):
        return self.topic

class QuestionSubTopic(models.Model):
    topic = models.ManyToManyField(QuestionTopic, blank=True)
    name = models.CharField(max_length=100)
    replica_parent_subtopic = models.ForeignKey(
        'content.QuestionSubTopic', related_name='parent_subtopic', on_delete=models.SET_NULL, blank=True, null=True)

    def __str__(self):
        return self.name

class Video(models.Model):
    title = models.CharField(max_length=200)
    teacher = models.ManyToManyField(Teacher, related_name='video_teacher')
    subject = models.ForeignKey(Subject, related_name='video_subject',on_delete=models.SET_NULL, null=True, blank=True)
    chapter = models.ForeignKey(Chapter, related_name='video_chapter',on_delete=models.SET_NULL, null=True, blank=True)
    topics = models.ForeignKey(QuestionTopic, on_delete=models.SET_NULL, blank=True, null=True)
    subTopics = models.ForeignKey(QuestionSubTopic, on_delete=models.SET_NULL, blank=True, null=True)
    batches = models.ManyToManyField(Batch, related_name='video_batches', blank=True)
    urlLink = models.URLField(max_length=2000)
    lowlink = models.URLField(max_length=2000, null=True, blank=True)
    highlink = models.URLField(max_length=2000, null=True, blank=True)
    download_link = models.CharField(max_length=2047,null=True,blank=True)
    generalVideo = models.BooleanField(default=False)
    publishDate = models.DateTimeField(auto_now_add=True, editable=True)
    locked = models.BooleanField(default=False)
    publish = models.BooleanField(default=True)
    thumbnail = models.URLField(max_length=2000, null=True, blank=True)
    viewsLimite = models.CharField(max_length=10, blank=True, null=True)

    def __str__(self):
        return self.title
    

class VideoOrderBatchWise(models.Model):
    batch = models.ForeignKey(Batch, related_name='order_batch',on_delete=models.CASCADE, null=True, blank=True)
    video = models.ForeignKey(Video, related_name='order_video',on_delete=models.CASCADE, null=True, blank=True)
    order = models.IntegerField()

    def __str__(self):
        return self.video.title + ' ' + str(self.order)

class Note(models.Model):
    title = models.CharField(max_length=200)
    thumbnail = models.CharField(max_length=511, null=True, blank=True)
    teacher = models.ManyToManyField(Teacher, related_name='note_teacher')
    subject = models.ForeignKey(Subject, related_name='note_subject',on_delete=models.SET_NULL, null=True, blank=True)
    chapter = models.ForeignKey(Chapter, related_name='note_chapter',on_delete=models.SET_NULL, null=True, blank=True)
    topic = models.ManyToManyField(QuestionTopic, blank=True)
    subTopic = models.ManyToManyField(QuestionSubTopic, blank=True)
    batches = models.ManyToManyField(Batch, related_name='notes_batches', blank=True)
    locked = models.BooleanField(default=False)
    noteViewsLimite = models.CharField(max_length=10, blank=True, null=True)
    image = models.BooleanField(default=False)
    publishDate = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if self.subject.subject_brought:
            raise ValidationError('Cannot add or update a subject that is available for purchase.')
        super().save(*args, **kwargs)

class NoteURL(models.Model):
    note = models.OneToOneField(Note, related_name='noteurl_note',on_delete=models.CASCADE, null=True)
    link = models.URLField(max_length=2000)
    page = models.IntegerField(default=1)

    def __str__(self):
        return str(self.id)

class Direction(models.Model):
    text = models.TextField()
    picture = models.URLField(null=True, blank=True)

    def __str__(self):
        return str(self.id)

class QuestionSection(models.Model):
    section = models.CharField(max_length=100)

    def __str__(self):
        return self.section

class QuestionExam(models.Model):
    exam = models.CharField(max_length=100)

    def __str__(self):
        return self.exam

class Question(models.Model):
    text = models.TextField(null=True, blank=True)
    hindi_text = models.TextField(null=True, blank=True)
    picture = models.URLField(max_length=2000, null=True, blank=True)
    subject = models.ForeignKey(Subject, related_name='question_subject',on_delete=models.SET_NULL, null=True)
    chapter = models.ForeignKey(Chapter, related_name='question_chapter',on_delete=models.SET_NULL, null=True)
    marks = models.FloatField(default=1)
    negativeMarks = models.FloatField(default=0.25)
    language = models.CharField(max_length=100, default='English')
    source = models.CharField(max_length=100, default='BodhiAI')
    direction = models.ForeignKey(Direction, null=True,related_name='question_direction', on_delete=models.SET_NULL)
    published = models.DateTimeField(auto_now_add=True, editable=True)
    probability = models.FloatField(null=True, blank=True)
    questionType = models.CharField(max_length=100, blank=True, null=True)
    difficulty = models.CharField(max_length=100, null=True, blank=True)
    dynamicText = RichTextField(blank=True, null=True, config_name='CKEDITOR_SETTINGS')
    section = models.ManyToManyField(QuestionSection, blank=True)
    exam = models.ManyToManyField(QuestionExam, blank=True)
    topic = models.ManyToManyField(QuestionTopic, blank=True)
    subTopic = models.ManyToManyField(QuestionSubTopic, blank=True)
    oneWordAnswer = models.CharField(max_length=1000, blank=True, null=True)
    oneWordExplanation = models.TextField(blank=True, null=True)
    oneWordQuestion = models.BooleanField(default=False, null=True, blank=True)
    video_url = models.URLField(max_length=2000, null=True, blank=True)
    audio_url = models.URLField(max_length=2000, null=True, blank=True)

    def __str__(self):
        return str(self.id)
    

class Option(models.Model):
    text = models.TextField(null=True, blank=True)
    hindi_text = models.TextField(null=True, blank=True)
    picture = models.URLField(max_length=2000)
    question = models.ForeignKey(Question, related_name='option_question', on_delete=models.CASCADE)
    explanationText = models.TextField(null=True, blank=True)
    explanationPicture = models.URLField(null=True, blank=True)
    explanationVideo = models.URLField(null=True, blank=True)
    correct = models.BooleanField(default=False)
    explanation = RichTextField(blank=True, null=True, config_name='CKEDITOR_SETTINGS')

    def __str__(self):
        return str(self.id) + ' ' + str(self.correct)

    class Meta:
        ordering = ['pk']

class Section(models.Model):
    name = models.CharField(max_length=100)
    question = models.ManyToManyField(Question,blank=True,related_name="sectionAccordingQuestion")

class QuizCategory(models.Model):
    title = models.CharField(max_length=400,null=True,blank=True)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return str(self.title)
     
class ContestCategory(models.Model):
    quiz_category = models.ForeignKey(QuizCategory, on_delete=models.SET_NULL,null=True, blank=True)
    title = models.CharField(max_length=400,null=True,blank=True)
    thumbnail = models.URLField(max_length=1000,null=True,blank=True)
    price = models.IntegerField(default=0)
    start_time = models.DateTimeField(null=True,blank=True)  
    end_time = models.DateTimeField(null=True,blank=True) 
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return str(self.title)
        
class Test(models.Model):
    contest_category = models.ForeignKey(ContestCategory,on_delete=models.SET_NULL,null=True, blank=True)
    createdBy = models.ForeignKey(Teacher, related_name='test_chapters', on_delete=models.SET_NULL, null=True, blank=True)
    students = models.ManyToManyField(Student, related_name='test_students',)
    alreadyTakers = models.ManyToManyField(Student, related_name='test_alreadyTakers')
    subjects = models.ManyToManyField(Subject, blank=True)
    chapters = models.ManyToManyField(Chapter, blank=True)
    topics = models.ManyToManyField(QuestionTopic, blank=True)
    subTopics = models.ManyToManyField(QuestionSubTopic, blank=True)
    batches = models.ManyToManyField(Batch,related_name='test_batches', blank=True)
    name = models.CharField(max_length=200)
    questions = models.ManyToManyField(Question, blank=True)
    totalMarks = models.FloatField()
    passing_marks = models.FloatField(blank=True, null=True)
    time = models.IntegerField()
    testStartDateTime = models.DateTimeField(null=True, blank=True)
    testEndDateTime = models.DateTimeField(null=True, blank=True)
    locked = models.BooleanField(default=False)
    publish = models.BooleanField(default=True)
    published = models.DateTimeField(auto_now_add=True, editable=True)
    testInstructions = models.TextField(null=True, blank=True)
    studentWillAttemptQuestions = models.CharField(max_length=200, null=True, blank=True)
    is_answers_showing = models.BooleanField(default=True)
    repeatTest = models.BooleanField(default=False) # if false then can't repeat test. take only once
    test_count = models.IntegerField(null=True, blank=True) # how many times a test will be repeat
    test_section = models.ManyToManyField(Section, blank=True)
    isSmartTest = models.BooleanField(default=False)
    correct_check_mark = models.FloatField(default=0.0) # per right question get mark
    incorrect_check_mark = models.FloatField(default=0.0) # per wrong question loss mark
    show_test_ranking = models.BooleanField(default=True, null=True, blank=True) # false means show ranking to students
    entry_fee = models.IntegerField(default=0)  # Coins required to participate
    max_participants = models.IntegerField(default=0)  # Limit for first-come, first-served
    ranks_calculated = models.BooleanField(default=False)

    def __str__(self):
        return self.name
    
    def add_subject(self, subject):
        if subject.subject_brought:
            raise ValueError(f'Subject "{subject.name}" is not available for add purchase it')
        self.subjects.add(subject)
        
    def total_prizes(self):
        prize_levels = self.prizelevel_set.all()
        total_prize_coins = 0

        for level in prize_levels:
            num_ranks = level.max_rank - level.min_rank + 1  # Calculate how many ranks in this level
            level_total = num_ranks * level.prize_coins  # Total coins for this level
            total_prize_coins += level_total  # Add to the total prize coins sum

        return total_prize_coins

class PrizeLevel(models.Model):
    test = models.ForeignKey(Test, on_delete=models.CASCADE)
    min_rank = models.IntegerField(default=0)  # Minimum rank in this level
    max_rank = models.IntegerField(default=0)  # Maximum rank in this level
    prize_coins = models.IntegerField(default=0)  # Coins for students in this rank range
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
class StudentCoins(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    actual_coins = models.IntegerField(default=0) # include buy and winning coins
    winning_coins = models.IntegerField(default=0)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    updated_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)

class StudentTestAttempt(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    test = models.ForeignKey(Test, on_delete=models.CASCADE)
    coins_deducted = models.IntegerField(default=0)
    coins_won = models.IntegerField(default=0)  # Coins won for the test
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)
    
class TestResult(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    test = models.ForeignKey(Test, on_delete=models.CASCADE)
    prize_level = models.ForeignKey(PrizeLevel, on_delete=models.SET_NULL, null=True)  # The prize level for the student
    marks = models.FloatField(default=0.0)
    rank = models.IntegerField(default=0)  # Student's rank in the test
    prize_coins = models.IntegerField(default=0)  # Actual coins won
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)

class TestRoom(models.Model):
    test = models.ForeignKey(Test, on_delete=models.CASCADE, related_name='rooms')
    students = models.ManyToManyField(Student, related_name='test_room_students', blank=True)
    max_students = models.IntegerField(default=2)  # Allow only 2 students in the room
    is_active = models.BooleanField(default=False)  # Test starts when room is full
    created_at = models.DateTimeField(auto_now_add=True)
        
class LiveVideoLink(models.Model):
    title = models.CharField(max_length=500, default='Live Video')
    students = models.ManyToManyField(Student, related_name='livevideo_student')
    teacher = models.ForeignKey(Teacher, related_name='livevideo_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    link = models.URLField(max_length=2000)
    download_link = models.URLField(max_length=2000, null=True)
    locked = models.BooleanField(default=False)
    batches = models.ManyToManyField(Batch, blank=True)
    deleted = models.BooleanField(default=False)
    packages = models.ManyToManyField('content.Package', blank=True, related_name='youtubelive_package')
    time = models.DateTimeField(auto_now_add=True, editable=True)
    is_live = models.BooleanField(default=False, null=True, blank=True)  # New field to track live status

    def __str__(self):
        return self.teacher.name

    def add_subject(self, subject):
        if subject.subject_brought:
            raise ValueError(f'Subject "{subject.name}" is not available for add purchase it')
        self.subjects.add(subject)

class Course(models.Model):
    name = models.CharField(max_length=200)
    institute = models.ForeignKey(Institute, related_name='course_institute', on_delete=models.CASCADE)
    subjects = models.ManyToManyField(Subject, related_name='course_subject')
    thumbnail = models.URLField(max_length=2000, blank=True, null=True)

    def __str__(self):
        return self.name + ' ' + self.institute.name
    
    def add_subject(self, subject):
        if subject.subject_brought:
            raise ValueError(f'Subject "{subject.name}" is not available for add purchase it')
        self.subjects.add(subject)
        
class CourseCategory(models.Model):
    course = models.ForeignKey(Course, related_name='category_course', on_delete=models.CASCADE)
    name = models.CharField(max_length= 61,null=True,blank=True)
    image = models.URLField(max_length=500,null=True,blank=True)
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name 

class SubjectProgressReport(models.Model):
    student = models.ForeignKey(to=Student, on_delete=models.CASCADE, related_name='student_course_progress_report')
    subject = models.ForeignKey(to=Subject, on_delete=models.CASCADE, related_name='subject_progress_report')
    chapter_in_progress = models.ForeignKey(to=Chapter, on_delete=models.CASCADE, related_name='chapter_progress_report')

class Package(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='package_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    sub_teacher = models.ManyToManyField(Teacher, related_name='package_sub_teacher')
    course = models.ForeignKey(Course, related_name='package_course', on_delete=models.CASCADE, null=True, blank=True)
    course_category = models.ForeignKey(CourseCategory, related_name='package_course_category', on_delete=models.CASCADE, null=True, blank=True)
    teacherCourses = models.ForeignKey('membership.TeacherCourse', related_name='teachercourses_package', on_delete=models.SET_NULL, blank=True, null=True)
    batches = models.ManyToManyField(Batch, related_name='package_batches', blank=True)
    fileTests = models.ManyToManyField('content.FileTest', related_name='package_filetest', blank=True)
    youtubeLiveVideos = models.ManyToManyField(LiveVideoLink, blank=True)
    notes = models.ManyToManyField(Note, blank=True)
    videos = models.ManyToManyField(Video, blank=True)
    students = models.ManyToManyField(Student, blank=True)
    tests = models.ManyToManyField(Test, blank=True)
    title = models.CharField(max_length=200)
    price = models.FloatField()
    max_price = models.FloatField(default=0.0)
    duration = models.IntegerField()
    details = models.TextField()
    publish = models.BooleanField(default=True)
    exchange = models.BooleanField(default=False)
    fixDuration = models.BooleanField(default=False)
    marketLevelPackage = models.BooleanField(default=False)
    basePrice = models.FloatField(null=True, blank=True)
    thumbnail = models.URLField(max_length=2000, blank=True, null=True)
    marketParentPackage = models.ForeignKey('content.Package', related_name='parent_package', on_delete=models.CASCADE, null=True, blank=True)
    replicaParentPackage = models.ForeignKey('content.Package', related_name='parent_Package_Replica', on_delete=models.SET_NULL, blank=True, null=True)
    parentpackageReplica = models.BooleanField(default=False)
    date = models.DateTimeField(auto_now_add=True, editable=True, null=True, blank=True)

    def __str__(self):
        return self.title + ' ' + str(self.price)

    def packageTotalTests(self):
        total_tests = self.tests.all().count()
        return total_tests

    def packageInstitute(self):
        try:
            institute_name = f'{self.teacher.institute.id}' + ' - ' + f'{self.teacher.institute.name}'
        except:
            institute_name = None
        return institute_name

    def packagetypeInstitute(self):
        try:
            type_institute = self.teacher.institute.typeInstitute
        except:
            type_institute = None
        return type_institute

    def ParentPackages(self):
        if self.marketParentPackage:
            return 'Replica'
        elif self.marketLevelPackage:
            return 'Parent Packages'
        else:
            return None
        
class PackageOrderWise(models.Model):
    package = models.ForeignKey(Package, related_name='order_package', on_delete=models.CASCADE, null=True, blank=True)
    order = models.IntegerField()

    def __str__(self):
        return self.package.title + ' ' + str(self.order)
    
class PackageVideosOrderWise(models.Model):
    package = models.ForeignKey(Package, on_delete=models.CASCADE, null=True, blank=True)
    video = models.ForeignKey(Video, on_delete=models.CASCADE, null=True, blank=True)
    order = models.IntegerField()

    def __str__(self):
        return self.package.title
    
class PackageYoutubeVideoOrderWise(models.Model):
    package = models.ForeignKey(Package, on_delete=models.CASCADE, null=True, blank=True)
    youtube_video = models.ForeignKey(LiveVideoLink, on_delete=models.CASCADE, null=True, blank=True)
    order = models.IntegerField()

    def __str__(self):
        return self.package.title

class StudentPackage(models.Model):
    student = models.ForeignKey(Student, related_name='package_student',on_delete=models.SET_NULL, null=True, blank=True)
    package = models.ForeignKey(Package, related_name='student_package',on_delete=models.SET_NULL, null=True, blank=True)
    startDate = models.DateTimeField(auto_now_add=True, editable=True)
    endDate = models.DateTimeField()
    packageDurationWhileAddPackage = models.IntegerField(null=True, blank=True)
    packageFixDurationWhileAddPackage = models.BooleanField(null=True, blank=True)
    tcode = models.CharField(blank=True, null=True, max_length=100)

    def __str__(self):
        if self.student != None:
            return self.student.name
        else:
            return ""

class PaidAmountStudentPackage(models.Model):
    studentPackage = models.ForeignKey(StudentPackage, related_name='paid_studentpackage', on_delete=models.SET_NULL, null=True, blank=True)
    paidAmount = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.paidAmount)
    
class TeacherPackageCoins(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    package = models.ForeignKey(Package, on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, on_delete=models.SET_NULL, null=True, blank=True)
    coins = models.FloatField(default = 0.0)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
class TeacherAppSharingCoins(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, on_delete=models.SET_NULL, null=True, blank=True)
    coins = models.FloatField(default = 0.0)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
class TeacherTotalCoins(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    total_coins = models.FloatField(default=0.0)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True)
    
class TeacherRequestCoins(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    requested_coins = models.FloatField(default=0.0)
    upi_id = models.CharField(max_length=61, null=True, blank=True)
    account_holder_name = models.CharField(max_length=61, null=True, blank=True)
    account_number = models.CharField(max_length=61, null=True, blank=True)
    account_branch = models.CharField(max_length=61, null=True, blank=True)
    ifsc_code = models.CharField(max_length=61, null=True, blank=True)
    status_choices = [('pending', 'pending'), ('approve', 'approve'), ('reject', 'reject')]
    status = models.CharField(max_length=20, choices=status_choices, default='pending')
    created_date = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
class TeacherWebAppMoney(models.Model):
    teacher = models.OneToOneField(Teacher, related_name="teacher_money", on_delete=models.CASCADE)
    total_sales = models.DecimalField(max_digits=10, decimal_places=2, default=0)       # sum of all prices
    total_earning = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    withdrawal_money = models.DecimalField(max_digits=10, decimal_places=2, default=0)

    def __str__(self):
        return self.teacher.name

class PackageEarning(models.Model):
    package = models.OneToOneField(Package, on_delete=models.PROTECT, related_name='total_package_earning')
    all_transactions = models.ManyToManyField(PaidAmountStudentPackage, related_name='all_paid_studentpackage',)
    units_sold = models.IntegerField()
    total_price = models.IntegerField()
    base_price_total = models.IntegerField()
    teacher_money = models.ForeignKey(TeacherWebAppMoney, on_delete=models.SET_NULL, related_name='teacher_money', null=True)

    def package_details(self):
        return f'{self.package.id} {self.package.title}'

    def teacher(self):
        try:
            return f'{self.package.teacher.name} {self.teacher.institute.name}'
        except:
            return None

    def __str__(self) -> str:
        try:
            return f'{self.package.id} {self.package.title} {self.package.teacher.name}'
        except:
            return f'{self.package.id} {self.package.title}'

class AttemptedQuestion(models.Model):
    student = models.ForeignKey(Student, related_name='attempted_student', on_delete=models.CASCADE)
    question = models.ForeignKey(Question, related_name='attempted_question', on_delete=models.CASCADE)
    attempted = models.BooleanField(default=False)
    right = models.BooleanField(null=True, blank=True)
    time = models.IntegerField(default=1)
    optionAttempted = models.ManyToManyField(Option, blank=True, related_name='attempted_option')
    attemptTime = models.DateTimeField(auto_now_add=True)
    studentOneWordAnswer = models.CharField(max_length=100, blank=True, null=True)
    question_status_choices = [
        (1, 'visited and answered'),
        (2, 'question answered and marked'),
        (3, 'visited but not answered'),
        (4, 'not answered but marked'),
        (5, 'not visited'),
    ]
    question_status = models.IntegerField(choices= question_status_choices, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.question.id)

class StudentMarks(models.Model):
    student = models.ForeignKey(Student, related_name='marks_student', on_delete=models.CASCADE)
    test = models.ForeignKey(Test, related_name='marks_test', on_delete=models.CASCADE)
    time = models.IntegerField(blank=True, null=True)
    questions = models.ManyToManyField(AttemptedQuestion, related_name='marks_questions')
    attemptTime = models.DateTimeField(auto_now_add=True)
    marks = models.FloatField(blank=True, null=True)
    totalQuestions = models.IntegerField(blank=True, null=True)
    totalAttemptedQuestions = models.IntegerField(blank=True, null=True)
    totalNotAttemptedQuestions = models.IntegerField(blank=True, null=True)
    totalRightQuestions = models.IntegerField(blank=True, null=True)
    totalWrongQuestions = models.IntegerField(blank=True, null=True)
    totalPositiveMarks = models.FloatField(blank=True, null=True)
    totalNegativeMarks = models.FloatField(blank=True, null=True)
    totalTestMarks = models.FloatField(blank=True, null=True)
    result = models.CharField(max_length=30, null=True, blank=True)
    percentage = models.FloatField(blank=True, null=True)
    attempt_count = models.IntegerField(default=1)
    student_selfie = models.CharField(max_length=255,null=True,blank=True)
    created_date = models.DateTimeField(auto_now_add=True, null=True,blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.test.id) + ' ' + str(self.marks)

class NativeLiveVideo(models.Model):
    students = models.ManyToManyField(Student, related_name='nativelive_student')
    teacher = models.ForeignKey(Teacher, related_name='nativelive_teacher',on_delete=models.SET_NULL, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    live = models.BooleanField(default=True)
    batches = models.ManyToManyField(Batch, related_name='livevideo_batches', blank=True)
    antVideo = models.BooleanField(default=False)
    jitsiVideo = models.BooleanField(default=False, null=True, blank=True)
    jitsiLink = models.URLField(null=True, blank=True, max_length=5000)
    multipeer = models.BooleanField(default=False)
    streamId = models.TextField(null=True, blank=True)
    packages = models.ManyToManyField(Package, related_name='livevideo_package', blank=True)
    title = models.CharField(max_length=500, blank=True, null=True)
    subject = models.CharField(max_length=500, blank=True, null=True)
    chapter = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return str(self.teacher) + ' ' + str(self.live)

class LiveVideoStudentInformation(models.Model):
    video = models.ForeignKey(NativeLiveVideo, related_name='liveinfo_video',on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, related_name='liveinfo_student',on_delete=models.SET_NULL, null=True, blank=True)
    joinTime = models.DateTimeField(blank=True, null=True)
    leaveTime = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return str(self.video.id) + ' ' + str(self.student.name)

class MessageLiveVideo(models.Model):
    student = models.ForeignKey(Student, related_name='livemessage_student', on_delete=models.CASCADE)
    video = models.ForeignKey(NativeLiveVideo, related_name='livemessage_video', on_delete=models.CASCADE, blank=True, null=True)
    youtubeVideo = models.ForeignKey(LiveVideoLink, related_name='livemessage_youtube', on_delete=models.CASCADE, blank=True, null=True)
    message = models.TextField()
    time = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.student.name + ' ' + self.message + ' ' + self.student.institute.name

class TeacherQuestionData(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='questionData_teacher', on_delete=models.CASCADE)
    link = models.URLField(max_length=2000)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    description = models.TextField(null=True, blank=True)

    def __str__(self):
        return self.teacher.name + ' ' + str(self.link)

    def institute(self):
        institute = self.teacher.institute.name
        return institute

class Assignment(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='assignment_teacher', on_delete=models.CASCADE)
    link = models.URLField(max_length=2000)
    published = models.DateTimeField()
    dueDate = models.DateTimeField()
    title = models.CharField(max_length=200)
    description = models.TextField(null=True, blank=True)
    batches = models.ManyToManyField(Batch, related_name='assignment_batch')
    publish = models.BooleanField(default=True)
    subjecttiveTest = models.BooleanField(default=False)
    subject = models.ForeignKey(Subject, related_name='assignment_subject',on_delete=models.SET_NULL, null=True, blank=True)
    chapter = models.ForeignKey(Chapter, related_name='assignment_chapter',on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return self.title

class StudentAssignment(models.Model):
    student = models.ForeignKey(Student, related_name='assignment_student', on_delete=models.CASCADE)
    assignment = models.ForeignKey(Assignment, related_name='student_assignment', on_delete=models.CASCADE)
    submissionDate = models.DateTimeField(auto_now_add=True)
    marks = models.FloatField(null=True, blank=True)
    pdfLink = models.URLField(max_length=2000, blank=True, null=True)
    remark = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.assignment.teacher.name

class BuyPackageRequest(models.Model):
    package = models.ForeignKey(Package, related_name='buy_package',on_delete=models.CASCADE)
    student = models.ForeignKey(Student, related_name='buy_student',on_delete=models.CASCADE)
    time = models.DateTimeField()
    phone = models.TextField(max_length=10)
    inProcess = models.BooleanField(default=True)
    accepted = models.BooleanField(null=True, blank=True)
    acceptTime = models.DateTimeField(null=True, blank=True)
    paidAmount = models.IntegerField(null=True, blank=True)
    dueAmount = models.IntegerField(null=True, blank=True)
    price = models.FloatField(null=True, blank=True)

    def __str__(self):
        return str(self.package.id) + ' ' + self.student.name + ' ' +\
            str(self.inProcess)

class StudentHostLiveVideo(models.Model):
    student = models.ForeignKey(Student, related_name='livehost_student', on_delete=models.CASCADE)
    video = models.ForeignKey(NativeLiveVideo, related_name='livehost_video', on_delete=models.CASCADE)
    inProcess = models.BooleanField()

    def __str__(self):
        return self.student.name + ' ' + str(self.video.id)

class TimesUsed(models.Model):
    institute = models.ForeignKey(Institute, related_name='used_institute', on_delete=models.CASCADE)
    question = models.ForeignKey(Question, related_name='used_question',on_delete=models.CASCADE)
    batch = models.ForeignKey(Batch, related_name='usedin_batch',on_delete=models.CASCADE, null=True, blank=True)
    used = models.IntegerField(default=0)

    def __str__(self):
        return str(self.used) + ' ' + self.institute.name

class RecordedVideo(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='recorded_teacher', on_delete=models.CASCADE)
    title = models.CharField(max_length=300)
    link = models.CharField(max_length=2000)
    recordDate = models.DateField(default=date.today, blank=True, null=True)
    meethour_MeetingRecording_id = models.CharField(max_length=63, null=True, blank=True)
    meethour_Meeting_id = models.CharField(max_length=31, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    deleted = models.BooleanField(default=False)
    batches = models.ManyToManyField(Batch, related_name='recorded_batches', blank=True)

    def __str__(self):
        return self.title + ' ' + self.link

class NoteView(models.Model):
    note = models.ForeignKey(Note, related_name='noteview_note',on_delete=models.CASCADE)
    views = models.IntegerField(default=0)

    def __str__(self):
        return self.note.title + '  ' + str(self.views)

class StudentNoteView(models.Model):
    student = models.ForeignKey(Student, related_name='studentnoteview_student', on_delete=models.CASCADE)
    noteview = models.ForeignKey(NoteView, related_name='studentnoteview_notevew',on_delete=models.CASCADE)
    time = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.student.name

class VideoView(models.Model):
    video = models.OneToOneField(Video, related_name='videoview_video',on_delete=models.CASCADE)
    views = models.IntegerField(default=0)

    def __str__(self):
        return self.video.title + '  ' + str(self.views)

class StudentVideoView(models.Model):
    videoview = models.ForeignKey(VideoView, related_name='studentvideoview_notevew', on_delete=models.CASCADE)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    student = models.ForeignKey(Student, related_name='studentvideoview_student', on_delete=models.CASCADE)

    def __str__(self):
        return self.student.name

class StudentYoutubeLiveVideoInformation(models.Model):
    video = models.ForeignKey(LiveVideoLink, related_name='youtubelive_video', on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, related_name='youtubelive_student', on_delete=models.SET_NULL, null=True, blank=True)
    isLive = models.BooleanField(default=False)
    joinTime = models.DateTimeField(null=True, blank=True)
    leaveTime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.video.id)
    
class StudentYoutubeLiveVideoSession(models.Model):
    video = models.ForeignKey(LiveVideoLink, on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, on_delete=models.SET_NULL, null=True, blank=True)
    joinTime = models.DateTimeField(null=True, blank=True)
    leaveTime = models.DateTimeField(null=True, blank=True)
    
class VideoRatingFeedback(models.Model):
    student = models.ForeignKey(Student, related_name='video_rating_feedback', on_delete=models.CASCADE)
    video = models.ForeignKey(LiveVideoLink, related_name='rating_feedbacks', on_delete=models.CASCADE)
    session_rating = models.IntegerField(default=0, blank=True, null=True)  # Rating for the video (e.g., 1 to 5)
    teacher_rating = models.IntegerField(default=0, blank=True, null=True)  # Rating for the teacher (e.g., 1 to 5)
    feedback = models.TextField(blank=True, null=True)  # Feedback for the video
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'{self.student} - {self.video.title}'

    class Meta:
        unique_together = ('student', 'video')  # Ensures a student can rate a video only once

class CouponCode(models.Model):
    code = models.CharField(max_length=200)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    package = models.ForeignKey(Package, on_delete=models.CASCADE)
    amount = models.FloatField()
    created = models.DateTimeField(auto_now_add=True, editable=True)
    couponUsedStudents = models.ManyToManyField(Student, related_name='coupon_students', blank=True)
    expire_date = models.DateField(null=True, blank=True)
    total_count = models.IntegerField(null=True, blank=True) #how many times a code will be used

    def __str__(self):
        return self.code + ' ' + str(self.package.id)

class PackageDemoContent(models.Model):
    package = models.OneToOneField(Package, related_name='demo_package', on_delete=models.CASCADE)
    videos = models.ManyToManyField(Video, related_name='demo_video')
    notes = models.ManyToManyField(Note, related_name='demo_note')
    tests = models.ManyToManyField(Test, related_name='demo_test')
    youtubeLiveVideos = models.ManyToManyField(LiveVideoLink, related_name='demo_youtubeLive')
    fileTests = models.ManyToManyField('content.FileTest', related_name='demo_fileTest', blank=True)

    def __str__(self):
        return self.package.title

class BookCategory(models.Model):
    createdBy = models.ForeignKey(Teacher, related_name='bookCategory_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    name = models.CharField(max_length=200)
    date = models.DateTimeField(auto_now_add=True, editable=True)
    thumbnail = models.URLField(max_length=2000, blank=True, null=True)

    def __str__(self):
        return self.name + ' ' + self.createdBy.name

class Book(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='book_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    students = models.ManyToManyField(Student, blank=True)
    categories = models.ManyToManyField(BookCategory, related_name='book_categories', blank=True)
    name = models.CharField(max_length=200)
    coverPhoto = models.URLField(max_length=2000, blank=True, null=True)
    publisher = models.CharField(max_length=200, null=True, blank=True)
    maxPrice = models.FloatField(default = 0.0)
    discount = models.FloatField(default = 0.0)
    actualPrice = models.FloatField(default = 0.0)
    shippingCharges = models.FloatField(default = 0.0)
    description = models.TextField(null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True, editable=True)
    bookPhotos = ArrayField(models.URLField(max_length=2000, blank=True, null=True))

    def __str__(self):
        try:
            teacher_name = self.teacher.name
            return teacher_name + ' ' + self.name + ' ' + str(self.maxPrice)
        except:
            teacher_name = None
            return self.name + ' ' + str(self.maxPrice)
        
class BookCouponCode(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    title = models.CharField(max_length=200, null=True, blank=True)
    code = models.CharField(max_length=200)
    amount = models.FloatField()
    couponUsedStudents = models.ManyToManyField(Student, related_name='book_coupon_students', blank=True)
    expire_date = models.DateField(null=True, blank=True)
    total_count = models.IntegerField(null=True, blank=True) #how many times a code will be used
    created_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.code + ' ' + str(self.book.id)

class StudentBook(models.Model):
    student = models.ForeignKey(Student, related_name='book_student', on_delete=models.SET_NULL, null=True, blank=True)
    book = models.ForeignKey(Book, related_name='student_book', on_delete=models.SET_NULL, null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True, editable=True)
    address = models.CharField(max_length=200, blank=True, null=True)
    city = models.CharField(max_length=200, blank=True, null=True)
    state = models.CharField(max_length=200, blank=True, null=True)
    pincode = models.IntegerField(blank=True, null=True)
    isComplete = models.BooleanField(default=False)
    quantity = models.IntegerField(default=1, blank=True, null=True)
    dispatche = models.BooleanField(default=False)
    delivered = models.BooleanField(default=False)
    
    def __str__(self):
        return str(self.student.studentuser.username)

class PaidAmountStudentBook(models.Model):
    studentBook = models.ForeignKey(StudentBook, related_name='paid_studentbook', on_delete=models.SET_NULL, null=True, blank=True)
    paidAmount = models.FloatField(blank=True, null=True)
    date = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return str(self.paidAmount)

class GoogleMeetLive(models.Model):
    title = models.CharField(max_length=500, default='Live Video')
    students = models.ManyToManyField(Student, related_name='googlemeet_student')
    teacher = models.ForeignKey(Teacher, related_name='googlemeet_teacher',on_delete=models.SET_NULL, null=True, blank=True)
    link = models.URLField(max_length=2000)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    locked = models.BooleanField(default=False)
    batches = models.ManyToManyField(Batch, blank=True)
    packages = models.ManyToManyField(Package, blank=True)
    deleted = models.BooleanField(default=False)
    live = models.BooleanField(default=True)

    def __str__(self):
        return self.title

class GoogleLiveVideoStudentInformation(models.Model):
    video = models.ForeignKey(GoogleMeetLive, related_name='googleliveinfo_video',on_delete=models.SET_NULL, null=True, blank=True)
    student = models.ForeignKey(Student, related_name='googleliveinfo_student',on_delete=models.SET_NULL, null=True, blank=True)
    joinTime = models.DateTimeField(blank=True, null=True)
    leaveTime = models.TimeField(blank=True, null=True)

    def __str__(self):
        return str(self.video.id) + ' ' + str(self.student.name)

class InstamojoStatus(models.Model):
    payment_id = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=100, blank=True, null=True)
    phone = models.TextField(null=True, blank=True)
    name = models.CharField(max_length=1000, null=True, blank=True)

    def __str__(self):
        return str(self.phone) + ' ' + self.status

class StudentBoughtPackageHistory(models.Model):
    student = models.ForeignKey(Student, related_name='boughtPackage_student',on_delete=models.SET_NULL, null=True, blank=True)
    package = models.CharField(max_length=200, null=True, blank=True)
    packagePrice = models.FloatField(null=True, blank=True)
    duration = models.IntegerField(null=True, blank=True)
    paidAmount = models.FloatField(null=True, blank=True)
    startDate = models.DateTimeField(null=True, blank=True)
    endDate = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        try:
            return self.student.name + ' ' + self.package
        except:
            return self.package

class GoogleFormTest(models.Model):
    name = models.CharField(max_length=200)
    students = models.ManyToManyField(Student, related_name='googleFormTest_students')
    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, null=True, blank=True)
    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, null=True, blank=True)
    createdBy = models.ForeignKey(Teacher, related_name='googleFormTest_teacher',on_delete=models.SET_NULL, null=True, blank=True)
    published = models.DateTimeField(auto_now_add=True, editable=True)
    locked = models.BooleanField(default=False)
    publish = models.BooleanField(default=True)
    batches = models.ManyToManyField(Batch, blank=True)
    totalMarks = models.FloatField(null=True, blank=True)
    formLink = models.URLField(max_length=2000, blank=True, null=True)

    def __str__(self):
        return self.name

class StudentGoogleFormTest(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    googleFormTest = models.ForeignKey(GoogleFormTest, related_name='student_googleFormTest', on_delete=models.CASCADE)
    date = models.DateTimeField(auto_now_add=True)
    marks = models.FloatField(null=True, blank=True)
    remark = models.TextField(blank=True, null=True)

class Language(models.Model):
    students = models.ManyToManyField(Student, related_name='student_language', blank=True)
    language = models.CharField(max_length=100, blank=True, null=True)
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.language

class FileTest(models.Model):
    createdBy = models.ForeignKey(Teacher, related_name='test_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    subject = models.ForeignKey(Subject, on_delete=models.SET_NULL, blank=True, null=True)
    chapter = models.ForeignKey(Chapter, on_delete=models.SET_NULL, blank=True, null=True)
    topic = models.ForeignKey(QuestionTopic, on_delete=models.SET_NULL, blank=True, null=True)
    sub_topic = models.ForeignKey(QuestionSubTopic, on_delete=models.SET_NULL, blank=True, null=True)
    batches = models.ManyToManyField(Batch, blank=True)
    title = models.CharField(max_length=200)
    testTime = models.IntegerField()
    totalQuestion = models.IntegerField()
    totalMarks = models.FloatField()
    negativeMarks = models.FloatField(null=True, blank=True)
    questionFile = models.URLField(max_length=2000)
    solutionsFile = models.URLField(max_length=2000, blank=True, null=True)
    passing_marks = models.FloatField(blank=True, null=True)
    publish = models.BooleanField(default=True)
    published = models.DateTimeField(auto_now_add=True, editable=True)
    locked = models.BooleanField(default=False)
    repeatTest = models.BooleanField(default=False)
    answers = PickledObjectField(editable=True)
    question_marks = PickledObjectField(editable=True, blank=True, null=True)
    test_count = models.IntegerField(null=True, blank=True)
    fileTestStartDateTime = models.DateTimeField(null=True, blank=True)
    fileTestEndDateTime = models.DateTimeField(null=True, blank=True)
    schedule = models.BooleanField(default=False)
    
    def __str__(self):
        return self.title + ' ' + str(self.createdBy)

class StudentFileTestMarks(models.Model):
    student = models.ForeignKey(Student, related_name='filetestmarks_student', on_delete=models.CASCADE)
    fileTest = models.ForeignKey(FileTest, related_name='marks_filetest', on_delete=models.CASCADE)
    time = models.FloatField(blank=True, null=True)
    attemptTime = models.DateTimeField(auto_now_add=True)
    marks = models.FloatField(blank=True, null=True)
    answers = PickledObjectField(editable=True)
    attempt_count = models.IntegerField(default=1)

    def __str__(self):
        return self.student.name + ' ' + str(self.fileTest.id)

class TestView(models.Model):
    test = models.ForeignKey(Test, related_name='testview_test',on_delete=models.CASCADE)
    views = models.IntegerField(default=0)

    def __str__(self):
        return self.test.name + '  ' + str(self.views)

class StudentTestView(models.Model):
    student = models.ForeignKey(Student, related_name='studenttestview_student', on_delete=models.CASCADE)
    testview = models.ForeignKey(TestView, related_name='student_testview', on_delete=models.CASCADE)
    time = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.student.name

class BuyBookRequest(models.Model):
    book = models.ForeignKey(Book, related_name='buy_book', on_delete=models.CASCADE)
    student = models.ForeignKey(Student, related_name='buyBook_student', on_delete=models.CASCADE)
    time = models.DateTimeField(auto_now_add=True, editable=True)
    phone = models.TextField(max_length=10)
    inProcess = models.BooleanField(default=True)
    accepted = models.BooleanField(null=True, blank=True)
    acceptTime = models.DateTimeField(null=True, blank=True)
    paidAmount = models.IntegerField(null=True, blank=True)
    dueAmount = models.IntegerField(null=True, blank=True)
    quantity = models.IntegerField(default=1, blank=True, null=True)

    def __str__(self):
        return str(self.book.id) + ' ' + self.student.name + ' ' + str(self.inProcess)

class SuggestionQuestion(models.Model):
    course = models.ForeignKey('membership.TeacherCourse', related_name='question_course',
                               on_delete=models.SET_NULL, blank=True, null=True)
    dynamicText = RichTextField(blank=True, null=True, config_name='CKEDITOR_SETTINGS')
    picture = models.URLField(max_length=2000, null=True, blank=True)
    text = models.TextField(null=True, blank=True)
    aboutQuestion = models.TextField(null=True, blank=True)

    def __str__(self):
        return str(self.course.name) + ',' + self.text

class TeacherWithdrawMoneyRequest(models.Model):
    beneficiary_id = models.CharField(max_length=63, null=True, blank=True)
    teacher = models.ForeignKey(Teacher, related_name='withdraw_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    withdrawMoney = models.FloatField(default=0)
    coin = models.FloatField(default=0)
    coin_conversion_rate = models.IntegerField()
    time = models.DateTimeField(auto_now_add=True)
    last_update = models.DateTimeField(auto_now=True)
    request_status_choices = [
        ('in-review', 'in-review'),
        ('rejected', 'rejected'),
        ('accepted', 'accepted'),
        ('failed', 'failed'),
    ]
    request_status = models.CharField(max_length=100, choices=request_status_choices, null=True, blank=True)

    number = models.BigIntegerField(null=True, blank=True)
    status = models.CharField(
        max_length=100, default='in-review', null=True, blank=True)
    requestType = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        try:
            return self.teacher.name + ' ' + str(self.withdrawMoney) + ' ' + str(self.request_status)
        except:
            return str(self.withdrawMoney) + ' ' + str(self.request_status)

class Trade(models.Model):
    name = models.CharField(max_length=300)
    date = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.name

class SubInstituteVideo(models.Model):
    sub_institute = models.ForeignKey(SubInstitute, on_delete=models.CASCADE, related_name='sub_institute_video')
    title = models.CharField(max_length=200, null=True, blank=True)
    url = models.URLField(max_length=3000, null=True, blank=True)
    date = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.title + ' ' + self.sub_institute.name

class SubInstitutePicture(models.Model):
    sub_institute = models.ForeignKey(SubInstitute, on_delete=models.CASCADE, related_name='sub_institute_picture')
    title = models.CharField(max_length=200, null=True, blank=True)
    url = models.URLField(max_length=3000, null=True, blank=True)
    date = models.DateTimeField(auto_now=True, editable=True)

    def __str__(self):
        return self.title + ' ' + self.sub_institute.name

class SubInstituteReview(models.Model):
    sub_institute = models.ForeignKey(SubInstitute, on_delete=models.CASCADE, related_name='sub_institute_rating')
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='rating_student')
    message = models.TextField(null=True, blank=True)
    rating = models.FloatField()
    date = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.rating)

class SubInstituteFAQ(models.Model):
    question = models.CharField(max_length=2047)
    answer = models.TextField(null=True, blank=True)

class Contact(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='contact_student')
    name = models.CharField(max_length=50)
    message = models.TextField()
    email = models.EmailField(null=True, blank=True)
    number = models.BigIntegerField(null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class TradeDetails(models.Model):
    sub_institute = models.ForeignKey(SubInstitute, on_delete=models.CASCADE,
                                      related_name='sub_institute_trades_details', null=True, blank=True)
    deleted = models.BooleanField(default=False)
    trade = models.ForeignKey(Trade, on_delete=models.CASCADE, related_name='trade_details')
    sub_institute_teachers = models.ManyToManyField(SubInstituteTeacher, related_name='trade_teachers', blank=True)
    session_start = models.TextField(null=True, blank=True)
    session_end = models.TextField(null=True, blank=True)
    price = models.FloatField(null=True, blank=True)
    discount = models.FloatField(null=True, blank=True)
    actual_price = models.FloatField(null=True, blank=True)
    about_trade = models.TextField(null=True, blank=True)
    introduction = models.TextField(null=True, blank=True)
    date = models.DateTimeField(auto_now=True, editable=True)
    admission_open = models.BooleanField(default=True)

    def __str__(self):
        return self.trade.name 

class TradeDetailsCouponCode(models.Model):
    Code = models.CharField(max_length=15)
    creater = models.ForeignKey(SubInstitute, on_delete=models.CASCADE, null=True, blank=True)
    trade_details = models.ForeignKey(TradeDetails, on_delete=models.SET_NULL, null=True, blank=True)
    amount = models.FloatField(null=True, blank=True)
    date_of_creation = models.DateField(auto_now_add=True)
    date_of_expire = models.DateField(null=True, blank=True)
    total_coupon_count = models.IntegerField(null=True, blank=True)

class StudentTradePurchase(models.Model):
    student = models.ForeignKey(Student, related_name='trade_student', on_delete=models.CASCADE)
    trade_details = models.ForeignKey(TradeDetails, related_name='student_trade_details', on_delete=models.PROTECT)
    paidAmount = models.FloatField()
    date = models.DateTimeField(auto_now_add=True)
    mode = models.CharField(max_length=15, choices=(
        ("online", "online"), ("offline", "offline"), ("coupon", "coupon")), default="offline")
    approved = models.BooleanField(null=True)
    coupon = models.ForeignKey(to=TradeDetailsCouponCode, on_delete=models.PROTECT, null=True, blank=True)

    def __str__(self):
        return self.student.name 

class PackageBuyRequestOnline(models.Model):
    package = models.ForeignKey(Package, related_name='buy_package_online', on_delete=models.CASCADE)
    student = models.ForeignKey(Student, related_name='buy_student_online', on_delete=models.CASCADE)
    parent = models.CharField(max_length=63, null=True, blank=True)
    present_address = models.CharField(max_length=127, null=True, blank=True)
    permanent_address = models.CharField(max_length=127, null=True, blank=True)
    mobile = models.CharField(max_length=15, null=True, blank=True)
    email = models.CharField(max_length=31, null=True, blank=True)
    ID_proof = models.CharField(max_length=511, null=True, blank=True)
    recent_photo = models.CharField(max_length=511, null=True, blank=True)
    qualification_field = models.CharField(max_length=15, null=True, blank=True)
    passing_year = models.CharField(max_length=7, null=True, blank=True)
    percentage = models.CharField(max_length=7, null=True, blank=True)
    signature = models.CharField(max_length=511, null=True, blank=True)
    exam = models.CharField(max_length=63, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    accepted = models.BooleanField(null=True, blank=True)
    acceptTime = models.DateTimeField(auto_now=True)


    def package_name(self):
        return self.package.title

    def student_name(self):
        return self.student.name

class DyteOrganisationCredential(models.Model):
    institute = models.ForeignKey(to=Institute, on_delete=models.CASCADE, related_name='institute_dyte_credentials')
    username = models.CharField(max_length=31, null=True, blank=True)
    password = models.CharField(max_length=31, null=True, blank=True)
    organizationId = models.CharField(max_length=63,)
    APIKey = models.CharField(max_length=31,)
    preferred_region_choices = [
        ('ap-south-1', 'ap-south-1'),
        ('ap-southeast-1', 'ap-southeast-1'),
        ('us-west-1', 'us-west-1')
    ]
    preferred_region = models.CharField(
        max_length=15, choices=preferred_region_choices, default='ap-south-1')

    def __str__(self) -> str:
        return f"ID-> {self.institute.id} Institute-> {self.institute.name}"



















class DyteMeeting(models.Model):
    organisation = models.ForeignKey(to=DyteOrganisationCredential, on_delete=models.CASCADE, related_name='dyte_meeting')
    teacher = models.OneToOneField(to=Teacher, on_delete=models.CASCADE, null=True)
    preset = models.CharField(max_length=31, null=True, blank=True)

    title = models.CharField(max_length=63)
    datetime = models.DateTimeField(auto_now=True)
    preferred_region = models.CharField(max_length=15, null=True)
    recordOnStart = models.BooleanField(default=False)

    roomName = models.CharField(max_length=63, null=True)
    meetingId = models.CharField(max_length=63, primary_key=True)

    batches = models.ManyToManyField(to=Batch)
    packages = models.ManyToManyField(to=Package)

    def __str__(self) -> str:
        return self.title

class DyteMeetingParticipant(models.Model):
    meetingId = models.ForeignKey(to=DyteMeeting, on_delete=models.CASCADE, related_name='dyte_meeting_participant')
    clientSpecificId = models.CharField(max_length=63)
    name = models.CharField(max_length=63)
    picture = models.CharField(max_length=511, null=True)
    presetId = models.CharField(max_length=63)
    participantId = models.CharField(max_length=63, primary_key=True)
    authToken = models.CharField(max_length=2047, null=True)

    def __str__(self) -> str:
        role, id = self.clientSpecificId.split('#')
        return f"{role} {id}"

class Reviews(models.Model):
    review_text = models.CharField(max_length=200, null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self) -> str:
        return self.review_text

class StudentReviews(models.Model):
    test = models.ForeignKey(Test, on_delete=models.CASCADE,related_name='review_test', null=True, blank=True)
    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='review_question', null=True, blank=True)
    review = models.ForeignKey(Reviews, on_delete=models.CASCADE, related_name='review', null=True, blank=True)
    date = models.DateTimeField(auto_now_add=True)

class CoursesQuery(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, null=True, blank=True)
    teacher_course = models.ForeignKey(TeacherCourse, on_delete=models.SET_NULL, null=True, blank=True)
    count = models.IntegerField(default=0)
    current_click_time = models.DateTimeField(auto_now=True)
    previous_click_time = models.DateTimeField()

class MeetHourContact(models.Model):
    user = models.ManyToManyField(to=User, related_name="MeetHourContact")
    contact_id = models.CharField(max_length=31)
    firstname = models.CharField(max_length=31)
    email = models.EmailField()

    def __str__(self) -> str:
        return self.email

class MeetHourMeeting(models.Model):
    teacher = models.OneToOneField(to=Teacher, on_delete=models.CASCADE)
    meeting_id = models.CharField(max_length=31)
    live_status = models.BooleanField(default=False)
    meeting_name = models.CharField(max_length=31)
    passcode = models.CharField(max_length=31)
    pCode = models.CharField(max_length=127, null=True, blank=True)
    time = models.DateTimeField(auto_now=True)
    batches = models.ManyToManyField(
        to=Batch, related_name="MeetHourMeetingBatches")
    packages = models.ManyToManyField(
        to=Package, related_name="MeetHourMeetingPackages")

    def __str__(self) -> str:
        return f'{self.teacher} {self.meeting_id}'

class MeetHourDeveloperAccountClientCredentials(models.Model):
    institute = models.OneToOneField(Institute, related_name="meethour_credentials", null=True, blank=True, on_delete=models.CASCADE)
    username = models.CharField(max_length=63, unique=False)
    password = models.CharField(max_length=63)
    subscription_upto = models.DateField(null=True, blank=True)
    expire_date = models.DateField(null=True, blank=True)
    client_id = models.CharField(max_length=63)
    client_secret = models.CharField(max_length=127)
    access_token = models.CharField(max_length=2047, null=True, blank=True)
    refresh_token = models.CharField(max_length=2047, null=True, blank=True)
    date = models.DateTimeField(auto_now=True)

    def __str__(self) -> str:
        return self.username
    
    def active(self):
        try:
            if self.institute.meethour_account_type=='developer':
                return "✅"
            else:
                return "🙅"
        except:
            return "🙅‍♂️"
    
    def recharge(self):
        try:
            if self.subscription_upto <= self.expire_date:
                return "⭕"
            else:
                return "✓"
        except:
            return "⚪"

class MeetHourDeveloperAccountContact(models.Model):
    developer_account = models.ForeignKey(MeetHourDeveloperAccountClientCredentials, on_delete=models.CASCADE)
    user = models.ManyToManyField(to=User, related_name="MeetHourDeveloperAccountContact")
    contact_id = models.CharField(max_length=31)
    firstname = models.CharField(max_length=31)
    email = models.EmailField()

    def __str__(self) -> str:
        return self.email

class MeetHourDeveloperAccountMeeting(models.Model):
    developer_account = models.ForeignKey(MeetHourDeveloperAccountClientCredentials, on_delete=models.CASCADE)
    teacher = models.ForeignKey(to=Teacher, on_delete=models.CASCADE)
    meeting_id = models.CharField(max_length=31)
    live_status = models.BooleanField(default=False)
    meeting_name = models.CharField(max_length=31)
    passcode = models.CharField(max_length=31)
    pCode = models.CharField(max_length=127, null=True, blank=True)
    time = models.DateTimeField(auto_now=True)
    batches = models.ManyToManyField(to=Batch, related_name="MeetHourDeveloperAccountMeetingBatches")
    packages = models.ManyToManyField(to=Package, related_name="MeetHourDeveloperAccountMeetingPackages")

    def __str__(self) -> str:
        return f'{self.teacher} {self.meeting_id}'

    def institute(self):
        return self.teacher.institute

class MeetHourMeetingAccessFeatures(models.Model):
    title = models.CharField(max_length=31, primary_key=True)

    def __str__(self):
        return self.title

class MeetHourMeetingUiConfigToolbarButton(models.Model):
    title = models.CharField(max_length=31, primary_key=True)

    def __str__(self):
        return self.title

class MeetHourMeetingUiConfig(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE)
    host = models.BooleanField(default=False)
    meeting_feature = models.ManyToManyField(to=MeetHourMeetingAccessFeatures, blank=True)
    APP_NAME = models.CharField(max_length=31, default="BodhiAI")
    DEFAULT_LOGO_URL = models.CharField(max_length=255, null=True, blank=True)
    BRAND_WATERMARK_BACKGROUND = models.CharField(max_length=7, default="#FFFFFF")
    SHOW_MEET_HOUR_WATERMARK = models.BooleanField(default=False)
    MEET_HOUR_WATERMARK_LINK = models.CharField(max_length=255, null=True, blank=True)
    MOBILE_APP_PROMO = models.BooleanField(default=False)
    MOBILE_DOWNLOAD_LINK_ANDROID = models.CharField(max_length=255, null=True, blank=True)
    MOBILE_DOWNLOAD_LINK_IOS = models.CharField(max_length=255, null=True, blank=True)
    NATIVE_APP_NAME = models.CharField(max_length=31, default="BodhiAI")
    PROVIDER_NAME = models.CharField(max_length=31, default="BodhiAI")
    ENABLE_MOBILE_BROWSER = models.BooleanField(default=False)
    APP_SCHEME = models.CharField(max_length=31, null=True, blank=True)
    ANDROID_APP_PACKAGE = models.CharField(max_length=31, null=True, blank=True)
    HIDE_DEEP_LINKING_LOGO = models.BooleanField(default=False)
    disablePrejoinHeader = models.BooleanField(default=True)
    disablePrejoinFooter = models.BooleanField(default=True)
    toolbar_buttons = models.ManyToManyField(MeetHourMeetingUiConfigToolbarButton)

    resolution = models.IntegerField(default=720)
    videoheightideal = models.IntegerField(default=720)
    videoheightmax = models.IntegerField(default=1000)
    videoheightmin = models.IntegerField(default=240)
    videowidthideal = models.IntegerField(default=720)
    videowidthmax = models.IntegerField(default=720)
    videowidthmin = models.IntegerField(default=180)
    startAudioMuted = models.IntegerField(default=100)
    liveStreamingEnabled = models.BooleanField(default=False)
    enableWelcomePage = models.BooleanField(default=False)
    enableClosePage = models.BooleanField(default=True)
    requireDisplayName = models.BooleanField(default=True)
    disableDeepLinking = models.BooleanField(default=False)


class ContentWebsite(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL,null=True)
    chapter = models.ForeignKey(Chapter,on_delete=models.SET_NULL, null=True)
    website_title = models.CharField(max_length=200,null=True, blank=True)
    website_url = models.CharField(max_length=300,null=True, blank=True)
    batches = models.ManyToManyField(Batch, related_name='website_batches', blank=True)
    date = models.DateTimeField(auto_now_add=True)

class TestQuestionSequess(models.Model):
    test = models.ForeignKey(Test,on_delete=models.SET_NULL, null=True, blank=True)
    order = models.IntegerField(default=0)
    question = models.ForeignKey(Question,on_delete=models.CASCADE, related_name="test_question_order")
    class Meta:
        ordering  = ['order']
    def __str__(self):
        return self.test.name
    def save(self, *args, **kwargs):
        return super(TestQuestionSequess, self).save(*args, **kwargs)
    
class PaidAmountSubject(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='subject_teacher', on_delete=models.PROTECT)
    subject = models.ForeignKey(Subject, related_name='paid_subject', on_delete=models.SET_NULL, null=True, blank=True)
    paidAmount = models.FloatField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.paidAmount)

class Quiz(models.Model):
    name = models.CharField(max_length=200)
    totalMarks = models.FloatField()
    students = models.ManyToManyField(Student, related_name='quiz_students',)
    alreadyTakers = models.ManyToManyField(Student, related_name='quiz_alreadyTakers')
    published = models.DateTimeField(auto_now_add=True, editable=True)
    subjects = models.ManyToManyField(Subject, blank=True)
    chapters = models.ManyToManyField(Chapter, blank=True)
    topics = models.ManyToManyField(QuestionTopic, blank=True)
    subTopics = models.ManyToManyField(QuestionSubTopic, blank=True)
    createdBy = models.ForeignKey(Teacher, related_name='quiz_createdBy', on_delete=models.SET_NULL, null=True, blank=True)
    time = models.IntegerField()
    questions = models.ManyToManyField(Question, blank=True)
    locked = models.BooleanField(default=False)
    publish = models.BooleanField(default=True)
    batches = models.ManyToManyField(Batch, blank=True)
    passing_marks = models.FloatField(blank=True, null=True)
    quizInstructions = models.TextField(null=True, blank=True)
    quizStartDateTime = models.DateTimeField(null=True, blank=True)
    quizEndDateTime = models.DateTimeField(null=True, blank=True)
    studentWillAttemptQuestions = models.CharField(max_length=200, null=True, blank=True)
    is_answers_showing = models.BooleanField(default=True)
    repeatQuiz = models.BooleanField(default=False) #if false then can't repeat quiz. take only once

    def __str__(self):
        return self.name

class TeacherUploadStudentReport(models.Model):
    student = models.ForeignKey(Student, related_name='student_report', on_delete=models.CASCADE)
    title = models.CharField(max_length=100,null=True,blank=True)
    report = models.CharField(max_length=250,null=True,blank=True)
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class StudentQuizMarks(models.Model):
    student = models.ForeignKey(Student, related_name='quiz_student', on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, related_name='marks_quiz', on_delete=models.CASCADE)
    time = models.IntegerField(blank=True, null=True)
    questions = models.ManyToManyField(AttemptedQuestion, related_name='quiz_marks_questions')
    marks = models.FloatField(blank=True, null=True)
    totalQuestions = models.IntegerField(blank=True, null=True)
    totalAttemptedQuestions = models.IntegerField(blank=True, null=True)
    totalNotAttemptedQuestions = models.IntegerField(blank=True, null=True)
    totalRightQuestions = models.IntegerField(blank=True, null=True)
    totalWrongQuestions = models.IntegerField(blank=True, null=True)
    totalPositiveMarks = models.FloatField(blank=True, null=True)
    totalNegativeMarks = models.FloatField(blank=True, null=True)
    totalQuizMarks = models.FloatField(blank=True, null=True)
    result = models.CharField(max_length=30, null=True, blank=True)
    percentage = models.FloatField(blank=True, null=True)
    attempt_count = models.IntegerField(default=1)

    def __str__(self):
        return self.student.name + ' ' + str(self.quiz.id) + ' ' + str(self.marks)

class PackageEarningHis(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='package_teacher_earning_history', on_delete=models.SET_NULL, null=True, blank=True)
    packages = models.CharField(max_length=200, null=True, blank=True)
    units_sold = models.IntegerField()
    total_price = models.IntegerField()
    base_price_total = models.IntegerField()
   
    def __str__(self):
        return f'{self.teacher}'
    
class InstituteReview(models.Model):
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE, related_name='institute_review')
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='student_review')
    message = models.TextField(null=True, blank=True)
    rating = models.FloatField()
    date = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.student.name + ' ' + str(self.rating)
 
class StudentClassWiseReport(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    teacher = models.CharField(max_length=200, null=True, blank=True)
    student_class = models.CharField(max_length=200, null=True, blank=True)
    subject = models.CharField(max_length=200, null=True, blank=True)
    curriculum = models.CharField(max_length=200, null=True, blank=True)
    report_date = models.DateField(null=True, blank=True)
    lesson_date = models.DateField(null=True, blank=True)
    topic_taught = models.CharField(max_length=300, null=True, blank=True)
    remarks = models.TextField(null=True, blank=True)
    create_date = models.DateField(auto_now=True)
    
    def __str__(self):
        return self.student.name 

class StudentTestAssignmentsReport(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    teacher = models.CharField(max_length=200, null=True, blank=True)
    student_class = models.CharField(max_length=200, null=True, blank=True)
    subject = models.CharField(max_length=200, null=True, blank=True)
    curriculum = models.CharField(max_length=200, null=True, blank=True)
    report_date = models.DateField(null=True, blank=True)
    test_date = models.DateField(null=True, blank=True)
    test_topic = models.CharField(max_length=200, null=True, blank=True)
    marks_obtained = models.CharField(max_length=100, null=True, blank=True)
    test_remarks = models.TextField(null=True, blank=True)
    create_date = models.DateField(auto_now=True)
    
    def __str__(self):
        return self.student.name 


class CounselingCourse(models.Model):
    title = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.title
 
class CounselingDetails(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    full_name = models.CharField(max_length=200,null=True,blank=True)
    course = models.ForeignKey(CounselingCourse, on_delete=models.SET_NULL,null=True)
    state = models.CharField(max_length=200,null=True,blank=True)
    category = models.CharField(max_length=200,null=True,blank=True)
    category_rank = models.CharField(max_length=200,null=True,blank=True)
    overall_rank = models.CharField(max_length=200,null=True,blank=True)
    mobile = models.CharField(max_length=200,null=True,blank=True)
    gmail = models.CharField(max_length=200,null=True,blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.student.name

class StudentPackageCertificate(models.Model):
    certificate_no = models.CharField(max_length=25,null=True,blank=True)
    student = models.ForeignKey(Student, related_name='package_student_Certificate',on_delete=models.SET_NULL, null=True, blank=True)
    package = models.ForeignKey(Package, related_name='student_package_Certificate',on_delete=models.SET_NULL, null=True, blank=True)
    certificate_date = models.DateTimeField()
    grade = models.CharField(max_length=20,null=True,blank=True)
    exam_name = models.CharField(max_length=300,null=True,blank=True)
    
    def __str__(self):
        return self.student.name
    
class StudentCourseCertificate(models.Model):
    student = models.ForeignKey(Student,on_delete=models.SET_NULL, null=True, blank=True)
    course = models.ForeignKey(Course,on_delete=models.SET_NULL, null=True, blank=True)
    certificate_date = models.DateTimeField()
    
    def __str__(self):
        return self.student.name

    


class OfflineTest(models.Model):
    test_name = models.CharField(max_length=1000,blank=True,null=True)
    test_date = models.DateField(null=True, blank=True)
    createdBy = models.ForeignKey(Teacher, related_name='Offlinetest_teacher', on_delete=models.SET_NULL, null=True, blank=True)
    questionFile = models.URLField(max_length=2000,blank = True,null =True)
    created_date = models.DateTimeField(auto_now_add =True,null=True)

    def __str__(self) -> str:
        return self.exam_name
 
class OfflineTestSection(models.Model):
    name = models.CharField(max_length=800, null=True, blank=True)
    total_marks = models.FloatField(blank=True, null=True)
    created_date = models.DateTimeField(auto_now_add =True,null=True)

    def __str__(self):
        return str(self.id)

class OfflineTestMarks(models.Model):
    offline_test = models.ForeignKey(OfflineTest, on_delete=models.CASCADE)
    student = models.ForeignKey(Student, related_name='offlineTest_student', on_delete=models.CASCADE)
    testSection= models.ForeignKey(OfflineTestSection, on_delete=models.CASCADE)
    obtained_marks = models.FloatField(blank=True, null=True)
    created_date = models.DateTimeField(auto_now_add =True,null=True)

    def __str__(self):
        return str(self.id)
    
class OwnerShopListing(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    students = models.ManyToManyField(Student, blank=True)
    shop_name = models.CharField(max_length=100,null=True,blank=True)
    shop_owner_name = models.CharField(max_length=100,null=True,blank=True)
    phone = models.CharField(max_length=15,null=True,blank=True)
    price = models.FloatField(default=0.0)
    whatsapp_number = models.CharField(max_length=15,null=True,blank=True)
    map_link = models.URLField(max_length = 2000,null=True,blank=True)
    image = models.URLField(max_length = 2000,null=True,blank=True)
    state = models.CharField(max_length=31,null=True,blank=True)
    city = models.CharField(max_length=31,null=True,blank=True)
    area = models.CharField(max_length=31,null=True,blank=True)
    pincode = models.CharField(max_length=31,null=True,blank=True)
    photos = models.ManyToManyField('ShopPhoto', related_name='shop_listings', blank=True)
    created_date = models.DateTimeField(auto_now_add =True)
    updated_date = models.DateTimeField(auto_now =True)
    
    def __str__(self):
        return str(self.shop_name)
    
class ShopPhoto(models.Model):
    image_url = models.URLField(max_length=2000)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    
class OwnerShopGallery(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=100)
    image = models.URLField(max_length = 2000)
    created_date = models.DateTimeField(auto_now_add =True)
    updated_date = models.DateTimeField(auto_now =True)
    
    def __str__(self):
        return str(self.title)
    
class ClientShop(models.Model):
    student = models.ForeignKey(Student,on_delete=models.SET_NULL, null=True, blank=True)
    shop = models.ForeignKey(OwnerShopListing,on_delete=models.SET_NULL, null=True, blank=True)
    created_date = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        if self.student != None:
            return self.student.name
        else:
            return ""

class PaidAmountClientShop(models.Model):
    studentShop = models.ForeignKey(ClientShop, on_delete=models.SET_NULL, null=True, blank=True)
    paidAmount = models.IntegerField()
    created_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.paidAmount)
    
class TeacherBookListing(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=100,null=True,blank=True)
    book_url = models.URLField(max_length=2000)
    image_url = models.URLField(max_length=2000)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
class TeacherBlogs(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=100,null=True,blank=True)
    blog_url = models.URLField(max_length=2000)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
    def __str__(self):
        return str(self.title)
    
class JobInformation(models.Model):
    teacher = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=100)
    image = models.URLField(max_length = 2000)
    pdf = models.URLField(max_length = 2000,null=True,blank=True)
    official_link = models.URLField(max_length = 2000,null=True,blank=True)
    post = models.CharField(max_length=200,null=True,blank=True)
    total_post = models.CharField(max_length=100,null=True,blank=True)
    start_date = models.DateField(null=True,blank=True)
    end_date = models.DateField(null=True,blank=True)
    description = RichTextField(blank=True, null=True, config_name='CKEDITOR_SETTINGS')
    created_date = models.DateTimeField(auto_now_add =True)
    updated_date = models.DateTimeField(auto_now =True)
    
    def __str__(self):
        return str(self.title)
    
class ContestTest(models.Model):
    contest_category = models.ForeignKey(ContestCategory, on_delete=models.SET_NULL, null=True, blank=True)
    created_by = models.ForeignKey(Teacher, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=200)
    questions = models.ManyToManyField(Question, blank=True, related_name="contest_tests")
    test_time = models.FloatField(default=0, help_text="Total time for the test in minutes")
    test_marks = models.FloatField(default=0.0, help_text="Maximum marks achievable in this test")
    test_instructions = models.TextField(null=True, blank=True)
    passing_marks = models.FloatField(blank=True, null=True, help_text="Minimum marks required to pass the test")
    entry_fee = models.IntegerField(default=0, help_text="Coins required to participate")
    max_participants = models.IntegerField(default=0, help_text="Participant limit on first-come, first-served basis")
    created_date = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_date = models.DateTimeField(auto_now=True, db_index=True)

    class Meta:
        ordering = ['-created_date']  

    def clean(self):
        if self.passing_marks and self.passing_marks > self.test_marks:
            raise ValidationError("Passing marks cannot exceed total test marks.")

    def __str__(self):
        return f"{self.title} - {self.contest_category.name if self.contest_category else 'No Category'}"
    
class ContestQuestion(models.Model):
    text = models.TextField(null=True, blank=True)
    dynamic_text = RichTextField(config_name='CKEDITOR_SETTINGS', blank=True, null=True)
    image_url = models.URLField(max_length=2000, null=True, blank=True)
    video_url = models.URLField(max_length=2000, null=True, blank=True)
    audio_url = models.URLField(max_length=2000, null=True, blank=True)
    time_limit_seconds = models.FloatField(default=0, help_text="Time limit in seconds for this question")
    question_mark = models.DecimalField(default=1, max_digits=5, decimal_places=2, help_text="Marks awarded for a correct answer")
    negative_mark = models.DecimalField(default=0.25, max_digits=5, decimal_places=2, help_text="Negative marks for an incorrect answer")
    direction = models.TextField(null=True, blank=True)
    created_date = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_date = models.DateTimeField(auto_now=True, db_index=True)

    def clean(self):
        if not self.image_url and not self.video_url and not self.audio_url:
            raise ValidationError("At least one of image_url, video_url, or audio_url must be provided.")

    def __str__(self):
        return self.text[:50]  # Display the first 50 characters of the question text

class ContestOption(models.Model):
    question = models.ForeignKey(ContestQuestion, on_delete=models.CASCADE, related_name='options')
    option_text = models.TextField(null=True, blank=True)
    correct = models.BooleanField(default=False, help_text="Mark if this option is the correct answer")
    created_date = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_date = models.DateTimeField(auto_now=True, db_index=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['question'], condition=models.Q(correct=True), name='unique_correct_option')
        ]

    def __str__(self):
        return self.option_text[:50]  # Display first 50 characters of option text

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/query.py
--------------------------------------------------

from content.models import *
from membership.models import *
from basicinformation.models import *

class ContentGetQuery:
    def __init__(self):
        pass

    @staticmethod
    def get_subject(id):
        try:
            subject = Subject.objects.get(id=id)
        except:
            subject = None

        return subject

    @staticmethod
    def get_chapter(id):
        try:
            chapter = Chapter.objects.get(id=id)
        except:
            chapter = None

        return chapter
    
    @staticmethod
    def get_question(id):
        try:
            question = Question.objects.get(id=id)
        except:
            question = None

        return question
    
    @staticmethod
    def get_option(id):
        try:
            option = Option.objects.get(id=id)
        except:
            option = None

        return option
    
    
    @staticmethod
    def get_topic(id):
        try:
            topic = QuestionTopic.objects.get(id=id)
        except:
            topic = None

        return topic
    
    @staticmethod
    def get_subtopic(id):
        try:
            subtopic = QuestionSubTopic.objects.get(id=id)
        except:
            subtopic = None

        return subtopic
    
    @staticmethod
    def get_batch(id):
        try:
            batch = Batch.objects.get(id=id)
        except:
            batch = None

        return batch
    
    @staticmethod
    def get_package(id):
        try:
            package = Package.objects.get(id=id)
        except:
            package = None

        return package
    
    @staticmethod
    def get_course(id):
        try:
            course = Course.objects.get(id=id)
        except:
            course = None

        return course

    @staticmethod
    def get_video(id):
        try:
            video = Video.objects.get(id=id)
        except:
            video = None

        return video

    @staticmethod
    def get_test(id):
        try:
            test = Test.objects.get(id=id)
        except:
            test = None

        return test
    
    @staticmethod
    def get_filetest(id):
        try:
            ftest = FileTest.objects.get(id=id)
        except:
            ftest = None

        return ftest
    
    @staticmethod
    def get_note(id):
        try:
            note = Note.objects.get(id=id)
        except:
            note = None

        return note
    
    
    

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/apps.py
--------------------------------------------------

from django.apps import AppConfig


class ContentConfig(AppConfig):
    name = 'content'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/forms.py
--------------------------------------------------

from django.contrib.auth.models import User, Group
from django import forms
from content.models import *
from tinymce.widgets import TinyMCE
from ckeditor.widgets import CKEditorWidget

class UploadVideoForm(forms.ModelForm):
    title = forms.CharField(max_length=100)
    subject = forms.ModelChoiceField(queryset=Subject.objects.all())
    chapter = forms.ModelChoiceField(queryset=Chapter.objects.all())
    urlLink = forms.URLField(max_length=2000)

    class Meta:
        model = Video
        fields = ['title', 'subject', 'chapter', 'urlLink']

class UploadQuestionForm(forms.ModelForm):

    class Meta:
        model = Question
        fields = ['dynamicText']

class UploadoptionForm(forms.ModelForm):

    class Meta:
        model = Option
        fields = ['explanation']
        
class JobInformationForm(forms.ModelForm):
    description = forms.CharField(widget=CKEditorWidget(), label=False)

    class Meta:
        model = JobInformation
        fields = ['title', 'description', 'image']

class UploadContestQuestionForm(forms.ModelForm):
    class Meta:
        model = ContestQuestion
        fields = ['dynamic_text']

class UploadContestOptionForm(forms.ModelForm):
    class Meta:
        model = ContestOption
        fields = '__all__'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/admin.py
--------------------------------------------------

from django.contrib import admin
from content.models import *
from management.models import MeetHourDeveloperAccountPayment

admin.site.register(PaidAmountSubject)
admin.site.register(PrizeLevel)
admin.site.register(ShopPhoto)
admin.site.register(OwnerShopGallery)
admin.site.register(ClientShop)
admin.site.register(PaidAmountClientShop)
admin.site.register(CounselingCourse)
admin.site.register(CounselingDetails)

@admin.register(StudentCoins)
class StudentCoinsAdmin(admin.ModelAdmin):
    search_fields = ["student__studentuser__username"]
    list_display = ["id", "student", "actual_coins", "winning_coins"]

@admin.register(StudentTestAttempt)
class StudentTestAttemptAdmin(admin.ModelAdmin):
    search_fields = ["student__studentuser__username","test__id"]
    list_display = ["id", "student", "test", "coins_deducted", "coins_won"]

@admin.register(TestResult)
class TestResultAdmin(admin.ModelAdmin):
    search_fields = ["student__studentuser__username","test__id"]
    list_display = ["id", "student", "test", "marks", "rank","prize_coins"]

@admin.register(ContentWebsite)
class ContentWebsiteAdmin(admin.ModelAdmin):
    search_fields = ['teacher__teacheruser__username','teacher__institute__name']
    list_display = ['id','teacher','chapter','subject']

    def teacher(self, obj):
        if obj.teacher and obj.teacher.teacheruser:
            return obj.teacher.teacheruser.username
        return None

    def chapter(self, obj):
        if obj.chapter:
            return obj.chapter.name
        return None

    def subject(self, obj):
        if obj.chapter and obj.chapter.subject:
            return obj.chapter.subject.name
        return None

@admin.register(Subject)
class SubjectAdmin(admin.ModelAdmin):
    search_fields = ["name", "id", "teachersubject__teacheruser__username"]
    list_display = ["id", "name", "institute", "teachers"]
    list_display_links = ["name"]
    readonly_fields = ['teachers',]

@admin.register(Chapter)
class ChapterAdmin(admin.ModelAdmin):
    search_fields = ['id','name','subject__id','subject__name']
    list_display = ['id','name','subject_id_with_name','code']
    readonly_fields = ['subject']
    
    def subject_id_with_name(self, obj):
        return f"{obj.subject.id} - {obj.subject.name}"
    subject_id_with_name.short_description = 'Subject'

@admin.register(QuestionTopic)
class QuestionTopicAdmin(admin.ModelAdmin):
    search_fields = ['id','topic','chapters__id']
    list_display = ['id','topic','chapter_names']

    def chapter_names(self, obj):
        if obj.chapters:
            return ", ".join([chapter.name for chapter in obj.chapters.all()])
        return None
    chapter_names.short_description = 'Chapters'

@admin.register(QuestionSubTopic)
class QuestionSubTopicAdmin(admin.ModelAdmin):
    pass

@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    search_fields = ['name']
    list_display = ['id','name','time','totalMarks','repeatQuiz']

@admin.register(StudentQuizMarks)
class StudentQuizMarksAdmin(admin.ModelAdmin):
    search_fields = ['quiz__name','student__studentuser__username']
    list_display = ['id','quiz','result','percentage','attempt_count']

@admin.register(Video)
class VideoAdmin(admin.ModelAdmin):
    search_fields = ['id', 'title','subject__id','teacher__id', 'teacher__teacheruser__username', 'teacher__institute__name']
    list_display = ['id', 'title', 'get_teacher_names', 'urlLink', 'download_link', 'subject','chapter','publishDate']
    readonly_fields = ['teacher', 'subject', 'chapter', 'topics', 'subTopics', 'batches']
    
    def get_teacher_names(self, obj):
        return ", ".join([teacher.name for teacher in obj.teacher.all()])
    get_teacher_names.short_description = 'Teacher'

class NotesUrlInline(admin.TabularInline):
    model = NoteURL
    extra = 0
    readonly_fields = ['link']

@admin.register(Note)
class NoteAdmin(admin.ModelAdmin):
    search_fields = ['id', 'title', 'teacher__id','chapter__id','teacher__teacheruser__username','batches__name']
    list_display = ['id', 'title','get_teacher_names', 'get_subject', 'get_chapter', 'topics_names','subtopics_names','publishDate']
    readonly_fields = ['teacher', 'subject','chapter', 'topic', 'subTopic', 'batches']
    inlines = [NotesUrlInline]
    
    def get_teacher_names(self, obj):
        return ", ".join([teacher.name for teacher in obj.teacher.all()])
    get_teacher_names.short_description = 'Teacher'

    def get_subject(self, obj):
        if obj.subject:
            return f"{obj.subject.name}({obj.subject.id})"
        return None
    get_subject.short_description = 'Subject'

    def get_chapter(self, obj):
        if obj.chapter:
            return f"{obj.chapter.name}({obj.chapter.id})"
        return None
    get_chapter.short_description = 'Chapter'

    def topics_names(self, obj):
        if obj.topic:
            return ", ".join([f"{topic.topic}({topic.id})" for topic in obj.topic.all()])
        return None
    topics_names.short_description = 'Topics'

    def subtopics_names(self, obj):
        if obj.subTopic:
            return ", ".join([f"{subtopic.name}({subtopic.id})" for subtopic in obj.subTopic.all()])
        return None
    subtopics_names.short_description = 'Sub Topics'

class OptionsInline(admin.TabularInline):
    model = Option
    extra = 0

@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ['id', 'subject', 'chapter', 'text', 'hindi_text']
    readonly_fields = ['direction', 'subject', 'chapter', 'topic', 'subTopic', 'section', 'exam',]
    search_fields = ['id','subject__name']
    inlines = [OptionsInline]

@admin.register(Option)
class OptionAdmin(admin.ModelAdmin):
    list_display = ['id','text','correct','explanationText','explanationPicture','explanationVideo','explanation']
    search_fields = ['question__id']

@admin.register(MeetHourMeetingUiConfig)
class MeetHourMeetingUiConfigAdmin(admin.ModelAdmin):
    list_display = ['id','institute','host']
    search_fields = ['institute__name']

@admin.register(Test)
class TestAdmin(admin.ModelAdmin):
    search_fields = ['name', 'id', 'subjects__id', 'chapters__id','createdBy__teacheruser__username','createdBy__id']
    list_display = ['id','name','get_teacher_names','subject_names','chapter_names','contest_category','published']
    readonly_fields = ['subjects', 'chapters', 'topics', 'subTopics', 'students', 'alreadyTakers', 'createdBy', 'questions', 'batches']
    
    def get_teacher_names(self, obj):
        return obj.createdBy.name if obj.createdBy else None
    get_teacher_names.short_description = 'Teacher'
    
    def subject_names(self, obj):
        if obj.subjects:
            return ", ".join([f"{subject.name}({subject.id})" for subject in obj.subjects.all()])
        return None
    subject_names.short_description = 'Subjects'
    
    def chapter_names(self, obj):
        if obj.chapters:
            return ", ".join([f"{chapter.name}({chapter.id})" for chapter in obj.chapters.all()])
        return None
    chapter_names.short_description = 'Chapters'

@admin.register(LiveVideoLink)
class LiveVideoLinkAdmin(admin.ModelAdmin):
    search_fields = ['id','title','teacher__name','teacher__institute__code']
    list_display = ['id','teacher','title','download_link']
    readonly_fields = ['students', 'teacher', 'batches', 'packages']

@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    search_fields = ["name", "id"]
    list_display = ['id', 'name','institute']
    readonly_fields = ['subjects']

@admin.register(FileTest)
class FileTestAdmin(admin.ModelAdmin):
    search_fields = ["title","id",'createdBy__institute__code']
    readonly_fields = ['subject', 'chapter','topic', 'sub_topic', 'createdBy', 'batches']

class PackageEarningInline(admin.StackedInline):
    model = PackageEarning
    extra = 0
    readonly_fields = ['package', 'units_sold', 'total_price', 'base_price_total', 'teacher_money', 'all_transactions']

@admin.register(Package)
class PackageAdmin(admin.ModelAdmin):
    search_fields = ['id', 'title', 'teacher__name', 'teacher__teacheruser__username', 'teacher__institute__name', 'teacher__institute__typeInstitute']
    list_display = ['title', 'id','teacher','ParentPackages', 'basePrice', 'price', 'packageInstitute', 'packageTotalTests', 'packagetypeInstitute']
    fields = ['marketLevelPackage', 'marketParentPackage', 'title', ('price', 'basePrice',), 'duration','fixDuration','thumbnail', 'teacher', 'sub_teacher', 'course', 'teacherCourses', 'batches', 'students', 'notes',
              'packageInstitute', 'videos', 'youtubeLiveVideos', 'tests', 'fileTests' ]
    readonly_fields = ['teacher', 'sub_teacher', 'course', 'teacherCourses', 'batches', 'students', 'notes',
                       'packageInstitute', 'videos', 'youtubeLiveVideos', 'tests', 'fileTests', 'marketParentPackage', 'marketLevelPackage']
    list_filter = ['marketLevelPackage',]
    inlines = [PackageEarningInline,]

@admin.register(PackageEarning)
class PackageEarningAdmin(admin.ModelAdmin):
    search_fields = ['package__id', 'package__title', 'package__teacher__name', 'package__teacher__institute__name']
    list_display = ['id', 'package_details', 'teacher', 'units_sold', 'total_price', 'base_price_total', 'teacher_money', ]
    readonly_fields = ['package', 'all_transactions', 'teacher_money']

@admin.register(PaidAmountStudentPackage)
class PaidAmountStudentPackageAdmin(admin.ModelAdmin):
    list_display = ['studentPackage','paidAmount','date']
    search_fields = ['studentPackage__student__name','studentPackage__package__title']

class PaidAmountStudentPackageInLine(admin.TabularInline):
    model = PaidAmountStudentPackage
    extra = 0

@admin.register(StudentPackage)
class StudentPackageAdmin(admin.ModelAdmin):
    search_fields = ['student__name', 'student__studentuser__username', 'package__title', 'package__id']
    list_display = ['student', 'package', 'startDate', 'endDate', 'packageDurationWhileAddPackage', 'packageFixDurationWhileAddPackage', 'tcode']
    readonly_fields = ['package', 'student']
    inlines = [PaidAmountStudentPackageInLine]

@admin.register(TeacherWebAppMoney)
class TeacherWebAppMoneyAdmin(admin.ModelAdmin):
    search_fields = ['teacher__name', 'teacher__id', 'teacher__teacheruser__username', 'teacher__institute__name', 'teacher__institute__typeInstitute']
    list_display = ['teacher', 'total_sales','total_earning', 'withdrawal_money',]
    fields = ['total_sales', 'total_earning', 'withdrawal_money',]
    inlines = [PackageEarningInline]

@admin.register(TeacherWithdrawMoneyRequest)
class TeacherWithdrawMoneyRequestAdmin(admin.ModelAdmin):
    list_filter = ['request_status']
    search_fields = ['teacher__name', 'teacher__id', 'teacher__institute__name', 'teacher__institute__typeInstitute']
    list_display = ['teacher', 'id', 'withdrawMoney', 'coin', 'time', 'request_status', 'status', 'requestType']

@admin.register(AttemptedQuestion)
class AttemptedQuestionAdmin(admin.ModelAdmin):
    list_display = ['student','question_status']
    readonly_fields = ['student', 'question', 'optionAttempted',]
    search_fields = ['id','question__id','student__studentuser__username']

@admin.register(StudentMarks)
class StudentMarksAdmin(admin.ModelAdmin):
    readonly_fields = ['student', 'test', 'questions',]
    search_fields = ['id','test__id','student__studentuser__username']
    list_display = ['id','student','get_test','result','attempt_count','attemptTime']

    def get_test(self, obj):
        if obj.test:
            return f"{obj.test.name}({obj.test.id})"
        return None
    get_test.short_description = 'Test'

@admin.register(NativeLiveVideo)
class NativeLiveVideoAdmin(admin.ModelAdmin):
    list_display = ['id','title','teacher','live']
    readonly_fields = ['students', 'teacher', 'batches', 'packages']
    search_fields = ['id']

@admin.register(LiveVideoStudentInformation)
class LiveVideoStudentInformationAdmin(admin.ModelAdmin):
    readonly_fields = ['video', 'student']
    search_fields = ['student__studentuser__username']
    
@admin.register(StudentYoutubeLiveVideoSession)
class StudentYoutubeLiveVideoSessionAdmin(admin.ModelAdmin):
    list_display = ['video','get_video_id','student','joinTime','leaveTime']
    search_fields = ['video__id','student__id','student__studentuser__username']
    readonly_fields = ['video', 'student','joinTime','leaveTime']
    
    def get_video_id(self, obj):
        return obj.video.id if obj.video else 'No Video ID'
    get_video_id.short_description = 'Video ID'
    
@admin.register(VideoRatingFeedback)
class VideoRatingFeedbackAdmin(admin.ModelAdmin):
    readonly_fields = ['video', 'student']
    list_display = ['video', 'student','session_rating','teacher_rating']
    search_fields = ['student__studentuser__username']

@admin.register(GoogleLiveVideoStudentInformation)
class GoogleLiveVideoStudentInformationAdmin(admin.ModelAdmin):
    readonly_fields = ['video', 'student']
    search_fields = ['student__studentuser__username']

@admin.register(MessageLiveVideo)
class MessageLiveVideoAdmin(admin.ModelAdmin):
    list_display = ['student']
    readonly_fields = ['student', 'video', 'youtubeVideo']
    search_fields = ['student__studentuser__username']

@admin.register(TeacherQuestionData)
class TeacherQuestionDataAdmin(admin.ModelAdmin):
    list_display = ['institute', 'link', 'description', 'time']
    readonly_fields = ['teacher']

@admin.register(Assignment)
class AssignmentAdmin(admin.ModelAdmin):
    list_display = ['teacher','title']
    readonly_fields = ['teacher', 'batches', 'subject', 'chapter']
    search_fields = ['title']

@admin.register(StudentAssignment)
class StudentAssignmentAdmin(admin.ModelAdmin):
    readonly_fields = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(BuyPackageRequest)
class BuyPackageRequestAdmin(admin.ModelAdmin):
    readonly_fields = ['package', 'student']
    search_fields = ['package__teacher__teacheruser__username','student__studentuser__username']

@admin.register(StudentHostLiveVideo)
class StudentHostLiveVideoAdmin(admin.ModelAdmin):
    readonly_fields = ['student', 'video']
    search_fields = ['student__studentuser__username']

@admin.register(TimesUsed)
class TimesUsedAdmin(admin.ModelAdmin):
    readonly_fields = ['institute', 'question', 'batch']

@admin.register(RecordedVideo)
class RecordedVideoAdmin(admin.ModelAdmin):
    search_fields = ['teacher__teacheruser__username', 'title']
    readonly_fields = ['teacher', 'batches']
    list_display = ['title', 'teacher', 'recordDate', 'link', 'deleted']

class StudentNoteViewInline(admin.TabularInline):
    model = StudentNoteView
    readonly_fields = ['student']
    extra = 0

@admin.register(StudentNoteView)
class StudentNoteViewAdmin(admin.ModelAdmin):
    list_display = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(NoteView)
class NoteViewAdmin(admin.ModelAdmin):
    readonly_fields = ['note']
    inlines = [StudentNoteViewInline]

class StudentVideoViewInline(admin.TabularInline):
    model = StudentVideoView
    readonly_fields = ['student']
    extra = 0

@admin.register(VideoView)
class VideoViewAdmin(admin.ModelAdmin):
    readonly_fields = ['video']

@admin.register(StudentYoutubeLiveVideoInformation)
class StudentYoutubeLiveVideoInformationAdmin(admin.ModelAdmin):
    list_display = ['video','student','isLive']
    readonly_fields = ['video', 'student']
    search_fields = ['video__id','student__studentuser__username']

@admin.register(CouponCode)
class CouponCodeAdmin(admin.ModelAdmin):
    readonly_fields = ['teacher', 'package', 'couponUsedStudents']
    list_display = ['teacher','package','total_count','code','coupon_used_students_count']
    search_fields = ['teacher__name','code']
    
    def coupon_used_students_count(self, obj):
        return obj.couponUsedStudents.count()
    coupon_used_students_count.short_description = 'Coupon Used Students Count'

@admin.register(PackageDemoContent)
class PackageDemoContentAdmin(admin.ModelAdmin):
    readonly_fields = ['package', 'videos', 'notes','tests', 'youtubeLiveVideos', 'fileTests']
    search_fields = ['package__id']

@admin.register(BookCategory)
class BookCategoryAdmin(admin.ModelAdmin):
    readonly_fields = ['createdBy']

@admin.register(Book)
class BookAdmin(admin.ModelAdmin):
    readonly_fields = ['teacher', 'students', 'categories',]

class PaidAmountStudentBookInline(admin.TabularInline):
    model = PaidAmountStudentBook
    extra = 0

@admin.register(StudentBook)
class StudentBookAdmin(admin.ModelAdmin):
    search_fields = ['student__studentuser__username','book__name']
    list_display = ['student','book','isComplete','delivered']
    readonly_fields = ['student', 'book',]
    inlines = [PaidAmountStudentBookInline]

@admin.register(StudentBoughtPackageHistory)
class StudentBoughtPackageHistoryAdmin(admin.ModelAdmin):
    search_fields = ["student__name", "student__studentuser__username"]
    list_display = ['student', 'package', 'startDate', 'endDate']

@admin.register(PackageBuyRequestOnline)
class PackageBuyRequestOnlineAdmin(admin.ModelAdmin):
    search_fields = ['mobile', 'email']
    list_display = ["package_name", "student_name", "mobile", "accepted", "time"]
    list_editable = ["accepted"]

@admin.register(CoursesQuery)
class CoursesQueryAdmin(admin.ModelAdmin):
    search_fields = ['teacher__name', 'course__name']
    list_display = ['teacher', 'teacher_course', 'count', 'current_click_time', 'previous_click_time']
    readonly_fields = ['teacher', 'teacher_course']

@admin.register(QuestionSection)
class QuestionSectionAdmin(admin.ModelAdmin):
    pass

@admin.register(QuestionExam)
class QuestionExamAdmin(admin.ModelAdmin):
    pass

@admin.register(VideoOrderBatchWise)
class VideoOrderBatchWiseAdmin(admin.ModelAdmin):
    readonly_fields = ['batch', 'video']

@admin.register(PackageOrderWise)
class PackageOrderWiseAdmin(admin.ModelAdmin):
    readonly_fields = ['package']
    
@admin.register(PackageVideosOrderWise)
class PackageVideosOrderWiseAdmin(admin.ModelAdmin):
    list_display = ['package','video','order']
    readonly_fields = ['package','video','order']

@admin.register(GoogleMeetLive)
class GoogleMeetLiveAdmin(admin.ModelAdmin):
    readonly_fields = ['students', 'teacher', 'batches', 'packages']
    search_fields = ['id']

@admin.register(InstamojoStatus)
class InstamojoStatusAdmin(admin.ModelAdmin):
    pass

@admin.register(GoogleFormTest)
class GoogleFormTestAdmin(admin.ModelAdmin):
    readonly_fields = ['students', 'subject', 'chapter', 'createdBy', 'batches']

@admin.register(StudentGoogleFormTest)
class StudentGoogleFormTestAdmin(admin.ModelAdmin):
    readonly_fields = ['student', 'googleFormTest']
    search_fields = ['student__studentuser__username']

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    readonly_fields = ['students']

@admin.register(StudentFileTestMarks)
class StudentFileTestMarksAdmin(admin.ModelAdmin):
    list_display = ['student','fileTest','marks']
    readonly_fields = ['student', 'fileTest']
    search_fields = ['id','fileTest__id','student__studentuser__username']

@admin.register(BuyBookRequest)
class BuyBookRequestAdmin(admin.ModelAdmin):
    readonly_fields = ['book', 'student']
    search_fields = ['student__studentuser__username']

@admin.register(SuggestionQuestion)
class SuggestionQuestionAdmin(admin.ModelAdmin):
    readonly_fields = ['course']

@admin.register(Trade)
class TradeAdmin(admin.ModelAdmin):
    pass

@admin.register(TradeDetails)
class TradeDetailsAdmin(admin.ModelAdmin):
    readonly_fields = ['sub_institute', 'trade', 'sub_institute_teachers',]

@admin.register(SubInstituteVideo)
class SubInstituteVideoAdmin(admin.ModelAdmin):
    readonly_fields = ['sub_institute']

@admin.register(SubInstitutePicture)
class SubInstitutePictureAdmin(admin.ModelAdmin):
    readonly_fields = ['sub_institute']

@admin.register(SubInstituteReview)
class SubInstituteReviewAdmin(admin.ModelAdmin):
    readonly_fields = ['sub_institute', 'student']
    search_fields = ['student__studentuser__username']

@admin.register(SubInstituteFAQ)
class SubInstituteFAQAdmin(admin.ModelAdmin):
    list_display = ['id', 'question']

@admin.register(Contact)
class ContactAdmin(admin.ModelAdmin):
    readonly_fields = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(StudentTradePurchase)
class StudentTradeAdmin(admin.ModelAdmin):
    readonly_fields = ['student', 'trade_details']
    search_fields = ['student__studentuser__username']

# # @admin.register(DytePreset)


# @admin.register(DyteOrganisationCredential)



# @admin.register(DyteMeeting)

class MeetHourDeveloperAccountPaymentInline(admin.TabularInline):
    model = MeetHourDeveloperAccountPayment
    extra = 0

@admin.register(MeetHourDeveloperAccountClientCredentials)
class MeetHourDeveloperAccountClientCredentialsAdmin(admin.ModelAdmin):
    readonly_fields = ['access_token', 'refresh_token']
    list_display = ['username', 'password', 'institute', 'active', 'subscription_upto', 'recharge', 'expire_date']
    autocomplete_fields = ['institute']
    inlines = [MeetHourDeveloperAccountPaymentInline]

@admin.register(MeetHourDeveloperAccountContact)
class MeetHourDeveloperAccountContactAdmin(admin.ModelAdmin):
    list_display = ['developer_account','contact_id','firstname','email']
    search_fields = ['firstname','email']

@admin.register(MeetHourDeveloperAccountMeeting)
class MeetHourDeveloperAccountMeetingAdmin(admin.ModelAdmin):
    list_display = ['teacher', 'institute', 'meeting_id','meeting_name', 'live_status', 'time']
    readonly_fields = ['developer_account', 'meeting_name', 'meeting_id','teacher', 'batches', 'packages', 'pCode', 'passcode']
    search_fields = ["teacher__name", "teacher__id","teacher__teacheruser__username", "teacher__institute__name",]
    list_filter = ['live_status']

@admin.register(MeetHourMeeting)
class MeetHourMeetingAdmin(admin.ModelAdmin):
    list_display = ['teacher', 'meeting_id','meeting_name', 'live_status', 'time']
    readonly_fields = ['meeting_name', 'meeting_id','teacher', 'batches', 'packages', 'pCode', 'passcode']
    search_fields = ["teacher__name", "teacher__id","teacher__teacheruser__username", "teacher__institute__name",]
    list_filter = ['live_status']

@admin.register(PackageYoutubeVideoOrderWise)
class PackageYoutubeVideoOrderWiseAdmin(admin.ModelAdmin):
    list_display =['package','youtube_video','order']
    readonly_fields = ['package','youtube_video']
    
class NotesUrl(admin.TabularInline):
    model = NoteURL
    extra = 0
    readonly_fields = ['link']

@admin.register(NoteURL)
class NoteURLAdmin(admin.ModelAdmin):
    list_display = ['id','link']
    search_fields = ['id','note__id']
    readonly_fields = ['note']
    
@admin.register(StudentClassWiseReport)
class StudentClassWiseReportAdmin(admin.ModelAdmin):
    list_display = ['student','teacher','subject','report_date','lesson_date','create_date']
    readonly_fields = ['student']
    search_fields =['student__studentuser__username']
    
@admin.register(StudentTestAssignmentsReport)
class StudentTestAssignmentsReportAdmin(admin.ModelAdmin):
    list_display = ['student','teacher','subject','report_date','create_date']
    readonly_fields = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(StudentPackageCertificate)
class StudentPackageCertificateAdmin(admin.ModelAdmin):
    list_display = ['certificate_no','student','package']
    readonly_fields = ['student','package']
    search_fields = ['student__studentuser__username']
    
@admin.register(StudentCourseCertificate)
class StudentPackageCertificateAdmin(admin.ModelAdmin):
    list_display = ['student','course']
    readonly_fields = ['student','course']
    search_fields = ['student__studentuser__username']
    
@admin.register(StudentReviews)
class StudentReviewsAdmin(admin.ModelAdmin):
    readonly_fields = ['test','question','review']

@admin.register(OfflineTest)
class OfflineTestAdmin(admin.ModelAdmin):
    list_display = ['id','test_name','test_date','createdBy','created_date']

@admin.register(OfflineTestSection)
class OfflineTestSectionAdmin(admin.ModelAdmin):
    list_display = ['id','name','total_marks']

@admin.register(OfflineTestMarks)
class OfflineTestMarksAdmin(admin.ModelAdmin):
    list_display = ['get_test_name', 'get_student_name', 'get_test_section_name', 'obtained_marks']
    readonly_fields = ['offline_test', 'student', 'testSection']
    search_fields = ['student__studentuser__username']

    def get_test_name(self, obj):
        return obj.offline_test.test_name
    get_test_name.short_description = 'Test Name'  # Optional

    def get_student_name(self, obj):
        return obj.student.name
    get_student_name.short_description = 'Student Name'  # Optional

    def get_test_section_name(self, obj):
        return obj.testSection.name
    get_test_section_name.short_description = 'Test Section Name' 
    
@admin.register(OwnerShopListing)
class OwnerShopListingAdmin(admin.ModelAdmin):
    list_display = ['id','teacher','shop_name','phone','created_date']
    
@admin.register(TeacherTotalCoins)
class TeacherTotalCoinsAdmin(admin.ModelAdmin):
    list_display = ['id','teacher','total_coins','created_date','updated_at']
    
@admin.register(BookCouponCode)
class BookCouponCodeAdmin(admin.ModelAdmin):
    list_display = ['id','book','code','amount','created_date','coupon_count_students']
    search_fields = ['book__id', 'code']
    
    def coupon_count_students(self, obj):
        return obj.couponUsedStudents.count()
    coupon_count_students.short_description = 'Coupon Used Students Count'
 
@admin.register(JobInformation)
class JobInformationAdmin(admin.ModelAdmin):
    list_display = ['id','title','image','created_date']
    search_fields = ['title']   

@admin.register(QuizCategory)
class QuizCategoryAdmin(admin.ModelAdmin):
    list_display = ['id','title','created_date']
    search_fields = ['title']  

@admin.register(ContestCategory)
class ContestCategoryAdmin(admin.ModelAdmin):
    list_display = ['id','title','quiz_category','price']
    search_fields = ['title']  

@admin.register(TestRoom)
class TestRoomAdmin(admin.ModelAdmin):
    list_display = ['id','test','created_at']
    search_fields = ['test__id']
    readonly_fields = ['students'] 
    


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/content_helper.py
--------------------------------------------------

import datetime
import requests
import json
import string
import random
from django.db.models.aggregates import Count, Max, Min, Avg
from content.models import *
from membership.models import *
from basicinformation.models import *

class StudentPackageHelper():
    def __init__(self, student:Student):
        self.student = student
        self.institute = student.institute

    def institute_packages(self):
        self.all_packages = set(package for package in Package.objects.prefetch_related('teacher','notes','videos','tests').filter(teacher__institute=self.institute, publish=True))
        return self.all_packages
    
    def brought_packages(self):
        today = datetime.datetime.now()
        self.all_brought_packages = set(student_package.package for student_package in StudentPackage.objects.select_related('package').filter(student=self.student, endDate__gte=today, package__isnull=False))
        self.expire_package = set(student_package.package for student_package in StudentPackage.objects.select_related('package').filter(student=self.student, endDate__lt=today, package__isnull=False))
        for pack in self.expire_package:
            pack.students.remove(self.student)
        return self.all_brought_packages
    
    def taken_test(self):
        self.taken_test_ids = set(student_marks.test.id for student_marks in StudentMarks.objects.select_related(
            'test').filter(student = self.student))
        return self.taken_test_ids
    
    def taken_file_test(self):
        self.taken_test_ids = set(student_marks.fileTest for student_marks in StudentFileTestMarks.objects.select_related(
            'fileTest').filter(student=self.student))
        return self.taken_test_ids

class StudentBroughtPackagesHelper:
    def __init__(self, student:Student) -> None:
        self.student = student
        self.package_object = StudentPackageHelper(self.student)
        self.brought_packages = self.package_object.brought_packages()

    def check_package_brought(self, package):
        if package in self.brought_packages:
            return True
        else:
            return False
        
    def get_all_brought_notes(self):
        self.my_notes = set()
        for package in self.brought_packages:
            notes_set = set(note for note in package.notes.all())
            self.my_notes.update(notes_set)
        return self.my_notes
    
    def get_brought_package_notes(self, package:Package):
        if package in self.brought_packages:
            notes = package.notes.all()
            return notes
        else:
            return Package.objects.none()     
        
    def get_all_brought_videos(self):
        self.my_videos = set()
        for package in self.brought_packages:
            videos_set = set(video for video in package.videos.filter(publish=True))
            self.my_videos.update(videos_set)
        return self.my_videos

    def get_brought_package_videos(self, package:Package):
        if package in self.brought_packages:
            videos = package.videos.filter(publish=True)
            return videos
        else:
            return Package.objects.none()

    def get_all_brought_tests(self):
        self.my_tests = set()
        for package in self.brought_packages:
            tests_set = set(test for test in package.tests.prefetch_related('questions').select_related('createdBy').filter(publish=True))
            self.my_tests.update(tests_set)
        return self.my_tests

    def get_brought_package_tests(self, package:Package):
        if package in self.brought_packages:
            tests = package.tests.filter(publish=True).prefetch_related('questions').select_related('createdBy')
            return tests
        else:
            return Package.objects.none()

    def get_all_brought_youtubeLiveVideos(self):
        self.my_youtubeLiveVideos = set()
        for package in self.brought_packages:
            youtubeLiveVideos_set = set(youtubeLiveVideos for youtubeLiveVideos in package.youtubeLiveVideos.all())
            self.my_youtubeLiveVideos.update(youtubeLiveVideos_set)
        return self.my_youtubeLiveVideos

    def get_brought_package_youtubeLiveVideos(self, package:Package):
        if package in self.brought_packages:
            youtubeLiveVideos = package.youtubeLiveVideos.filter(locked=False)
            return youtubeLiveVideos
        else:
            return Package.objects.none()

    def get_all_brought_fileTests(self):
        self.my_fileTests = set()
        for package in self.brought_packages:
            fileTests_set = set(fileTests for fileTests in package.fileTests.all())
            self.my_fileTests.update(fileTests_set)
        return self.my_fileTests

    def get_brought_package_fileTests(self, package:Package):
        if package in self.brought_packages:
            fileTests = package.fileTests.filter(publish=True)
            return fileTests
        else:
            return Package.objects.none()

    def progress_of_brought_packages(self, package:Package):
            studentPackage = StudentPackage.objects.filter(package=package, student=self.student).first()
            if studentPackage:
                endDate = studentPackage.endDate
            else:
                endDate = None
                
            numberTests = len(package.tests.all())
            numberVideos = len(package.videos.all())
            numberNotes = len(package.notes.all())
            
            if package.course:
                course_name = package.course.name
                course_id = package.course.id
            else:
                course_name = None
                course_id = None
                
            tests = package.tests.all().values_list('id', flat=True).distinct()
            videos = package.videos.all().values_list('id', flat=True).distinct()
            notes = package.notes.all().values_list('id', flat=True).distinct()
            videosViews = StudentVideoView.objects.filter(student=self.student, videoview__video__id__in=videos).values('videoview').annotate(total_views=Count('id', distinct=True)).count()
            notesViews = StudentNoteView.objects.filter(student=self.student, noteview__note__id__in=notes).values('noteview').annotate(total_views=Count('id', distinct=True)).count()
            testsViews = StudentTestView.objects.filter(student=self.student,testview__test__id__in=tests).values('testview').annotate(total_views=Count('id', distinct=True)).count()
            allPackageContent = len(videos) + len(notes) + len(tests)
            allViews = videosViews + notesViews + testsViews
            
            if allPackageContent != 0 and allViews != 0:
                progress = str(round((allViews / allPackageContent) * 100, 2)) + ' %'
            else:
                progress = '0.0 %'

            context = {
                'course_name': course_name,
                'course_id': course_id,
                'endDate': endDate,
                'numberTests': numberTests, 
                'numberVideos': numberVideos, 
                'numberNotes': numberNotes, 
                'progress': progress, 
                'allPackageContent': allPackageContent,
                'allViews': allViews,
            }
            return context 



class CheckBookmark:
    def __init__(self, student):
        self.student = student
        try:
            self.bookmark = StudentBookmark.objects.prefetch_related(
                'questions', 'videos', 'tests', 'notes').get(student=student)
            self.video_set = set(video.id for video in self.bookmark.videos.all())
            self.notes_set = set(note.id for note in self.bookmark.notes.all())
            self.questions_set = set(question.id for question in self.bookmark.questions.all())
        except:
            self.video_set = set()
            self.notes_set = set()
            self.questions_set = set()

    def isVideoBookmark(self, video_id):
        Bookmark = False
        try:
            if video_id in self.video_set:
                Bookmark = True
            else:
                Bookmark = False
        except self.bookmark.DoesNotExist:
            Bookmark = False
        return Bookmark

    def isQuestionBookmark(self, question_id):
        Bookmark = False
        try:
            if question_id in self.questions_set:
                Bookmark = True
            else:
                Bookmark = False
        except StudentBookmark.DoesNotExist:
            Bookmark = False
        return Bookmark

    def isNoteBookmark(self, note_id):
        Bookmark = False
        try:
            if note_id in self.notes_set:
                Bookmark = True
            else:
                Bookmark = False
        except StudentBookmark.DoesNotExist:
            Bookmark = False
        return Bookmark

class VideoViewLimitCheck:
    def  __init__(self,student):
        self.studentVideoView = {}
        annotate = StudentVideoView.objects.prefetch_related('videoview__video').filter(student=student)
        for videoview in annotate:
            if videoview.videoview.video.id in self.studentVideoView:
                self.studentVideoView[videoview.videoview.video.id] += 1
            else :
                self.studentVideoView[videoview.videoview.video.id] = 1
        
        
    def vision(self, video_id, video_viewsLimite):
        vision = True
        try:
            if video_viewsLimite != None and self.studentVideoView.get(video_id) != None:
                if self.studentVideoView[video_id] >= int(video_viewsLimite):
                    vision = False
                else:
                    vision = True
        except:
            pass
        return vision

class NotesViewLimitCheck:
    def  __init__(self,student):
        self.studentNoteView = {}
        annotate = StudentNoteView.objects.prefetch_related('noteview__note').filter(student=student)
        for noteview in annotate:
            if noteview.noteview.note.id in self.studentNoteView:
                self.studentNoteView[noteview.noteview.note.id] += 1
            else :
                self.studentNoteView[noteview.noteview.note.id] = 1
        
        
    def vision(self, note_id, note_viewsLimite):
        vision = True
        if self.studentNoteView.get(note_id) != None and note_viewsLimite != None:
            if self.studentNoteView[note_id] >= int(note_viewsLimite):
                vision = False
            else:
                vision = True
        return vision
    
class PackageDemoContentHelper:
    def __init__(self, package:Package):
        self.demo_package, created = PackageDemoContent.objects.get_or_create(package=package)

    def check_video_demo(self, video:Video):
        try:
            return video in self.demo_videos
        except:
            self.demo_videos = set(video for video in self.demo_package.videos.all())
            return video in self.demo_videos
        
    def check_note_demo(self, note:Note):
        try:
            return note in self.demo_notes
        except:
            self.demo_notes = set(note for note in self.demo_package.notes.all())
            return note in self.demo_notes
        
    def check_test_demo(self, test:Test):
        try:
            return test in self.demo_tests
        except:
            self.demo_tests = set(test for test in self.demo_package.tests.all())
            return test in self.demo_tests
        
    def check_youtubeLiveVideo_demo(self, youtubeLiveVideo:LiveVideoLink):
        try:
            return youtubeLiveVideo in self.demo_youtubeLiveVideos
        except:
            self.demo_youtubeLiveVideos = set(youtubeLiveVideo for youtubeLiveVideo in self.demo_package.youtubeLiveVideos.all())
            return youtubeLiveVideo in self.demo_youtubeLiveVideos

    def check_fileTest_demo(self, fileTest:FileTest):
        try:
            return fileTest in self.demo_fileTests
        except:
            self.demo_fileTests = set(fileTest for fileTest in self.demo_package.fileTests.all())
            return fileTest in self.demo_fileTests

class VideoHelper:
    def __init__(self, video:Video) -> None:
        self.video = video

    def get_subject(self):
        try:
            return self.subject
        except:
            self.subject = self.video.subject
            return self.subject

    def get_chapter(self):
        try:
            return self.chapter
        except:
            self.chapter = self.video.chapter
            return self.chapter

class NoteHelper:
    def __init__(self, note:Note) -> None:
        self.note = note

    def get_url(self):
        pass

    def get_subject(self):
        try:
            return self.subject
        except:
            self.subject = self.note.subject
            return self.subject

    def get_chapter(self):
        try:
            return self.chapter
        except:
            self.chapter = self.note.chapter
            return self.chapter
        



    

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/tests.py
--------------------------------------------------

from django.test import TestCase, Client
from .models import *
from django.views import *
import unittest
from django.urls import reverse
import json

class MyTestCase(TestCase):
    def setUp(self):
        self.client = Client()

    def test_result_function(self):
        url = reverse('MyTesting')  
        response = self.client.get(url)
        self.assertEqual(response.status_code, 200)

        print(type(response))

        response_data = response.json()
        print(response_data)
        


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/urls.py
--------------------------------------------------

from django.urls import path
from content import views
from django.http.response import HttpResponse

app_name = 'content'
urlpatterns = [
     path("teacher_upload_videos/", views.teacher_upload_videos,name="teacherUploadVideos"),
     path("alok_uploadVideos/", views.alok_upload_videos, name="alokUploadVideos"),
     path("teacher_upload_video_final/", views.teacher_upload_video_final,name="teacherUploadVideosFinal"),
     path("alok_upload_video_final/", views.alok_upload_video_final,name="alokUploadVideosFinal"),
     path("teacher_upload_notes/", views.teacherUploadNotes,name="teacher_upload_notes"),
     path("notes_for_edit/", views.notesForEdit, name="notes_for_edit"),
     path("teacher_delete_notes/", views.TeacherDeleteNotes,name="teacher_delete_notes"),
     path("teacher_edit_notes/", views.TeacherEditNotes, name="teacher_edit_notes"),
     
     path("teacher_upload_question_data/",views.teacher_question_upload_files, name="teacherUploadQuestionFiles"),
     path("teacher_upload_question_data_final/",views.teacher_question_data, name="teacherUploadFileFinal"),
     path("teacher_upload_question/",views.upload_question_form, name="uploadQuestionForm"),
     path("teacher_edit_question/", views.teacher_edit_question,name="teacher_edit_question"),
     path("questions_for_edit/", views.questionForEdit, name="questions_for_edit"),
     path("delete_questions/", views.teacher_delete_question,name="delete_questions"),
     path("teacher_select_addQuestionFormat/", views.teacher_select_addQuestionFormate,name="teacher_select_addQuestionFormat"),
     path("teacher_upload_question_bulkFormat/", views.TeacherUploadQuestionBulkFormatChange,name="teacher_upload_question_bulkFormat"),
     path("teacher_upload_question_bulkFormat2/", views.TeacherUploadQuestionBulkFormatChange2,name="teacher_upload_question_bulkFormat2"),
     path("teacher_download_csvDemo_file/<slug:type>",views.teacher_download_csvDemo_file, name="teacher_download_csvDemo_file"),
     path("teacher_upload_oneword_question/", views.TeacherUploadOneWordQuestion,name="teacher_upload_oneword_question"),
     path("upload_questions_through_docFile/", views.TeacherUploadQuestionThroughDocFile,name="TeacherUploadQuestionThroughDocFile"),
     path('delete_all_questions/', views.DeleteAllQuestions,name='DeleteAllQuestions'),
     
     path("teacher_ant_live/", views.teacher_ant_live, name="antPublishLive"),
     path("teacher_conferencing_live/",views.teacher_conferencing, name="teacherConferencing"),
     path("teacher_ant_go_live/", views.teacher_ant_go_live, name="teacherAntGoLive"),
     path("teacher_ant_conferencing/", views.teacher_ant_conferencing,name="teacherAntConferencing"),
     path("teacher_stop_ant_video/", views.teacher_stop_live_video,name="teacherStopLiveVideo"),
     path("student_ant_player_live/", views.student_ant_live_player,name="antPlayerLiveStudent"),
     path("teacher_youtubelive_video_list/",views.teacher_see_youtube_live_comments, name="youtubeliveVideoList"),
     path("teacher_youtubelive_messages/",views.teacher_youtubelive_video_comment, name="youtubeLiveMessages"),
     path("teacher_conferencing/", views.teacher_conferencing,name="teacherConferencing"),
     path("teacher_youtubelive_messagesDetail/",views.teacher_youtubelive_video_morecomments, name="youtubeMoreLiveComments"),
     path("upload_image/", views.TeacherUploadImage, name="TeacherUploadImage"),
     path("delete_youtube_video/", views.TeacherDeleteYoutubeVideo,name="delete_youtube_video"),
     path("register_students_bulk/", views.register_students_bulk,name="register_students_bulk"),
     path("videos_for_edit/", views.videosForEdit, name="videosForEdit"),
     path("teacher_delete_video/", views.TeacherDeleteVideo,name="TeacherDeleteVideo"),
     path("teacher_edit_video/", views.TeacherEditVideo, name="teacher_edit_video"),
     path("package_details/<int:package_id>/<slug:package_title>/",views.StudentSeePackageDetails, name="package_details"),
     path("student_buy_package_on_web/", views.StudentBuyPackageOnWeb,name="student_buy_package_on_web"),
     path('payment_success/', views.paymentSuccess, name='payment_success'),
     path('payment_failed/', views.paymentFailed, name='payment_failed'),
     path("teacher_live_with_jitsi/", views.TeacherGoLiveWithJitSi,name="teacher_live_with_jitsi"),
     path("teacher_send_whatsapp_message/", views.TeacherSendWhatsappMessageToStudents,name="TeacherSendWhatsappMessageToStudents"),
     path("all_packages/<str:institute_code>/<str:institute_name>/",views.AllPackages, name="all_packages"),
     path("teacher_add_students/", views.TeacherAddStudents,name="TeacherAddStudents"),
     path("calculate_resulte_tests_view/", views.calculate_resulte_tests_view,name="calculate_resulte_tests_view"),
     path('teacher_schedule_meeting/', views.TeacherScheduleMeeting, name='TeacherScheduleMeeting'),
     path('teacher_create_meethour_meeting/', views.CreateMeethourMeeting, name='CreateMeethourMeeting'),
     path('upload_images/', views.UploadImages, name='UploadImages'),
     path('question_image_upload/', views.QuestionUploadImage, name='QuestionUploadImage'),
     path("teacher_upload_video_final_azure/", views.teacher_upload_video_final_azure,name="teacherUploadVideosFinalAzure"),
     path("teacher_uploadVideosAzure/", views.teacher_upload_videos_azure,name="teacher_upload_videos_azure"),
     path("teacher_uploadVideosGC/", views.teacher_upload_videos_googleCloud,name="teacher_upload_videos_googleCloud"),
     path("subject_wise_notes/", views.subject_wise_notes, name="subject_wise_notes"),
     path("upload_image_gc/", views.upload_image_gc, name="upload_image_gc"),
     path("carosel/", views.carosel, name="carosel"),
     path("chatbot/", views.chatbot, name="chatbot"),
     
     path("student_monthly_report/", views.StudentMonthlyReport,name="student_monthly_report"),
     path("add_class_wise_report/", views.AddClassWiseReport,name="add_class_wise_report"),
     path("add_test_assignment_report/", views.AddTestAssignmentReport,name="add_test_assignment_report"),
     
     path("admit_card_add/", views.StudentAdminCard,name="admit_card_add"),
     path("score_card_add/", views.StudentScoreCard,name="score_card_add"),
     path("package_buy/", views.PackageBuy,name="package_buy"),
     path("teacher_ant_live2/", views.teacher_ant_live2, name="teacher_ant_live2"),
     path('thumbnail_upload_image/', views.thumbnailUploadImage, name='thumbnail_upload_image'), 
     path("teacher_ant_live3/", views.teacher_ant_live3, name="teacher_ant_live3"),
     path("teacher_ant_live4/", views.teacher_ant_live4, name="teacher_ant_live4"),
     path("add_offline_test_marks/", views.add_offline_test, name="add_offline_test"),
     
     path("all_packages_list/",views.allPackagesList, name="all_packages_list"),
     path("create_test/", views.CreateTest,name="create_test"),
     path("tests_for_edit/", views.testsForEdit,name="tests_for_edit"),
     path("teacher_delete_test/", views.teacherDeleteTest,name="teacher_delete_test"),
     path("teacher_edit_test/", views.teacherEditTest,name="teacher_edit_test"),
     path("delete_test_questions/", views.deleteTestQuestion,name="delete_test_questions"),
     path("teacher_edit_test_question/", views.teacherEditTestQuestion,name="teacher_edit_test_question"),
     path("teacher_add_test_question/", views.teacherAddTestQuestion,name="addTestQuestion"),
     path("teacher_change_rank_status/", views.teacherChangeRankStatus,name="teacher_change_rank_status"),
     path("teacher_change_publish_status/", views.teacherChangePublishStatus,name="teacher_change_publish_status"),
     path("batch_wise_test/", views.batchWiseTest,name="batch_wise_test"),
     path("edit_test_basic/", views.editTestBasic,name="edit_test_basic"),
     path("upload_job_info/", views.uploadJobInfo,name="upload_job_info"),
     path("all_job_list/",views.allJobList, name="all_job_list"),
     path("teacher_delete_job/", views.teacherDeleteJob,name="teacher_delete_job"),
     path("teacher_edit_job/", views.teacherEditJob,name="teacher_edit_job"),
     
     path("delete_user/<str:institute_code>/",views.deleteUser, name="delete_user"),
     path("delete_teacher/",views.deleteTeacher, name="delete_teacher"),
     path("principle_institute/", views.principleAddInstitute,name="principle_institute"),
     path("upload_youtube_video_bulk/", views.uploadYoutubeVideoBulk,name="upload_youtube_video_bulk"),
     path("upload_youtube_video_bulk2/", views.uploadYoutubeVideoBulk2,name="upload_youtube_video_bulk2"),
     path("upload_video_for_queston/", views.uploadQuestionVideo,name="upload_video_for_queston"),

     path("contest_test_list/", views.contestTestList, name="contest_test_list"),
     path("create_test_for_contest/", views.createTestForContest,name="create_test_for_contest"),
     path("edit_test_for_contest/", views.editTestForContest,name="edit_test_for_contest"),
     path("teacher_delete_contest_test/", views.teacherDeleteContestTest,name="teacher_delete_contest_test"),

     path("upload_question_for_contest_test/",views.uploadQuestionForContestTest, name="upload_question_for_contest_test"),
     path("edit_question_for_contest_test/", views.editQuestionForContestTest,name="upload_question_for_contest_test"),
     path("test_questions_list/", views.testsQuestionsList,name="test_questions_list"),
     path("delete_contest_test_questions/", views.deleteContestTestQuestion,name="delete_contest_test_questions"),
     path('delete_contest_all_questions/', views.deleteContestAllQuestions,name='delete_contest_all_questions'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/views.py
--------------------------------------------------

import os
import csv
import boto3
import hashlib
import mimetypes
import datetime
from .forms import *
import pandas as pd
from numpy import True_
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth.models import User, Group
from basicinformation.tasks import *
from content.models import *
from basicinformation.api.helperFunctions import *
from django.http import HttpResponse, JsonResponse
from django.http.response import HttpResponse
from django.db.models.query_utils import Q
from random import randint
from rest_framework.authtoken.models import Token
from django.db.models.functions import Lower
from django.db import transaction
from django.core.exceptions import ObjectDoesNotExist
from django.views.decorators.csrf import csrf_exempt
from google.cloud.video import transcoder_v1
from google.cloud.video.transcoder_v1.services.transcoder_service import TranscoderServiceClient
from google.cloud import storage
import razorpay

credential_path = "gcd.json"
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path

class GCPManager:
    def create_job_from_preset(self, project_id, location, input_uri, output_uri, preset):
        client = TranscoderServiceClient()
        parent = f"projects/{project_id}/locations/{location}"
        job = transcoder_v1.Job()
        job.input_uri = input_uri
        job.output_uri = output_uri
        job.template_id = preset

        response = client.create_job(parent=parent, job=job)
        return response
    
class GCPManagerJob:
    def create_job_template(self,project_id: str = 'rare-drummer-388505',location: str = 'us-central1',template_id: str = 'web-360p-720p'):
        client = TranscoderServiceClient()
        parent = f"projects/{project_id}/locations/{location}"
        job_template = transcoder_v1.types.JobTemplate()
        job_template.name = (f"projects/{project_id}/locations/{location}/jobTemplates/{template_id}")
        job_template = transcoder_v1.JobTemplate()
        job_template.name = f"projects/{project_id}/locations/{location}/jobTemplates/{template_id}"
        job_template.config = transcoder_v1.types.JobConfig(
        elementary_streams=[
            transcoder_v1.types.ElementaryStream(
                key="video-stream0",
                video_stream=transcoder_v1.types.VideoStream(
                    h264=transcoder_v1.types.VideoStream.H264CodecSettings(
                        height_pixels=360,
                        width_pixels=640,
                        bitrate_bps=550000,
                        frame_rate=60,
                    ),
                ),
            ),
            transcoder_v1.types.ElementaryStream(
                key="video-stream1",
                video_stream=transcoder_v1.types.VideoStream(
                    h264=transcoder_v1.types.VideoStream.H264CodecSettings(
                        height_pixels=720,
                        width_pixels=1280,
                        bitrate_bps=2500000,
                        frame_rate=60,
                    ),
                ),
            ),
            transcoder_v1.types.ElementaryStream(
                key="audio-stream0",
                audio_stream=transcoder_v1.types.AudioStream(
                    codec="aac", bitrate_bps=64000
                ),
            ),
        ],
        mux_streams=[
            transcoder_v1.types.MuxStream(
                key="sd",
                container="mp4",
                elementary_streams=["video-stream0", "audio-stream0"],
            ),
            transcoder_v1.types.MuxStream(
                key="hd",
                container="mp4",
                elementary_streams=["video-stream1", "audio-stream0"],
            ),
        ],
    )

        response = client.create_job_template(
            parent=parent, job_template=job_template, job_template_id=template_id
        )
        return response

class ETSManager:
    preset_ids = {
        'hls-2000k': '1351620000001-200010',
        'hls-1500k': '1351620000001-200020',
        'hls-1000k': '1351620000001-200030'
    }

    segment_duration = '4'

    def __init__(self):
        self.client = boto3.client('elastictranscoder', 'us-east-1',
                                   aws_access_key_id='AKIA22IQKSKU2IGWFHUA',
                                   aws_secret_access_key='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',
                                   )
        

    def transcode_hls(self, pipeline_id, input_key, output_key_prefix):
        output_key = hashlib.sha256(input_key.encode('utf-8')).hexdigest()

        input = {
            'Key': input_key
        }

        hls_2000k = {
            'Key': 'hls2000k/' + output_key,
        }

        hls_1500k = {
            'Key': 'hls1500k/' + output_key,
        }

        hls_1000k = {
            'Key': 'hls1000k/' + output_key,
        }

        outputs = [
            hls_2000k, hls_1500k, hls_1000k
        ]

def teacher_upload_videos(request):
    user = request.user
    me = Teach(user)
    subjects = me.profile.subjects.filter(subject_brought=False)
    batches = me.profile.batches.annotate(lower_name=Lower('name')).order_by('lower_name')
    context = {'subjects': subjects, 'batches': batches}
    return render(request, 'content/teacher_upload_videos2.html', context)

def teacher_upload_video_final(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        title = request.POST['title']
        chapter_id = request.POST['chapter_id']
        batch_list_string = request.POST['batchList']
        topics = request.POST.get('topic_id')
        subTopics = request.POST.get('subTopic_id')
        batch_list_new = batch_list_string.replace("\"", "")
        batch_list = batch_list_new.split(',')
        publish_status = request.POST['publishStatus']
        url = request.POST['url']

        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        upload_video = Video()
        upload_video.title = title
        upload_video.subject = subject
        upload_video.chapter = chapter
        upload_video.urlLink = url
        
        if publish_status == 'unchecked':
            upload_video.publish = False
            
        if topics:
            topics = QuestionTopic.objects.get(id=topics)
            upload_video.topics = topics
            
        if subTopics:
            subTopics = QuestionSubTopic.objects.get(id=subTopics)
            upload_video.subTopics = subTopics
            
        upload_video.save()

        upload_video.teacher.add(me.profile)

        input_url = url.split('/')[3:]
        final_key = '/'.join(input_url)
 
        ets = ETSManager()
        ets.client.create_job(PipelineId='1686299745833-89uu7n',
                                           Input={'Key': final_key, 'FrameRate': '30', 'Resolution': 'auto',
                                                  'AspectRatio': 'auto', 'Interlaced': 'auto', 'Container': 'auto'},
                                           Outputs=[{'Key': '360{}'.format(final_key), 'ThumbnailPattern': '', 'PresetId': '1351620000001-000061'},],
                                           OutputKeyPrefix=input_url[0] + '/encoded/')
        

        baseURL = 'https://d1yd1whqkib4h4.cloudfront.net/{}/encoded/'.format(input_url[0])
        
        if 's3.amazonaws.com' in url:
            new_basic_url = url.replace('https://juneuploadvids.s3.amazonaws.com/','https://d1yd1whqkib4h4.cloudfront.net/')
        else:
            new_basic_url = url

        new_basic_url = url

        lowlink = baseURL + '360'+final_key
        upload_video.lowlink = lowlink
        upload_video.urlLink = new_basic_url
        upload_video.save()

        for bat in batch_list:
            batch = Batch.objects.get(id=int(bat))
            if publish_status == 'checked':

                try:
                    teacher_id = me.profile.id
                    message = f'A new video {title} of {subject.name} has been uploaded for you by {me.profile.name}'
                    title = 'New Video'
                    screen = upload_video.urlLink
                    category = 'video'
                    thumbnail = None
                    id = upload_video.id
                    bulk_clickable_notification_batches.delay(teacher_id, batch.id, message, title, screen, category, thumbnail, id, 20000)
                except:
                    pass

            upload_video.batches.add(batch)
            upload_video.save()
            videoOrder = VideoOrderBatchWise()  
            videoOrder.batch = batch
            videoOrder.order = 0
            videoOrder.video = upload_video
            videoOrder.save()

        upload_s3_to_azure_server.delay(upload_video.id)

        context = {'Video Successfully uploaded {}'.format(upload_video.urlLink)}
        return HttpResponse(context)
    else:
        return HttpResponse('Not Post')

def alok_upload_videos(request):
    return render(request, 'content/alok_upload_videos.html')

def alok_upload_video_final(request):
    if request.method == 'POST':
        url = request.POST['url']
        input_url = url.split('/')[3:]
        final_key = '/'.join(input_url)

        ets = ETSManager()
        ets.client.create_job(PipelineId='1678380795353-k7o23t',
                                Input={'Key': final_key, 'FrameRate': '30', 'Resolution': 'auto',
                                                  'AspectRatio': 'auto', 'Interlaced': 'auto', 'Container': 'auto'},
                                Outputs=[{'Key': '360{}'.format(final_key), 'ThumbnailPattern': '', 'PresetId': '1351620000001-000040'},
                                                    ],
                                           OutputKeyPrefix=input_url[0] + '/encoded/')
        baseURL = 'https://d15lxmofqieds5.cloudfront.net/{}/encoded/'.format(input_url[0])
        if 's3.amazonaws.com' in url:
            url.replace('https://juneuploadvids.s3.amazonaws.com','https://d15lxmofqieds5.cloudfront.net')
        
        lowlink = baseURL + '360'+final_key
        context = {'Video successfully uploaded {}'.format(lowlink)}
        return HttpResponse(context)
    else:
        return HttpResponse('Not a post request.')

def teacher_question_upload_files(request):
    user = request.user
    me = Teach(user)
    context = {'advice': 'Please upload either pdf or word file in which your questions exist.'}
    return render(request, 'content/teacher_upload_questions_data.html', context)

def teacher_question_data(request):
    me = Teach(request.user)
    if request.method == 'POST':
        description = request.POST['description']
        url = request.POST['url']
        dataObject = TeacherQuestionData()
        dataObject.teacher = me.profile
        dataObject.description = description
        dataObject.link = url
        dataObject.save()
        context = {'Sucessfully submitted ! Your questions will be uploaded very soon'}
        return HttpResponse(context)

def teacher_ant_live(request):
    user = request.user
    me = Teach(user)
    batches = me.profile.batches.all()
    batches_list = []
    for batch in batches:
        batch_dict = {'id': batch.id, 'name': batch.name}
        batches_list.append(batch_dict)

    packages_list = []
    if me.profile.mainTeacher:
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        for teacher in teachers:
            packages = Package.objects.filter(teacher=teacher).order_by('-id')
            for package in packages:
                packages_dict = {'id': package.id, 'title': package.title}
                packages_list.append(packages_dict)
    else:
        packages = Package.objects.filter(sub_teacher=me.profile)
        for package in packages:
            packages_dict = {'id': package.id, 'title': package.title}
            packages_list.append(packages_dict)

    context = {
        'teacher': me.profile.teacheruser.username,
        'batches': batches_list, 
        'packages': packages_list}
    return render(request, 'content/antPublish.html', context)

def teacher_ant_live2(request):
    user = request.user
    me = Teach(user)
    batches = me.profile.batches.all()
    batches_list = []
    for batch in batches:
        batch_dict = {'id': batch.id, 'name': batch.name}
        batches_list.append(batch_dict)

    packages_list = []
    if me.profile.mainTeacher:
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        for teacher in teachers:
            packages = Package.objects.filter(teacher=teacher).order_by('-id')
            for package in packages:
                packages_dict = {'id': package.id, 'title': package.title}
                packages_list.append(packages_dict)
    else:
        packages = Package.objects.filter(sub_teacher=me.profile)
        for package in packages:
            packages_dict = {'id': package.id, 'title': package.title}
            packages_list.append(packages_dict)

    context = {
        'teacher': me.profile.teacheruser.username,
        'batches': batches_list, 
        'packages': packages_list}
    return render(request, 'content/antPublish2.html', context)

def student_ant_live_player(request):
    return render(request, 'content/studentAntLivePlayer.html', {})

def teacher_ant_go_live(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        batch_list_string = request.POST['batchList']
        packageList = request.POST['packageList']

        try:
            video_title = request.POST['videoTitle']
        except:
            video_title = None
        try:
            video_subject = request.POST['videoSubject']
        except:
            video_subject = None
        try:
            video_chapter = request.POST['videoChapter']
        except:
            video_chapter = None

        try:
            jitsiVideo = request.POST['jitsiVideo']
        except:
            jitsiVideo = None

        previousVideos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
        for pv in previousVideos:
            pv.live = False
            pv.save()

        nativeLiveVideo = NativeLiveVideo()
        nativeLiveVideo.teacher = me.profile
        nativeLiveVideo.time = timezone.now()
        nativeLiveVideo.antVideo = True
        nativeLiveVideo.live = True
        nativeLiveVideo.title = video_title
        nativeLiveVideo.subject = video_subject
        nativeLiveVideo.chapter = video_chapter

        if jitsiVideo == 'yes':
            nativeLiveVideo.jitsiVideo = True
            nativeLiveVideo.streamId = request.user.get_username()
            nativeLiveVideo.jitsiLink = "https://khoz.live/" + str(request.user.get_username())

        nativeLiveVideo.save()

        try:
            server_key = me.profile.institute.serverKey
        except Exception as e:
            server_key = None

        notification = {
            "title": f"LIVE VIDEO",
            "body": 'Live class has Started',
        }

        if batch_list_string:
            batch_list_new = batch_list_string.replace("\"", "")
            batch_list = batch_list_new.split(',')
            for bat_id in batch_list:
                batch = Batch.objects.get(id=bat_id)
                nativeLiveVideo.batches.add(batch)
                students = Student.objects.filter(batches=batch)
                nativeLiveVideo.students.add(*students)
                nativeLiveVideo.save()    
                
                try:
                    send_notification_to_multipurpose.delay(
                    serverKey=server_key,
                    notification=notification,
                    batch_id=int(bat_id)
                )
                except:
                    pass
        else:
            packageList = packageList.replace("\"", "")
            packageList = packageList.split(',')
            for pack in packageList:
                package = Package.objects.get(id=pack)
                nativeLiveVideo.packages.add(package)
                students = package.students.all()
                nativeLiveVideo.students.add(*students)
                nativeLiveVideo.save()
                try:

                    send_notification_to_multipurpose.delay(
                        serverKey=server_key,
                        notification=notification,
                        package_id=package.id
                    )
                except:
                    pass
        
        try:
            student = Student.objects.get(studentuser__username='7732847694@ou')
            nativeLiveVideo.students.add(student)
            nativeLiveVideo.save()
        except:
            pass
        
        username = request.user.get_username()

        context = {'status': 'Success','videoId': nativeLiveVideo.id, 'username': username}
        return JsonResponse(context)
    else:
        context = {'status': 'Not Post'}
        return HttpResponse(context)

def teacher_stop_live_video(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        ant_video_id = request.POST['video_id']
        liveVideo = NativeLiveVideo.objects.get(id=ant_video_id)
        liveVideo.live = False
        liveVideo.save()
        context = {'status': 'Success', 'message': 'Live video has stopped'}
        return HttpResponse(context)
    else:
        context = {'status': 'Failed'}
        return HttpResponse(context)

def teacher_see_youtube_live_comments(request):
    user = request.user
    me = Teach(user)
    batches = me.profile.batches.all()

    if request.method == 'POST':
        selected_batch = request.POST.get('batcheId')
        selected_date = request.POST.get('selectedDate')

        if selected_batch:
            batch = Batch.objects.get(id=selected_batch)
            selectedBatchName = batch.name
            videos = LiveVideoLink.objects.filter(teacher=me.profile, batches=batch.id).order_by('-id')
        else:
            selectedBatchName = None
            videos = LiveVideoLink.objects.filter(teacher=me.profile, time__date=selected_date).order_by('-id')

        context = {
            'videos': videos, 
            'selectedBtach': selectedBatchName,
            'selected_date': selected_date, 
            'batches': batches
            }
        return render(request, 'content/teacher_youtubelive_livevideos.html', context)
    else:
        youtubeVideos = LiveVideoLink.objects.filter(teacher=me.profile).order_by('-id')
        context = {
            'videos': youtubeVideos, 
            'batches': batches,
            'selectedBtach': None, 
            'selected_date': None
            }
        return render(request, 'content/teacher_youtubelive_livevideos.html', context)

def teacher_youtubelive_video_comment(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        video_id = request.POST['video_id']
        try:
            videoObject = LiveVideoLink.objects.get(id=video_id)
            messages = MessageLiveVideo.objects.filter(youtubeVideo=videoObject).order_by('-id')
            context = {
                'messages': messages,
                'video_title': videoObject.title, 
                'video_id': video_id
                }
        except LiveVideoLink.DoesNotExist:
            context = {'messages': []}
        return render(request, 'content/teacher_youtubelive_messages.html', context)

def teacher_youtubelive_video_morecomments(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        video_id = request.POST['video_id']
        videoObject = LiveVideoLink.objects.get(id=video_id)
        messages = MessageLiveVideo.objects.filter(youtubeVideo=videoObject).order_by('-id')
        message_list = []
        for message in messages:
            message_dict = {
                'id': message.id, 
                'student': message.student.name,
                'message': message.message, 
                'time': message.time
                }
            message_list.append(message_dict)
        context = {'messages': message_list}
        return JsonResponse(context)

def teacher_conferencing(request):
    user = request.user
    username = user.username
    return render(request, 'content/conf.html', {'teacherusername': username})

def teacher_ant_conferencing(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        previousVideos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
        for pv in previousVideos:
            pv.live = False
            pv.save()
        nativeLiveVideo = NativeLiveVideo()
        nativeLiveVideo.teacher = me.profile
        nativeLiveVideo.time = timezone.now()
        nativeLiveVideo.antVideo = True
        nativeLiveVideo.live = True
        nativeLiveVideo.save()
        batch_list = Batch.objects.filter(institute=me.profile.institute)
        for bat in batch_list:
            nativeLiveVideo.batches.add(bat)
            students = Student.objects.filter(batches=bat)
            for student in students:
                nativeLiveVideo.students.add(student)
                nativeLiveVideo.save()

        context = {'status': 'Success', 'videoId': nativeLiveVideo.id}
        return render('request', 'content/conferencing.html', context)
    else:
        context = {'status': 'Not Post'}
        return HttpResponse(context)

def questionForEdit(request):
    me = Teach(request.user)
    if request.method == 'POST':
        selected_main_topic = None
        selected_sub_topics = None
        subjects = me.profile.subjects.filter(subject_brought=False)
        selected_subject = request.POST['subjectType']
        selected_chapter = request.POST.get('chapterType')
        selected_topic = request.POST.get('topicType')
        selected_subTopic = request.POST.get('subtopicType')

        if selected_topic and selected_subTopic:
            questions = Question.objects.filter(subject=selected_subject, chapter=selected_chapter, topic=selected_topic, subTopic=selected_subTopic).order_by('-id')
            selected_main_topic = QuestionTopic.objects.get(id=selected_topic)
            selected_sub_topics = QuestionSubTopic.objects.get(id=selected_subTopic)
        elif selected_topic:
            questions = Question.objects.filter(subject=selected_subject, chapter=selected_chapter, topic=selected_topic).order_by('-id')
            selected_main_topic = QuestionTopic.objects.get(id=selected_topic)
        else:
            questions = Question.objects.filter(subject=selected_subject, chapter=selected_chapter).order_by('-id')

        chapters = Chapter.objects.filter(subject=selected_subject).order_by('id')

        context = {
            'subjects': subjects, 
            'questions': questions, 
            'selected_main_topic': selected_main_topic,
            'selected_sub_topics': selected_sub_topics, 
            'chapters': chapters
            }
        return render(request, 'content/all_questions_for_edit.html', context)
    else:
        subjects = me.profile.subjects.filter(subject_brought=False)
        chapters = Chapter.objects.filter(subject=subjects[0].id).order_by('id')

        return render(request, 'content/all_questions_for_edit.html', {'subjects': subjects, 'chapters': chapters})
    
def teacher_delete_question(request):
    user = request.user
    me = Teach(user)
    question_id = request.GET.get('question_id')
    Question.objects.get(id=question_id).delete()
    return HttpResponse('Deleted Successfully')

def upload_question_form(request): 
    if request.method == "POST":
        me = Teach(request.user)
        form = UploadQuestionForm(request.POST)
        dynamictext = request.POST['dynamicText']
        question_image = request.POST.get('question_image')
        explanation = request.POST.get('explanation')
        correctOption = request.POST.getlist('correctOption')
        optionAImage = request.POST.get('option_imageA')
        optionBImage = request.POST.get('option_imageB')
        optionCImage = request.POST.get('option_imageC')
        optionDImage = request.POST.get('option_imageD')
        optionEImage = request.POST.get('option_imageE')
        checked_or_not = request.POST.get('checked_option')
        topic_id = request.POST.get('questionTopic')
        subtopic_id = request.POST.get('questionSubTopic')
        chapter_id = request.POST.get('chapterid')
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        video_url = request.POST.get('video_url')
        audio_url = request.POST.get('audio_url')

        question = Question()

        if dynamictext:
            question.dynamicText = dynamictext

        if question_image:
            question.picture = question_image

        question.subject = subject
        question.chapter = chapter
        question.source = 'self'
        question.video_url = video_url
        question.audio_url = audio_url
        question.save()

        if topic_id:
            question.topic.add(topic_id)
            question.save()
            all_topics = None
            topic = chapter.questiontopic_set.get(id=topic_id)
        else:
            topic = None
            all_topics = chapter.questiontopic_set.all()

        if subtopic_id:
            question.subTopic.add(subtopic_id)
            question.save()
            sub_topic = topic.questionsubtopic_set.get(id=subtopic_id)
        else:
            sub_topic = None

        if topic_id and not subtopic_id:
            all_sub_topics = QuestionSubTopic.objects.filter(topic=topic_id)
        else:
            all_sub_topics = None

        optionA = Option(text='A')
        if optionAImage:
            optionA.picture = optionAImage
        optionA.question = question
        optionA.save()

        optionB = Option(text='B')
        if optionBImage:
            optionB.picture = optionBImage
        optionB.question = question
        optionB.save()

        optionC = Option(text='C')
        if optionCImage:
            optionC.picture = optionCImage
        optionC.question = question
        optionC.save()

        optionD = Option(text='D')
        if optionDImage:
            optionD.picture = optionDImage
        optionD.question = question
        optionD.save()

        if checked_or_not:
            optionE = Option(text='E')
            if optionEImage:
                optionE.picture = optionEImage
            optionE.question = question
            optionE.save()

        for co in correctOption:
            if optionA.text == co:
                optionA.correct = True
                optionA.explanation = explanation
                optionA.save()
            elif optionB.text == co:
                optionB.correct = True
                optionB.explanation = explanation
                optionB.save()
            elif optionC.text == co:
                optionC.correct = True
                optionC.explanation = explanation
                optionC.save()
            elif optionD.text == co:
                optionD.correct = True
                optionD.explanation = explanation
                optionD.save()
            else:
                if checked_or_not:
                    if optionE.text == co:
                        optionE.correct = True
                        optionE.explanation = explanation
                        optionE.save()

        messages.success(request, 'Question Uploaded')
        selectedSubject = subject
        selectedChapter = chapter.name
        selectedChapter_id = chapter.id
        form = UploadQuestionForm()
        optionForm = UploadoptionForm
        options_list = ['A', 'B', 'C', 'D', 'E']
        subjects = me.profile.subjects.filter(subject_brought=False)
        context = {
            'form': form, 
            'options': options_list, 
            'subjects': subjects, 
            'selectedSubject': selectedSubject, 
            'selectedChapters': selectedChapter, 
            'selectedChapters_id': selectedChapter_id,
            'optionForm': optionForm, 
            'selected_topic': topic, 
            'selected_subTopic': sub_topic, 
            'allTopics': all_topics, 
            'all_sub_topics': all_sub_topics
            }
        return render(request, 'content/teacher_question_upload.html', context)
    else:
        me = Teach(request.user)
        form = UploadQuestionForm()
        optionForm = UploadoptionForm
        options_list = ['A', 'B', 'C', 'D', 'E']
        subjects = me.profile.subjects.filter(subject_brought=False)
        institute_code = me.profile.institute.code
        context = {
            'institute_code': institute_code,
            'form': form, 
            'options': options_list,
            'subjects': subjects, 
            'optionForm': optionForm
            }
        return render(request, 'content/teacher_question_upload.html', context)

def teacher_edit_question(request):
    if request.method == 'POST':
        me = Teach(request.user)
        question_id = request.POST.get('question_id')
        dynamictext = request.POST.get('dynamicText')
        text = request.POST.get('text')
        explanation = request.POST.get('explanation')
        correctOption = request.POST.getlist('correctOption')
        chapter_id = request.POST.get('chapterid')
        questiontopic = request.POST.get('questiontopic')
        questionSubtopic = request.POST.get('SubTopic')
        pictureUrl = request.POST.get('pictureUrlField')
        video_url = request.POST.get('video_url')
        audio_url = request.POST.get('audio_url')

        oneWordtext = request.POST.get('oneWordtext')
        oneWordanswer = request.POST.get('oneWordanswer')
        oneWordexplanation = request.POST.get('oneWordexplanation')

        optionA_text = request.POST.get('option1')
        optionB_text = request.POST.get('option2')
        optionC_text = request.POST.get('option3')
        optionD_text = request.POST.get('option4')
        optionE_text = request.POST.get('option5')

        optionAImage = request.POST.get('option_imageA')
        optionBImage = request.POST.get('option_imageB')
        optionCImage = request.POST.get('option_imageC')
        optionDImage = request.POST.get('option_imageD')
        optionEImage = request.POST.get('option_imageE')

        explanationOldVideo = request.POST.get('explanationOldVideo')
        explanationNewVideo = request.POST.get('explanationNewVideo')

        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject

        question = Question.objects.get(id=question_id)
        if question.oneWordQuestion == True:
            question.text = oneWordtext
            question.oneWordAnswer = oneWordanswer.lower()
            if oneWordexplanation:
                question.oneWordExplanation = oneWordexplanation
        else:
            if text:
                question.text = text
            else:
                question.dynamicText = dynamictext

        question.subject = subject
        question.chapter = chapter
        question.source = 'self'
        question.picture = pictureUrl
        question.video_url = video_url
        question.audio_url = audio_url
        question.save()

        if questiontopic:
            topic = QuestionTopic.objects.filter(id=questiontopic)
            question.topic.set(topic)
        else:
            question.topic.clear()

        if questionSubtopic:
            subtopic = QuestionSubTopic.objects.filter(id=questionSubtopic)
            question.subTopic.set(subtopic)
        else:
            question.subTopic.clear()

        options = Option.objects.filter(question_id=question_id)
        for index, i in enumerate(options):
            if i.text in correctOption:
                i.correct = True
                i.explanation = explanation
                if explanationNewVideo:
                    i.explanationVideo = explanationNewVideo
                else:
                    i.explanationVideo = explanationOldVideo
            else:
                i.correct = False

            if index == 0 and optionA_text:
                i.text = optionA_text.upper()
            if index == 1 and optionB_text:
                i.text = optionB_text.upper()
            if index == 2 and optionC_text:
                i.text = optionC_text.upper()
            if index == 3 and optionD_text:
                i.text = optionD_text.upper()
            if index == 4 and optionE_text:
                i.text = optionE_text.upper()

            if index == 0 and optionAImage:
                i.picture = optionAImage
            if index == 1 and optionBImage:
                i.picture = optionBImage
            if index == 2 and optionCImage:
                i.picture = optionCImage
            if index == 3 and optionDImage:
                i.picture = optionDImage
            if index == 4 and optionEImage:
                i.picture = optionEImage

            i.question = question
            i.save()
    
        messages.success(request, 'Question Updated Successfully')
        return redirect(request.META.get('HTTP_REFERER'))
    else:
        me = Teach(request.user)
        question_id = request.GET['question_id']
        questionObj = Question.objects.get(id=question_id)
        options = Option.objects.filter(question=questionObj)
        subjects = me.profile.subjects.filter(subject_brought=False)
        form = UploadQuestionForm()
        form.fields["dynamicText"].initial = questionObj.dynamicText
        optionForm = UploadoptionForm()
        institute_code = me.profile.institute.code
        for i in options:
            if i.correct == True:
                optionForm.fields["explanation"].initial = i.explanation
                break
        
        context = {
            'institute_code':institute_code,
            'options': options, 
            'subjects': subjects,
            'questionObj': questionObj, 
            'form': form, 
            'optionForm': optionForm,
            }
        return render(request, 'content/teacher_edit_question.html', context)

def teacher_select_addQuestionFormate(request):
    user = request.user
    me = Teach(user)
    context = {'institute_code': me.profile.institute.code}
    return render(request, 'content/teacher_select_addQuestionFormate.html',context)

def TeacherUploadQuestionBulkFormatChange(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        return render(request, 'content/teacher_upload_question_bulkFormate.html')
    else:
        try:
            csv_file = request.FILES['file']
            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/teacher_upload_question_bulkFormat/')
            
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file, encoding='latin1')
            else:
                csv_file_values = pd.read_excel(csv_file)

            correct = csv_file_values['Correct Option']
            question_link = csv_file_values['Question']
            direction = csv_file_values['direction']
            explanation = csv_file_values['explanation']
            subjects = csv_file_values['Subject Code']
            chapters = csv_file_values['Chapter Code']
            topic = csv_file_values['Topic Code']
            subTopic = csv_file_values['subTopic_category']
            difficulty_level = csv_file_values['difficulty_level']
            optA = csv_file_values['optA']
            optB = csv_file_values['optB']
            optC = csv_file_values['optC']
            optD = csv_file_values['optD']
            optE = csv_file_values['optE']
            positive_mark = csv_file_values['Positive_marks']
            negative_mark = csv_file_values['Negative_marks']

            final_list = list(zip(question_link, direction, explanation, subjects, chapters, topic, subTopic,
                              difficulty_level, optA, optB, optC, optD, optE, correct, positive_mark, negative_mark))

            count = 0
            Imagetypes = ['.png', '.jpg', '.jpeg', '.tif', '.gif', '.PNG', '.JPG', '.JPEG', '.TIF', '.GIF']
            for question_picture, direction, explanation, subject, chapterCode, topic, subTopic, difficulty_level, a, b, c, d, e, correct_option, positive_mark, negative_mark in final_list:
                count += 1
                try:
                    if pd.isnull(direction):
                        direction = None
                    else:
                        if direction.endswith(tuple(Imagetypes)):
                            direction = Direction(picture=direction)
                            direction.save()
                        else:
                            direction = Direction(text=direction)
                            direction.save()

                    try:
                        subjectObejct = Subject.objects.get(id=subject)
                    except Subject.DoesNotExist:
                        messages.error(request, f'Subject id wrong of Qyestion no.{count} in your csv file')
                        return redirect('/content/teacher_upload_question_bulkFormat/')

                    chapter = None
                    try:
                        chapter = Chapter.objects.get(subject=subjectObejct, code=float(chapterCode))
                    except:
                        chapter = Chapter.objects.filter(subject=subjectObejct)
                        for ch in chapter:
                            if ch.code == float(chapterCode):
                                chapter = ch
                                break
                    if chapter == None:
                        print('chapter not found {}'.format(chapterCode))
                        continue

                    question = Question()
                    if str(question_picture).endswith(tuple(Imagetypes)):
                        question.picture = question_picture
                    else:
                        question.text = question_picture
                        
                    question.difficulty = difficulty_level
                    question.subject = subjectObejct
                    question.chapter = chapter

                    if not pd.isnull(positive_mark):
                        question.marks = positive_mark
                    if not pd.isnull(negative_mark):
                        question.negativeMarks = negative_mark

                    if direction:
                        question.direction = direction
                    question.published = timezone.now()
                    question.save()

                    if not pd.isnull(topic):
                        try:
                            topicObject = QuestionTopic.objects.get(id=topic)
                            question.topic.add(topicObject)
                            question.save()
                        except QuestionTopic.DoesNotExist:
                            messages.error(request, f'Topic id wrong of Qyestion no.{count} in your csv file')
                            return redirect('/content/teacher_upload_question_bulkFormat/')

                    if not pd.isnull(subTopic):
                        try:
                            subTopicObject = QuestionSubTopic.objects.get(
                                id=subTopic)
                            question.subTopic.add(subTopicObject)
                            question.save()
                        except QuestionSubTopic.DoesNotExist:
                            messages.error(request, f'SubTopic id wrong of Qyestion no.{count} in your csv file')
                            return redirect('/content/teacher_upload_question_bulkFormat/')

                    a = str(a)
                    b = str(b)
                    c = str(c)
                    d = str(d)
                    if a.isdigit():
                        optionA = Option(text=a)
                    else:
                        optionA = Option(text=a)
                    optionA.question = question
                    optionA.save()

                    if b.isdigit():
                        optionB = Option(text=b)
                    else:
                        optionB = Option(text=b)
                    optionB.question = question
                    optionB.save()

                    if c.isdigit():
                        optionC = Option(text=c)
                    else:
                        optionC = Option(text=c)
                    optionC.question = question
                    optionC.save()

                    if d.isdigit():
                        optionD = Option(text=d)
                    else:
                        optionD = Option(text=d)
                    optionD.question = question
                    optionD.save()

                    if pd.isnull(e):
                        pass
                    else:
                        e = str(e)
                        if e.isdigit():
                            optionE = Option(text=e)
                        else:
                            optionE = Option(text=e)
                        optionE.question = question
                        optionE.save()

                    options = str(correct_option).replace(" ", "")
                    for i in options:
                        if i.lower() == 'a' or i.lower() == '1':
                            optionA.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionA.explanationPicture = explanation
                                else:
                                    optionA.explanationText = explanation
                            optionA.save()

                        elif i.lower() == 'b' or i.lower() == '2':
                            optionB.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionB.explanationPicture = explanation
                                else:
                                    optionB.explanationText = explanation
                            optionB.save()

                        elif i.lower() == 'c' or i.lower() == '3':
                            optionC.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionC.explanationPicture = explanation
                                else:
                                    optionC.explanationText = explanation
                            optionC.save()

                        elif i.lower() == 'd' or i.lower() == '4':
                            optionD.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionD.explanationPicture = explanation
                                else:
                                    optionD.explanationText = explanation
                            optionD.save()

                        else:
                            optionE.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionE.explanationPicture = explanation
                                else:
                                    optionE.explanationText = explanation
                            optionE.save()

                except Exception as e:
                    messages.error(request, f'Till now questions {count-1} add successfully but error found at question no.{count} please check question {count} ')
                    return redirect('/content/teacher_upload_question_bulkFormat/')

            messages.success(request, 'Questions Uploaded Successfully')
            return redirect('/content/teacher_upload_question_bulkFormat/')

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/teacher_upload_question_bulkFormat/')

def teacher_download_csvDemo_file(request, type):
    if type == 'XLSX':
        filePath = '/xlsx_csv_fileFormate/bulk_questions_format.xlsx'

    elif type == 'add-student-csv':
        filePath = '/xlsx_csv_fileFormate/bulk_add_students_format.csv'

    elif type == 'add-student-xlsx':
        filePath = '/xlsx_csv_fileFormate/bulk_add_students_format.xlsx'
        
    elif type == 'add-student-report-csv':
        filePath = '/xlsx_csv_fileFormate/add_student_monthly_report.csv'

    elif type == 'add-student-report-xlsx':
        filePath = '/xlsx_csv_fileFormate/add_student_monthly_report.xlsx'
        
    elif type == 'student-class-wise-report':
        filePath = '/xlsx_csv_fileFormate/student_class_wise_report.csv'

    elif type == 'student-test-assignment-report':
        filePath = '/xlsx_csv_fileFormate/student_test_assignment_report.csv'
    elif type == 'admit-card-csv':
        filePath = '/xlsx_csv_fileFormate/admit_card.csv'
    elif type == 'admit-card-xlsx':
        filePath = '/xlsx_csv_fileFormate/admit_card.xlsx'

    elif type == 'score-card-csv':
        filePath = '/xlsx_csv_fileFormate/score_card.csv'
    elif type == 'score-card-xlsx':
        filePath = '/xlsx_csv_fileFormate/score_card.xlsx'
        
    elif type == 'offline-test-marks-csv':
        filePath = '/xlsx_csv_fileFormate/offline_test_marks.csv'
    elif type == 'offline-test-marks-xlsx':
        filePath = '/xlsx_csv_fileFormate/offline_test_marks.xlsx'
        
    elif type == 'test-questions-csv':
        filePath = '/xlsx_csv_fileFormate/test_questions_format.csv'
    elif type == 'test-questions-XLSX':
        filePath = '/xlsx_csv_fileFormate/test_questions_format.xlsx'
        
    else:
        filePath = '/xlsx_csv_fileFormate/bulk_questions_format.csv'

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    filepath = BASE_DIR + filePath
    path = open(filepath, 'rb')
    mime_type, _ = mimetypes.guess_type(filePath)
    response = HttpResponse(path, content_type=mime_type)
    fileName = os.path.basename(filePath)
    response['Content-Disposition'] = "attachment; filename=%s" % fileName
    return response

def TeacherUploadOneWordQuestion(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        print('get called')
        subjects = me.profile.subjects.filter(subject_brought=False)
        context = {'subjects': subjects}
        return render(request, 'content/teacher_upload_oneWord_question.html', context)
    else:
        oneWordText = request.POST.get('oneWordQuestionText')
        oneWordAnswer = request.POST.get('oneWordQuestionAnswer')
        oneWordExplanation = request.POST.get('oneWordQuestionExplanation')
        topic_id = request.POST.get('questionTopic')
        subtopic_id = request.POST.get('questionSubTopic')
        chapter_id = request.POST['chapterid']
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject

        question = Question()
        question.text = oneWordText
        question.oneWordAnswer = oneWordAnswer.lower()
        if oneWordExplanation:
            question.oneWordExplanation = oneWordExplanation
        question.oneWordQuestion = True
        question.subject = subject
        question.chapter = chapter
        question.source = 'self'
        question.save()
        if topic_id:
            question.topic.add(topic_id)
            question.save()
            all_topics = None
            topic = chapter.questiontopic_set.get(id=topic_id)
        else:
            topic = None
            all_topics = chapter.questiontopic_set.all()
        if subtopic_id:
            question.subTopic.add(subtopic_id)
            question.save()
            sub_topic = topic.questionsubtopic_set.get(id=subtopic_id)
        else:
            sub_topic = None

        if topic_id and not subtopic_id:
            all_sub_topics = QuestionSubTopic.objects.filter(topic=topic_id)
        else:
            all_sub_topics = None

        messages.success(request, 'oneWord Question Uploaded')
        selectedSubject = subject
        selectedChapter = chapter.name
        selectedChapter_id = chapter.id
        subjects = me.profile.subjects.filter(subject_brought=False)
        context =\
            {'subjects': subjects, 'selectedSubject': selectedSubject, 'selectedChapters': selectedChapter, 'selectedChapters_id': selectedChapter_id,
             'selected_topic': topic, 'selected_subTopic': sub_topic, 'allTopics': all_topics, 'all_sub_topics': all_sub_topics}
        return render(request, 'content/teacher_upload_oneWord_question.html', context)

def TeacherUploadImage(request):
    user = request.user
    me = Teach(user)
    return render(request, 'content/upload_image.html')

def TeacherDeleteYoutubeVideo(request):
    user = request.user
    me = Teach(user)
    video_id = request.GET.get('video_id')
    video = LiveVideoLink.objects.get(id=video_id)
    video.deleted = True
    video.save()
    return HttpResponse('deleted successfully')

def register_students_bulk(request):
    response = add_students_package.delay()
    return HttpResponse('successfully added=='+str(response))

def calculate_resulte_tests_view(request):
    response = calculate_resulte_tests.delay()
    return HttpResponse('successfully resulte added=='+str(response))

def videosForEdit(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        chapter_id = request.POST.get('chapter_id')
        subjects = me.profile.subjects.filter(subject_brought=False)
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        videos = Video.objects.filter(Q(subject=subject) & Q(chapter=chapter), teacher=me.profile).order_by('-id')
        context = {'videos': videos, 'subjects': subjects,'selectedChapter': chapter}
        return render(request, 'content/all_videos_for_edit.html', context)
    else:
        subjects = me.profile.subjects.filter(subject_brought=False)
        return render(request, 'content/all_videos_for_edit.html', {'subjects': subjects})

def TeacherDeleteVideo(request):
    user = request.user
    me = Teach(user)
    video_id = request.GET.get('video_id')
    Video.objects.get(id=video_id).delete()
    return HttpResponse('deleted successfully')

def TeacherEditVideo(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        video_id = request.POST.get('video_id')

        newUploadedVideo = request.POST.get('newUploadedVideo')
        youtubeVideolink = request.POST.get('youtubeVideolink')
        videoTitle = request.POST.get('videoTitle')
        thumbnail = request.POST.get('thumbnail_image')
        chapter_id = request.POST.get('chapterid')
        questiontopic = request.POST.get('questiontopic')
        questionSubtopic = request.POST.get('SubTopic')

        batches = request.POST.getlist('batches')

        try:
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject

            video = Video.objects.get(id=video_id)
            video.title = videoTitle
            video.thumbnail = thumbnail
            video.subject = subject
            video.chapter = chapter
            
            if newUploadedVideo:
                video.urlLink = newUploadedVideo

            if youtubeVideolink:
                video.urlLink = youtubeVideolink

            if questiontopic:
                topic = QuestionTopic.objects.get(id=questiontopic)
                video.topics = topic
            else:
                video.topics = None
            if questionSubtopic:
                subtopic = QuestionSubTopic.objects.get(id=questionSubtopic)
                video.subTopics = subtopic
            else:
                video.subTopics = None

            video.save()

            upload_google_cloud_transcode_url(video.id)
            
            video.batches.clear()
            selectedBatches = Batch.objects.filter(id__in=batches)
            video.batches.add(*selectedBatches)

            messages.success(request, 'Video Updated Successfully')
        except Exception as e:
            messages.error(request, str(e))
        return redirect(request.META.get('HTTP_REFERER'))
    else:
        video_id = request.GET['video_id']
        videoObj = Video.objects.get(id=video_id)
        subjects = me.profile.subjects.filter(subject_brought=False)
        batches = me.profile.batches.all()
        videoBatches = videoObj.batches.all().values_list('id', flat=True)

        if 'https://youtu' in videoObj.urlLink:
            youtubeVideoId = videoObj.urlLink.split('/')[3]
        else:
            youtubeVideoId = None

        context = {'video': videoObj, 'subjects': subjects, 'videoBatches': videoBatches,
                   'batches': batches, 'youtubeVideoId': youtubeVideoId}
        return render(request, 'content/teacher_edit_videos.html', context)

def ProceedToPay(packageId, packagePrice, username, phonNumber, name):
    randomTxnid = randint(1000, 999999)
    productInfo = f'buy package and package id {packageId}'
    user = User.objects.get(username=username)
    token, created = Token.objects.get_or_create(user=user)
    headers = {'Authorization': 'Token ' + token.key}

    param = {
        'txnid': randomTxnid,
        'firstname': name,
        'email': 'info@bodhiai.in',
        'amount': packagePrice,
        'phone': phonNumber,
        'productinfo': productInfo,
        'zipcode': '12345',
        'address1': 'xyz',
        'address2': 'xyz',
        'city': 'xyz',
        'state': 'Gujrat',
        'country': 'india',
        'package_id': packageId,
        'book_id': '',
        'fees_list': '',
        'purchaseFrom': 'psp'
    }

    UpdatedAgoraCode.objects.create(code='before pay -'+str(param))

    response = requests.post('https://bodhiai.live/api/management/pay_with_easebuzz_on_web/', param, headers=headers).json()
    res = 'res' + '---' + str(response)
    UpdatedAgoraCode.objects.create(code=res)
    return response

def StudentSeePackageDetails(request, package_id, package_title):
    try:
        packagePurchaseStatus = 'unSuccess'
        phone_number = None
        if 'packagePurchaseStatus' in request.session:
            packagePurchaseStatus = 'success'
            phone_number = request.session['phone']
            del request.session['packagePurchaseStatus']
            del request.session['phone']
            
        package = Package.objects.filter(id=package_id).first()
        videos = package.videos.all().order_by('-id')
        notes = package.notes.all().order_by('-id')
        tests = package.tests.all().order_by('-id')
        youtubeVideos = package.youtubeLiveVideos.all().order_by('-id')

        institute_code = package.teacher.institute.code
        institute_all_packages = Package.objects.filter(Q(teacher__institute__code=institute_code) & ~Q(id=package.id)).order_by('-id')
        institute_type = package.teacher.institute.typeInstitute

        context = {
            'package': package, 
            'videos': videos, 
            'notes': notes, 
            'tests': tests, 
            'youtubeVideos': youtubeVideos, 
            'packagePurchaseStatus': packagePurchaseStatus, 
            'institute_all_packages': institute_all_packages, 
            'institute_type': institute_type, 
            'institute_code': institute_code,
            'phone_number': phone_number
            }
        return render(request, 'content/packageDetails2.html', context)

    except Package.DoesNotExist:
        return render(request, 'content/packageDetails2.html')

def ProceedToPay(packageId, packagePrice, username, phonNumber, name):
    randomTxnid = randint(1000, 999999)
    productInfo = f'buy package and package id {packageId}'
    user = User.objects.get(username=username)
    token, created = Token.objects.get_or_create(user=user)
    headers = {'Authorization': 'Token ' + token.key}

    param = {
        'txnid': randomTxnid,
        'firstname': name,
        'email': 'info@bodhiai.in',
        'amount': packagePrice,
        'phone': phonNumber,
        'productinfo': productInfo,
        'zipcode': '12345',
        'address1': 'xyz',
        'address2': 'xyz',
        'city': 'xyz',
        'state': 'Gujrat',
        'country': 'india',
        'package_id': packageId,
        'book_id': '',
        'fees_list': '',
        'purchaseFrom': 'psp'
    }

    UpdatedAgoraCode.objects.create(code='before pay -'+str(param))

    response = requests.post(
        'https://bodhiai.live/api/management/pay_with_easebuzz_on_web/', param, headers=headers).json()
    res = 'res' + '---' + str(response)
    UpdatedAgoraCode.objects.create(code=res)
    return response

def TeacherGoLiveWithJitSi(request):
    user = request.user
    me = Teach(user)
    batches = me.profile.batches.all()
    batches_list = []
    for batch in batches:
        batch_dict = {'id': batch.id, 'name': batch.name}
        batches_list.append(batch_dict)

    packages_list = []
    if me.profile.mainTeacher:
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        for teacher in teachers:
            packages = Package.objects.filter(teacher=teacher).order_by('-id')
            for package in packages:
                packages_dict = {'id': package.id, 'title': package.title}
                packages_list.append(packages_dict)
    else:
        packages = Package.objects.filter(teacher=me.profile)
        for package in packages:
            packages_dict = {'id': package.id, 'title': package.title}
            packages_list.append(packages_dict)

    context = {
        'teacher': me.profile.teacheruser.username,
        'batches': batches_list, 
        'packages': packages_list}
    return render(request, 'content/liveWithJitSi.html', context)

def TeacherUploadQuestionThroughDocFile(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        return render(request, 'content/teacher_upload_questions_through_docFile.html')
    else:
        import re
        import html.parser
        import csv

        file = request.FILES['file']
        storage_account_name = "bodhiaigeneral"
        container_name = "bodhiaiquestions" 
        directoryName = request.POST['directoryName']
        subject_id = request.POST['subject_id']
        chapter_code = request.POST['chapter_code']

        try:
            subject = Subject.objects.get(id=subject_id)
            chapter = Chapter.objects.get(subject=subject, code=float(chapter_code))
        except Subject.DoesNotExist:
            messages.error(request, 'Subject Not found. Please check your subject ID')
            return redirect('/content/upload_questions_through_docFile/')
        except Chapter.DoesNotExist:
            messages.error(request, 'Chapter Not found. Please check your chapter code')
            return redirect('/content/upload_questions_through_docFile/')
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/upload_questions_through_docFile/')

        lines2 = file.read().decode()
        quest = lines2.split('[Q]')
        del quest[0]

        count = 0
        error = []

        for real_quest in quest:
            count += 1

            im = re.findall(r'src\=\"(.*?)\"', real_quest)

            for i in im:
                new_fist = f"https://storage.googleapis.com/{container_name}/{directoryName}/"
                second = i.split('/')[-1]
                first = i.split('/')[0]

                final = new_fist + second
                real_quest = re.sub(i, final, real_quest)

            question_and_answer_and_solution = real_quest.split('[Ans]')

            if len(question_and_answer_and_solution) == 2:

                if '[Sol]' in question_and_answer_and_solution[1]:

                    answer_and_solution = question_and_answer_and_solution[1].split(
                        '[Sol]')

                    if len(answer_and_solution) == 2:
                        answer = answer_and_solution[0]
                        solution = answer_and_solution[1]

                    else:
                        print('error while split answer and solotion')
                        error_text = f'error while split answer and solotion, Question number is -{count}'
                        error.append(error_text)
                        continue

                else:
                    answer = question_and_answer_and_solution[1]
                    solution = None

                try:
                    answer = html.unescape(answer)
                except Exception as e:
                    error_text = f'error while remove space from answer str and error is {e}, Question number is -{count}'
                    error.append(error_text)
                    continue

                try:
                    final_answer = answer.split('</span>')
                    final_answer = final_answer[0]
                except Exception as e:
                    error_text = f'error while getting final answer value and error is {e}, Question number is -{count}'
                    error.append(error_text)
                    continue

                correct = None
                for av in final_answer:

                    if av == '1' or av == 'a' or av == 'A':
                        correct = 'A'
                        break

                    elif av == '2' or av == 'b' or av == 'B':
                        correct = 'B'
                        break

                    elif av == '3' or av == 'c' or av == 'C':
                        correct = 'C'
                        break

                    elif av == '4' or av == 'd' or av == 'D':
                        correct = 'D'
                        break

                    elif av == '5' or av == 'e' or av == 'E':
                        correct = 'E'
                        break
                    else:
                        pass

                if correct:

                    question_text = question_and_answer_and_solution[0]

                    question = Question()
                    question.subject = subject
                    question.chapter = chapter
                    question.dynamicText = question_text
                    question.source = 'skoolstream'
                    question.save()
                    optionA = Option(text='A', question=question)
                    optionA.save()
                    optionB = Option(text='B', question=question)
                    optionB.save()
                    optionC = Option(text='C', question=question)
                    optionC.save()
                    optionD = Option(text='D', question=question)
                    optionD.save()
                    if '[E]' in question_text or '[e]' in question_text or '[5]' in question_text:
                        optionE = Option(text='E', question=question)
                        optionE.save()
                    print('\n\n\n\n')

                    if correct == 'A':
                        optionA.correct = True
                        optionA.explanation = solution
                        optionA.save()

                    elif correct == 'B':
                        optionB.correct = True
                        optionB.explanation = solution
                        optionB.save()

                    elif correct == 'C':
                        optionC.correct = True
                        optionC.explanation = solution
                        optionC.save()

                    elif correct == 'D':
                        optionD.correct = True
                        optionD.explanation = solution
                        optionD.save()

                    elif ('[E]' in question_text or '[e]' in question_text or '[5]' in question_text) and correct == 'E':
                        optionE.correct = True
                        optionE.explanation = solution
                        optionE.save()

                    else:
                        error_text = f'correct option Not Found, Question number is -{count}'
                        error.append(error_text)

            else:
                error_text = f'error while split question text and answer and solotion, Question number is {count}'
                error.append(error_text)
                continue

        if len(error) != 0:
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['error'])
            for er in error:
                writer.writerow([er])
            response['Content-Disposition'] = 'attachment; filename="' + chapter.name+'_errors.csv"'
            return response

        else:
            messages.success(request, 'successfully uploaded all questions without any error')
            return redirect('/content/upload_questions_through_docFile/')

def TeacherUploadQuestionThroughDocFileOnAzure(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        return render(request, 'content/teacher_upload_questions_through_docFile.html')
    else:

        import re
        import html.parser
        import csv

        file = request.FILES['file']
        directoryName = request.POST['directoryName']
        subject_id = request.POST['subject_id']
        chapter_code = request.POST['chapter_code']

        try:
            subject = Subject.objects.get(id=subject_id)
            chapter = Chapter.objects.get(
                subject=subject, code=float(chapter_code))
        except Subject.DoesNotExist:
            messages.error(
                request, 'Subject Not found. Please check your subject ID')
            return redirect('/content/upload_questions_through_docFile/')
        except Chapter.DoesNotExist:
            messages.error(
                request, 'Chapter Not found. Please check your chapter code')
            return redirect('/content/upload_questions_through_docFile/')
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/upload_questions_through_docFile/')

        lines2 = file.read().decode()
        quest = lines2.split('[Q]')
        del quest[0]

        count = 0
        error = []

        for real_quest in quest:
            count += 1

            im = re.findall(r'src\=\"(.*?)\"', real_quest)

            for i in im:
                new_fist = f'https://bodhimarch23.s3.amazonaws.com/{directoryName}/'
                second = i.split('/')[-1]
                first = i.split('/')[0]

                final = new_fist + second
                real_quest = re.sub(i, final, real_quest)

            question_and_answer_and_solution = real_quest.split('[Ans]')

            if len(question_and_answer_and_solution) == 2:

                if '[Sol]' in question_and_answer_and_solution[1]:

                    answer_and_solution = question_and_answer_and_solution[1].split(
                        '[Sol]')

                    if len(answer_and_solution) == 2:
                        answer = answer_and_solution[0]
                        solution = answer_and_solution[1]

                    else:
                        print('error while split answer and solotion')
                        error_text = f'error while split answer and solotion, Question number is -{count}'
                        error.append(error_text)
                        continue

                else:
                    answer = question_and_answer_and_solution[1]
                    solution = None

                try:
                    answer = html.unescape(answer)
                except Exception as e:
                    error_text = f'error while remove space from answer str and error is {e}, Question number is -{count}'
                    error.append(error_text)
                    continue

                try:
                    final_answer = answer.split('</span>')
                    final_answer = final_answer[0]
                except Exception as e:
                    error_text = f'error while getting final answer value and error is {e}, Question number is -{count}'
                    error.append(error_text)
                    continue

                correct = None
                for av in final_answer:

                    if av == '1' or av == 'a' or av == 'A':
                        correct = 'A'
                        break

                    elif av == '2' or av == 'b' or av == 'B':
                        correct = 'B'
                        break

                    elif av == '3' or av == 'c' or av == 'C':
                        correct = 'C'
                        break

                    elif av == '4' or av == 'd' or av == 'D':
                        correct = 'D'
                        break

                    elif av == '5' or av == 'e' or av == 'E':
                        correct = 'E'
                        break
                    else:
                        pass

                if correct:

                    question_text = question_and_answer_and_solution[0]

                    question = Question()
                    question.subject = subject
                    question.chapter = chapter
                    question.dynamicText = question_text
                    question.source = 'skoolstream'
                    question.save()
                    optionA = Option(text='A', question=question)
                    optionA.save()
                    optionB = Option(text='B', question=question)
                    optionB.save()
                    optionC = Option(text='C', question=question)
                    optionC.save()
                    optionD = Option(text='D', question=question)
                    optionD.save()
                    if '[E]' in question_text or '[e]' in question_text or '[5]' in question_text:
                        optionE = Option(text='E', question=question)
                        optionE.save()
                    print('\n\n\n\n')

                    if correct == 'A':
                        optionA.correct = True
                        optionA.explanation = solution
                        optionA.save()

                    elif correct == 'B':
                        optionB.correct = True
                        optionB.explanation = solution
                        optionB.save()

                    elif correct == 'C':
                        optionC.correct = True
                        optionC.explanation = solution
                        optionC.save()

                    elif correct == 'D':
                        optionD.correct = True
                        optionD.explanation = solution
                        optionD.save()

                    elif ('[E]' in question_text or '[e]' in question_text or '[5]' in question_text) and correct == 'E':
                        optionE.correct = True
                        optionE.explanation = solution
                        optionE.save()

                    else:
                        error_text = f'correct option Not Found, Question number is -{count}'
                        error.append(error_text)

            else:
                error_text = f'error while split question text and answer and solotion, Question number is {count}'
                error.append(error_text)
                continue

        if len(error) != 0:
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['error'])
            for er in error:
                writer.writerow([er])
            response['Content-Disposition'] = 'attachment; filename="' + chapter.name+'_errors.csv"'
            return response
        else:
            messages.success(request, 'successfully uploaded all questions without any error')
            return redirect('/content/upload_questions_through_docFile/')

def TeacherSendWhatsappMessageToStudents(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        return render(request, 'content/teacher_send_whatsapp_message.html')
    else:
        try:
            csv_file = request.FILES['file']

            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/teacher_send_whatsapp_message/')
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file)
            else:
                csv_file_values = pd.read_excel(csv_file)

            roll_number = csv_file_values['Roll number']
            student_name = csv_file_values['Student name']
            middle_name = csv_file_values['Middle name']
            surname = csv_file_values['Surname']
            gender = csv_file_values['M/F']
            std = csv_file_values['Std']
            division = csv_file_values['Division']
            mobile_number = csv_file_values['Mobile no']
            address = csv_file_values['Address']

            final_list = list(zip(roll_number, student_name, middle_name,
                              surname, gender, std, division, mobile_number, address))

            for roll_number, student_name, middle_name, surname, gender, std, division, mobile_number, address in final_list:
                message = f'Roll number: {roll_number} \nFirst name: {student_name} {surname} \nGender: {gender} \nStandard: {std} \nDivision: {division} \nAddress: {address}'

                number = str(91)+''+str(mobile_number)
                response = send_whatsapp_message(number, message)

            messages.success(request, 'successfully send')
        except Exception as e:
            messages.error(request, str(e))
        return redirect('/content/teacher_send_whatsapp_message/')

def AllPackages(request, institute_code, institute_name):
    allPackages = Package.objects.filter(teacher__institute__code=institute_code).order_by('-id')
    if allPackages:
        institute_name = allPackages.first().teacher.institute.name
        photo = allPackages.first().teacher.photo
    else:
        institute_name = ''
        photo = None

    context = {'allPackages': allPackages,'institute_name': institute_name, 'photo': photo}
    return render(request, 'content/all_packages.html', context)

def TeacherAddStudents(request):
    user = request.user
    me = Teach(user)
    teacher_batches = me.batchIds()
    
    if request.method == 'GET':
        return render(request, 'content/teacher_add_students.html')
    else:
        try:
            csv_file = request.FILES['file']

            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/teacher_add_students/')
            
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file)
            else:
                csv_file_values = pd.read_excel(csv_file)

            name = csv_file_values['Name*']
            username = csv_file_values['Username/Mobile number*']
            batches = csv_file_values['Batches']
            roll_number = csv_file_values['Roll number']
            gender = csv_file_values['Gender']

            final_list = list(zip(name, username, batches, roll_number, gender))

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['name', 'username','batches','roll_number','Response'])

            institute_code = me.profile.institute.code
            institute = Institute.objects.get(code=institute_code)
            outer_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')

            output = []
            for name, username, batches, roll_number, gender in final_list:
                resp = [name,username,batches,roll_number]

                if name and len(str(username)) > 5:
                    new_username = str(username) + '@' + institute_code
                    
                    try:
                        user = User.objects.get(username=new_username)
                        resp.append("Username Already Exist.")
                        
                    except User.DoesNotExist:
                        with transaction.atomic():
                            user = User.objects.create_user(username=new_username, password="123", email=None)
                            group.user_set.add(user)

                            student = Student()
                            student.name = name
                            student.studentuser = user
                            student.institute = institute
                            student.save()
                            student.batches.add(outer_batch)

                            if batches:
                                batches_list = str(batches).split('.')
                                for id in batches_list:
                                    id = int(id)
                                    if id in teacher_batches:
                                        batch = Batch.objects.get(id = id)
                                        student.batches.add(batch)
                                    else:
                                       resp.append(f"this batch {id} not belongs to teacher.") 

                            studentDetails = StudentDetails()
                            studentDetails.student = student
                            studentDetails.fullName = name
                            studentDetails.rollNumber = roll_number
                            if gender == 'F' or gender == 'M':
                                studentDetails.gender = gender
                            studentDetails.save()
                            resp.append("Register Successfully")
                    except:
                        pass
                else:
                    resp.append("Data not correct.")

                output.append(resp)

            writer.writerows(output)
            response['Content-Disposition'] = f'attachment; filename="response.csv"'
            return response

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/teacher_add_students/')

def DeleteAllQuestions(request):
    user = request.user
    me = Teach(user)
    allids = request.GET.getlist('checkedids[]')
    Question.objects.filter(id__in=allids).delete()
    return JsonResponse(safe=False, data="Successfully Delete")

def StudentBuyPackageOnWeb2(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        phonenumber = request.POST.get('phoneNumber')
        package_id = request.POST.get('package_id')
        
        try:
            tcode = request.POST['tcode']
            if tcode:
                try:
                    isCode = Teacher.objects.get(teacher_code=tcode)
                except ObjectDoesNotExist:
                    isCode = None  # Handle case where teacher with the provided code doesn't exist
                
                if isCode is None:
                    messages.error(request, 'Teacher Code is incorrect')
                    return redirect(request.META.get('HTTP_REFERER'))
            else:
                tcode = 'No-Code'  # Handle case where tcode is empty in the POST data

        except KeyError:
            tcode = 'No-Code'  # Handle case where tcode is not provided in the POST data

        try:
            package = Package.objects.get(id=package_id)
            allPackageStudents = package.students.all()
            packageInstitute = package.teacher.institute
            code = packageInstitute.code

            username = phonenumber + '@' + code
            student = Student.objects.get(studentuser__username=username)

        except Student.DoesNotExist:
            if name:
                param = {
                    'username': phonenumber,
                    'password': 123,
                    'institute_code': code,
                    'name': name,
                }
                registerStudentResponse = requests.post('https://bodhiai.live/api/membership/register_student_new/', param).json()

                if registerStudentResponse['status'] == 'Failed':
                    messages.error(request, 'failed response')
                    return redirect(request.META.get('HTTP_REFERER'))

            else:
                messages.error(request, 'Name is mandatory for create a new account in package institute.')
                return redirect(request.META.get('HTTP_REFERER'))

        except Package.DoesNotExist:
            messages.error(request, 'Package Not Found.. Please try again')
            return redirect(request.META.get('HTTP_REFERER'))





        try:
            token, created = Token.objects.get_or_create(user=User.objects.get(username=username))
            student = Student.objects.get(studentuser__username=username)

            if student in allPackageStudents:
                messages.error(request, 'You are already in this package.')
                return redirect(request.META.get('HTTP_REFERER'))

            else:
                body = {
                    'firstname': student.name,
                    'email': 'xyz@gmail.com',
                    'amount': package.price,
                    'phone': phonenumber,
                    'tcode': tcode,
                    'productinfo': 'Buy Package',
                    'udf2': 'web',
                    'udf3': 'package_buy',
                    'udf4': package_id,
                }
                if package.marketLevelPackage:
                    body['transaction_to'] = 'bodhiai_account'
                else:
                    body['transaction_to'] = 'institute_account'

                header = {'Authorization': f"token {token.key}",}
                url = 'https://bodhiai.live/api/management/easebuzz_payment_solution/'
                res = requests.post(url, body, headers=header)

                response = json.loads(res.content) # convert data in python object

                if response['status'] == 1:
                    url = response['weburl']
                    return redirect(url)
                else:
                    messages.error(request, 'Invalid information')
                    return redirect(request.META.get('HTTP_REFERER'))

        except Exception as e:
            res = 'error' + '---' + str(e)
            UpdatedAgoraCode.objects.create(code=res)
            messages.error(request, str(e))
            return redirect(request.META.get('HTTP_REFERER'))
    else:
        return redirect('https://www.bodhiai.co.in/')
    
def StudentBuyPackageOnWeb(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        phonenumber = request.POST.get('phoneNumber')
        package_id = request.POST.get('package_id')
        student = None  # Initialize student to None

        try:
            tcode = request.POST.get('tcode', 'No-Code')
            if tcode and tcode != 'No-Code':
                try:
                    isCode = Teacher.objects.get(teacher_code=tcode)
                except Teacher.DoesNotExist:
                    messages.error(request, 'Teacher Code is incorrect')
                    return redirect(request.META.get('HTTP_REFERER'))

            package = Package.objects.get(id=package_id)
            allPackageStudents = package.students.all()
            packageInstitute = package.teacher.institute
            code = packageInstitute.code

            username = f"{phonenumber}@{code}"
            
            try:
                student = Student.objects.get(studentuser__username=username)
            except Student.DoesNotExist:
                if name:
                    param = {
                        'username': phonenumber,
                        'password': 123,
                        'institute_code': code,
                        'name': name,
                    }
                    registerStudentResponse = requests.post(
                        'https://bodhiai.live/api/membership/register_student_new/', param).json()
                    if registerStudentResponse['status'] == 'Failed':
                        messages.error(request, 'Failed to register student.')
                        return redirect(request.META.get('HTTP_REFERER'))
                    student = Student.objects.get(studentuser__username=username)
                else:
                    messages.error(request, 'Name is required to create a new account in the package institute.')
                    return redirect(request.META.get('HTTP_REFERER'))

            if student in allPackageStudents:
                messages.error(request, 'You are already in this package.')
                return redirect(request.META.get('HTTP_REFERER'))

            if student.institute.code in ['mathemp']:
                try:
                    institute = Institute.objects.get(code=student.institute.code)
                    razorpay_key = institute.razorpaykey
                    razorpay_secret_key = institute.razorpay_secret_key
                    client = razorpay.Client(auth=(razorpay_key, razorpay_secret_key))
                    order_data = {
                        'amount': package.price * 100,  # Convert to smallest currency unit
                        'currency': 'INR',
                        'payment_capture': '1'
                    }
                    razorpay_order = client.order.create(order_data)

                    student_details = StudentDetails.objects.get(student=student)
                    context = {
                        'razorpay_key_id': razorpay_key,
                        'razorpay_order_id': razorpay_order['id'],
                        'amount': package.price,
                        'name': name,
                        'phone': phonenumber,
                        'email': student_details.email, 
                        'institute_code': student.institute.code,
                    }
                    return render(request, 'content/razorpay_payment.html', context)

                except Exception as e:
                    messages.error(request, f'Error initiating Razorpay payment: {str(e)}')
                    return redirect(request.META.get('HTTP_REFERER'))

            token, created = Token.objects.get_or_create(user=User.objects.get(username=username))
            body = {
                'firstname': student.name,
                'email': 'xyz@gmail.com',  # Replace with actual email if available
                'amount': package.price,
                'phone': phonenumber,
                'tcode': tcode,
                'productinfo': 'Buy Package',
                'udf2': 'web',
                'udf3': 'package_buy',
                'udf4': package_id,
            }
            body['transaction_to'] = 'bodhiai_account' if package.marketLevelPackage else 'institute_account'

            headers = {'Authorization': f"token {token.key}"}
            url = 'https://bodhiai.live/api/management/easebuzz_payment_solution/'
            res = requests.post(url, data=body, headers=headers)
            response = res.json()  # Convert JSON response to a dictionary

            if response['status'] == 1:
                return redirect(response['weburl'])
            else:
                messages.error(request, 'Invalid payment information.')
                return redirect(request.META.get('HTTP_REFERER'))

        except Package.DoesNotExist:
            messages.error(request, 'Package not found. Please try again.')
            return redirect(request.META.get('HTTP_REFERER'))

        except Exception as e:
            UpdatedAgoraCode.objects.create(code=f'error---{str(e)}')
            messages.error(request, str(e))
            return redirect(request.META.get('HTTP_REFERER'))

    else:
        return redirect('https://www.bodhiai.co.in/')
    
def paymentSuccess(request):
    payment_id = request.GET.get('payment_id')
    order_id = request.GET.get('order_id')
    institute_code = request.GET.get('institute_code')

    institute = Institute.objects.get(code= institute_code)
    razorpay_key = institute.razorpaykey
    razorpay_secret_key = institute.razorpay_secret_key

    client = razorpay.Client(auth=(razorpay_key, razorpay_secret_key))

    try:
        payment = client.payment.fetch(payment_id)

        if payment['status'] == 'captured':
            context = {
                'transaction_status': 'Success',
                'txnid': payment_id,
                'message': 'Your payment was successful!'
            }
            return render(request, 'content/payment_success.html', context)

    except razorpay.errors.SignatureVerificationError:
        context = {
            'transaction_status': 'Failure',
            'txnid': payment_id,
            'message': 'There was an issue verifying your payment.'
        }
        return render(request, 'content/payment_success.html', context)

    context = {
        'transaction_status': 'Failure',
        'txnid': payment_id,
        'message': 'Your payment could not be completed.'
    }
    return render(request, 'content/payment_success.html', context)

def paymentFailed(request):
    order_id = request.GET.get('order_id')
    return render(request, 'content/payment_failed.html', {'order_id': order_id})

def TeacherScheduleMeeting(request):
    user = request.user
    me = Teach(user)
    batches = me.profile.batches.values('id','name').order_by('-id')
    batches_list = []
    for batch in batches:
        batches_list.append(batch)

    packages_list = []
    if me.profile.mainTeacher:
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        packages = Package.objects.filter(teacher__in=teachers).values('id','title').order_by('-id')
    else:
        packages = Package.objects.filter(teacher=me.profile).values('id','title').order_by('-id')

    for package in packages:
        packages_list.append(package)

    context = {
        'teacher': me.profile.teacheruser.username,
        'batches': batches_list, 
        'packages': packages_list,
        'hours' : range(2,12),
        'minutes': range(10,60,5),
        }
    return render(request, 'content/teacher_schedule_meeting.html',context)

def CreateMeethourMeeting(request):
    user = request.user
    me = Teach(user)
    data = request.POST

    meethour_account_type = me.profile.institute.meethour_account_type
    token, created = Token.objects.get_or_create(user=user)
    token = token.key

    header = {
        "Authorization": f"token {token}",
        "Content-Type": "application/json",
    }
    body = {}
    body["meeting_name"] = data['meeting_name']
    try: 
        batch_list = data.getlist('batch_checkbox')
        if batch_list:   
            body["batch_ids"] = json.dumps(batch_list)
    except:
        pass

    try:
        package_list = data.getlist('package_checkbox')
        if package_list:
            body["package_ids"] = json.dumps(package_list)
    except:
        pass

    body["duration_hr"] = int(data.get("duration_hr", 1))
    body["duration_min"] = int(data.get("duration_min", 30))
    
    body = json.dumps(body)
    url = f"https://bodhiai.live/api/content/teacher_create_or_get_meet_hour_meeting/{meethour_account_type}/"

    response = requests.post(url=url, data=body, headers=header)
    if response.status_code == 200:
        url = f"https://bodhiai.live/api/content/join_meet_hour_meeting/{meethour_account_type}/"

        response = requests.post(url=url, json={}, headers=header)
        if response.status_code == 200:
            context = json.loads(response.content)
            url = "https://meethour.io/jm/"
            url += context['meeting_id']
            url += f"?mt={context['jwt']}&pcode={context['pcode']}"
            return redirect(url)
        
        else:
            messages.error(request, 'Something Went Wrong')
            return redirect("/content/teacher_schedule_meeting")
    else:
        messages.error(request, 'Something Went Wrong')
        return redirect("/content/teacher_schedule_meeting")
    
def teacher_upload_video_final_azure_old(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        title = request.POST['title']
        chapter_id = request.POST['chapter_id']
        batch_list_string = request.POST['batchList']
        topics = request.POST.get('topic_id')
        subTopics = request.POST.get('subTopic_id')
        batch_list_new = batch_list_string.replace("\"", "")
        batch_list = batch_list_new.split(',')
        publish_status = request.POST['publishStatus']
        url = request.POST['url']
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        
        upload_video = Video()
        upload_video.title = title
        upload_video.subject = subject
        upload_video.chapter = chapter
        upload_video.urlLink = url
        
        if publish_status == 'unchecked':
            upload_video.publish = False
            
        if topics:
            topics = QuestionTopic.objects.get(id=topics)
            upload_video.topics = topics
            
        if subTopics:
            subTopics = QuestionSubTopic.objects.get(id=subTopics)
            upload_video.subTopics = subTopics
            
        upload_video.save()

        upload_video.teacher.add(me.profile)

        input_url = url.split('/')[3:]
        final_key = '/'.join(input_url)
        
        upload_video.lowlink = url
        upload_video.urlLink = url
        upload_video.save()

        for bat in batch_list:
            batch = Batch.objects.get(id=int(bat))
            upload_video.batches.add(batch)
            upload_video.save()
            videoOrder = VideoOrderBatchWise()  
            videoOrder.batch = batch
            videoOrder.order = 0
            videoOrder.video = upload_video
            videoOrder.save()

        context = {'Video successfully uploaded {}'.format(upload_video.urlLink)}
        return HttpResponse(context)
    else:
        return HttpResponse('Not post')

def teacher_upload_videos_azure(request):
    user = request.user
    me = Teach(user)
    subjects = me.profile.subjects.filter(subject_brought=False)
    batches = me.profile.batches.annotate(lower_name=Lower('name')).order_by('lower_name')
    context = {'subjects': subjects, 'batches': batches}
    return render(request, 'content/teacher_upload_videos3.html', context)

def teacher_upload_videos_googleCloud(request):
    user = request.user
    me = Teach(user)
    username = me.profile.teacheruser.username
    subjects = me.profile.subjects.filter(subject_brought=False)
    batches = me.profile.batches.annotate(lower_name=Lower('name')).order_by('lower_name')
    context = {'subjects': subjects, 'batches': batches, 'username': username}
    return render(request, 'content/teacher_upload_videos_googlecloud.html', context)

def carosel(request):
    return render(request, 'content/carosel.html')

def subject_wise_notes(request):
    try:
        subject_id = 78312
        code = 'ppssmart'
        subject_object = Subject.objects.get(id=subject_id)
        teacher = Teacher.objects.filter(institute__code = code)
        notes =Note.objects.select_related('noteurl_note', 'subject').filter(subject=subject_object,teacher__in=teacher).order_by('-id')
        notes_objects_list = set()
        for note in notes:
            if not note.package_set.all():
                notes_objects_list.add(note)

        notes_list = []
        for note in notes_objects_list:
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""

            note_dict = {'id': note.id, 'title': note.title,'url': note_link}
            notes_list.append(note_dict)

        response_data = {'success': True,'data': notes_list}

        return JsonResponse(response_data)
    
    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'error': 'Something Went Wrong.'})

@csrf_exempt 
def chatbot(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            header = {"Content-Type": "application/json"}
            body = {}
            body["question"] = data['message']
            body = json.dumps(body)
            url = f"https://bodhiai.live/api/content/vertex_ai_chat/"

            response = requests.post(url=url, data=body, headers=header)
            if response.status_code == 200:
                data = json.loads(response.content)
                response_data = {'status': True,'data': data['Answer']}
                return JsonResponse(response_data)
        
        except json.JSONDecodeError:
            return JsonResponse({'status': False, 'error': 'Something Went Wrong.'})
    else:
        return render(request, 'content/chatbot2.html')

def teacher_upload_video_final_azure(request):
    print('in uploading video to gcp')
    user = request.user
    me = Teach(user)
    try:
        title = request.POST['title']
        thumbnail = request.POST.get('thumbnail')
        chapter_id = request.POST['chapter_id']
        batch_list_string = request.POST['batchList']
        topics = request.POST.get('topic_id')
        subTopics = request.POST.get('subTopic_id')
        batch_list_new = batch_list_string.replace("\"", "")
        batch_list = batch_list_new.split(',')
        publish_status = request.POST['publishStatus']
        url = request.POST['url']
        
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        
        upload_video = Video()
        upload_video.title = title
        upload_video.thumbnail = thumbnail
        upload_video.subject = subject
        upload_video.chapter = chapter
        upload_video.urlLink = url
        print(f'video url {url}')
        if publish_status == 'unchecked':
            upload_video.publish = False
            
        if topics:
            topics = QuestionTopic.objects.get(id=topics)
            upload_video.topics = topics
            
        if subTopics:
            subTopics = QuestionSubTopic.objects.get(id=subTopics)
            upload_video.subTopics = subTopics
            
        upload_video.save()
        upload_video.teacher.add(me.profile)
        
        input_url = url.split('/')[4:]
        final_key = '/'.join(input_url)
        final_key_without_extension = os.path.splitext(final_key)[0]
        print(f'final key without extension {final_key_without_extension}')
        
        baseURL = 'https://storage.googleapis.com/{}/encoded/'.format(input_url[0])
        print(f'baseURL {baseURL}')
        input_uri = 'gs://{}/{}'.format('testjuly', final_key)
        output_uri = 'gs://{}/encoded/{}/'.format('testjuly', final_key_without_extension)
        preset_id = 'web-360p-720p'  # The ID of the job preset you created
        ets = GCPManager()
        ets.create_job_from_preset('rare-drummer-388505', 'us-central1', input_uri, output_uri, preset_id)
        baseURL = 'https://storage.googleapis.com/{}/encoded/'.format('testjuly')
        
        lowlink = baseURL +final_key_without_extension +"/"+"sd.mp4"
        higherlink = baseURL +final_key_without_extension +"/"+"hd.mp4"
        upload_video.lowlink = lowlink
        upload_video.urlLink = url
        upload_video.highlink = higherlink
        upload_video.save()

        for bat in batch_list:
            batch = Batch.objects.get(id=int(bat))
            if publish_status == 'checked':

                try:
                    teacher_id = me.profile.id
                    message = f'A new video {title} of {subject.name} has been uploaded for you by {me.profile.name}'
                    title = 'New Video'
                    screen = upload_video.urlLink
                    category = 'video'
                    thumbnail = None
                    id = upload_video.id
                    bulk_clickable_notification_batches.delay(
                        teacher_id, batch.id, message, title, screen, category, thumbnail, id, 20000)
                except:
                    pass

            upload_video.batches.add(batch)
            upload_video.save()
            videoOrder = VideoOrderBatchWise()  
            videoOrder.batch = batch
            videoOrder.order = 0
            videoOrder.video = upload_video
            videoOrder.save()

        context = {'Video Successfully Uploaded {}'.format(upload_video.urlLink)}
        return HttpResponse(context)
    except Exception as e:
        return HttpResponse(str(e))

def upload_google_cloud_transcode_url(video_id):
    video = Video.objects.get(id=video_id)
    urlLink = video.urlLink
    input_url = urlLink.split('/')[4:]
    final_key = '/'.join(input_url)
    final_key_without_extension = os.path.splitext(final_key)[0]
    ets = GCPManager()
    
    baseURL = 'https://storage.googleapis.com/{}/encoded/'.format(input_url[0])
    input_uri = 'gs://{}/{}'.format('testjuly', final_key)
    output_uri = 'gs://{}/encoded/{}/'.format('testjuly', final_key_without_extension)
    preset_id = 'web-360p-720p'  # The ID of the job preset you created
    res = ets.create_job_from_preset('rare-drummer-388505', 'us-central1', input_uri, output_uri, preset_id)
    baseURL = 'https://storage.googleapis.com/{}/encoded/'.format('testjuly')
    
    lowlink = baseURL +final_key_without_extension +"/"+"sd.mp4"
    higherlink = baseURL +final_key_without_extension +"/"+"hd.mp4"
    video.lowlink = lowlink
    video.highlink = higherlink
    video.save()
   
    return "success"

def upload_image_gc(request):
    me = Teach(request.user)
    username = me.profile.teacheruser.username
    institute = me.profile.institute.code
    
    if request.method == "GET":
        return render(request,'content/upload_image_gc.html')
    else:
        uploaded_file = request.FILES.get('question_image')
        unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        new_timezone = pytz.timezone('Asia/Kolkata')
        time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
        file_name = (uploaded_file.name).replace(" ", "-")
        final_file_name = f"{institute}/{username}-{time}-{unique_code}-{file_name}"
        
        bucket_name = 'bodhiaiquestions'
        cred_file = '/home/azureuser/bodhiai/google_cloud_details.json'
        with open(cred_file, 'r') as json_file:
            credentials = json.load(json_file)
        
        storage_client = storage.Client.from_service_account_info(credentials)
        bucket = storage_client.bucket(bucket_name)
        
        blob = bucket.blob(final_file_name)
        blob.upload_from_file(uploaded_file)
        url = f"https://storage.googleapis.com/{bucket_name}/{final_file_name}"
        context = {'url':url,}
        return render(request,'content/upload_image_gc.html',context)
    
def UploadImagesOld(request):
    user = Teach(request.user)
    username = user.profile.teacheruser.username
    
    if request.method == "GET":
        return render(request,'content/upload_images.html')
    else:
        storage_account_name = "bodhiaigeneral";
        connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
        container_name = "bodhiai-questions"
        uploaded_file = request.FILES.get('image')
        unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        
        file_name = uploaded_file.name
        blob_service_client = BlobServiceClient.from_connection_string(connection_string)
        new_timezone = pytz.timezone('Asia/Kolkata')
        time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
        file_name = f"{username}/{time}/{unique_code}/{file_name}"
        blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_name)
        blob_client.upload_blob(uploaded_file)
        url = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_name}"

        return JsonResponse(safe=False, data=url)
    
def UploadImages(request):
    user = Teach(request.user)
    username = user.profile.teacheruser.username
    institute = user.profile.institute.code
    
    if request.method == "GET":
        return render(request,'content/upload_images.html')
    else:
        uploaded_file = request.FILES.get('image')
        unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        new_timezone = pytz.timezone('Asia/Kolkata')
        time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
        file_name = (uploaded_file.name).replace(" ", "-")
        final_file_name = f"{institute}/{username}-{time}-{unique_code}-{file_name}"
        
        bucket_name = 'bodhiaiquestions'
        cred_file = '/home/azureuser/bodhiai/google_cloud_details.json'
        with open(cred_file, 'r') as json_file:
            credentials = json.load(json_file)
        
        storage_client = storage.Client.from_service_account_info(credentials)
        bucket = storage_client.bucket(bucket_name)
        
        content_type = uploaded_file.content_type
        blob = bucket.blob(final_file_name)
        blob.upload_from_file(uploaded_file,content_type=content_type)
        url = f"https://storage.googleapis.com/{bucket_name}/{final_file_name}"

        return JsonResponse(safe=False, data=url)
    
def QuestionUploadImageold(request):
    user = Teach(request.user)
    username = user.profile.teacheruser.username
    storage_account_name = "bodhiaigeneral";
    connection_string = "DefaultEndpointsProtocol=https;AccountName=bodhiaigeneral;AccountKey=zpXD7cmZ4jDnpn/7a/KkZ6Bqia8zRQ+8f7YukTRnS6+njD99758lMWpJPLwZl9KdJKVevXy6XseyrdJMUIfbMA==;EndpointSuffix=core.windows.net"
    container_name = "bodhiai-questions"

    input_name = request.POST.get('input_name')
    uploaded_file = request.FILES.get(input_name)
    file_name = uploaded_file.name
    
    unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    new_timezone = pytz.timezone('Asia/Kolkata')
    time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
    file_name = f"{username}/{time}/{unique_code}/{file_name}"
    blob_client = blob_service_client.get_blob_client(container=container_name, blob=file_name)
    blob_client.upload_blob(uploaded_file)
    url = f"https://bodhiuploadbucket.azureedge.net/{container_name}/{file_name}"

    return JsonResponse(safe=False, data=url)

def QuestionUploadImage(request):
    user = Teach(request.user)
    username = user.profile.teacheruser.username
    institute = user.profile.institute.code
    input_name = request.POST.get('input_name')
    uploaded_file = request.FILES.get(input_name)
    file_name = (uploaded_file.name).replace(" ", "-")
    
    unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    new_timezone = pytz.timezone('Asia/Kolkata')
    time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
    final_file_name = f"{institute}/{username}-{time}-{unique_code}-{file_name}"
        
    bucket_name = 'bodhiaiquestions'
    cred_file = '/home/azureuser/bodhiai/google_cloud_details.json'
    with open(cred_file, 'r') as json_file:
        credentials = json.load(json_file)
    
    storage_client = storage.Client.from_service_account_info(credentials)
    bucket = storage_client.bucket(bucket_name)
    
    content_type = uploaded_file.content_type
    blob = bucket.blob(final_file_name)
    blob.upload_from_file(uploaded_file,content_type=content_type)
    url = f"https://storage.googleapis.com/{bucket_name}/{final_file_name}"
    return JsonResponse(safe=False, data=url)

def TeacherAddStudents2(request):
    user = request.user
    me = Teach(user)
    
    if request.method == 'GET':
        return render(request, 'content/teacher_add_students.html')
    else:
        try:
            csv_file = request.FILES['file']

            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/teacher_add_students/')
            
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file)
            else:
                csv_file_values = pd.read_excel(csv_file)

            name = csv_file_values['name']
            username = csv_file_values['username']
            accessTests = csv_file_values['accessTests']
            accessVideo = csv_file_values['accessVideo']
            accessNotes = csv_file_values['accessNotes']
            accessLiveVideos = csv_file_values['accessLiveVideos']
            accessYouTubeLiveVideos = csv_file_values['accessYouTubeLiveVideos']
            jdate = csv_file_values['jdate']
            typeUser = csv_file_values['typeUser']
            accessTestWinApp = csv_file_values['accessTestWinApp']

            final_list = list(zip(name, username, accessTests, accessVideo, accessNotes, accessLiveVideos, accessYouTubeLiveVideos, jdate, typeUser, accessTestWinApp))

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['name', 'username','accessTests','accessVideo','accessNotes', 'accessLiveVideos', 'accessYouTubeLiveVideos', 'jdate', 'typeUser', 'accessTestWinApp'])

            institute_code = me.profile.institute.code
            institute = Institute.objects.get(code=institute_code)
            outer_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')

            output = []
            for name, username, accessTests, accessVideo, accessNotes, accessLiveVideos, accessYouTubeLiveVideos, jdate, typeUser, accessTestWinApp in final_list:
                resp = [name, username, accessTests, accessVideo, accessNotes, accessLiveVideos, accessYouTubeLiveVideos, jdate, typeUser, accessTestWinApp]

                if name and len(str(username)) > 5:
                    
                    try:
                        user = User.objects.get(username=username)
                        resp.append("Username Already Exist.")
                        
                    except User.DoesNotExist:
                        with transaction.atomic():
                            user = User.objects.create_user(username=username, password="123", email=None)
                            group.user_set.add(user)
                            student = Student()
                            student.name = name
                            student.studentuser = user
                            student.institute = institute
                            student.accessTests = accessTests
                            student.accessVideo = accessVideo
                            student.accessNotes = accessNotes
                            student.accessLiveVideos = accessLiveVideos
                            student.accessYouTubeLiveVideos = accessYouTubeLiveVideos
                            student.jdate = jdate
                            student.typeUser = typeUser
                            student.accessTestWinApp = accessTestWinApp
                            student.save()
                            student.batches.add(outer_batch)

                            studentDetails = StudentDetails()
                            studentDetails.student = student
                            studentDetails.fullName = name
                            studentDetails.save()
                            resp.append("Register Successfully")
                    except:
                        pass
                else:
                    resp.append("Data not correct.")

                output.append(resp)

            writer.writerows(output)
            response['Content-Disposition'] = f'attachment; filename="response.csv"'
            return response

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/teacher_add_students/')

def StudentMonthlyReport(request):
    return render(request, 'content/student_monthly_report.html')
            
def AddClassWiseReport(request):
    institute_code ="eclassopedia"
    
    try:
        teacher = request.POST.get('teacher')
        subject = request.POST.get('subject')
        curriculum = request.POST.get('curriculum')
        student_class = request.POST.get('student_class')
        report_date = request.POST.get('report_date')
        csv_file = request.FILES['file']
        
        try:
            report_date = datetime.datetime.strptime(report_date, "%Y-%m-%d")
        except ValueError:
            messages.error(request, "Report Date is not in the correct format (YYYY-MM-DD)")
            return redirect('/content/student_monthly_report/')
        
        if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not csv or xlsx file')
            return redirect('/content/student_monthly_report/')
        
        elif csv_file.name.endswith('.csv'):
            csv_file_values = pd.read_csv(csv_file)
            print("read csv")
        else:
            csv_file_values = pd.read_excel(csv_file)

        student_username = csv_file_values['Student Username*']
        lesson_date = csv_file_values['Lesson Date']
        topic_taught = csv_file_values['Topic Taught']
        remarks = csv_file_values['Remarks']
        
        final_list = list(zip(student_username, lesson_date, topic_taught, remarks))

        for student_username, lesson_date, topic_taught, remarks in final_list:
            try:
                lesson_date = datetime.datetime.strptime(lesson_date, "%Y-%m-%d")
            except Exception as e:
                messages.error(request,"Lesson Date is not in the correct format (YYYY-MM-DD)")

            try:
                student = Student.objects.get(studentuser__username = student_username,institute__code=institute_code)
                report = StudentClassWiseReport()
                report.teacher = teacher
                report.subject = subject
                report.report_date = report_date
                report.curriculum = curriculum
                report.student_class = student_class
                report.student = student
                report.lesson_date = lesson_date
                report.topic_taught = topic_taught
                report.remarks = remarks
                report.save()
                messages.success(request, 'Data Uploaded')
                
            except Exception as e:
                messages.error(request, str(e))

    except Exception as e:
        messages.error(request, str(e))
        
    return redirect('/content/student_monthly_report/')

def AddTestAssignmentReport(request):
    institute_code ="eclassopedia"
    
    try:
        teacher = request.POST.get('teacher')
        subject = request.POST.get('subject')
        curriculum = request.POST.get('curriculum')
        student_class = request.POST.get('student_class')
        report_date = request.POST.get('report_date')
        
        try:
            report_date = datetime.datetime.strptime(report_date, "%Y-%m-%d")
        except Exception as e:
            messages.error(request, "Report Date is not in the correct format (YYYY-MM-DD)")
            
        csv_file = request.FILES['file']
        
        if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not csv or xlsx file')
        
        elif csv_file.name.endswith('.csv'):
            csv_file_values = pd.read_csv(csv_file)
        else:
            csv_file_values = pd.read_excel(csv_file)

        student_username = csv_file_values['Student Username*']
        test_date = csv_file_values['Test Date']
        test_topic = csv_file_values['Test Topic']
        marks_obtained = csv_file_values['Grade/Marks Obtained']
        test_remarks = csv_file_values['Test Remarks']

        final_list = list(zip(student_username, test_date, test_topic, marks_obtained, test_remarks))

        for student_username, test_date, test_topic, marks_obtained, test_remarks in final_list:
            try:
                test_date = datetime.datetime.strptime(test_date, "%Y-%m-%d")
            except Exception as e:
                messages.error(request, "Test Date is not in the correct format (YYYY-MM-DD)")

            try:
                student = Student.objects.get(studentuser__username = student_username,institute__code=institute_code)
                report = StudentTestAssignmentsReport()
                report.teacher = teacher
                report.subject = subject
                report.report_date = report_date
                report.curriculum = curriculum
                report.student_class = student_class
                report.student = student
                report.test_date = test_date
                report.test_topic = test_topic
                report.marks_obtained = marks_obtained
                report.test_remarks = test_remarks
                report.save()
                messages.success(request, 'Data Uploaded')
                
            except Exception as e:
                messages.error(request, str(e))

    except Exception as e:
        messages.error(request, str(e))
        
    return redirect('/content/student_monthly_report/')

def StudentAdminCard(request):
    me = Teach(request.user)
    institute_code = me.profile.institute.code
    
    if request.method == 'GET':
        return render(request, 'content/admit_card_add.html')
    else:
        try:
            csv_file = request.FILES['file']
            
            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/admit_card_add/')
            
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file)
                print("read csv")
            else:
                csv_file_values = pd.read_excel(csv_file)
            
            
            name_exam = csv_file_values['Name of Examintion']
            phone_number = csv_file_values['Phone Number']
            register_no = csv_file_values['Register No']
            roll_no = csv_file_values['Roll No']
            city = csv_file_values['Examintion City']
            date_or_time = csv_file_values['Date of time Examintion']
            center_name = csv_file_values['Center Name with Address']
            examFrom = csv_file_values['Exam Start From']
            examEnd = csv_file_values['Exam End']
            
            final_list = list(zip(name_exam, phone_number,register_no, roll_no, city, date_or_time, center_name,examFrom,examEnd))

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['Username','Response'])

            output = []
            for name_exam, phone_number,register_no, roll_no, city, date_or_time, center_name,examFrom,examEnd in final_list:

                    
                resp = [phone_number]
                username = str(phone_number) + "@" + "upmgroup"
                try:
                    register = PaidAmountStudentExam.objects.get(student__student__studentuser__username=username)
                    register = RegisterExam.objects.get(student__studentuser__username=username)
                    registers = register_no

                    try:
                        examFrom = datetime.datetime.strptime(examFrom, "%H:%M:%S")
                        examEnd = datetime.datetime.strptime(examEnd, "%H:%M:%S")
                    except ValueError as date_time_error:
                        resp.append(f"Error while processing time fields: {str(date_time_error)}")
                    else:
                        try:
                            admit = AdmitCard.objects.get(register_no=register)
                            admit.name_of_examination = name_exam
                            admit.register_no = register
                            admit.exam_register_no = registers
                            admit.roll_number = roll_no
                            admit.exam_city = city
                            admit.dofexam = date_or_time
                            admit.center_name = center_name
                            admit.examFrom = examFrom
                            admit.examTo = examEnd
                            admit.save()
                            resp.append("Record Update Successfully")
                        except AdmitCard.DoesNotExist:
                            admit = AdmitCard()
                            admit.name_of_examination = name_exam
                            admit.register_no = register
                            admit.exam_register_no = registers
                            admit.roll_number = roll_no
                            admit.exam_city = city
                            admit.dofexam = date_or_time
                            admit.center_name = center_name
                            admit.examFrom = examFrom
                            admit.examTo = examEnd
                            admit.save()
                            resp.append("Record Added Successfully")
                        except Exception as e:
                            resp.append(f"Error while processing the admit card: {str(e)}")
                except PaidAmountStudentExam.DoesNotExist:
                    mess = f"Student with username {username} has not paid the registration fees for exams."
                    resp.append(mess)
                except Exception as e:
                    resp.append(f"Error while processing the student: {str(e)}")
                output.append(resp)

            writer.writerows(output)
            response['Content-Disposition'] = f'attachment; filename="admitcard_response.csv"'
            return response

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/admit_card_add/')
        
def StudentScoreCard(request):
    me = Teach(request.user)
    institute_code = me.profile.institute.code
    
    if request.method == 'GET':
        return render(request, 'content/score_card_add.html')
    else:
        try:
            csv_file = request.FILES['file']
            
            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/score_card_add/')
            
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file)
                print("read csv")
            else:
                csv_file_values = pd.read_excel(csv_file)

            name_exam = csv_file_values['Name of Examintion']
            register_no = csv_file_values['Register No']
            score = csv_file_values['Score']
            rank = csv_file_values['Rank']

            final_list = list(zip(name_exam, register_no, score, rank))

            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['Username','Response'])

            output = []
            for name_exam,register_no, score,rank in final_list:
                resp = [register_no]
                register_no =register_no
                admit_card = AdmitCard.objects.get(exam_register_no = register_no)
                registers = admit_card.register_no
                if admit_card:
                    try:
                        admit = ScoreCard.objects.get(register_no = registers)
                        admit.name_of_examination = name_exam
                        admit.register_no = registers
                        admit.exam_register_no = register_no
                        admit.score = score
                        admit.rank = rank
                        admit.save()
                    except ScoreCard.DoesNotExist:
                        admit = ScoreCard()
                        admit.name_of_examination = name_exam
                        admit.register_no = registers
                        admit.exam_register_no = register_no
                        admit.score = score
                        admit.rank = rank
                        admit.save()
                    
                    resp.append("Record Added Successfully")
                else:
                    resp.append("Student Does not exist")

                output.append(resp)

            writer.writerows(output)
            response['Content-Disposition'] = f'attachment; filename="scorecard_response.csv"'
            return response

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/score_card_add/')
        
def TeacherUploadQuestionBulkFormatChange2(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        return render(request, 'content/teacher_upload_question_bulkFormate2.html')
    else:
        try:
            csv_file = request.FILES['file']
            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/teacher_upload_question_bulkFormat2/')
            elif csv_file.name.endswith('.csv'):
                csv_file_values = pd.read_csv(csv_file, encoding='latin1')
            else:
                csv_file_values = pd.read_excel(csv_file)

            question_link = csv_file_values['question']
            type = csv_file_values['type']
            optA = csv_file_values['option1']
            optB = csv_file_values['option2']
            optC = csv_file_values['option3']
            optD = csv_file_values['option4']
            correct = csv_file_values['correct_option']
            positive_mark = csv_file_values['correct_marks']
            negative_mark = csv_file_values['wrong_marks']
            unanswered_mark = csv_file_values['unanswered_mark']
            subjects = csv_file_values['Subject Code']
            chapters = csv_file_values['Chapter code']
            topic = csv_file_values['Topic code']
            subTopic = csv_file_values['Subtopic code']
            explanation = csv_file_values['solution']
            
            

            final_list = list(zip(question_link, type, optA, optB, optC, optD, correct,
                              positive_mark, negative_mark, unanswered_mark, subjects, chapters, topic, subTopic, explanation))

            count = 0
            Imagetypes = ['.png', '.jpg', '.jpeg', '.tif',
                          '.gif', '.PNG', '.JPG', '.JPEG', '.TIF', '.GIF']
            for question_picture,type,a,b,c,d, correct_option,positive_mark,negative_mark,unanswered_mark, subject, chapterCode, topic, subTopic,explanation in final_list:
                count += 1
                try:
                    try:
                        questionType = type
                    except:
                        questionType = None

                    try:
                        subjectObejct = Subject.objects.get(id=subject)
                    except Subject.DoesNotExist:
                        messages.error(request, f'Subject id wrong of Qyestion no.{count} in your csv file')
                        return redirect('/content/teacher_upload_question_bulkFormat2/')

                    chapter = None
                    try:
                        chapter = Chapter.objects.get(subject=subjectObejct, code=float(chapterCode))
                    except:
                        chapter = Chapter.objects.filter(subject=subjectObejct)
                        for ch in chapter:
                            if ch.code == float(chapterCode):
                                chapter = ch
                                break
                    if chapter == None:
                        print('chapter not found {}'.format(chapterCode))
                        continue

                    question = Question()
                    if str(question_picture).endswith(tuple(Imagetypes)):
                        question.picture = question_picture
                    else:
                        question.text = question_picture
                    question.questionType = questionType
                    question.subject = subjectObejct
                    question.chapter = chapter

                    if not pd.isnull(positive_mark):
                        question.marks = positive_mark
                    if not pd.isnull(negative_mark):
                        question.negativeMarks = negative_mark

                   
                    question.published = timezone.now()
                    question.save()

                    if not pd.isnull(topic):
                        try:
                            topicObject = QuestionTopic.objects.get(id=topic)
                            question.topic.add(topicObject)
                            question.save()
                        except QuestionTopic.DoesNotExist:
                            messages.error(request, f'Topic id wrong of Qyestion no.{count} in your csv file')
                            return redirect('/content/teacher_upload_question_bulkFormat2/')

                    if not pd.isnull(subTopic):
                        try:
                            subTopicObject = QuestionSubTopic.objects.get(
                                id=subTopic)
                            question.subTopic.add(subTopicObject)
                            question.save()
                        except QuestionSubTopic.DoesNotExist:
                            messages.error(request, f'SubTopic id wrong of Qyestion no.{count} in your csv file')
                            return redirect('/content/teacher_upload_question_bulkFormat2/')

                    a = str(a)
                    b = str(b)
                    c = str(c)
                    d = str(d)
                    if a.isdigit():
                        optionA = Option(text=a)
                    else:
                        optionA = Option(text=a)
                    optionA.question = question
                    optionA.save()

                    if b.isdigit():
                        optionB = Option(text=b)
                    else:
                        optionB = Option(text=b)
                    optionB.question = question
                    optionB.save()

                    if c.isdigit():
                        optionC = Option(text=c)
                    else:
                        optionC = Option(text=c)
                    optionC.question = question
                    optionC.save()

                    if d.isdigit():
                        optionD = Option(text=d)
                    else:
                        optionD = Option(text=d)
                    optionD.question = question
                    optionD.save()

                   

                    options = str(correct_option).replace(" ", "")
                    for i in options:
                        if i.lower() == 'a' or i.lower() == '1':
                            optionA.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionA.explanationPicture = explanation
                                else:
                                    optionA.explanationText = explanation
                            optionA.save()

                        elif i.lower() == 'b' or i.lower() == '2':
                            optionB.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionB.explanationPicture = explanation
                                else:
                                    optionB.explanationText = explanation
                            optionB.save()

                        elif i.lower() == 'c' or i.lower() == '3':
                            optionC.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionC.explanationPicture = explanation
                                else:
                                    optionC.explanationText = explanation
                            optionC.save()

                        else:
                            optionD.correct = True
                            if pd.isnull(explanation):
                                pass
                            else:
                                if explanation.endswith(tuple(Imagetypes)):
                                    optionD.explanationPicture = explanation
                                else:
                                    optionD.explanationText = explanation
                            optionD.save()

                except Exception as e:
                    print(str(e))
                    messages.error(request, f'Till now questions {count-1} add successfully but error found at question no.{count} please check question {count} ')
                    return redirect('/content/teacher_upload_question_bulkFormat2/')

            messages.success(request, 'Questions Uploaded Successfully')
            return redirect('/content/teacher_upload_question_bulkFormat2/')

        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/teacher_upload_question_bulkFormat2/')
        
def PackageBuy(request):
    user = request.user
    if request.method == 'GET':
        institute_code = 'ou'
        packages = Package.objects.filter(teacher__institute__code = institute_code).select_related('teacher').order_by('-id')
        package_list = []
        for package in packages:
            total_days = package.duration
            months = total_days // 30
            remaining_days = total_days % 30
            
            package_dict =  {
                'id': package.id,
                'title': package.title,
                'price': package.price,
                'details': package.details,
                'thumbnail': package.thumbnail,
                'duration_months': months,
                'duration_days': remaining_days,
                'teacher': package.teacher.name,
            }
            package_list.append(package_dict)
            
        return render(request, 'content/package_buy.html',{'package_list': package_list})
    
def thumbnailUploadImage(request):
    user = Teach(request.user)
    username = user.profile.teacheruser.username
    institute = user.profile.institute.code
    input_name = request.POST.get('input_name')
    uploaded_file = request.FILES.get(input_name)
    file_name = (uploaded_file.name).replace(" ", "-")
    
    unique_code = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    new_timezone = pytz.timezone('Asia/Kolkata')
    time = str(datetime.datetime.now(new_timezone).strftime("%Y-%m-%d_%H-%M-%S"))
    final_file_name = f"{institute}/{username}-{time}-{unique_code}-{file_name}"
        
    bucket_name = 'videothumbnail'
    cred_file = '/home/azureuser/bodhiai/google_cloud_details.json'
    with open(cred_file, 'r') as json_file:
        credentials = json.load(json_file)
    
    storage_client = storage.Client.from_service_account_info(credentials)
    bucket = storage_client.bucket(bucket_name)
    
    content_type = uploaded_file.content_type
    blob = bucket.blob(final_file_name)
    blob.upload_from_file(uploaded_file,content_type=content_type)
    url = f"https://storage.googleapis.com/{bucket_name}/{final_file_name}"
    return JsonResponse(safe=False, data=url)

def teacher_ant_live3(request):
    user = request.user
    me = Teach(user)
    urls = ['https://bodhilive.info:5443/WebRTCAppEE/conference.html',
    ]

    hide_url = True  # Set this based on your condition to hide the URL

    return render(request, 'content/conference.html', {'urls': urls, 'hide_url': hide_url})
    

def teacher_ant_live4(request):
    return render(request, 'content/antPublish3.html')

def add_offline_test(request):
    me = Teach(request.user)
    teacher = me.profile
    institute_code = me.profile.institute.code
    print(institute_code)
    
    if request.method == 'GET':
        return render(request, 'content/add_offline_marks.html')
    else:
        try:
            test_name = request.POST.get('test_name')
            test_date = request.POST.get('test_date')
            questionFile = request.POST.get('question_file')
            
            subject1 = request.POST.get('subject1')
            subject2 = request.POST.get('subject2')
            subject3 = request.POST.get('subject3')
            subject4 = request.POST.get('subject4')
            subject5 = request.POST.get('subject5')
            subject6 = request.POST.get('subject6')
            subject7 = request.POST.get('subject7')
            subject8 = request.POST.get('subject8')
            
            subject1_marks = request.POST.get('subject1_marks')
            subject2_marks = request.POST.get('subject2_marks')
            subject3_marks = request.POST.get('subject3_marks')
            subject4_marks = request.POST.get('subject4_marks')
            subject5_marks = request.POST.get('subject5_marks')
            subject6_marks = request.POST.get('subject6_marks')
            subject7_marks = request.POST.get('subject7_marks')
            subject8_marks = request.POST.get('subject8_marks')
            file = request.FILES['file']
             
            if not file.name.endswith('.csv') and not file.name.endswith('.xlsx'):
                messages.error(request, 'This is not csv or xlsx file')
                return redirect('/content/add_offline_test_marks/')
            
            elif file.name.endswith('.csv'):
                file_values = pd.read_csv(file)
                print("read csv")
            else:
                file_values = pd.read_excel(file)

            student_username = file_values['Student phone Number*']
            sectionA = file_values['section A']
            sectionB = file_values['section B']
            sectionC = file_values['section C']
            sectionD = file_values['section D']
            sectionE = file_values['section E']
            sectionF = file_values['section F']
            sectionG = file_values['section G']
            sectionH = file_values['section H']
            
            final_list = list(zip(student_username, sectionA, sectionB, sectionC,sectionD,sectionE,sectionF,sectionG,sectionH))

            for student_username, sectionA, sectionB, sectionC,sectionD,sectionE,sectionF,sectionG,sectionH in final_list:
                student_username = str(student_username)+"@"+institute_code
                student = Student.objects.get(studentuser__username = student_username,institute__code=institute_code)
                
                try:
                    test = OfflineTest.objects.get(test_name = test_name)
                    
                except OfflineTest.DoesNotExist:
                    test = OfflineTest()
                    test.test_name = test_name
                    test.createdBy = teacher
                    test.test_date = test_date
                    if questionFile:
                        test.questionFile = questionFile
                    test.save()
                    
                if subject1:
                    try:
                        section = OfflineTestSection.objects.get(name=subject1)
                    except OfflineTestSection.DoesNotExist:
                        section = OfflineTestSection()
                        section.name = subject1
                        section.total_marks = subject1_marks
                        section.save()

                    testMarks = OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection = section
                    testMarks.obtained_marks = sectionA
                    testMarks.save()

                if subject2:
                    try:
                        section2 = OfflineTestSection.objects.get(name=subject2)
                    except OfflineTestSection.DoesNotExist:
                        section2 = OfflineTestSection()
                        section2.name = subject2
                        section2.total_marks = subject2_marks
                        section2.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section2
                    testMarks.obtained_marks = sectionB
                    testMarks.save()

                if subject3:
                    try:
                        section3 = OfflineTestSection.objects.get(name=subject3)
                    except OfflineTestSection.DoesNotExist:
                        section3 = OfflineTestSection()
                        section3.name = subject3
                        section3.total_marks = subject3_marks
                        section3.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section3
                    testMarks.obtained_marks = sectionC
                    testMarks.save()

                if subject4:
                    try:
                        section4 = OfflineTestSection.objects.get(name=subject4)
                    except OfflineTestSection.DoesNotExist:
                        section4 = OfflineTestSection()
                        section4.name = subject4
                        section4.total_marks = subject4_marks
                        section4.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section4
                    testMarks.obtained_marks = sectionD
                    testMarks.save()

                if subject5:
                    try:
                        section5 = OfflineTestSection.objects.get(name=subject5)
                    except OfflineTestSection.DoesNotExist:
                        section5 = OfflineTestSection()
                        section5.name = subject5
                        section5.total_marks = subject5_marks
                        section5.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section5
                    testMarks.obtained_marks = sectionE
                    testMarks.save()

                if subject6:
                    try:
                        section6 = OfflineTestSection.objects.get(name=subject6)
                    except OfflineTestSection.DoesNotExist:
                        section6 = OfflineTestSection()
                        section6.name = subject6
                        section6.total_marks = subject6_marks
                        section6.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section6
                    testMarks.obtained_marks = sectionF
                    testMarks.save()

                if subject7:
                    try:
                        section7 = OfflineTestSection.objects.get(name=subject7)
                    except OfflineTestSection.DoesNotExist:
                        section7 = OfflineTestSection()
                        section7.name = subject7
                        section7.total_marks = subject7_marks
                        section7.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section7
                    testMarks.obtained_marks = sectionG
                    testMarks.save()

                if subject8:
                    try:
                        section8 = OfflineTestSection.objects.get(name=subject8)
                    except OfflineTestSection.DoesNotExist:
                        section8 = OfflineTestSection()
                        section8.name = subject8
                        section8.total_marks = subject8_marks
                        section8.save()

                    testMarks =OfflineTestMarks()
                    testMarks.offline_test = test
                    testMarks.student= student
                    testMarks.testSection=section8
                    testMarks.obtained_marks = sectionH
                    testMarks.save()
            
            messages.success(request, 'Data Added Successfully')
            return redirect('/content/add_offline_test_marks/')      
        
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/add_offline_test_marks/')
        
def allPackagesList(request):
    me = Teach(request.user)
    institute_code = 'pcbtnursing'
    packages = Package.objects.filter(teacher__institute__code = institute_code).order_by('-id')
    
    context = {'packages': packages}
    return render(request, 'content/all_packages_list.html', context)
    
def CreateTest(request):
    if request.method == 'GET': 
        user = request.user
        me = Teach(user)
        subjects = me.profile.subjects.filter(subject_brought=False)
        batches = me.profile.batches.all()
        batches_list = []
        for batch in batches:
            batch_dict = {'id': batch.id, 'name': batch.name}
            batches_list.append(batch_dict)

        packages_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                packages = Package.objects.filter(teacher=teacher).order_by('-id')
                for package in packages:
                    packages_dict = {'id': package.id, 'title': package.title}
                    packages_list.append(packages_dict)
        else:
            packages = Package.objects.filter(sub_teacher=me.profile)
            for package in packages:
                packages_dict = {'id': package.id, 'title': package.title}
                packages_list.append(packages_dict)

        context = {
            'teacher': me.profile.teacheruser.username,
            'batches': batches_list, 
            'packages': packages_list,
            'subjects': subjects,
            }
        return render(request, 'content/test_create.html', context)
    
    else:
        me = Teach(request.user)
        subject_id = request.POST['subject']
        chapter_id = request.POST['chapter']
        test_name = request.POST['test_name']
        test_repeat = request.POST['test_repeat']
        show_test_ranking = request.POST['show_test_ranking']
        test_duration = request.POST['test_duration']
        batches = request.POST.getlist('batchListcheckbox')
        packages = request.POST.getlist('packageListcheckbox')
        question_file = request.FILES['file']
        
        try:
            test_count = int(request.POST['test_count'])
        except:
            test_count = None
        
        try:
            max_marks = float(request.POST['correct_check_mark'])
        except (KeyError, ValueError):
            max_marks = None
            
        try:
            negative_marks = request.POST['incorrect_check_mark']
        except (KeyError, ValueError):
            negative_marks = None

        try:
            passing_marks_str = request.POST['passing_marks']
            if passing_marks_str.strip():  # Check if the string is not empty after stripping whitespace
                passing_marks = float(passing_marks_str)
            else:
                passing_marks = round(max_marks / 3, 1) if max_marks is not None else None
        except (KeyError, ValueError):
            passing_marks = None
            
        try:
            subject = Subject.objects.get(id=subject_id)
            chapter = Chapter.objects.get(id=chapter_id, subject=subject)
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/create_test/')
        
        if not question_file.name.endswith('.csv') and not question_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not csv or xlsx file')
            return redirect('/content/create_test/')
        
        elif question_file.name.endswith('.csv'):
            question_file_values = pd.read_csv(question_file, encoding='latin1')
        else:
            question_file_values = pd.read_excel(question_file)
            
        question = question_file_values['Question']
        correct_option = question_file_values['Correct Option']
        direction = question_file_values.get('Direction', None)
        explanation = question_file_values.get('Explanation', None)
        optA = question_file_values['OptionA']
        optB = question_file_values['OptionB']
        optC = question_file_values['OptionC']
        optD = question_file_values['OptionD']
        
        final_list = list(zip(question, correct_option, direction, explanation, optA, optB, optC, optD))
        Imagetypes = ['.png', '.jpg', '.jpeg', '.tif', '.gif', '.PNG', '.JPG', '.JPEG', '.TIF', '.GIF']
        count = 0
        question_ids_set = set()
        total_marks = 0.0
        
        try:
            with transaction.atomic():
                for question, correct_option, direction, explanation, a, b, c, d in final_list:
                    count += 1
                    try:
                        if pd.isnull(direction):
                            direction = None
                        else:
                            if direction.endswith(tuple(Imagetypes)):
                                direction = Direction(picture=direction)
                                direction.save()
                            else:
                                direction = Direction(text=direction)
                                direction.save()

                        question_object = Question()
                        question_object.subject = subject
                        question_object.chapter = chapter
                        if str(question).endswith(tuple(Imagetypes)):
                            question_object.picture = question
                        else:
                            question_object.text = question

                        if direction:
                            question_object.direction = direction
                            
                        if max_marks != '0.0':
                            question_object.marks = max_marks

                        if negative_marks:
                            question_object.negativeMarks = negative_marks
                            
                        question_object.published = timezone.now()
                        question_object.save()

                        a = str(a)
                        b = str(b)
                        c = str(c)
                        d = str(d)
                        
                        if a.isdigit():
                            optionA = Option(text=a)
                        else:
                            optionA = Option(text=a)
                        optionA.question = question_object
                        optionA.save()

                        if b.isdigit():
                            optionB = Option(text=b)
                        else:
                            optionB = Option(text=b)
                        optionB.question = question_object
                        optionB.save()

                        if c.isdigit():
                            optionC = Option(text=c)
                        else:
                            optionC = Option(text=c)
                        optionC.question = question_object
                        optionC.save()

                        if d.isdigit():
                            optionD = Option(text=d)
                        else:
                            optionD = Option(text=d)
                        optionD.question = question_object
                        optionD.save()

                        options = str(correct_option).replace(" ", "")
                        for i in options:
                            if i.lower() == 'a' or i.lower() == '1':
                                optionA.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionA.explanationPicture = explanation
                                    else:
                                        optionA.explanationText = explanation
                                optionA.save()

                            elif i.lower() == 'b' or i.lower() == '2':
                                optionB.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionB.explanationPicture = explanation
                                    else:
                                        optionB.explanationText = explanation
                                optionB.save()

                            elif i.lower() == 'c' or i.lower() == '3':
                                optionC.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionC.explanationPicture = explanation
                                    else:
                                        optionC.explanationText = explanation
                                optionC.save()

                            elif i.lower() == 'd' or i.lower() == '4':
                                optionD.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionD.explanationPicture = explanation
                                    else:
                                        optionD.explanationText = explanation
                                optionD.save()

                        total_marks += float(question_object.marks)
                        question_ids_set.add(question_object.id)
                        
                    except Exception as e:
                        messages.error(request, f'Till now questions {count-1} add successfully but error found at question no.{count} please check question {count} ')
                        return redirect('/content/create_test/')
                    
                test_object = Test()
                test_object.createdBy = me.profile
                test_object.name = test_name
                test_object.test_count = test_count
                test_object.time = test_duration
                test_object.correct_check_mark = max_marks
                test_object.incorrect_check_mark = negative_marks
                test_object.totalMarks = total_marks
                test_object.passing_marks = passing_marks
                if (test_count != None and test_count > 1) or test_repeat == 1 :
                    test_object.repeatTest = True
                if show_test_ranking == 0 :
                    test_object.show_test_ranking = False
                else:
                    test_object.show_test_ranking = True
                test_object.save()
                test_object.subjects.add(subject)
                test_object.chapters.add(chapter)
                
                if batches:
                    for id in batches:
                        batch = Batch.objects.get(id = id)
                        test_object.batches.add(batch)
                
                if packages:    
                    for id in packages:
                        package = Package.objects.get(id = id)
                        package.tests.add(test_object)
                    
                questions_bank = Question.objects.filter(id__in = question_ids_set)
                test_object.questions.add(*questions_bank)
                
                messages.success(request, 'Test Created Successfully')
                return redirect('/content/create_test/')
        
        except Exception as e:
            Question.objects.filter(id__in = question_ids_set).delete()
            messages.error(request, str(e))
            return redirect('/content/create_test/')

def testsForEdit(request):
    if request.method == 'GET': 
        me = Teach(request.user)
        package_id = request.GET['package_id']
        package = Package.objects.get(id = package_id)
        tests = package.tests.all().order_by('-id')
        
        context = {'tests': tests}
        return render(request, 'content/tests_for_edit.html', context)
    
def teacherDeleteTest(request):
    user = request.user
    me = Teach(user)
    test_id = request.GET.get('test_id')
    Test.objects.get(id=test_id).delete()
    return HttpResponse('Deleted Successfully')

def teacherChangeRankStatus(request):
    user = request.user
    test_id = request.GET.get('test_id')
    try:
        test = Test.objects.get(id=test_id)
        if test.show_test_ranking is None or not test.show_test_ranking:
            test.show_test_ranking = True
        else:
            test.show_test_ranking = False
        test.save()
        return HttpResponse('Status Change Successfully')
    except Test.DoesNotExist:
        return HttpResponse('Test not found', status=404)
    except Exception as e:
        return HttpResponse(f'An error occurred: {e}', status=500)
    
def teacherChangePublishStatus(request):
    user = request.user
    test_id = request.GET.get('test_id')
    try:
        test = Test.objects.get(id=test_id)
        if test.publish is None or not test.publish:
            test.publish = True
        else:
            test.publish = False
        test.save()
        return HttpResponse('Status Change Successfully')
    except Test.DoesNotExist:
        return HttpResponse('Test not found', status=404)
    except Exception as e:
        return HttpResponse(f'An error occurred: {e}', status=500)

def teacherEditTest(request):
    me = Teach(request.user)
    if request.method == 'GET':
        test_id = request.GET['test_id']
        test = Test.objects.get(id = test_id)
        
        context = {
            'test':test,
            'test_id': test_id,
            'questions': test.questions.all()
        }
        return render(request, 'content/teacher_edit_test.html', context)
    
def editTestBasic(request):
    user = request.user
    me = Teach(user)
    if request.method == 'GET':
        test_id = request.GET['test_id']
        test = Test.objects.get(id = test_id)
        
        context = {'test':test,'test_id': test_id,}
        return render(request, 'content/edit_test_details.html', context)
    else:
        me = Teach(request.user)
        test_id = request.POST['test_id']
        test_name = request.POST['test_name']
        test_duration = request.POST['test_duration']
        total_marks = request.POST['total_marks']
        test_publish = request.POST['test_publish']
        
        try:
            test_count = int(request.POST['test_count'])
        except:
            test_count = None
        
        try:
            max_marks = float(request.POST['correct_check_mark'])
        except (KeyError, ValueError):
            max_marks = None
            
        try:
            negative_marks = request.POST['incorrect_check_mark']
        except (KeyError, ValueError):
            negative_marks = None

        try:
            passing_marks_str = request.POST['passing_marks']
            if passing_marks_str.strip():  # Check if the string is not empty after stripping whitespace
                passing_marks = float(passing_marks_str)
            else:
                passing_marks = round(max_marks / 3, 1) if max_marks is not None else None
        except (KeyError, ValueError):
            passing_marks = None
            
        test = Test.objects.get(id=test_id)
        test.name = test_name
        test.totalMarks = total_marks
        test.time = test_duration
        test.test_count = test_count
        test.correct_check_mark = max_marks
        test.incorrect_check_mark = negative_marks
        test.passing_marks = passing_marks
        test.publish = test_publish
        test.save()
        
        questions = test.questions.all()
        for question in questions:
            try:
                question.marks = max_marks
                question.negativeMarks = negative_marks
                question.save()
            except Question.DoesNotExist:
                continue
        
        messages.success(request, 'Test Updated Successfully')
        return redirect(request.META.get('HTTP_REFERER'))
        
def deleteTestQuestion(request):
    user = request.user
    me = Teach(user)
    try:
        question_id = request.GET.get('question_id')
        question = Question.objects.get(id=question_id)
        
        test_id = request.GET.get('test_id')
        test = Test.objects.get(id = test_id)
        total_marks = test.totalMarks
        remaining_marks = total_marks - float(question.marks)
        test.totalMarks = remaining_marks
        test.save()
        
        question.delete()
        
        return HttpResponse('Deleted Successfully')       
    except Exception as e:
        return HttpResponse(str(e))   
    
def teacherEditTestQuestion(request):
    user = request.user
    me = Teach(user)
    if request.method == 'POST':
        question_id = request.POST.get('question_id')
        dynamictext = request.POST.get('dynamicText')
        text = request.POST.get('text')
        explanation = request.POST.get('explanation')
        direction_text = request.POST.get('direction_text')
        direction_image = request.POST.get('direction_image')
        correctOption = request.POST.getlist('correctOption')
        pictureUrl = request.POST.get('pictureUrlField')

        oneWordtext = request.POST.get('oneWordtext')
        oneWordanswer = request.POST.get('oneWordanswer')
        oneWordexplanation = request.POST.get('oneWordexplanation')

        optionA_text = request.POST.get('option1')
        optionB_text = request.POST.get('option2')
        optionC_text = request.POST.get('option3')
        optionD_text = request.POST.get('option4')
        optionE_text = request.POST.get('option5')

        optionAImage = request.POST.get('option_imageA')
        optionBImage = request.POST.get('option_imageB')
        optionCImage = request.POST.get('option_imageC')
        optionDImage = request.POST.get('option_imageD')
        optionEImage = request.POST.get('option_imageE')

        explanationOldVideo = request.POST.get('explanationOldVideo')
        explanationNewVideo = request.POST.get('explanationNewVideo')

        question = Question.objects.get(id=question_id)
        if question.oneWordQuestion == True:
            print('onewoed')
            question.text = oneWordtext
            question.oneWordAnswer = oneWordanswer.lower()
            if oneWordexplanation:
                question.oneWordExplanation = oneWordexplanation
        else:
            if text:
                question.text = text
            else:
                question.dynamicText = dynamictext
                
        direction_data = {
            'text': direction_text,
            'picture': direction_image
        }
        
        if question.direction:
            direction = question.direction
            for field, value in direction_data.items():
                setattr(direction, field, value)
            direction.save()
        else:
            if direction_text or direction_image:
                direction = Direction.objects.create(**direction_data)
                question.direction = direction
                question.save()

        question.source = 'self'
        if pictureUrl:
            question.picture = pictureUrl
        question.save()

        options = Option.objects.filter(question_id=question_id)
        for index, i in enumerate(options):
            if i.text in correctOption:
                i.correct = True
                i.explanation = explanation
                if explanationNewVideo:
                    i.explanationVideo = explanationNewVideo
                else:
                    i.explanationVideo = explanationOldVideo
            else:
                i.correct = False

            if index == 0 and optionA_text:
                i.text = optionA_text.upper()
            if index == 1 and optionB_text:
                i.text = optionB_text.upper()
            if index == 2 and optionC_text:
                i.text = optionC_text.upper()
            if index == 3 and optionD_text:
                i.text = optionD_text.upper()
            if index == 4 and optionE_text:
                i.text = optionE_text.upper()

            if index == 0 and optionAImage:
                i.picture = optionAImage
            if index == 1 and optionBImage:
                i.picture = optionBImage
            if index == 2 and optionCImage:
                i.picture = optionCImage
            if index == 3 and optionDImage:
                i.picture = optionDImage
            if index == 4 and optionEImage:
                i.picture = optionEImage

            i.question = question
            i.save()
    
        messages.success(request, 'Question Updated Successfully')
        return redirect(request.META.get('HTTP_REFERER'))
    else:
        question_id = request.GET['question_id']
        options = Option.objects.filter(question=question_id)
        questionObj = Question.objects.get(id=question_id)
        subjects = me.profile.subjects.filter(subject_brought=False)
        form = UploadQuestionForm()
        form.fields["dynamicText"].initial = questionObj.dynamicText
        optionForm = UploadoptionForm()
        for i in options:
            if i.correct == True:
                optionForm.fields["explanation"].initial = i.explanation
                break
        context = {
            'options': options, 
            'subjects': subjects,
            'questionObj': questionObj, 
            'form': form, 
            'optionForm': optionForm,
            }
        return render(request, 'content/teacher_edit_test_question.html', context)
    
def teacherAddTestQuestion(request):
    me = Teach(request.user)
    if request.method == "POST":
        test_id = request.POST['test_id']
        question_file = request.FILES['file']
        test = Test.objects.get(id = test_id)
        subject = test.subjects.first()
        chapter = test.chapters.first()
        max_marks = test.correct_check_mark
        negative_marks = test.incorrect_check_mark
        test_total_marks = test.totalMarks
        
        if not question_file.name.endswith('.csv') and not question_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not csv or xlsx file')
            return redirect('/content/teacher_add_test_question/')
        
        elif question_file.name.endswith('.csv'):
            question_file_values = pd.read_csv(question_file, encoding='latin1')
        else:
            question_file_values = pd.read_excel(question_file)
            
        question = question_file_values['Question']
        correct_option = question_file_values['Correct Option']
        direction = question_file_values.get('Direction', None)
        explanation = question_file_values.get('Explanation', None)
        optA = question_file_values['OptionA']
        optB = question_file_values['OptionB']
        optC = question_file_values['OptionC']
        optD = question_file_values['OptionD']
        
        final_list = list(zip(question, correct_option, direction, explanation, optA, optB, optC, optD))
        Imagetypes = ['.png', '.jpg', '.jpeg', '.tif', '.gif', '.PNG', '.JPG', '.JPEG', '.TIF', '.GIF']
        count = 0
        question_ids_set = set()
        total_marks = 0.0
        
        try:
            with transaction.atomic():
                for question, correct_option, direction, explanation, a, b, c, d in final_list:
                    count += 1
                    try:
                        if pd.isnull(direction):
                            direction = None
                        else:
                            if direction.endswith(tuple(Imagetypes)):
                                direction = Direction(picture=direction)
                                direction.save()
                            else:
                                direction = Direction(text=direction)
                                direction.save()

                        question_object = Question()
                        question_object.subject = subject
                        question_object.chapter = chapter
                        if str(question).endswith(tuple(Imagetypes)):
                            question_object.picture = question
                        else:
                            question_object.text = question

                        if direction:
                            question_object.direction = direction
                            
                        if max_marks != '0.0':
                            question_object.marks = max_marks

                        if negative_marks:
                            question_object.negativeMarks = negative_marks
                            
                        question_object.published = timezone.now()
                        question_object.save()

                        a = str(a)
                        b = str(b)
                        c = str(c)
                        d = str(d)
                        
                        if a.isdigit():
                            optionA = Option(text=a)
                        else:
                            optionA = Option(text=a)
                        optionA.question = question_object
                        optionA.save()

                        if b.isdigit():
                            optionB = Option(text=b)
                        else:
                            optionB = Option(text=b)
                        optionB.question = question_object
                        optionB.save()

                        if c.isdigit():
                            optionC = Option(text=c)
                        else:
                            optionC = Option(text=c)
                        optionC.question = question_object
                        optionC.save()

                        if d.isdigit():
                            optionD = Option(text=d)
                        else:
                            optionD = Option(text=d)
                        optionD.question = question_object
                        optionD.save()

                        options = str(correct_option).replace(" ", "")
                        for i in options:
                            if i.lower() == 'a' or i.lower() == '1':
                                optionA.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionA.explanationPicture = explanation
                                    else:
                                        optionA.explanationText = explanation
                                optionA.save()

                            elif i.lower() == 'b' or i.lower() == '2':
                                optionB.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionB.explanationPicture = explanation
                                    else:
                                        optionB.explanationText = explanation
                                optionB.save()

                            elif i.lower() == 'c' or i.lower() == '3':
                                optionC.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionC.explanationPicture = explanation
                                    else:
                                        optionC.explanationText = explanation
                                optionC.save()

                            elif i.lower() == 'd' or i.lower() == '4':
                                optionD.correct = True
                                if pd.isnull(explanation):
                                    pass
                                else:
                                    if explanation.endswith(tuple(Imagetypes)):
                                        optionD.explanationPicture = explanation
                                    else:
                                        optionD.explanationText = explanation
                                optionD.save()

                        total_marks += float(question_object.marks)
                        question_ids_set.add(question_object.id)
                        
                    except Exception as e:
                        messages.error(request, f'Till now questions {count-1} add successfully but error found at question no.{count} please check question {count} ')
                        return redirect('/content/teacher_add_test_question/')

                questions_bank = Question.objects.filter(id__in = question_ids_set)
                test.questions.add(*questions_bank)
                test_total_marks += total_marks
                test.totalMarks = test_total_marks
                test.save()
                
                messages.success(request, 'Question Added in Test')
                return redirect(request.META.get('HTTP_REFERER'))
        
        except Exception as e:
            messages.error(request, str(e))
            return redirect(request.META.get('HTTP_REFERER'))
            
    else:
        try:
            test_id = request.GET['test_id']
        except:
            test_id = None
            
        context = {'test_id': test_id}
        return render(request, 'content/teacher_add_test_question.html', context)

def batchWiseTest(request):
    if request.method == 'GET': 
        user = request.user
        me = Teach(user)
        batches = me.profile.batches.all()
        tests = Test.objects.filter(batches__in = batches, createdBy = me.profile).order_by('-id')

        context = {'teacher': me.profile.teacheruser.username, 'tests': tests}
        return render(request, 'content/batch_test.html', context)
    
        


                    
                    
                    







                
                
        
            
            
    
def uploadJobInfo(request):
    me = Teach(request.user)
    if request.method == 'GET':
        institute_code = 'pcbtnursing'
        form = JobInformationForm()
    
        context = {
            'form': form,
            'institute_code': institute_code
        }
        return render(request, 'content/job_portal.html', context)
    
    else:
        form = JobInformationForm()
        
        try:
            title = request.POST.get('title')
            description = request.POST.get('description')
            image_url = request.POST.get('job_image')  
            pdf_url = request.POST.get('job_pdf')
            post = request.POST.get('post')
            total_post = request.POST.get('total_post')
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')
            official_link = request.POST.get('official_link')
            
            job_info = JobInformation(
                teacher=me.profile,
                title=title,
                description=description,
                image=image_url,
                pdf=pdf_url,
                post=post,
                total_post=total_post,
                start_date=start_date,
                end_date=end_date,
                official_link=official_link,
            )
            job_info.save()

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"New Job","body": f'A New Job {job_info.title} has been posted for you by {me.profile.name}',}
            institute_code = me.profile.institute.code
            batch = Batch.objects.get(institute__code=institute_code, name__icontains="outer")
            
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch.id))
            else:
                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch.id))
                
            messages.success(request, 'Job information uploaded successfully!')
            return redirect('content:upload_job_info')  

        except Exception as e:
            messages.error(request, f'An error occurred: {str(e)}')
            print(f'Error uploading job information: {e}')

    context = {'form': form,'institute_code': 'pcbtnursing'}
    return render(request, 'content/job_portal.html', context)

def allJobList(request):
    me = Teach(request.user)
    institute_code = 'pcbtnursing'
    jobs = JobInformation.objects.filter(teacher__institute__code = institute_code).order_by('-id')
    
    context = {'jobs': jobs}
    return render(request, 'content/all_jobs_list.html', context)

def teacherDeleteJob(request):
    user = request.user
    me = Teach(user)
    job_id = request.GET.get('job_id')
    JobInformation.objects.get(id=job_id).delete()
    return HttpResponse('Deleted Successfully')

def teacherEditJob(request):
    me = Teach(request.user)
    job_id = request.GET.get('job_id') if request.method == 'GET' else request.POST.get('job_id')
    try:
        job_info = JobInformation.objects.get(id=job_id)
    except JobInformation.DoesNotExist:
        messages.error(request, 'Job information not found.')
        return redirect('content:upload_job_info')

    if request.method == 'GET':
        form = JobInformationForm(instance=job_info)
        
        context = {
            'form': form,
            'institute_code': 'pcbtnursing',
            'job_info': job_info
        }
        return render(request, 'content/edit_job.html', context)
    
    elif request.method == 'POST':
        try:
            title = request.POST.get('title')
            description = request.POST.get('description')
            image_url = request.POST.get('job_image')
            pdf_url = request.POST.get('job_pdf')
            post = request.POST.get('post')
            total_post = request.POST.get('total_post')
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')
            official_link = request.POST.get('official_link')

            job_info.title = title
            job_info.description = description
            job_info.pdf=pdf_url
            job_info.post=post
            job_info.total_post=total_post
            job_info.start_date=start_date
            job_info.end_date=end_date
            job_info.pdf=pdf_url
            job_info.image = image_url  
            job_info.official_link=official_link
            job_info.save()  
            messages.success(request, 'Job information updated successfully!')
            return redirect('content:all_job_list')

        except Exception as e:
            messages.error(request, f'An error occurred: {str(e)}')
            print(f'Error updating job information: {e}')

    context = {
        'form': form,
        'institute_code': 'pcbtnursing',
        'job_info': job_info
    }
    return render(request, 'content/edit_job_portal.html', context)


def deleteUser(request, institute_code):
    if request.method == 'GET':
        return render(request, 'content/delete_user.html', {'institute_code':institute_code})
    else:
        try:
            phone = request.POST['phone']
            if phone == '1112223330' or phone == '1112223333':
                messages.error(request, 'This number can not be delete. this is using for demo purpose.')
                return render(request, 'content/delete_user.html', {'institute_code':institute_code})
            else:
                username = phone+'@'+institute_code
                user = User.objects.get(username = username)
                user.delete()
                messages.success(request, 'User Delete Successfully')
                return render(request, 'content/delete_user.html', {'institute_code':institute_code})

        except Exception as e:
            messages.error(request, str(e))
            return render(request, 'content/delete_user.html', {'institute_code':institute_code})
        
def deleteTeacher(request):
    if request.method == 'GET':
        return render(request, 'content/delete_teacher.html')
    else:
        try:
            username = request.POST['username']
            user = User.objects.get(username = username)
            messages.success(request, 'Teacher Delete Successfully')
            return render(request, 'content/delete_teacher.html')

        except Exception as e:
            messages.error(request, str(e))
            return render(request, 'content/delete_teacher.html')
        
    

def teacherUploadNotes(request):
    me = Teach(request.user)
    if request.method == 'POST':
        try:
            title = request.POST['title']
            url = request.POST['url']
            chapter_id = request.POST['chapter_id']
            batch_list_string = request.POST['batchList']
            topic = request.POST['topic_id']
            subTopic = request.POST['subTopic_id']
            batch_list_new = batch_list_string.replace("\"", "")
            batch_list = batch_list_new.split(',')

            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            
            upload_note = Note()
            upload_note.title = title
            upload_note.subject = subject
            upload_note.chapter = chapter
            upload_note.save()
            if topic:
                upload_note.topic.add(topic)
            if subTopic:
                upload_note.subTopic.add(subTopic)

            for bat in batch_list:
                batch = Batch.objects.get(id=int(bat))

                try:
                    teacher_id = me.profile.id
                    message = f'A new note {title} of {subject.name} has been uploaded for you by {me.profile.name}'
                    title = 'New Note'
                    screen = url
                    category = 'note'
                    thumbnail = None
                    id = upload_note.id
                    bulk_clickable_notification_batches.delay(teacher_id, batch.id, message, title, screen, category, thumbnail, id, 20000)
                except:
                    pass
                
                upload_note.batches.add(batch)
                upload_note.save()

            note_url_object = NoteURL(link=url, note=upload_note)
            note_url_object.save()

            upload_note.teacher.add(me.profile)

            context = {'Note Successfully Uploaded {}'.format(note_url_object.link)}
            return HttpResponse(context, status=200)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    else:
        username = me.profile.teacheruser.username
        subjects = me.profile.subjects.filter(subject_brought=False)
        batches = me.profile.batches.all()
        context = {'subjects': subjects, 'batches': batches, 'username': username}
        return render(request, 'content/teacher_upload_notes.html', context)
                 
def notesForEdit(request):
    me = Teach(request.user)
    if request.method == 'POST':
        chapter_id = request.POST.get('chapter_id')
        subjects = me.profile.subjects.filter(subject_brought=False)
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        notes = Note.objects.filter(Q(subject=subject) & Q(chapter=chapter), teacher=me.profile).order_by('-id')
        context = {'notes': notes, 'subjects': subjects, 'selectedChapter': chapter}
        return render(request, 'content/all_notes_for_edit.html', context)
    else:
        subjects = me.profile.subjects.filter(subject_brought=False)
        return render(request, 'content/all_notes_for_edit.html', {'subjects': subjects})
    
def TeacherDeleteNotes(request):
    me = Teach(request.user)
    try:
        note_id = request.GET.get('note_id')
        Note.objects.get(id=note_id).delete()
        return HttpResponse('Deleted Successfully')
    except Exception as e:
        return HttpResponse(str(e)) 
    
def TeacherEditNotes(request):
    me = Teach(request.user)
    if request.method == 'POST':
        note_id = request.POST.get('note_id')
        batch_list_string = request.POST['batchList']
        topic = request.POST.get('topic_id')
        subTopic = request.POST.get('subTopic_id')
        
        try:
            update_note = Note.objects.get(id=note_id)
            title = request.POST.get('title')
            if title:
                update_note.title = title
            
            chapter_id = request.POST.get('chapter_id')
            if chapter_id:
                chapter = Chapter.objects.get(id=chapter_id)
                subject = chapter.subject
                update_note.subject = subject
                update_note.chapter = chapter
                update_note.save()

            if batch_list_string:
                batch_list_new = batch_list_string.replace("\"", "")
                batch_list = batch_list_new.split(',')
                for bat in batch_list:
                    batch = Batch.objects.get(id=int(bat))
                    update_note.batches.add(batch)
                update_note.save()
            
            url = request.POST.get('note_url')
            if url:
                note_url_object = NoteURL(link=url, note=update_note)
                note_url_object.save()
            
            if topic:
                update_note.topic.add(topic)
                
            if subTopic:
                update_note.subTopic.add(subTopic)

            update_note.teacher.add(me.profile)
            messages.success(request, 'Note Updated Successfully')
            response = {
                'status': 'success',
                'message': 'Note Updated Successfully',
                'note_id': update_note.id,
            }
        except Exception as e:
            messages.error(request, str(e))
            response = {
                'status': 'error',
                'message': str(e),
            }
        return JsonResponse(response)
    
    else:
        username = me.profile.teacheruser.username
        note_id = request.GET['note_id']
        noteObj = Note.objects.get(id=note_id)
        subjects = me.profile.subjects.filter(subject_brought=False)
        batches = me.profile.batches.all()
        noteBatches = noteObj.batches.all().values_list('id', flat=True)
        topics = noteObj.topic.all()
        subtopics = noteObj.subTopic.all()
        
        try:
            note_url = NoteURL.objects.get(note=noteObj).link
        except NoteURL.DoesNotExist:
            note_url = None

        context = {
            'username': username,
            'note': noteObj, 
            'note_url': note_url,
            'subjects': subjects, 
            'noteBatches': noteBatches,
            'batches': batches,
            'topics': topics,
            'subtopics': subtopics,
            }
        return render(request, 'content/teacher_edit_note.html', context)
    
def principleAddInstitute(request):
    me = Teach(request.user)
    if request.method == 'GET': 
        return render(request, 'content/principle_institute_add.html')
    else:
        puser = User.objects.get(username="MenntaAdmin")
        
        institute_file = request.FILES['file']
        
        if not institute_file.name.endswith('.csv') and not institute_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not a csv or xlsx file')
            return redirect('/content/principle_institute/')
        
        if institute_file.name.endswith('.csv'):
            institute_file_values = pd.read_csv(institute_file, encoding='latin1')
        else:
            institute_file_values = pd.read_excel(institute_file)
            
        institute_file_values['Institute Name'] = institute_file_values['Institute Name'].apply(
            lambda x: re.sub(r'^"+|"+$', '', x).replace('"', '')[:255]  # Truncate to 255 characters
        )
            
        institute_name = institute_file_values['Institute Name']
        institute_code = institute_file_values['Institute Code']
        phone = institute_file_values['Phone']
        teacher_username = institute_file_values['Main Teacher Username']
        board = institute_file_values['Board']
        state = institute_file_values['State']
        city = institute_file_values['City']
        password = '123'
        
        final_list = list(zip(institute_name, institute_code, phone, teacher_username, board, state, city))
        count = 0
        
        try:
            with transaction.atomic():
                for iname, icode, phone, tusername, board, state, city in final_list:
                    count += 1
                    try:
                        board_object = Board.objects.get(id=board)
                        state_object = State.objects.get(id=state)
                        city_object = City.objects.get(id=city)
                        
                        try:
                            Institute.objects.get(code=icode)
                            messages.error(request, f'This Code Already Exist {iname}')
                        except Institute.DoesNotExist:
                            institute_object = Institute()
                            institute_object.name = iname[:255]
                            institute_object.code = icode
                            institute_object.phoneNumber=phone
                            institute_object.save()
                            
                            batch = Batch()
                            batch.name = 'Outer'
                            batch.institute = institute_object
                            batch.save()
                            
                            user = User.objects.create_user(username=tusername, password=password, email=None)
                            group = Group.objects.get(name='Teachers')
                            group.user_set.add(user)
                            teacher = Teacher(
                                teacheruser=user, 
                                name=f'{iname} Teacher',
                                institute=institute_object, 
                                mainTeacher=True
                                )
                            batches = Batch.objects.filter(institute=institute_object)
                            teacher.save()
                            
                            for bat in batches:
                                teacher.batches.add(bat)
                                teacher.save()
                                
                        board_institute = BoardInstitutes(
                            institute=institute_object,
                            board=board_object,
                            state=state_object,
                            city=city_object
                            )
                        board_institute.save()
                        
                        principal_institute = Principle.objects.get(teacheruser=puser)
                        principal_institute.institute.add(institute_object)
                        
                    except Board.DoesNotExist:
                        messages.error(request, f'Board not found for institute {iname}')
                    except State.DoesNotExist:
                        messages.error(request, f'State not found for institute {iname}')
                    except City.DoesNotExist:
                        messages.error(request, f'City not found for institute {iname}')
                    except Exception as e:
                        messages.error(request, f'Error at institute {count}: {str(e)}')
                        return redirect('/content/principle_institute/')
                        
            messages.success(request, 'All institutes added successfully')
            return redirect('/content/principle_institute/')
        
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/principle_institute/')
        
def uploadYoutubeVideoBulk(request):
    me = Teach(request.user)
    if request.method == 'GET': 
        return render(request, 'content/upload_youtube_video.html')
    else:
        video_file = request.FILES['file']
        
        if not video_file.name.endswith('.csv') and not video_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not a csv or xlsx file')
            return redirect('/content/upload_youtube_video_bulk/')
        
        if video_file.name.endswith('.csv'):
            video_file_values = pd.read_csv(video_file, encoding='latin1')
        else:
            video_file_values = pd.read_excel(video_file)
            
        video_file_values.fillna('', inplace=True)
            
        video_title = video_file_values['Video Title']
        link = video_file_values['Link']
        subject_id = video_file_values['Subject Id']
        chapter_code = video_file_values['Chapter Code'].astype(float)
        batches = video_file_values['Batches']
        package = video_file_values['Package'].fillna('')
        
        final_list = list(zip(video_title, link, subject_id, chapter_code, batches, package))
        count = 0
        
        try:
            with transaction.atomic():
                for title, link, sid, ccode, batches, package in final_list:
                    print(sid)   
                    print(ccode)
                    count += 1
                    try:
                        try:
                            subject = Subject.objects.get(id=sid)
                        except Subject.DoesNotExist:
                            messages.error(request, f'Error at data {count}: Subject with id {sid} does not exist.')
                            return redirect('/content/upload_youtube_video_bulk/')
                        
                        try:
                            chapter = Chapter.objects.get(subject=subject, code=ccode)
                        except Chapter.DoesNotExist:
                            messages.error(request, f'Error at data {count}: Chapter with code {ccode} for subject {subject.name} does not exist.')
                            return redirect('/content/upload_youtube_video_bulk/')
                      
                        video = Video()
                        video.subject = subject
                        video.chapter = chapter
                        video.title = title
                        video.urlLink = link.replace("\"", "")
                        video.generalVideo = False
                        video.save()
                        video.teacher.add(me.profile)
                        
                        
                        if batches:
                            try:
                                batch = Batch.objects.get(id=batches)
                                video.batches.add(batch)
                            except Batch.DoesNotExist:
                                messages.error(request, f'Error at data {count}: Batch with id {batches} does not exist.')
                                return redirect('/content/upload_youtube_video_bulk/')
                        
                        if package:
                            try:
                                package = Package.objects.get(id=package)
                                package.videos.add(video)
                            except Package.DoesNotExist:
                                messages.error(request, f'Error at data {count}: Package with id {package} does not exist.')
                                return redirect('/content/upload_youtube_video_bulk/')
                    
                    except Exception as e:
                        messages.error(request, f'Error at data {count}: {str(e)}')
                        return redirect('/content/upload_youtube_video_bulk/')
                        
            messages.success(request, 'All Data upload successfully')
            return redirect('/content/upload_youtube_video_bulk/')
        
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/upload_youtube_video_bulk/')
        
def uploadYoutubeVideoBulk2(request):
    if request.method == 'GET': 
        return render(request, 'content/upload_youtube_video.html')
    else:
        video_file = request.FILES['file']
        
        if not video_file.name.endswith('.csv') and not video_file.name.endswith('.xlsx'):
            messages.error(request, 'This is not a csv or xlsx file')
            return redirect('/content/upload_youtube_video_bulk/')
        
        if video_file.name.endswith('.csv'):
            video_file_values = pd.read_csv(video_file, encoding='latin1')
        else:
            video_file_values = pd.read_excel(video_file)
            
        video_file_values.fillna('', inplace=True)
            
        video_title = video_file_values['Video Title']
        link = video_file_values['Link']
        subject_id = video_file_values['Subject Id']
        chapter_code = video_file_values['Chapter Code'].astype(float)
        batches = video_file_values['Batches']
        package = video_file_values['Package'].fillna('')
        
        final_list = list(zip(video_title, link, subject_id, chapter_code, batches, package))
        count = 0
        
        try:
            with transaction.atomic():
                for title, link, sid, ccode, batches, package in final_list:
                    count += 1
                    try:
                        try:
                            subject = Subject.objects.get(id=sid)
                        except Subject.DoesNotExist:
                            messages.error(request, f'Error at data {count}: Subject with id {sid} does not exist.')
                            return redirect('/content/upload_youtube_video_bulk/')
                        
                        try:
                            chapter = Chapter.objects.get(subject=subject, code=ccode)
                        except Chapter.DoesNotExist:
                            messages.error(request, f'Error at data {count}: Chapter with code {ccode} for subject {subject.name} does not exist.')
                            return redirect('/content/upload_youtube_video_bulk/')
                      
                        video = Video()
                        video.subject = subject
                        video.chapter = chapter
                        video.title = title
                        video.urlLink = link.replace("\"", "")
                        video.generalVideo = False
                        video.save()
                        
                        
                        
                        if batches:
                            try:
                                batch = Batch.objects.get(id=batches)
                                video.batches.add(batch)
                            except Batch.DoesNotExist:
                                messages.error(request, f'Error at data {count}: Batch with id {batches} does not exist.')
                                return redirect('/content/upload_youtube_video_bulk/')
                        
                        if package:
                            try:
                                package = Package.objects.get(id=package)
                                package.videos.add(video)
                            except Package.DoesNotExist:
                                messages.error(request, f'Error at data {count}: Package with id {package} does not exist.')
                                return redirect('/content/upload_youtube_video_bulk/')
                    
                    except Exception as e:
                        messages.error(request, f'Error at data {count}: {str(e)}')
                        return redirect('/content/upload_youtube_video_bulk/')
                        
            messages.success(request, 'All Data upload successfully')
            return redirect('/content/upload_youtube_video_bulk/')
        
        except Exception as e:
            messages.error(request, str(e))
            return redirect('/content/upload_youtube_video_bulk/')

def uploadQuestionVideo(request):
    me = Teach(request.user)
    username = me.profile.teacheruser.username
    if request.method == 'GET':
        return render(request, 'content/upload_question_video.html',{'username':username})
    
def contestTestList(request):
    me = Teach(request.user)
    if request.method == 'GET':
        quiz_categories = QuizCategory.objects.all().order_by('-id')
        context = {
            'username': me.profile.teacheruser.username,
            'quiz_categories': quiz_categories,
        }
        return render(request, 'content/contest-test-list.html', context) 
    else:
        quiz_categories = QuizCategory.objects.all().order_by('-id')
        quiz_id = request.POST['quiz_category']
        quiz_category = QuizCategory.objects.get(id = quiz_id)
        contest_id = request.POST['contest_category']
        contest_category = ContestCategory.objects.get(id = contest_id)
        contest_tests = ContestTest.objects.filter(contest_category = contest_category)

        selectedQuizCategory = quiz_category
        selectedContest = contest_category
        tests = [
            {
                'id': test.id,
                'title': test.title,
                'entry_fee': test.entry_fee,
                'max_participants': test.max_participants,
            } 
            for test in contest_tests
        ]
        context = {
            'selectedQuizCategory': selectedQuizCategory,
            'selectedContest': selectedContest,
            'quiz_categories': quiz_categories, 
            'tests': tests
            }
        return render(request, 'content/contest-test-list.html', context)

def teacherDeleteContestTest(request):
    user = request.user
    me = Teach(user)
    test_id = request.GET.get('test_id')
    ContestTest.objects.get(id=test_id).delete()
    return HttpResponse('Deleted Successfully')

def createTestForContest(request):
    if request.method == 'GET': 
        me = Teach(request.user)
        quiz_categories = QuizCategory.objects.all().order_by('-id')
        context = {
            'username': me.profile.teacheruser.username,
            'quiz_categories': quiz_categories,
            }
        return render(request, 'content/contest-test-create.html', context)
    else:
        me = Teach(request.user)
        quiz_category_id = request.POST.get('quiz_category')
        contest_category_id = request.POST.get('contest_category')
        title = request.POST.get('test_name')
        max_participants = request.POST.get('max_participants')
        entry_fee = request.POST.get('entry_fee')
        test_instructions = request.POST.get('test_instructions', '') 
        
        try:
            quiz_category = QuizCategory.objects.get(id=quiz_category_id)
            contest_category = ContestCategory.objects.get(id=contest_category_id)
        except QuizCategory.DoesNotExist:
            messages.error(request, "Selected quiz category does not exist.")
            return redirect('create_test_for_contest')  
        except ContestCategory.DoesNotExist:
            messages.error(request, "Selected contest category does not exist.")
            return redirect('create_test_for_contest')  
        
        selectedQuizCategory = quiz_category
        selectedContest = contest_category

        try:
            ContestTest.objects.create(
                contest_category=contest_category,
                created_by=me.profile,
                title=title,
                max_participants=int(max_participants),
                entry_fee=int(entry_fee),
                test_instructions=test_instructions
            )

            context = {'selectedQuizCategory':selectedQuizCategory,'selectedContest':selectedContest}
            messages.success(request, "Test Created Successfully!")
            return render(request, 'content/contest-test-create.html', context)
        except Exception as e:
            messages.error(request, f"An error occurred: {str(e)}")
            return redirect('create_test_for_contest') 

def editTestForContest(request):
    me = Teach(request.user)
    test_id = request.GET.get('test_id') if request.method == 'GET' else request.POST.get('test_id')
    try:
        test = ContestTest.objects.get(id=test_id)
    except ContestTest.DoesNotExist:
        messages.error(request, "Test not found.")
        return redirect('create_test_for_contest')  

    quiz_categories = QuizCategory.objects.all().order_by('-id')
    
    if request.method == 'GET':
        selectedQuizCategory = test.contest_category.quiz_category
        selectedContest = test.contest_category
        
        context = {
            'username': me.profile.teacheruser.username,
            'quiz_categories': quiz_categories,
            'test': test,
            'selectedQuizCategory': selectedQuizCategory,
            'selectedContest': selectedContest,
        }
        return render(request, 'content/contest-test-edit.html', context) 
    else:
        quiz_category_id = request.POST.get('quiz_category')
        contest_category_id = request.POST.get('contest_category')
        title = request.POST.get('test_name')
        max_participants = request.POST.get('max_participants')
        entry_fee = request.POST.get('entry_fee')
        test_instructions = request.POST.get('test_instructions', '')

        try:
            quiz_category = QuizCategory.objects.get(id=quiz_category_id)
            contest_category = ContestCategory.objects.get(id=contest_category_id)
        except QuizCategory.DoesNotExist:
            messages.error(request, "Selected quiz category does not exist.")
            return redirect(request.META.get('HTTP_REFERER')) 
        except ContestCategory.DoesNotExist:
            messages.error(request, "Selected contest category does not exist.")
            return redirect(request.META.get('HTTP_REFERER')) 

        try:
            test.title = title
            test.max_participants = int(max_participants)
            test.entry_fee = int(entry_fee)
            test.test_instructions = test_instructions
            test.contest_category = contest_category
            test.save()  

            messages.success(request, "Test Updated Successfully!")
            return redirect(request.META.get('HTTP_REFERER'))

        except Exception as e:
            messages.error(request, f"An error occurred: {str(e)}")
            return redirect(request.META.get('HTTP_REFERER'))
        
def uploadQuestionForContestTest(request):
    me = Teach(request.user)
    
    if request.method == 'GET':
        test_id = request.GET.get('test_id')
        options_list = ['A', 'B', 'C', 'D', 'E']
        institute_code = me.profile.institute.code
        context = {
            'test_id': test_id,
            'username' : me.profile.teacheruser.username,
            'institute_code': institute_code,
            'options': options_list,
        }
        return render(request, 'content/contest-question-upload.html',context)
    else:
        try:
            test_id = request.POST['test_id']
            test = ContestTest.objects.get(id=test_id)
            question_text = request.POST.get('question_text')
            video_url = request.POST.get('video_url')
            audio_url = request.POST.get('audio_url')
            question_image = request.POST.get('question_image')
            question_mark = int(request.POST.get('question_mark', 0))
            time_limit_seconds = int(request.POST.get('time_limit_seconds', 0))
            direction = request.POST.get('direction')
            correct_options = request.POST.getlist('correctOption')
            option_texts = {
                'A': request.POST.get('optionA_text'),
                'B': request.POST.get('optionB_text'),
                'C': request.POST.get('optionC_text'),
                'D': request.POST.get('optionD_text'),
                'E': request.POST.get('optionE_text')
            }
            show_option_e = request.POST.get('checked_option') == 'true'

            with transaction.atomic():
                question = ContestQuestion.objects.create(
                    contest_test=test,
                    text=question_text,
                    video_url=video_url,
                    audio_url=audio_url,
                    image_url=question_image,
                    question_mark=question_mark,
                    time_limit_seconds=time_limit_seconds,
                    direction=direction,
                )

                options = {}
                for opt_name, opt_text in option_texts.items():
                    if opt_name == 'E' and not show_option_e:
                        continue 
                    option = ContestOption.objects.create(
                        question=question,
                        option_name=opt_name,
                        option_text=opt_text,
                        correct=(opt_name in correct_options)
                    )
                    options[opt_name] = option    

                test.test_marks += question_mark
                test.test_time += time_limit_seconds

                test.passing_marks = test.test_marks / 3
                test.save()

                messages.success(request, 'Question Uploaded Successfully')
                return redirect(request.META.get('HTTP_REFERER', f'/upload_question_for_contest_test/?test_id={test_id}'))
            
        except Exception as e:
            messages.error(request, str(e))
            return redirect(request.META.get('HTTP_REFERER', f'/upload_question_for_contest_test/?test_id={test_id}'))

def editQuestionForContestTest(request):
    me = Teach(request.user)
    if request.method == 'GET':
        question_id = request.GET.get('question_id')
        question = ContestQuestion.objects.get(id=question_id)
        options = ContestOption.objects.filter(question=question)
        
        options_dict = {option.option_name: option for option in options}

        all_options = []
        for opt_name in ['A', 'B', 'C', 'D', 'E']:
            if opt_name in options_dict:
                all_options.append(options_dict[opt_name])
            else:
                all_options.append(ContestOption(option_name=opt_name, option_text='', correct=False))

        institute_code = me.profile.institute.code
        
        context = {
            'institute_code': institute_code,
            'options': all_options,
            'question': question,
        }
        return render(request, 'content/contest-question-edit.html', context)
    else:
        try:
            question_id = request.POST['question_id']
            question = ContestQuestion.objects.get(id=question_id)

            previous_question_mark = question.question_mark
            previous_time_limit_seconds = question.time_limit_seconds

            question_text = request.POST.get('question_text', question.text)
            video_url = request.POST.get('video_url', question.video_url)
            audio_url = request.POST.get('audio_url', question.audio_url)
            question_image = request.POST.get('question_image', question.image_url)
            question_mark = int(request.POST.get('question_mark', question.question_mark))
            time_limit_seconds = int(request.POST.get('time_limit_seconds', question.time_limit_seconds))
            direction = request.POST.get('direction', question.direction)
            correct_options = request.POST.getlist('correctOption')
            option_texts = {
                'A': request.POST.get('optionA_text'),
                'B': request.POST.get('optionB_text'),
                'C': request.POST.get('optionC_text'),
                'D': request.POST.get('optionD_text'),
                'E': request.POST.get('optionE_text')
            }
            show_option_e = request.POST.get('checked_option') == 'true'

            with transaction.atomic():
                question.text = question_text
                question.video_url = video_url
                question.audio_url = audio_url
                question.image_url = question_image
                question.question_mark = question_mark
                question.time_limit_seconds = time_limit_seconds
                question.direction = direction
                question.save()

                options = {option.option_name: option for option in ContestOption.objects.filter(question=question)}

                for opt_name, opt_text in option_texts.items():
                    if opt_name == 'E' and not show_option_e:
                        if opt_name in options:
                            options[opt_name].delete()
                        continue

                    if opt_name in options:
                        option = options[opt_name]
                        option.option_text = opt_text
                        option.correct = opt_name in correct_options
                        option.save()
                    else:
                        ContestOption.objects.create(
                            question=question,
                            option_name=opt_name,
                            option_text=opt_text,
                            correct=(opt_name in correct_options)
                        )

                test = question.contest_test  
                if test:
                    test.test_marks -= previous_question_mark
                    test.test_time -= previous_time_limit_seconds

                    test.test_marks += question_mark
                    test.test_time += time_limit_seconds

                    test.passing_marks = test.test_marks / 3
                    test.save()

                messages.success(request, 'Question Updated Successfully')
                return redirect(request.META.get('HTTP_REFERER', f'/edit_question_for_contest_test/{question_id}/'))
                
        except Exception as e:
            messages.error(request, str(e))
            return redirect(request.META.get('HTTP_REFERER', f'/edit_question_for_contest_test/{question_id}/'))
        
def testsQuestionsList(request):
    if request.method == 'GET': 
        test_id = request.GET['test_id']
        test = ContestTest.objects.get(id = test_id)
        
        context = {
            'test':test,
            'test_id': test_id,
            'questions': test.questions.all() 
        }
        return render(request, 'content/contest-test-question.html', context)
    
def deleteContestTestQuestion(request):
    me = Teach(request.user)
    try:
        question_id = request.GET.get('question_id')
        question = ContestQuestion.objects.get(id=question_id)
        
        test_id = request.GET.get('test_id')
        test = ContestTest.objects.get(id = test_id)

        with transaction.atomic():
            test.test_marks -= float(question.question_mark)
            test.test_time -= question.time_limit_seconds
            test.passing_marks = test.test_marks / 3
            test.save()
            
            question.delete()
        
        question.delete()
        
        return HttpResponse('Deleted Successfully')       
    except Exception as e:
        return HttpResponse(str(e))  

def deleteContestAllQuestions(request):
    me = Teach(request.user)
    allids = request.GET.getlist('checkedids[]')
    ContestQuestion.objects.filter(id__in=allids).delete()
    return JsonResponse(safe=False, data="Successfully Deleted")
 

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/serializers.py
--------------------------------------------------

from rest_framework import serializers
from content.models import *
from datetime import timedelta

class JobInformationSerializer(serializers.ModelSerializer):
    start_date = serializers.DateField(format="%d-%m-%Y")
    end_date = serializers.DateField(format="%d-%m-%Y")
    
    class Meta:
        model = JobInformation
        fields = '__all__'

class PrizeLevelSerializer(serializers.ModelSerializer):
    class Meta:
        model = PrizeLevel
        fields = '__all__'  

class StudentCoinsSerializer(serializers.ModelSerializer):
    class Meta:
        model = StudentCoins
        fields = '__all__'
        
class ContestCategorySerializer(serializers.ModelSerializer):
    formatted_start_time = serializers.SerializerMethodField()
    is_ongoing = serializers.SerializerMethodField()

    class Meta:
        model = ContestCategory
        fields = '__all__'

    def get_formatted_start_time(self, obj):
        now = timezone.now()

        if obj.end_time and obj.end_time <= now:
            return "Contest has completed."

        if obj.start_time <= now:
            return "Contest has started."
        
        time_difference = obj.start_time - now

        if time_difference > timedelta(days=1):
            return obj.start_time.strftime("%b %d %I:%M %p")
        
        total_seconds = int(time_difference.total_seconds())
        hours, remainder = divmod(total_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours}H:{minutes}m:{seconds}s"
        
    def get_is_ongoing(self, obj):
        now = timezone.now()
        if obj.end_time is None:
            return True
        return obj.end_time > now
        
class QuizCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = QuizCategory
        fields = ['id', 'title', 'created_date']
        
class TestSerializer(serializers.ModelSerializer):
    class Meta:
        model = Test
        fields = ['id', 'name', 'totalMarks', 'passing_marks', 'time', 'entry_fee', 'max_participants']

class PayoutRequestSerializer(serializers.Serializer):
    amount = serializers.DecimalField(max_digits=10, decimal_places=2)
    currency = serializers.CharField(default='INR')
    mode = serializers.ChoiceField(choices=[('bank', 'Bank Account'), ('vpa', 'UPI')])
    purpose = serializers.CharField(max_length=100, default='payout')
    beneficiary_name = serializers.CharField(max_length=100)
    account_holder_name = serializers.CharField(max_length=61, required=False)
    account_number = serializers.CharField(max_length=20, required=False)
    ifsc_code = serializers.CharField(max_length=11, required=False)
    vpa = serializers.CharField(max_length=100, required=False)

    def validate(self, data):
        mode = data.get('mode')
        if mode == 'bank' and (not data.get('account_number') or not data.get('ifsc_code')):
            raise serializers.ValidationError("Account number and IFSC code are required for bank transfers.")
        if mode == 'vpa' and not data.get('vpa'):
            raise serializers.ValidationError("VPA is required for UPI payouts.")
        return data
    


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/urls.py
--------------------------------------------------

from django.urls import re_path as url
from django.urls import path
from content.api import views

urlpatterns = [
    url(r'get_package_buy_base_url/$', views.GetPackageBuyBaseUrl.as_view(), name='GetPackageBuyBaseUrl'),
    url(r'institute_used_message_count/$', views.InstituteUsedMessageCount.as_view(), name='InstituteUsedMessageCount'),
    url(r'institute_all_sms/$', views.InstituteSentSms.as_view(), name='InstituteSentSms'),
    url(r'download_sent_sms_file/(?P<institute_code>.*)/$', views.DownloadSentSMSFile.as_view(), name='DownloadSentSMSFile'),
    url(r'all_reviews_list/$', views.AllReviewsList.as_view(), name='AllReviewsList'),
    url(r'teacher_get_all_batches/$',views.TeacherGetAllBatches.as_view(), name='TeacherGetAllBatches'),
    url(r'teacher_get_all_assignments_batch_wise/$',views.TeacherGetAllAssignmentsBatchWise.as_view(), name='TeacherGetAllAssignmentsBatchWise'),
    url(r'student_see_chapter_wise_websites/$',views.StudentSeeChapterWiseWebsites.as_view(), name='StudentSeeChapterWiseWebsites'),
    url(r'teacher_see_chapter_wise_websites/$',views.TeacherSeeChapterWiseWebsites.as_view(), name='TeacherSeeChapterWiseWebsites'),
    url(r'teacher_add_chapter_wise_websites/$',views.TeacherAddChapterWiseWebsites.as_view(), name='TeacherAddChapterWiseWebsites'),
    url(r'teacher_get_subjects/$', views.TeacherGetSubjects.as_view(),name='teacherGetSubjects'),
    url(r'teacher_get_chapters/$', views.TeacherGetAllChapters.as_view(),name='teacherGetChatpers'),
    url(r'institute_show_market_store/$',views.InstituteShowMarketStore.as_view(), name='InstituteShowMarketStore'),
    url(r'teacher_get_questions_chapterwise/$',views.TeacherChapterwiseQuestions.as_view(), name='teacherChapterWiseQuestions'),
    
    url(r'teacher_get_topics_from_chapter_notes/$',views.TeacherGetTopicsFromChapterNotes.as_view(), name='TeacherGetTopicsFromChapterNotes'),
    url(r'teacher_get_subtopics_from_topic_notes/$',views.TeacherGetSubTopicsFromTopicNotes.as_view(), name='TeacherGetSubTopicsFromTopicNotes'),
    url(r'teacher_get_notes_from_subtopics/$', views.TeacherGetNotesFromSubTopicNotes.as_view(), name='TeacherGetNotesFromSubTopicNotes'),
    url(r'teacher_notes_filter/$', views.TeacherNotesFilter.as_view(), name='TeacherNotesFilter'),
    url(r'teacher_get_all_notes/$', views.TeacherGetAllNotes.as_view(), name='teacherGetAllNotes'),
    url(r'teacher_delete_note/$', views.TeacherDeleteNote.as_view(),name='teacherDeleteNote'),
    url(r'student_get_free_notes/$',views.StudentGetFreeNotes.as_view(), name='studentGetFreeNotes'),
    url(r'student_free_subjectwise_notes/$',views.StudentSubjectwiseFreeNotes.as_view(), name='subjectwiseFreeNotes'),
    url(r'student_chapter_wise_free_notes/$',views.StudentChapterWiseFreeNotes.as_view(), name='student_chapter_wise_free_notes'),
    url(r'student_get_chapter_notes/$',views.StudentGetNotesChapter.as_view(), name='studentGetChapterNotes'),
    url(r'student_get_all_notes/$',views.StudentGetAllNotes.as_view(), name='studentGetAllNotes'),
    
    url(r'teacher_create_test/$', views.TeacherCreateTest.as_view(),name='teacherCreateTest'),
    url(r'teacher_create_file_test/$', views.TeacherCreateFileTest.as_view(), name='TeacherCreateFileTest'),
    url(r'teacher_create_file_test_new/$', views.TeacherCreateFileTestNew.as_view(), name='TeacherCreateFileTestNew'),
    url(r'teacher_omr_test_filter/$', views.TeacherOMRTestFilter.as_view(), name='TeacherOMRTestFilter'),
    url(r'teacher_mcq_test_filter/$', views.TeacherMCQTestFilter.as_view(), name='TeacherMCQTestFilter'),
    url(r'teacher_get_topics_from_chapter_omr_test/$', views.TeacherGetTopicsFromChapterOMRTests.as_view(), name='TeacherGetTopicsFromChapterOMRTests'),
    url(r'teacher_get_subtopics_from_topic_omr_test/$', views.TeacherGetSubTopicsFromTopicOMRTests.as_view(), name='TeacherGetSubTopicsFromTopicOMRTests'),
    url(r'teacher_get_all_tests/$', views.TeacherGetAllTests.as_view(), name='teacherGetAllTests'),
    url(r'teacher_see_created_tests/$', views.TeacherSeeAllTests.as_view(), name='teacherSeeAllTests'),
    url(r'teacher_see_individual_test/$', views.TeacherIndividualTestDetails.as_view(),name='teacherSeeIndividualTestDetail'),
    url(r'teacher_see_batchwise_tests/$', views.TeacherSeeBatchWiseTests.as_view(), name='teacherSeeBatchWiseTests'),
    url(r'student_get_all_free_omr_test/$',views.StudentGetAllFreeOMRTests.as_view(), name='StudentGetAllFreeOMRTests'),
    url(r'student_get_all_free_tests/$',views.StudentGetAllFreeTests.as_view(), name='studentGetAllFreeTests'),
    url(r'student_free_subjectwise_tests/$',views.StudentSubjectwiseFreeTests.as_view(), name='subjectwiseFreeTests'),
    url(r'student_get_subject_free_omr_test/$',views.StudentGetSubjectWiseOMRFree.as_view(), name='StudentGetSubjectWiseORMFree'),
    url(r'student_chapter_wise_free_tests/$',views.StudentChapterWiseFreeTests.as_view(), name='student_chapter_wise_free_tests'),
    url(r'student_free_filetests_performance/$',views.StudentFreeFileTestsPerformance.as_view(), name='StudentFreeFileTestsPerformance'),
    url(r'student_chapterwise_tests/$', views.StudentChapterWiseTests.as_view(),name='studentsGetChapterWiseTests'),
    url(r'student_chapter_wise_filetests/$',views.StudentChapterWiseFileTests.as_view(), name='StudentChapterWiseFileTests'),
    url(r'student_all_tests/$', views.StudentAllTests.as_view(),name='studentAllTests'),
    url(r'student_get_test/$', views.StudentGetTest.as_view(), name='studentGetTest'),
    url(r'evaluate_test/$', views.EvaluateTest.as_view(),name='studentEvaluateTest'),
    url(r'evaluate_test_new/$', views.EvaluateTestNew.as_view(),name='evaluate_test_new'),
    url(r'student_get_test_schedule_wise/$', views.StudentGetTestScheduleWise.as_view(), name='student_get_test_schedule_wise'),
    url(r'student_test_performance/$',views.StudentTestPerformance.as_view(), name='student_test_performance'),
    url(r'student_test_performance2/$',views.StudentTestPerformance2.as_view(), name='student_test_performance2'),
    url(r'student_taken_test_list/$',views.StudentTakenTestList.as_view(), name='student_taken_test_list'),
    url(r'student_check_test_taken/$',views.StudentTakenTest.as_view(), name='studentTakenTest'),
    
    url(r'teacher_get_all_videos/$',views.TeacherGetAllVideos.as_view(), name='teacherGetAllVideos'),
    url(r'teacher_videos_filter/$', views.TeacherVideosFilter.as_view(),name='TeacherVideosFilter'),
    url(r'teacher_delete_video/$', views.TeacherDeleteVideo.as_view(),name='teacherDeleteVideo'),
    url(r'student_get_all_free_videos/$',views.StudentGetFreeVideos.as_view(), name='studentGetAllFreeVideos'),
    url(r'student_free_subjectwise_videos/$',views.StudentSubjectwiseFreeVideos.as_view(), name='subjectwiseVideosFree'),
    url(r'student_chapter_wise_free_videos/$',views.StudentChapterWiseFreeVideos.as_view(), name='student_chapter_wise_free_videos'),
    url(r'student_chapterwise_videos/$', views.StudentGetChapterWiseVideos.as_view(),name='studentGetChapterWiseVideos'),
    url(r'student_all_videos/$', views.StudentGetAllVideos.as_view(),name='studentAllVideos'),
    url(r'student_individual_video/$',views.StudentIndividualVideo.as_view(), name='studentIndividualVideo'),
    url(r'download_video_csv/$',views.DownloadVideoCsv.as_view(), name='download_video_csv'),
    
    url(r'teacher_create_package/$', views.TeacherCreatePackage.as_view(),name='teacherCreatePackage'),
    url(r'teacher_edit_package/$', views.TeacherEditPackage.as_view(),name='teacherEditPackage'),
    url(r'teacher_get_packages/$', views.TeacherGetPackages.as_view(),name='teacherGetPackages'),
    url(r'teacher_add_package_videos/$',views.PackageAddVideos.as_view(), name='teacherPackageAddVideos'),
    url(r'teacher_get_orderwise_packages/$',views.TeacherGetOrderWisePackages.as_view(), name='teacherGetOrderWisePackages'),
    url(r'teacher_get_individual_package/$',views.TeacherGetIndividualPackage.as_view(), name='teacherGetIndividualPackage'),
    url(r'teacher_get_package_videos/$',views.TeacherPackageVideos.as_view(), name='teacherGetPackageVideos'),
    url(r'teacher_add_package_notes/$',views.PackageAddNotes.as_view(), name='teacherAddNotes'),
    url(r'teacher_add_package_tests/$',views.PackageAddTests.as_view(), name='teacherAddTests'),
    url(r'teacher_package_remove_video/$',views.PackageRemoveVideo.as_view(), name='teacherRemoveVideo'),
    url(r'teacher_package_remove_note/$',views.PackageRemoveNote.as_view(), name='teacherRemoveNote'),
    url(r'teacher_package_remove_test/$',views.PackageRemoveTest.as_view(), name='teacherRemoveTest'),
    url(r'teacher_package_remove_youtubeLive/$',views.PackageRemoveYoutubeLive.as_view(), name='teacherRemoveYoutubeLive'),
    url(r'get_institute_package_view/$',views.GetInstitutePackageView.as_view(), name='GetInstitutePackageView'),
    url(r'student_packagewise_subjects/$',views.StudentPackageWiseSubjects.as_view(), name='StudentPackageWiseSubjects'),
    url(r'student_package_and_subject_wise_chapters/$',views.StudentPackageAndSubjectWiseChapters.as_view(), name='StudentPackageAndSubjectWiseChapters'),
    url(r'student_package_and_chapter_wise_topics/$',views.StudentPackageAndChapterWiseTopics.as_view(), name='StudentPackageAndChapterWiseTopics'),
    url(r'student_package_and_topic_wise_subtopics/$',views.StudentPackageAndTopicWiseSubtopics.as_view(), name='StudentPackageAndTopicWiseSubtopics'),
    url(r'student_package_data_filter/$',views.StudentPackageDataFilter.as_view(), name='StudentPackageDataFilter'),
    url(r'chapter_wise_package_topics/$',views.ChapterWisePackageTopics.as_view(), name='ChapterWisePackageTopics'),
    url(r'student_get_all_packages/$',views.StudentAllPackages.as_view(), name='student_get_all_packages'),
    url(r'student_get_bought_packages/$',views.StudentGetBoughtPackages.as_view(), name='studentGetBoughtPackages'),
    url(r'student_not_bought_packages/$',views.StudentNotBoughtPackages.as_view(), name='studentNotBoughtPackages'),
    url(r'student_packages_all/$',views.StudentNotBoughtPackages.as_view(), name='studentpackagesAll'),
    url(r'student_batch_all_packages/$',views.StudentBatchAllPackages.as_view(), name='student_batch_all_packages'),
    url(r'student_batch_non_purchased_packages/$',views.StudentBatchNonPurchasedPackages.as_view(), name='student_batch_non_purchased_packages'),
    url(r'student_individual_package/$', views.StudentIndividualPackageDetail.as_view(),name='studentStudentPackageDetails'),
    url(r'student_buy_package/$', views.StudentBuyPackage.as_view(),name='studentBuyPackage'),
    url(r'teacher_packagewise_youtube_video/$',views.PublishYouTubePackageWiseLive.as_view(), name='publishYoutubeLivePackagewise'),
    url(r'teacher_packagewise_youtube_video_new/$',views.PublishYouTubePackageWiseLiveNew.as_view(), name='publishYoutubeLivePackagewisenew'),
    url(r'student_buy_request_package/$',views.StudentRequestBuyPackage.as_view(), name='studentRequestBuyPackage'),
    url(r'student_is_package_request/$', views.IsBuyPackageRequest.as_view(),name='studentIsBuyPackageRequest'),
    
    url(r'student_subjectwise_videos/$', views.StudentGetSubjectWiseVideos.as_view(),name='studentGetSubjectWiseVideos'),
    url(r'student_subjectwise_notes/$',views.StudentSubjectWiseNotes.as_view(), name='studentSubjectWiseNotes'),
    url(r'student_subjectwise_tests/$',views.StudentSubjectWiseTests.as_view(), name='studentSubjectWiseTests'),
    
    url(r'student_get_subject_videos/$', views.StudentGetSubjectVideos.as_view(),name='student_get_subject_videos'),
    url(r'student_get_subject_notes/$', views.StudentGetSubjectNotes.as_view(),name='student_get_subject_notes'),
    url(r'student_get_subject_tests/$',views.StudentGetSubjectTests.as_view(), name='student_get_subject_tests'),
    
    url(r'file_policy_api/$', views.FilePolicyAPI.as_view(), name='filePolicyAPI'),
    url(r'file_policy_azure_api/$', views.FilePolicyAPIAzure.as_view(), name='FilePolicyAPIAzure'),
    url(r'file_policy_gc_api/$', views.FilePolicyAPIGoogleCloud.as_view(), name='FilePolicyAPIGoogleCloud'),
    url(r'note_file_policy_gc_api/$', views.NotesFilePolicyAPIGoogleCloud.as_view(), name='note_file_policy_gc_api'),
    url(r'student_get_subjects/$', views.StudentGetSubjects.as_view(),name='studentGetSubjects'),
    url(r'student_get_chapters/$', views.StudentGetChapters.as_view(),name='studentGetChapters'),
    url(r'get_subject_chapters/$', views.GetSubjectChapters.as_view(),name='getSubjectChapters'),
    url(r'student_question_reviews_add/$',views.StudentQuestionReviewsAdd.as_view(), name='StudentQuestionReviewsAdd'),
    url(r'student_question_reviews_test_list/$',views.StudentQuestionReviewsTestList.as_view(), name='StudentQuestionReviewsTestList'),
    url(r'student_question_reviews_list/$',views.StudentQuestionReviewsList.as_view(), name='StudentQuestionReviewsList'),
    url(r'student_see_topics_chapter_wise/$',views.StudentSeeTopicsChapterWise.as_view(), name='StudentSeeTopicsChapterWise'),
    url(r'student_see_subtopics_topic_wise/$',views.StudentSeeTopicWiseSubTopics.as_view(), name='StudentSeeTopicWiseSubTopics'),
    url(r'student_see_topics_all_data/$',views.StudentSeeTopicsAllData.as_view(), name='StudentSeeTopicsAllData'),    
    url(r'student_see_subtopics_all_data/$',views.StudentSeeSubTopicsAllData.as_view(), name='StudentSeeSubTopicsAllData'),
    url(r'student_firebase_token_update/$',views.StudentFireBaseToken.as_view(), name='studentFireBaseToken'),
    url(r'student_get_assignments/$',views.StudentAllAssignments.as_view(), name='studentGetAssignments'),
    url(r'student_course_data_filter/$',views.StudentCourseDataFilter.as_view(), name='StudentCourseDataFilter'),
    url(r'student_course_videos/$', views.StudentGetCourseWiseVideos.as_view(),name='StudentGetCourseWiseVideos'),
    url(r'student_course_tests/$', views.StudentCourseWiseTests.as_view(),name='StudentCourseWiseTests'),
    url(r'student_get_courses/$', views.StudentGetCourses.as_view(),name='studentGetCourses'),
    url(r'student_get_subjects_course/$',views.StudentGetCourseSubjects.as_view(), name='studentGetSubjectCourse'),
    url(r'student_get_coursewise_subjects_testwin/$',views.StudentGetCourseWiseSubjectsTestwin.as_view(), name='StudentGetCourseWiseSubjectsTestwin'),
    url(r'student_get_subjectwise_chapters_testwin/$',views.StudentGetSubjectWiseChaptersTestwin.as_view(), name='StudentGetSubjectWiseChaptersTestwin'),
    url(r'student_get_current_affairs_videos/$',views.StudentGetCurrentAffairVideos.as_view(), name='studentGetCurrentAffairVideos'),
    url(r'student_get_current_affairs_notes/$',views.StudentGetCurrentAffairNotes.as_view(), name='studentGetCurrentAffairNotes'),
    url(r'student_test_rank/$', views.StudentGetTestRanking.as_view(),name='studentGetTestRank'),
    url(r'student_check_host_live_video/$',views.CheckStudentLiveHostVideo.as_view(), name='studentCheckHostLiveVideo'),
    url(r'student_get_teacherwise_videos/$',views.StudentGetTeacherWiseVideos.as_view(), name='studentGetTeacherWiseVideos'),
    url(r'student_get_teacherwise_notes/$',views.StudentTeacherWiseNotes.as_view(), name='studentGetTeacherWiseNotes'),
    url(r'student_get_ebooks/$', views.StudentEbooks.as_view(), name='studentEbooks'),
    url(r'student_get_youtubeiframe/$',views.YoutubeIFrame.as_view(), name='youtubeIFrame'),
    url(r'student_online_attendance/$', views.StudentLiveClassAttendance.as_view(),name='studentLiveClassAttendance'),
    url(r'student_get_all_assignments/$',views.StudentGetAllAssignment.as_view(), name='studentGetAllAssignments'),
    url(r'student_submit_assignment/$',views.StudentUploadAssignment.as_view(), name='studentUploadAssignment'),
    url(r'student_check_assignment_submission/$',views.StudentCheckAssignmentSubmission.as_view(), name='studentCheckAssignmentSubmission'),
    url(r'student_get_specific_packages/$',views.StudentSpecificPackages.as_view(), name='studentSpecificPackages'),
    url(r'student_get_subjects/$', views.StudentGetSubjects.as_view(),name='studentGetSubjects'),
    url(r'student_get_chapters_subject/$',views.StudentGetSubjectChapters.as_view(), name='studentGetChaptersSubject'),
    url(r'student_create_test_final/$',views.StudentCreateTest.as_view(), name='studentCreatetest'),
    url(r'student_get_all_paid_tests/$',views.StudentGetAllPaidTests.as_view(), name='studentGetAllPaidTests'),
    url(r'student_get_jobalerts/$', views.StudentGetJobAlertsPDF.as_view(),name='studentGetJobAlerts'),
    url(r'student_get_previousyears/$',views.StudentGetPreviousYearPDF.as_view(), name='studentPreviousYear'),
    url(r'student_conferencing_antmedia/$',views.StudentAntMediaConference.as_view(), name='studentConferenceAntMedia'),
    url(r'student_datewise_videos/$', views.StudentGetDateWiseVideos.as_view(),name='studentGetDatewiseVideos'),
    url(r'student_datewise_notes/$', views.StudentGetDateWiseNotes.as_view(),name='studentGetDatewiseNotes'),
    url(r'student_datewise_tests/$', views.StudentDateWiseTests.as_view(),name='studentDateWiseTests'),
    url(r'student_subjects_videos_package/$',views.StudentGetPackageVideosSubjects.as_view(), name='studentSubjectsVideoPackage'),
    url(r'student_subjects_notes_package/$',views.StudentGetPackageNotesSubjects.as_view(), name='studentSubjectsNotesPackage'),
    url(r'student_subjects_tests_package/$',views.StudentGetPackageTestsSubjects.as_view(), name='studentSubjectsTestsPackage'),
    url(r'student_get_course_package_subjects/$',views.StudentGetCoursePackageSubjects.as_view(), name='student_get_course_package_subjects'),
    url(r'student_get_all_subjectiveTest/$',views.StudentGetAllSubjectiveTests.as_view(), name='studentGetAllSubjectiveTests'),
    url(r'student_get_dailyvocab/$',views.StudentGetDailyVocabPDF.as_view(), name='studentGetDailyVocab'),
    url(r'student_talenthunt_filled/$', views.CheckTalentHuntFormFilled.as_view(),name='checkTalentHuntFormFilled'),
    url(r'student_get_order_wise_package_videos/$',views.StudentGetOrderWisePckageVideos.as_view(), name='StudentGetOrderWisePckageVideos'),
    url(r'student_get_batch_wise_alldata',views.StudentGetBtachWiseAllData.as_view(),name='student_get_batch_wise_alldata'),
    url(r'student_all_videos_batchwise/$',views.StudentGetOrderWiseAllVideos.as_view(), name='studentAllVideosBatchwise'),
    url(r'student_fill_talenthunt_form/$',views.TalentHuntExamForm.as_view(), name='studentTalentHuntFillForm'),
    url(r'student_apply_coupon_code/$',views.StudentApplyCouponCode.as_view(), name='studentApplyCouponCode'),
    url(r'student_package_get_demo_content/$',views.PackageGetDemoContent.as_view(), name='packageGetDemoContent'),
    url(r'student_get_main_teacher/$',views.GetMainTeacher.as_view(), name='getMainTeacherStudent'),
    url(r'student_get_ordered_package/$', views.StudentGetPackagesOrderwise.as_view(),name='studentGetPackagesOrderwise'),
    url(r'student_get_package_details/$',views.PackageGetAllContent.as_view(), name='packageGetAllContent'),
    
    url(r'teacher_add_chapter/$', views.TeacherAddChapter.as_view(),name='teacherAddChapters'),
    url(r'teacher_subject_info/$', views.TeacherSubjectInfo.as_view(),name='teacherSubjectInfo'),
    url(r'teacher_create_course/$', views.TeacherCreateCourse.as_view(),name='teacherCreateCourse'),
    url(r'teacher_get_courses/$', views.TeacherGetAllCourses.as_view(),name='TeacherGetAllCourses'),
    url(r'teacher_courses_list/$', views.TeacherGetCourseList.as_view(),name='TeacherGetCourseList'),
    url(r'teacher_delete_course/$', views.TeacherDeleteCourse.as_view(),name='teacherDeleteCourse'),
    url(r'teacher_create_course_category/$', views.TeacherCreateCourseCategory.as_view(),name='teacher_create_course_category'),
    url(r'course_wise_category_list/$', views.CourseWiseCategoryList.as_view(),name='course_wise_category_list'),
    url(r'teacher_add_batch_course/$',views.TeacherAddCourseBatch.as_view(), name='teacherAddCourseBatch'),
    url(r'teacher_course_batches/$', views.TeacherCourseBatches.as_view(),name='teacherCourseBatches'),
    url(r'teacher_course_remove_batches/$',views.TeacherRemoveCourseBatch.as_view(), name='teacherRemoveCourseBatch'),
    url(r'teacher_add_subject_course/$',views.TeacherAddCourseSubjects.as_view(), name='teacherAddCourseSubjects'),
    url(r'teacher_course_subjects/$',views.TeacherCourseSubjects.as_view(), name='teacherCourseSubjects'),
    url(r'teacher_course_remove_subjects/$',views.TeacherRemoveCourseSubject.as_view(), name='techerRemoveCourseSubject'),
    url(r'teacher_all_package_requests/$', views.TeacherAllBuyPackageRequests.as_view(),name='teacherBuyPackageRequestsAll'),
    url(r'teacher_accept_buy_package_request/$',views.AcceptStudentBuyPackageRequest.as_view(), name='teacherAcceptBuyPackageRequest'),
    url(r'teacher_see_paid_students_package/$',views.TeacherPackagePurchasedDetail.as_view(), name='teacherPaidPackagesDetails'),
    url(r'teacher_student_test_performance/$',views.TeacherStudentTestPerformance.as_view(), name='teacherStudentTestPerformance'),
    url(r'teacher_get_package_students/$',views.GetPackageStudents.as_view(), name='teacherGetStudentsofPackage'),
    url(r'teacher_add_student_package/$',views.TeacherAddStudentPackage.as_view(), name='teacherStudentAddPackage'),
    url(r'teacher_edit_package_fixduration/$',views.TeacherEditPackageFixDuration.as_view(), name='TeacherEditPackageFixDuration'),
    url(r'teacher_edit_student_package/$', views.EditPackageStudentDetails.as_view(),name='teacherEditPackageStudentDetails'),
    url(r'teacher_delete_package/$', views.TeacherDeletePackage.as_view(),name='teacherDeletePackage'),
    url(r'teacher_remove_student_package/$', views.RemoveStudentfromPackage.as_view(),name='teacherRemoveStudentFromPackage'),
    url(r'paytm_generate_checksum/$',views.GenerateChecksumPayTm.as_view(), name='generatePayTmChecksum'),
    url(r'teacher_edit_chapter/$', views.TeacherEditChapter.as_view(),name='teacherEditChapter'),
    url(r'teacher_get_list/$', views.TeacherGetList.as_view(), name='teacherGetList'),
    url(r'teacher_get_batches/$', views.TeacherGetBatches.as_view(),name='teacherGetBatches'),
    url(r'teacher_add_batches/$', views.TeacherAssignBatches.as_view(),name='teacherAssignBatches'),
    url(r'teacher_delete_batch/$', views.TeacherDeleteBatch.as_view(),name='teacherDeleteBatch'),
    url(r'teacher_test_performance_students/$',views.TeacherSeeAllStudentTest.as_view(), name='teacherSeeAllStudentTest'),
    url(r'teacher_batchwise_test_performance_students/$',views.TeacherBatchwiseSeeAllStudentTest.as_view(), name='teacherSeeAllStudentTest'),
    url(r'individual_student_performance_teacher/$',views.TeacherIndividualTestPerformance.as_view(), name='teacherIndividualStudentPerformance'),
    url(r'teacher_get_chapter_topics/$',views.TeacherGetChapterTopics.as_view(), name='teacherGetChaterTopics'),
    url(r'teacher_create_topic/$', views.TeacherCreateTopic.as_view(),name='teacherCreateTopic'),
    url(r'teacher_get_subtopics/$', views.TeacherGetSubTopics.as_view(),name='teacherGetSubTopics'),
    url(r'teacher_create_subtopics/$',views.TeacherCreateSubTopic.as_view(), name='teacherCreateSubTopics'),
    url(r'teacher_delete_topic/$', views.TeacherDeleteTopic.as_view(),name='teacherDeleteTopic'),
    url(r'teacher_delete_sub_topic/$',views.TeacherDeleteSubTopic.as_view(), name='teacherDeleteSubTopic'),
    url(r'teacher_set_student_host_livevideo/$',views.TeacherStudentHostLiveVideo.as_view(), name='teacherStudentHostLiveVideo'),
    url(r'dummy_test/$', views.DummyEvaluate.as_view(), name='dummy_test'),
    url(r'teacher_upload_notes/$', views.TeacherUploadNotes.as_view(),name='teacher_upload_notes'),
    url(r'teacher_edit_note/$', views.TeacherEditNote.as_view(),name='teacher_edit_note'),
    url(r'teacher_uploadvideo/$', views.TeacherUploadVideo.as_view(),name='teacher_uploadvideo'),
    url(r'teacher_edit_video/$', views.TeacherEditVideo.as_view(),name='teacher_edit_video'),
    url(r'teacher_add_subjects/$', views.TeacherAddSubjects.as_view(),name='eteacherAddSubjects'),
    url(r'teacher_get_all_subjects/$',views.TeacherGetAllSubjects.as_view(), name='teacherGetAllSubjects'),
    url(r'teacher_remove_subjects/$',views.TeacherRemoveSubject.as_view(), name='teacherRemoveSubject'),
    url(r'teacher_change_chapter_marks/$',views.TeacherChangeMarksChapter.as_view(), name='teacherChangeMarksChapter'),
    url(r'teacher_change_question_correct_option/$',views.TeacherChangeCorrectOption.as_view(), name='teacherChangeOptionCorrect'),
    url(r'teacher_create_assignment/$',views.TeacherCreateAssignment.as_view(), name='teacherCreateAssignment'),
    url(r'teacher_get_assignments/$', views.TeacherGetAllAssignment.as_view(),name='teacherGetAllAssignments'),
    url(r'teacher_update_assignment/$',views.TeacherEditAssignment.as_view(), name='teacherEditAssignment'),
    url(r'teacher_delete_assignments/$',views.TeacherDeleteAssignment.as_view(), name='teacherDeleteAssignment'),
    url(r'teacher_get_submitted_assignments/$',views.TeacherGetSubmittedAssignments.as_view(), name='teacherGetSubmittedAssignments'),
    url(r'teacher_assignment_batches/$',views.TeacherGetAssignmentBatches.as_view(), name='teacherAssignmentBatches'),
    url(r'teacher_student_assignments_batchwise/$',views.TeacherBatchWiseStudentAssignment.as_view(), name='teacherBatchWiseAssignments'),
    url(r'teacher_buy_package_request_reject/$',views.TeacherRejectBuyPackageRequest.as_view(), name='teacherRejectBuyPackageRequest'),
    url(r'teacher_create_rtmp_broadcast/$',views.CreateRTMPBroadCast.as_view(), name='teacherCreateRTMPBroadCast'),
    url(r'teacher_create_package_rtmp_broadcast/$', views.CreateRTMPBroadCastPackageWiseLiveVideo.as_view(),name='createRTMPBroadCastPackageWiseLiveVideo'),
    url(r'teacer_get_subjectwise_videos/$',views.TeacherGetSubjectWiseVideos.as_view(), name='teacherGetSubjectWiseVideos'),
    url(r'teacer_get_subjectwise_notes/$',views.TeacherGetSubjectWiseNotes.as_view(), name='teacherGetSubjectWiseNotes'),
    url(r'teacher_change_batches_test/$',views.EditTestBatches.as_view(), name='teacherEditTestBatches'),
    url(r'teacher_get_video_views/$',views.TeacherGetVideoViews.as_view(), name='teacherGetVideoViews'),
    url(r'teacher_get_note_views/$',views.TeacherGetNoteViews.as_view(), name='teacherGetNoteViews'),
    url(r'teacher_get_test_views/$',views.TeacherGetTestViews.as_view(), name='TeacherGetTestViews'),
    url(r'teacher_add_student_package_manually/$',views.TeacherAddStudentPackageManually.as_view(), name='teacherAddStudentPackageManually'),
    url(r'teacher_questions_chapterwise_paginated/$',views.TeacherChapterwiseQuestionsPagination.as_view(), name='teacherQuestionsPagination'),
    url(r'teacher_add_youtube_video/$',views.TeacherAddYoutubeVideo.as_view(), name='teacherAddYoutubeVideo'),
    
    url(r'student_get_agora_live_video/$',views.StudentGetAgoraLiveVideo.as_view(), name='studentGetAgoraLiveVideo'),
    url(r'student_get_agora_live_youtube_video/$',views.StudentGetAgoraLiveVideoYoutube.as_view(), name='StudentGetAgoraLiveVideoYoutube'),
    url(r'student_live_video_message/$', views.StudentSendMessageLiveVideo.as_view(),name='studentSendMessageLiveVideo'),
    url(r'teacher_get_live_messages/$',views.TeacherGetLiveMessages.as_view(), name='teacherGetLiveMessages'),
    url(r'teacher_save_recorded_video_new/$', views.TeacherSaveRecordedLiveVideosNew.as_view(),name='teacherSaveRecordedLiveVideo'),
    url(r'teacher_get_datewise_recorded_videos/$',views.TeacherGetDateWiseRecordedVideos.as_view(), name='TeacherGetDateWiseRecordedVideos'),
    url(r'teacher_add_package_youtubelive/$',views.PackageAddYoutubeLiveVideos.as_view(), name='teacherAddYoutubeLiveVideos'),
    url(r'student_youtube_comment/$', views.StudentSendYoutubeMessageLiveVideo.as_view(),name='studentYoutubeMessageLive'),
    url(r'teacher_youtube_message/$', views.TeacherShowMessageYoutubeVideo.as_view(),name='teacherShowYoutubeVideo'),
    url(r'student_see_youtube_video_comments/$',views.StudentSeeMessageYoutubeVideo.as_view(), name='StudentSeeMessageYoutubeVideo'),
    url(r'teacher_youtube_live_list/$',views.TeacherGetAllYoutubeLiveVideos.as_view(), name='teacherYoutubeLiveVideos'),
    url(r'teacher_delete_youtube_live/$', views.TeacherDeleteYoutubeLiveVideo.as_view(),name='teacherDeleteYoutubeLiveVideo'),
    url(r'teacher_delete_allyoutube_live/$', views.TeacherDeleteYoutubeLiveAllVideo.as_view(),name='teacher_delete_allyoutube_live'),
    url(r'teacher_ant_media_live/$', views.TeacherAntMediaGoLive.as_view(),name='teacherAntMediaGoLive'),
    url(r'student_get_ant_live/$', views.StudentGetLiveAntPlayer.as_view(),name='studentGetLiveAntPlayer'),
    url(r'teacher_create_jitsi_live/$',views.CreateJitsiLiveVideo.as_view(), name='teacherCreateJitsiLive'),
    url(r'teacher_create_jitsi_live_new/$',views.CreateJitsiLiveNew.as_view(), name='teacherCreateJitsiLiveNew'),
    url(r'student_youtubelive_joininfo/$', views.StudentYoutubeLiveVideoJoinInfo.as_view(),name='StudentYoutubeLiveVideoJoinInfo'),
    url(r'student_youtube_live_leaveinfo/$',views.StudentYoutubeLiveVideoLeaveVideo.as_view(), name='studentYoutubeLeaveLiveVideo'),
    url(r'teacher_get_recorded_videos/$',views.TeacherGetRecordedVideos.as_view(), name='teacherGetRecordedVideos'),
    url(r'teacher_delete_live_recorded_video/$',views.DeleteRecordedVideo.as_view(), name='deleteRecordedLiveVideo'),
    url(r'teacher_live_video_share_link/$',views.PublishLiveVideoLink.as_view(), name='teacherPublishLiveVideoLink'),
    url(r'student_get_live_video_link/$',views.StudentGetLiveVideoLink.as_view(), name='studentGetLiveVideoLink'),
    url(r'student_get_packagewise_live_video_link/$',views.StudentGetPackageWiseLiveVideoLink.as_view(), name='StudentGetPackageWiseLiveVideoLink'),
    url(r'teacher_publish_recorded_video/$',views.TeacherPublishRecordedVideo.as_view(), name='teacherPublishRecordedVideo'),
    url(r'check_is_teacher_live_on_youtube/$',views.CheckIsTeacherLiveOnYoutube.as_view(), name='check_is_teacher_live_on_youtube'),
    url(r'student_live_session_rating/$',views.StudentLiveSessionRating.as_view(), name='student_live_session_rating'),
    
    url(r'teacher_schedule_assignment/$',views.TeacherScheduleAssignment.as_view(), name='teacherScheduleAssignment'),
    url(r'teacher_couponcode_create/$',views.CouponCodeCreationTeacher.as_view(), name='CouponCodeCreation'),
    url(r'teacher_get_couponcodes/$',views.TeacherGetCouponCodes.as_view(), name='teacherGetCouponCodes'),
    url(r'teacher_conferencing_antmedia/$',views.TeacherAntMediaConferencing.as_view(), name='teacherConferencingAntMedia'),
    url(r'teacher_delete_couponcode/$',views.TeacherDeleteCouponCode.as_view(), name='teacherDeleteCouponCode'),
    url(r'topics_by_chapter_and_package/$', views.GetTopicsByChaptersAndPackage.as_view(),name='getTopicsByChaptersAndPackage'),
    url(r'change_question_link/$', views.ChangeQuestionLink.as_view(),name='changeQuestionLink'),
    url(r'package_videos_subjectwise/$', views.StudentGetSubjectwisePackageVideos.as_view(),name='packageGetSubjectwiseVideos'),
    url(r'package_notes_subjectwise/$', views.StudentGetSubjectwisePackageNotes.as_view(),name='packageGetSubjectwiseNotes'),
    url(r'package_tests_subjectwise/$', views.StudentGetSubjectwisePackageTests.as_view(),name='packageGetSubjectwiseTests'),
    url(r'teacher_see_subjectwise_tests/$',views.TeacherSeeChapterWiseTests.as_view(), name='TeacherSeeChapterWiseTests'),
    url(r'teacher_get_subjectwise_tests/$',views.TeacherSeeSubjectWiseTests.as_view(), name='TeacherSeeSubjectWiseTests'),
    url(r'teacher_change_videoorder_batchwise/$',views.ChangeVideoOrderBatchWise.as_view(), name='ChangeVideoOrderBatchWise'),
    url(r'teacher_change_package_order/$',views.TeacherChangepackageOrder.as_view(), name='TeacherChangepackageOrder'),
    url(r'teacher_change_package_video_order/$',views.TeacherChangePackageVideoOrder.as_view(), name='teacher_change_package_video_order'),
    url(r'teacher_get_order_wise_package_youtube_videos/$',views.TeacherGetPackageWiseYoutubeVideos.as_view(), name='TeacherGetPackageWiseYoutubeVideos'),
    url(r'teacher_batchwise_videos/$', views.TeacherGetBatchWiseVideos.as_view(),name='teacherGetBatchWiseVideos'),
    url(r'teacher_change_video_thumbnail/$',views.TeacherChangeVideoThumbnail.as_view(), name='teacherChangeVideoThumbnail'),
    url(r'teacher_create_subjectiveTest/$',views.TeacherCreateSubjectiveTest.as_view(), name='teacherCreateSubjectiveTest'),
    url(r'teacher_getall_subjectiveTest/$',views.TeacherGetAllSubjectiveTests.as_view(), name='teacherGetAllSubjectiveTests'),
    url(r'package_change_thumbnail/$',views.TeacherPackageChangeThumbnail.as_view(), name='changeThumbnailPackage'),
    url(r'osn_buy_package/$', views.StudentOSNBuyPackage.as_view(),name='osnBuyPackage'),
    url(r'teacher_mark_assignment/$',views.TeacherMarkAssignment.as_view(), name='TeacherMarkAssignment'),
    url(r'teacher_giveremark_assignment/$',views.TeacherAssignmentGiveRemarks.as_view(), name='TeacherAssignmentGiveRemarks'),
    url(r'parent_add_student/$', views.ParentAddStudent.as_view(),name='parentAddStudent'),
    url(r'parent_student_list/$', views.ParentStudentList.as_view(),name='parentStudentList'),
    url(r'parent_live_attendance_student/$',views.ParentLiveClassAttendanceStudent.as_view(), name='parentLiveClassAttendance'),
    url(r'parent_student_test_list/$', views.ParentGetStudentTakenTestList.as_view(),name='ParentGetStudentTakenTestList'),
    url(r'individual_student_performance_parent/$',views.ParentIndividualTestPerformance.as_view(), name='ParentIndividualTestPerformance'),
    url(r'all_active_live_videos/$', views.AllActiveLiveClasses.as_view(),name='allActiveLiveClasses'),
    url(r'teacher_add_demo_video_package/$',views.TeacherAddDemoVideoPackage.as_view(), name='teacherAddDemoVideoPackage'),
    url(r'teacher_add_demo_note_package/$',views.TeacherAddDemoNotePackage.as_view(), name='teacherAddDemoNotePackage'),
    url(r'teacher_add_demo_test_package/$',views.TeacherAddDemoTestPackage.as_view(), name='teacherAddDemoTestPackage'),
    url(r'teacher_add_demo_youtubeLive_package/$', views.TeacherAddDemoYoutubeLiveVideoPackage.as_view(),name='teacher_add_demo_youtubeLive_package'),
    url(r'teacher_set_current_affairs_subject/$',views.TeacherSetCurrentAffairSubject.as_view(), name='teacherSetCurrentAffairSubject'),
    url(r'teacher_get_current_affairs_subject/$',views.TeacherGetSubjectsCurrentAffairSubject.as_view(), name='teacherGetCurrentAffairSubject'),
    url(r'teacher_remove_demo_video_package/$',views.TeacherRemoveDemoVideoPackage.as_view(), name='teacherRemoveDemoVideoPackage'),
    url(r'teacher_remove_demo_note_package/$',views.TeacherRemoveDemoNotePackage.as_view(), name='TeacherRemoveDemoveNotePackage'),
    url(r'teacher_remove_demo_test_package/$',views.TeacherRemoveDemoTestPackage.as_view(), name='TeacherDeleteDemoTestPackage'),
    url(r'teacher_remove_demo_youtubeLive_package/$', views.TeacherRemoveDemoYoutubeLiveVideoPackage.as_view(),name='TeacherRemoveDemoYoutubeLiveVideoPackage'),
    url(r'batchwise_orderwise_videos/$', views.NewOrderWiseBatchWiseVideos.as_view(),name='newOrderWiseBatchwiseVideos'),
    url(r'orderwise_student_chapter_videos/$', views.StudentChapterOrderWiseVideos.as_view(),name='orderwiseChapterWiseStudentVideos'),
    url(r'teacher_change_package_publish_status/$',views.TeacherChangePackagePublishStatus.as_view(), name='TeacherChangePackagePublishStatus'),
    url(r'teacher_get_package_list/$',views.TeacherGetPackagesList.as_view(), name='teacherGetPackagesList'),
    url(r'teacher_change_package_exchange_status/$',views.TeacherChangePackageExchangeStatus.as_view(), name='teacherChangePackageExchangeStatus'),
    url(r'change_correct_option/$',views.QuestionChangeCorrectAnswer.as_view(), name='changeCorrectAnswer'),
    
    url(r'teacher_create_book/$', views.TeacherCreateBook.as_view(),name='teacherCreateBook'),
    url(r'teacher_edit_book/$', views.TeacherEditBook.as_view(),name='teacherEditBook'),
    url(r'teacher_get_books/$', views.TeacherGetbooks.as_view(),name='teacherGetbooks'),
    url(r'teacher_delete_book/$', views.TeacherDeleteBook.as_view(),name='teacherDeleteBook'),
    url(r'teacher_get_book_students/$',views.GetBookStudents.as_view(), name='getBookStudents'),
    url(r'teacher_change_status_bookbuyer/$',views.TeacherChangeStatusBookBuyer.as_view(), name='TeacherChangeStatusBookBuyer'),
    url(r'teacher_get_book_category/$',views.TeacherGetBookCategory.as_view(), name='TeacherGetBookCategory'),
    url(r'teacher_create_book_category/$',views.TeacherCreateBookCategory.as_view(), name='TeacherCreateBookCategory'),
    url(r'teacher_edit_book_category/$',views.TeacherEditBookCategory.as_view(), name='TeacherEditBookCategory'),
    url(r'teacher_delete_book_category/$',views.TeacherDeleteBookCategory.as_view(), name='TeacherDeleteBookCategory'),
    url(r'teacher_dawnload_book_buyers_detail/(?P<book_id>.*)/$',views.TeacherDownloadBookBuyersDetailCSV.as_view(), name='TeacherDownloadBookBuyersDetailCSV'),
    url(r'teacher_get_all_buybook_request/$',views.TeacherGetAllBuyBookRequests.as_view(), name='TeacherGetAllBuyBookRequests'),
    url(r'teacher_accept_student_buybook_request/$',views.TeacherAcceptStudentBuyBookRequest.as_view(), name='TeacherAcceptStudentBuyBookRequest'),
    url(r'teacher_reject_student_buybook_request/$',views.TeacherRejectBuyBookRequest.as_view(), name='TeacherRejectBuyBookRequest'),
    url(r'teacher_dispatche_book/$', views.TeacherDispatcheBook.as_view(),name='TeacherDispatcheBook'),
    url(r'teacher_delivered_book/$', views.TeacherDeliveredBook.as_view(),name='TeacherDeliveredBook'),
    url(r'student_get_books/$', views.StudentGetBooks.as_view(),name='studentGetBooks'),
    url(r'student_get_specfic_book/$', views.StudentIndividualBookDetail.as_view(),name='studentIndividualBookDetail'),
    url(r'book_coupon_code/$', views.BookCouponCodes.as_view(), name='book_coupon_code'),
    url(r'coupon_code_book_wise/$', views.CouponCodesBookWise.as_view(), name='coupon_code_book_wise'),
    url(r'apply_book_coupon_code/$', views.ApplyBookCouponCode.as_view(), name='apply_book_coupon_code'),
    url(r'student_buy_book/$', views.StudentBuyBook.as_view(), name='studentBuyBook'),
    url(r'student_get_book_category/$',views.StudentGetBookCategory.as_view(), name='StudentGetBookCategory'),
    url(r'student_get_categorywise_book/$',views.StudentGetCategoryWiseBook.as_view(), name='StudentGetCategoryWiseBook'),
    url(r'student_request_buy_book/$',views.StudentRequestBuyBook.as_view(), name='StudentRequestBuyBook'),
    url(r'student_see_own_bookorders/$',views.StudentSeeOwnBookOrders.as_view(), name='StudentSeeOwnBookOrders'),
    url(r'student_get_bought_books/$', views.StudentGetBoughtBooks.as_view(),name='student_get_bought_books'),
    url(r'student_book_receipt/$', views.StudentBookReceipt.as_view(),name='student_book_receipt'),
    
    url(r'student_get_specific_package_tests/$',views.StudentGetPackageTestList.as_view(), name='studentGetPackageTestList'),
    url(r'student_package_timetable/$',views.StudentMyPackageGetTimeTables.as_view(), name='packageGetTimeTable'),
    url(r'teacher_delete_test_question/$',views.TeacherDeleteQuestion.as_view(), name='TeacherDeleteQuestion'),
    url(r'get_topic_chaptersWise/$', views.GetTopicChapterWise.as_view(),name='get_topic_chaptersWise'),
    url(r'get_subtopic_topicWise/$', views.GetSubTopic_topicWise.as_view(),name='get_subtopic_topicWise'),
    url(r'teacher_create_googlemeetlive/$',views.TeacherCreateGoogleMeetLive.as_view(), name='teacherCreateGoogleMeetLive'),
    url(r'teacher_create_package_googlemeetlive/$',views.TeacherCreatePackageGoogleMeetLive.as_view(), name='TeacherCreatePackageGoogleMeetLive'),
    url(r'teacher_questions_toipicwise_chapterwise_paginated/$',views.TeacherChapterTopicwiseQuestionsPagination.as_view(), name='topicteacherQuestionsPagination'),
    url(r'teacher_get_active_live_videos/$',views.GetListLiveActiveVideos.as_view(), name='teacherGetLiveActiveVideos'),
    url(r'deactivate_gmeet_videos/$',views.DeactivateGoogleMeet.as_view(), name='deactivateGoogleMeet'),
    url(r'is_student_buy_package_request_rejected/$',views.IsBuyPackageRequestReject.as_view(), name='IsBuyPackageRequestReject'),
    url(r'teacher_edit_topic/$', views.TeacherEditTopic.as_view(),name='TeacherEditTopic'),
    url(r'teacher_edit_subtopic/$', views.TeacherEditSubTopic.as_view(),name='TeacherEditSubTopic'),
    url(r'student_get_notes_batchwise/$', views.StudentGetAllNotesBtachWise.as_view(),name='StudentGetAllNotesBtachWise'),
    url(r'student_get_tests_batchwise/$', views.StudentGetAllTestsBtachWise.as_view(),name='StudentGetAllTestsBtachWise'),
    url(r'student_get_chapterwise_package_videos/$',views.StudentGetChapterwisePackageVideos.as_view(), name='StudentGetChapterwisePackageVideos'),
    url(r'student_get_chapterwise_package_notes/$',views.StudentGetChapterwisePackageNotes.as_view(), name='StudentGetChapterwisePackageNotes'),
    url(r'student_get_chapterwise_package_tests/$',views.StudentGetChapterwisePackageTests.as_view(), name='StudentGetChapterwisePackageTests'),
    url(r'student_get_chapterwise_package_filetests/$',views.StudentGetChapterwisePackageFileTests.as_view(), name='StudentGetChapterwisePackageFileTests'),
    url(r'get_chapters_package_and_subject_wise/$',views.GetChaptersSubjectAndPackageWise.as_view(), name='GetChaptersSubjectAndPackageWise'),
    url(r'get_chapters_package_and_subject_wise_pagination/$',views.GetChaptersSubjectAndPackageWisePagination.as_view(), name='get_chapters_package_and_subject_wise_pagination'),
    url(r'teacher_get_chapters_subject_wise_for_tests/$',views.TeacherGetChaptersSubjectWiseForTests.as_view(), name='TeacherGetChaptersSubjectWiseForTests'),
    url(r'teacher_get_chapters_subject_wise_for_filetests/$',views.TeacherGetChaptersSubjectWiseForFileTests.as_view(), name='TeacherGetChaptersSubjectWiseForFileTests'),
    url(r'teacher_get_uploaded_content/$',views.TeacherGetUploadedContent.as_view(), name='TeacherGetUploadedContent'),
    url(r'instamojo_webhook/$', views.InstamojoWebhook.as_view(),name='instamojoWebHook'),
    url(r'payment_status_instamojo/$',views.CheckInstamojoStatus.as_view(), name='checkInstamojoStatus'),
    url(r'teacher_get_subject_wise_test/$',views.TeacherGetSubjectWiseTests.as_view(), name='TeacherGetSubjectWiseTests'),
    url(r'student_all_courses/$',views.StudentAllCourse.as_view(), name='StudentAllCourse'),
    url(r'student_get_packages_course_wise/$',views.StudentGetPackagesCourseWise.as_view(), name='StudentGetPackagesCourseWise'),
    url(r'student_get_packages_course_category_wise/$',views.StudentGetPackagesCourseCategoryWise.as_view(), name='student_get_packages_course_category_wise'),
    url(r'all_packages_course_category_wise/$',views.AllPackagesCourseCategoryWise.as_view(), name='all_packages_course_category_wise'),
    url(r'teacher_get_youtube_livevideo_info/$',views.TeacherGetYouTubeLiveVideoInfo.as_view(), name='TeacherGetYouTubeLiveVideoInfo'),
    url(r'remove_unused_live_links/$', views.RemoveUnUsedLiveVideoLinks.as_view(),name='RemoveUnUsedLiveVideoLinks'),
    url(r'vidyamandir_teacher_all_packages/$',views.VidyaMandirTeacherAllPackages.as_view(), name='VidyaMandirTeacherAllPackages'),
    url(r'student_get_bought_packages_allvideos/$',views.StudentGetBoughtPackagesAllVideos.as_view(), name='StudentGetBoughtPackagesAllVideos'),
    url(r'student_get_bought_packages_allnotes/$',views.StudentGetBoughtPackagesAllNotes.as_view(), name='StudentGetBoughtPackagesAllNotes'),
    url(r'student_get_bought_packages_alltests/$',views.StudentGetBoughtPackagesAllTests.as_view(), name='StudentGetBoughtPackagesAllTests'),
    url(r'teacher_batchwise_notes/$', views.TeacherGetBatchWiseNotes.as_view(),name='TeacherGetBatchWiseNotes'),
    url(r'student_get_packagewise_coupons/$',views.StudentGetPackageWiseCoupons.as_view(), name='StudentGetPackageWiseCoupons'),
    url(r'teacher_create_googleform_test/$',views.TeacherCreateGoogleFormTest.as_view(), name='TeacherCreateGoogleFormTest'),
    url(r'student_get_googleform_tests/$', views.StudentGetAllGoogleFormTests.as_view(),name='StudentGetAllGoogleFormTests'),
    url(r'evaluate_googleform_test/$',views.EvaluateGoogleFormTest.as_view(), name='EvaluateGoogleFormTest'),
    url(r'teacher_get_subjectwise_googleform_tests/$',views.TeacherGetSubjectWiseGoogleFormTests.as_view(), name='TeacherGetSubjectWiseGoogleFormTests'),
    url(r'teacher_edit_googleform_test/$',views.TeacherEditGoogleFormTest.as_view(), name='TeacherEditGoogleFormTest'),
    url(r'teacher_delete_googleform_test/$',views.TeacherDeleteGoogleFormTest.as_view(), name='TeacherDeleteGoogleFormTest'),
    url(r'teacher_get_students_googleform_testwise/$',views.TeacherGetStudentsGoogleFormTestWise.as_view(), name='TeacherGetStudentsGoogleFormTestWise'),
    url(r'teacher_givemarks_googleform_test/$',views.TeacherGoogleFormTestGiveMarks.as_view(), name='TeacherGoogleFormTestGiveMarks'),
    url(r'teacher_giveremarks_googleform_test/$',views.TeacherGoogleFormTestGiveRemarks.as_view(), name='TeacherGoogleFormTestGiveRemarks'),
    url(r'student_see_googleformtests_performance/$',views.StudentSeeGoogleFormTestsPerformance.as_view(), name='StudentSeeGoogleFormTestsPerformance'),
    url(r'teacher_remove_thumbnail_package/$',views.TeacherRemoveThumbnailPackage.as_view(), name='TeacherRemoveThumbnailPackage'),
    url(r'teacher_own_courses_list/$',views.TeacherGetOwnCourseList.as_view(), name='TeacherGetOwnCourseList'),
    url(r'student_get_bought_packages_course_wise/$',views.StudentGetBoughtPackagesCourseWise.as_view(), name='StudentGetBoughtPackagesCourseWise'),
    url(r'student_get_bought_packages_course_category_wise/$',views.StudentGetBoughtPackagesCourseCategoryWise.as_view(), name='student_get_bought_packages_course_category_wise'),
    url(r'evaluate_test_testing/$', views.EvaluateTestTesting.as_view(),name='EvaluateTestTesting'),
    url(r'teacher_youtube_live_list2/$', views.TeacherGetAllYoutubeLiveVideos2.as_view(),name='TeacherGetAllYoutubeLiveVideos2'),
    url(r'upload_file_firebase/$', views.UploadImageFirebase.as_view(),name='UploadImageFirebase'),
    url(r'teacher_get_couponcode_packagewise/$', views.TeacherGetCouponPackageWise.as_view(), name='TeacherGetCouponPackageWise'),
    url(r'student_get_all_demo_videos_lionscareer/$', views.StudentGetFreeVideosLionsCareer.as_view(), name='StudentGetFreeVideosLionsCareer'),
    url(r'student_own_courses_list/$', views.StudentGetOwnCourseList.as_view(), name='StudentGetOwnCourseList'),
    url(r'student_create_challenge_test/$', views.StudentCreateChallengeTest.as_view(), name='StudentCreateChallengeTest'),
    url(r'teacher_get_bought_package_details/$', views.TeacherGetBoughtPackageDetails.as_view(), name='TeacherGetBoughtPackageDetails'),
    url(r'teacher_get_expired_packages_details/$', views.TeacherGetStudentExpiredPackageDetails.as_view(), name='TeacherGetStudentExpiredPackageDetails'),
    url(r'export_csv_webapp_details/$', views.ExportCsvFileWebapp.as_view(), name='ExportCsvFileWebapp'),
    url(r'export_doubts_csv_file/$', views.ExportCsvFileDoubts.as_view(), name='ExportCsvFileDoubts'),
    url(r'student_test_analytics_content/$', views.StudentTestAnalyticsContent.as_view(), name='StudentTestAnalyticsContent'),
    url(r'teacher_get_subjectwise_filetest/$', views.TeacherGetSubjectwiseFileTest.as_view(), name='TeacherGetSubjectwiseFileTest'),
    url(r'teacher_get_chapterwise_filetest/$',views.TeacherGetChapterwiseFileTest.as_view(), name='TeacherGetChapterwiseFileTest'),
    url(r'teacher_delete_filetest/$',views.TeacherDeleteFileTest.as_view(), name='TeacherDeleteFileTest'),
    url(r'teacher_edit_filetest/$', views.TeacherEditFileTest.as_view(),name='TeacherEditFileTest'),
    url(r'teacher_edit_answers_filetest/$', views.TeacherEditCorrectAnswersFileTest.as_view(),name='TeacherEditCorrectAnswersFileTest'),
    url(r'teacher_edit_marks_filetest/$', views.TeacherEditMarksFileTest.as_view(),name='TeacherEditMarksFileTest'),
    url(r'student_get_all_filetests/$',views.StudentGetAllFileTests.as_view(), name='StudentGetAllFileTests'),
    url(r'student_get_all_free_filetests/$',views.StudentGetAllFreeFileTests.as_view(), name='student_get_all_free_filetests'),
    url(r'student_get_subjectwise_fileTests/$',views.StudentGetSubjectWiseFileTests.as_view(), name='StudentGetSubjectWiseFileTests'),
    url(r'evaluate_filetest/$', views.EvaluateFileTest.as_view(),name='EvaluateFileTest'),
    url(r'student_taken_filetest_list/$',views.StudentTakenFileTestList.as_view(), name='StudentTakenFileTestList'),
    url(r'student_taken_filetest_list_chapter_wise/$',views.StudentTakenFileTestListChapterWise.as_view(), name='student_taken_filetest_list_chapter_wise'),
    url(r'student_see_filetest_performance/$',views.StudentSeeFileTestPerformance.as_view(), name='StudentSeeFileTestPerformance'),
    url(r'student_see_filetest_rank/$',views.StudentSeeFileTestRank.as_view(), name='StudentSeeFileTestRank'),
    url(r'teacher_see_student_filetest_performance/$',views.TeacherSeeStudentFileTestPerformance.as_view(), name='TeacherSeeStudentFileTestPerformance'),
    url(r'guest_get_allCourses/$', views.GuestGetAllCourses.as_view(),name='GuestGetAllCourses'),
    url(r'newstudent_get_coursewise_batches/$',views.NewStudentGetCourseWiseBatches.as_view(), name='NewStudentGetCourseWiseBatches'),
    url(r'student_batchwise_notbought_packages/$', views.StudentGetBatchWiseNotBoughtPackages.as_view(),name='StudentGetBatchWiseNotBoughtPackages'),
    url(r'student_subjectwise_chaptersdata/$', views.StudentGetSubjectWiseChaptersData.as_view(),name='StudentGetSubjectWiseChaptersData'),
    url(r'student_subjectwise_chapters_progress/$', views.StudentGetSubjectWiseChaptersProgress.as_view(),name='StudentGetSubjectWiseChaptersProgress'),
    url(r'teacher_see_student_chapterwise_progress/$',views.TeacherSeeStudentChaptersProgress.as_view(), name='TeacherSeeStudentChaptersProgress'),
    url(r'teacher_add_explanation_video/$',views.TeacherAddExplanationVideo.as_view(), name='TeacherAddExplanationVideo'),
    url(r'package_direct_chapters/$',views.GetChaptersPackageWise.as_view(), name='GetChaptersPackageWise'),
    url(r'teacher_get_chapterwise_notes/$',views.TeacherGetChapterWiseNotes.as_view(), name='TeacherGetChapterWiseNotes'),
    url(r'teacher_get_chapterwise_videos/$',views.TeacherGetChapterWiseVideos.as_view(), name='TeacherGetChapterWiseVideos'),
    url(r'teacher_get_chapters_videoswise/$',views.TeacherGetChaptersVideosWise.as_view(), name='TeacherGetChaptersVideosWise'),
    url(r'teacher_get_chapters_noteswise/$',views.TeacherGetChaptersNotesWise.as_view(), name='TeacherGetChaptersNotesWise'),
    url(r'teacher_create_chapterwise_assignment/$',views.TeacherCreateChapterWiseAssignment.as_view(), name='TeacherCreateChapterWiseAssignment'),
    url(r'student_get_chapterwise_assignment/$',views.StudentGetChapterWiseAssignment.as_view(), name='StudentGetChapterWiseAssignment'),
    url(r'teacher_add_package_fileTests/$',views.PackageAddFileTests.as_view(), name='PackageAddFileTests'),
    url(r'teacher_package_remove_fileTest/$',views.PackageRemoveFileTest.as_view(), name='PackageRemoveFileTest'),
    url(r'teacher_add_demo_fileTest_package/$',views.TeacherAddDemoFileTestPackage.as_view(), name='TeacherAddDemoFileTestPackage'),
    url(r'teacher_remove_demo_fileTest_package/$',views.TeacherRemoveDemoFileTestPackage.as_view(), name='TeacherRemoveDemoFileTestPackage'),
    url(r'is_content_bought/$', views.IsContentBought.as_view(),name='IsContentBought'),
    url(r'student_see_message_nativeVideo/$',views.StudentSeeMessageNativeVideo.as_view(), name='StudentSeeMessageNativeVideo'),
    url(r'suggestion_questions_student/$',views.SuggestionQuestionToStudent.as_view(), name='SuggestionQuestionToStudent'),
    url(r'teacher_dawnload_students_attendance/(?P<batch_id>.*)/(?P<date>.*)/$',views.TeacherDawnloadStudentsAttendanceCSV.as_view(), name='TeacherDawnloadStudentsAttendanceCSV'),
    url(r'teacher_get_filetest_performance_data_csv/(?P<batch_id>.*)/(?P<test_id>.*)/$',views.TeacherGetStudentFileTestPerformanceDataCSV.as_view(), name='TeacherGetStudentFileTestPerformanceDataCSV'),
    url(r'student_get_live_video_link_pagination_wise_testing/$',views.StudentGetLiveVideoLinkPaginationWiseTesting.as_view(), name='StudentGetLiveVideoLinkPaginationWiseOld'),
    url(r'student_get_live_video_link_pagination_wise/$',views.StudentGetLiveVideoLinkPaginationWise.as_view(), name='StudentGetLiveVideoLinkPaginationWise'),
    url(r'teacher_get_post_upi_id/$',views.TeacherGetPostUpiId.as_view(), name='TeacherGetPostUpiId'),
    url(r'teacher_get_testPerformance_data_csv/(?P<batch_id>.*)/(?P<test_id>.*)/$',views.TeacherGetStudentTestPerformanceDataCSV.as_view(), name='TeacherGetStudentTestPerformanceDataCSV'),

    url(r'subInstitute_FAQ/$', views.SubInstituteFAQAPI.as_view(),name='SubInstituteFAQAPI'),
    url(r'get_all_trades/$', views.GetAllTradesList.as_view(), name='GetAllTrades'),
    url(r'check_sub_institute_username_existance/$',views.CheckSubInstituteUsernameExistance.as_view(), name='CheckSubInstituteUsernameExistance'),
    url(r'subinstitute_details/$',views.SubInstituteDetailsAPI.as_view(), name='SubInstituteDetailsAPI'),
    url(r'login_sub_institute_user/$',views.SubInstituteUserLoginAPI.as_view(), name='LoginSubInstituteUser'),
    url(r'user_add_trade_sub_institute/$',views.SubInstituteAddTradebyBothAPI.as_view(), name='UserAddTradeSubInstitute'),
    url(r'user_get_own_sub_institute_trades/$',views.SubInstituteTradesByBothAPI.as_view(), name='UserGetOwnSubInstituteTrades'),
    url(r'institute_get_sub_institute_trades/$',views.InstituteGetSubInstituteTrades.as_view(), name='InstituteGetSubInstituteTrades'),
    url(r'see_trade_datails_sub_institute/$',views.GetTradeDetailsSubInstituteByBoth.as_view(), name='UserSeeTradeDetailsSubInstitute'),
    url(r'user_add_trade_datails_sub_institute/$',views.AddUpdateTradeDatailsSubInstituteByBothAPI.as_view(), name='UserAddTradeDatailsSubInstitute'),
    url(r'sub_institute_student_list_download/$',views.SubInstituteStudentListDownload.as_view(), name='SubInstituteStudentListDownload'),
    url(r'sub_institute_trade_student_list_download/$',views.SubInstituteTradeStudentListDownload.as_view(), name='sub_institute_trade_student_list_download'),
    url(r'subinstitute_get_trade_details_coupons/$',views.SubInstituteGetTradeDetailsCoupon.as_view(), name='SubInstituteGetTradeDetailsCoupon'),
    url(r'subinstitute_create_trade_details_coupons/$',views.SubInstituteCreateTradeDetailsCoupon.as_view(), name='SubInstituteCreateTradeDetailsCoupon'),
    url(r'institute_get_sub_institutes_request/$',views.InstituteGetSubInstitutesRequestsAPI.as_view(), name='TeacherGetApprovedSubInstitutes'),
    url(r'institute_get_sub_institute_video/$',views.InstituteGetSubInstituteVideosAPI.as_view(), name='InstituteGetSubInstituteVideosAPI'),
    url(r'user_upload_video_sub_institute/$',views.SubInstituteVideosAPI.as_view(), name='VideoSubInstitute'),
    url(r'institute_get_sub_institute_picture/$',views.InstituteGetSubInstitutePictureAPI.as_view(), name='InstituteGetSubInstitutePictureAPI'),
    url(r'user_upload_picture_sub_institute/$',views.SubInstitutePictureAPI.as_view(), name='PictureSubInstitute'),
    url(r'institute_get_sub_institute_teacher/$',views.InstituteGetSubInstituteTeacher.as_view(), name='InstituteGetSubInstituteTeacher'),
    url(r'sub_institute_teacher/$',views.SubInstituteTeacherbyBothAPI.as_view(), name='UserCreateNewSubInstituteTeacher'),
    url(r'institute_see_sub_institute_details/$',views.InstituteGetSubInstituteDetailsAPI.as_view(), name='TeacherSeeSubInstituteDetails'),
    url(r'teacher_see_uploadCV/$',views.InstituteSeeUploadCVSubInstitute.as_view(), name='TeacherSeeUploadCVSubInstitute'),
    url(r'teacher_get_contact_students/$',views.InstituteGetStudentsContactAPI.as_view(), name='TeacherGetContactStudents'),
    url(r'approval_students_buy_offline_trade/$',views.ApprovalStudentBuyOfflineTradeNew.as_view(), name='ApprovalStudentBuyOfflineTrade'),
    url(r'teacher_get_bought_trade_students/$',views.TeacherGetBoughtTradeStudents.as_view(), name='TeacherGetBoughtTradeStudents'),
    url(r'sub_institute_teacher_get_trade_bought_students/$',views.SubInstituteTeacherGetOwnTradeBoughtStudents.as_view(), name='SubInstituteTeacherGetOwnTradeBoughtStudents'),
    url(r'teacher_get_student_all_trade_details/$',views.TeacherGetStudentAllTradeDetails.as_view(), name='TeacherGetStudentAllTradeDetails'),
    url(r'teacher_study_material_settings/$', views.TeacherStudyMaterialSettings.as_view(),name='TeacherStudyMaterialSettings'),
    url(r'student_buy_offline_trade_add_by_institute/$',views.StudentBuyOfflineTradeAddByInstitute.as_view(), name='StudentBuyOfflineTradeAddByInstitute'),
    url(r'student_study_material_settings/$', views.StudentStudyMaterialSettings.as_view(),name='StudentStudyMaterialSettings'),
    url(r'student_get_sub_institutes/$',views.StudentGetSubInstitutes.as_view(), name='StudentGetSubInstitutes'),
    url(r'student_see_sub_institute_details/$',views.StudentSeeSubInstituteTrade.as_view(), name='StudentSeeSubInstituteDetails'),
    url(r'student_see_sub_institute_all_trade_details/$',views.StudentSeeSubInstituteAllTradeDetails.as_view(), name='StudentSeeSubInstituteAllTradeDetails'),
    url(r'student_see_sub_institute_trade_details/$',views.StudentSeeSubInstituteTradeDetails.as_view(), name='StudentSeeTradeDetailsSubInstitute'),
    url(r'student_get_review_sub_institute/$',views.StudentGetSubInstituteReviews.as_view(), name='StudentGetSubInstituteReviews'),
    url(r'student_review_sub_institute/$',views.StudentReviewSubInstitute.as_view(), name='StudentReviewSubInstitute'),
    url(r'student_wishlist_sub_institute/$',views.StudentWishListSubInstitute.as_view(), name='StudentWishListSubInstitute'),
    url(r'student_contact_to_teacher/$',views.StudentContactToInstituteAPI.as_view(), name='StudentContactToTeacher'),
    url(r'student_CVupload_sub_institute/$',views.StudentUploadCVSubInstitute.as_view(), name='StudentUploadCVSubInstitute'),
    url(r'student_check_trade_coupon_valid/$',views.CheckTradeDetailsCouponValidations.as_view(), name='CheckTradeCouponValidations'),
    url(r'student_apply_trade_coupon/$',views.StudentApplyTradeDetailsCoupon.as_view(), name='StudentApplyTradeCoupon'),
    url(r'student_buy_offline_trade/$',views.StudentBuyOfflineTrade.as_view(), name='StudentBuyOfflineTrade'),
    url(r'student_buy_online_trade_razorpay/$',views.StudentBuyOnlineTradeRazorpay.as_view(), name='StudentBuyOnlineTradeRazorpay'),
    url(r'student_get_bought_trade/$',views.StudentGetBoughtTrade.as_view(), name='StudentGetBoughtTrade'),
    url(r'purchase_trade_students_list/$',views.PurchaseTradeStudentsList.as_view(), name='PurchaseTradeStudentsList'),
    url(r'purchase_trade_students_payment_details/$',views.PurchaseTradeStudentPaymentDetails.as_view(), name='PurchaseTradeStudentPaymentDetails'),


    url(r'packagewise_live_videos/$', views.PackageWiseLiveVideoAPI.as_view(),name='packagewisePackageLiveVideos'),
    url(r'student_in_package/$', views.StudentInPackageList.as_view(),name='student-in-package'),
    url(r'all_student_buy_packages/$', views.AllStudentBuyPackageList.as_view(),name='all-student-but-packages-list'),
    url(r'add_multiple_students-to_package/$',views.MultipleStudentsAddToPackageAPI.as_view(), name='AddMultipleStudentsToPackage'),
    url(r'student_individual_package_subject_list/$', views.StudentIndividualPackageSubjectList.as_view(),name='student-individual-package-subject-list'),
    url(r'teacher_get_total_earning_and_total_buyers_complete_details/$', views.TeacherGetTotalEarningAndTotalBuyersCompleteDetails.as_view(),name='teacher-get-total-earning-and-total-buyers-complete-details'),
    url(r'teacher_package_permission/$', views.TeacherPackagePermission.as_view(),name='teacher_package_permission'),
    url(r'sub_teacher_add_to_package/$', views.SubTeacherAddToPackageThroughPermission.as_view(),name='sub_teacher_add_to_package_permission'),
    url(r'delete_package_for_sub_teacher/$', views.SubTeacherPackageDeleteByTeacher.as_view(),name='delete_package_for_sub_teacher'),
    url(r'sub_teacher_packages/$', views.SubTeacherInPackage.as_view(),name='sub_teacher_in_package'),

    url(r'get_all_courses/$', views.GetAllCourses.as_view(), name='GetAllCourses'),
    url(r'get_all_categories/$', views.GetAllCategories.as_view(),name='get_all_categories'),
    url(r'get_category_wise_courses/$', views.GetCategoryWiseCourses.as_view(),name='get_category_wise_courses'),
    url(r'teacher_get_packages_from_marketshop/$',views.TeacherGetPackagesFromMarketShop.as_view(), name='TeacherGetPackagesFromMarketShop'),
    url(r'teacher_get_subjectwise_packages_from_marketshop/$',views.TeacherGetSubjectWisePackagesFromMarketShop.as_view(), name='TeacherGetSubjectWisePackagesFromMarketShop'),
    url(r'teacher_see_market_package_details/$', views.TeacherSeeMarketShopPackageDetails.as_view(),name='TeacherSeeMarketShopPackageDetails'),
    url(r'teacher_see_market_package_test_deatils/$',views.TeacherSeeMarketShopPackageTestDeatils.as_view(), name='TeacherSeeMarketShopPackageTestDeatils'),
    url(r'teacher_see_market_package_test_questions/$',views.TeacherSeeMarketShopPackageTestQuestions.as_view(), name='TeacherSeeMarketShopPackageTestQuestions'),
    url(r'teacher_add_packages_from_marketshop/$',views.TeacherAddPackageFromMarketShop.as_view(), name='TeacherAddPackageFromMarketShop'),
    url(r'teacher_get_totalearning_totalbuyersnew/$', views.TeacherGetTotalEarningAndTotalBuyersNew.as_view(),name='TeacherGetTotalEarningAndTotalBuyersNew'),
    url(r'teacher_get_information_addedmarketshop_packages/$',views.TeacherGetInformationAddedMarketShopPackages.as_view(), name='TeacherGetInformationAddedMarketShopPackages'),
    url(r'teacher_get_buyers_details_packageWise/$',views.TeacherGetBuyersDetailsPackageWise.as_view(), name='TeacherGetBuyersDetailsPackageWise'),

    url(r'teacher_get_wallet_balance/$',views.TeacherGetWalletBalance.as_view(), name='TeacherGetWalletBalance'),
    url(r'teacher_request_withdraw_money/$',views.TeacherDoRequestWithdrawMoney.as_view(), name='TeacherDoRequestWithdrawMoney'),
    url(r'teacher_get_withdraw_money_history/$',views.TeacherGetOwnWithdrawMoneyHistory.as_view(), name='TeacherGetOwnWithdrawMoneyHistory'),
    url(r'teacher_request_withdraw_coins/$',views.TeacherDoRequestWithdrawCoins.as_view(), name='TeacherDoRequestWithdrawCoins'),
    url(r'teacher_get_withdraw_coins_history/$',views.TeacherGetOwnWithdrawCoinsHistory.as_view(), name='TeacherGetOwnWithdrawCoinsHistory'),
    url(r'staff_get_all_Withdraw_money_requests/$',views.StaffGetAllWithdrawMoneyRequests.as_view(), name='StaffGetAllWithdrawMoneyRequests'),
    url(r'staff_accept_withdraw_money_request/$',views.StaffAcceptWithdrawMoneyRequest.as_view(), name='StaffAcceptWithdrawMoneyRequest'),
    url(r'staff_reject_withdraw_money_request/$',views.StaffRejectWithdrawMoneyRequest.as_view(), name='StaffRejectWithdrawMoneyRequest'),
    url(r'staff_add_package_for_marketShop/$',views.StaffAddPackageForMarketShop.as_view(), name='StaffAddPackageForMarketShop'),
    url(r'staff_convert_normal_package_to_marketplace_Package/$',views.StaffConvertNormalPackageToMarketPlacePackage.as_view(), name='StaffConvertNormalPackageToMarketPlacePackage'),
    
    url(r'teacher_total_earning_new/$',views.TeacherTotalEarningNew.as_view(), name='TeacherTotalEarningNew'),
    url(r'teacher_total_earning_all_details/$',views.TeacherTotalEarningNew.as_view(), name='TeacherTotalEarningNew'),
    url(r'teacher_get_wallet_balance_new/$',views.TeacherGetWalletBalanceNew.as_view(), name='TeacherGetWalletBalanceNew'),
    url(r'teacher_edit_package_new/$',views.TeacherEditPackageNew.as_view(), name='TeacherEditPackageNew'),
    url(r'teacher_get_withdrawal_history/$',views.TeacherGetOwnWithdrawHistory.as_view(), name='TeacherGetOwnWithdrawHistory'),
    url(r'teacher_get_coin_conversion_rate/$',views.CoinConversionRate.as_view(), name='teacher_get_coin_conversion_rate'),
    url(r'teacher_get_withdrawal/$',views.TeacherDoRequestWithdrawNew.as_view(), name='TeacherDoRequestWithdrawNewAPI'),
    url(r'bodhiai_withdrawal_approval/$', views.BodhiaiWithdrawalApprovalAPI.as_view(),name='BodhiaiWithdrawalApprovalAPI'),

    path('student_permission_buy_package_online/',views.StudentBuyPackagePermission.as_view(), name='StudentBuyPackagePermission'),
    path('student_buy_package_online_request/',views.StudentBuyPackageRequest.as_view(), name='StudentBuyPackageRequest'),
    path('teacher_package_online_all_requests/',views.TeacherPackageAllRequests.as_view(), name='TeacherPackageAllRequests'),
    path('teacher_accept_package_online_request/',views.TeacherAcceptOnPackageRequest.as_view(), name='TeacherAcceptOnPackageRequest'),
    path('teacher_get_dyte_meeting/', views.TeacherGetDyteMeetingAPI.as_view(),name='teacher_get_dyte_meetings'),
    path('teacher_create_meeting/', views.TeacherCreateDyteMeetingAPI.as_view(),name='teacher_create_meeting'),
    path('teacher_end_meeting/', views.TeacherEndDyteMeetingAPI.as_view(),name='teacher_end_meeting'),
    path('student_get_dyte_meetings/', views.StudentGetMeetingsAPI.as_view(),name='student_get_dyte_meetings'),
    path('join_dyte_meeting/', views.JoinDyteMeetingAPI.as_view(),name='join_dyte_meeting'),
    path('unlock_all_content_with_no_package/', views.UnlockAllContentWithNoPackageAPI.as_view(),name='unlock_all_content_with_no_package'),
    path('student_individual_package_list_with_completion_percentage/', views.StudentGetPackageCompletionReportAPI.as_view(),name='StudentGetPackageCompletionReport'),
    path('student_individual_package_subject_list_with_completion_percentage/', views.StudentGetPackageSubjectCompletionReportAPI.as_view(),name='StudentGetPackageSubjectCompletionReport'),
    path('student_individual_package_subject_chapter_list_details_with_completion_percentage/', views.StudentGetPackageSubjectChapterCompletionReportAPI.as_view(),name='StudentGetPackageSubjectChapterCompletionReport'),
    path('student_get_package_report/', views.StudentGetPackageCompletionReportAPI.as_view(),name='StudentGetPackageCompletionReport'),
    path('student_get_package_subject_report/', views.StudentGetPackageSubjectCompletionReportAPI.as_view(),name='StudentGetPackageSubjectCompletionReport'),
    path('student_get_package_subject_chapter_report/', views.StudentGetPackageSubjectChapterCompletionReportAPI.as_view(),name='StudentGetPackageSubjectChapterCompletionReport'),
    path('get_all_subject_of_package/', views.GetAllSubjectOfPackageAPI.as_view(),name='GetAllSubjectOfPackageAPI'),
    path('get_all_subject_chapters_progress/', views.GetAllSubjectChaptersProgressAPI.as_view(),name='GetAllSubjectChaptersProgressAPI'),
    path('get_all_content_of_subject_chapters/', views.GetAllContentOfSubjectChapterAPI.as_view(),name='GetAllContentOfSubjectChapterAPI'),
    path('parent_get_package_report/', views.ParentGetPackageCompletionReportAPI.as_view(),name='ParentGetPackageCompletionReport'),
    path('parent_get_package_subject_report/', views.ParentGetPackageSubjectCompletionReportAPI.as_view(),name='ParentGetPackageSubjectCompletionReport'),
    path('parent_get_package_subject_chapter_report/', views.ParentGetPackageSubjectChapterCompletionReportAPI.as_view(),name='ParentGetPackageSubjectChapterCompletionReport'),

    path('refresh_meethour_token/<str:subscription>/',views.MeetHoursTokenRefreshAPI.as_view(), name='MeetHoursTokenRefreshAPI'),
    path('subscription_meethour_licence/<str:subscription>/',views.MeetHoursSubscriptionAPI.as_view(), name='MeetHoursSubscriptionAPI'),
    path('meet_hour_parallel_mettings/<str:subscription>/',views.MeetHourParallelMettings.as_view(), name='MeetHourParallelMettings'),
    path('meet_hour_recording/<str:subscription>/',views.MeetHourRecordingAPI.as_view(), name='MeetHourRecordingAPI'),

    path('meet_hour_account_type/',views.MeetHourAccountTypeAPI.as_view(), name='MeetHourAccountTypeAPI'),
    path('create_meet_hour_contact/<str:subscription>/',views.CreateOrGetMeetHourContactAPI.as_view(), name='CreateOrGetMeetHourContactAPI'),
    path('join_meet_hour_meeting/<str:subscription>/',views.JoinMeetHourMeetingAPI.as_view(), name='JoinMeetHourMeetingAPI'),

    path('teacher_create_or_get_meet_hour_meeting/<str:subscription>/',
         views.TeacherCreateOrGetMeetHourMeetingAPI.as_view(), name='TeacherCreateOrGetMeetHourMeetingAPI'),
    path('teacher_end_meet_hour_meeting/<str:subscription>/',
         views.TeacherEndMeetHourMeetingAPI.as_view(), name='TeacherEndMeetHourMeetingAPI'),

    path('student_get_meet_hour_meeting/<str:subscription>/',views.StudentGetMeetHourMeetingAPI.as_view(), name='StudentGetMeetHourMeetingAPI'),
    path('teacher_get_meet_hour_meeting/<str:subscription>/',views.TeacherGetAllMeethoureLiveVideos.as_view(), name='TeacherGetAllMeethoureLiveVideos'),

    path('sheadule_application_training/<str:subscription>/',views.CrmTraningSheaduleMeethourAPI.as_view(), name='sheadule_application_training'),
    path('client_join_application_training/<str:subscription>/',views.JoinApplicationTraningMeethour.as_view(), name='client_join_application_training'),
    
    path('create_subject_all_content_replica/',views.CreateSubjectAllContentReplica.as_view(), name='CreateSubjectAllContentReplica'),
    path('query_for_courses/', views.QueryForCourses.as_view(),name='QueryForCourses'),
    path('upload_s3_video_to_azure_blob/', views.UploadS3ToAzureBlob.as_view(),name='UploadS3ToAzureBlob'),
    path('transfer_institute_videos_to_azure/', views.TransferInstituteYtVideosToServer.as_view(),name='TransferInstituteVideosToServer'),
    path('test_question_order/', views.TestQuestionOrderView.as_view(),name='TestQuestionOrderView'),
    path('teacher_terminate_live_videos/',views.TeacherTerminateLiveVideos.as_view(), name='TeacherTerminateLiveVideos'),
    path('student_upcoming_tests/', views.StudentUpcomingTests.as_view(),name='StudentUpcomingTests'),
    path('teacher_upload_video_through_exc/',views.TeacherUploadVideoThroughExc.as_view(), name='TeacherUploadVideoThroughExc'),
    path('download_student_test_performance/',views.DownloadStudentTestPerformance.as_view(), name='DownloadStudentTestPerformance'),
    path('teacher_get_all_buy_subjects_list/',views.TeacherGetAllBuySubjectsList.as_view(), name='TeacherGetAllBuySubjectsList'),
    path('change_child_package_name/',views.ChangeChildPackageName.as_view(),name='ChangeChildPackageName'),
    path('teacher_create_quiz/', views.TeacherCreateQuiz.as_view(),name='TeacherCreateQuiz'),
    path('student_get_quiz/', views.StudentGetQuiz.as_view(), name='StudentGetQuiz'), 
    path('evaluate_quiz/', views.EvaluateQuiz.as_view(), name='EvaluateQuiz'),
    path('student_quiz_performance/', views.StudetQuizPerformance.as_view(), name='StudetQuizPerformance'),
    path('delete_content_data/', views.DeleteContentData.as_view(), name='DeleteContentData'), 
    path('teacher_upload_student_reports/', views.TeacherUploadStudentReports.as_view(),name='teacherUploadStudentReports'),
    path('teacher_see_student_reports/', views.TeacherSeeStudentReports.as_view(),name='teacherSeeStudentReports'),
    path('student_get_report/', views.StudentGetReport.as_view(),name='studentGetReport'),
    path('student_see_dailyVocab_websites/', views.StudentSeeDailyVocabWebsites.as_view(),name='studentSeeDailyVocabWebsites'),
    path('function/', views.Function.as_view(),name='Function'),
    url(r'topics_by_chapter_and_package2/$', views.GetTopicsByChaptersAndPackage2.as_view(),name='GetTopicsByChaptersAndPackage2'),
    url(r'topics_by_chapter_and_package_test/$', views.GetTopicsByChaptersAndPackagetest.as_view(),name='GetTopicsByChaptersAndPackagetest'),
    url(r'student_get_previous_year_data_chapter_wise/$',views.StudentGetPreviousYearDataChapterWise.as_view(), name='studentGetPreviousYearDataChapterWise'),
    url(r'student_get_daily_vocab_data_chapter_wise/$',views.StudentGetDailyVocabDataChapterWise.as_view(), name='studentGetDailyVocabDataChapterWise'),
    url(r'student_ebooks_data_chapter_wise/$',views.StudentEbooksDataChapterWise.as_view(), name='studentEbooksDataChapterWise'),
    url(r'student_chapter_wise_notes/$',views.StudentChapterWiseNotes.as_view(), name='StudentChapterWiseNotes'),
    url(r'student_get_chapterwise_package_test_unlock/$',views.StudentGetChapterwisePackageTestUnlock.as_view(), name='studentGetChapterwisePackageTestUnlock'),
    url(r'teacher_download_paid_course_fees/(?P<batch_id>.*)/$',views.TeacherDownloadPaidCourseFees.as_view(), name='TeacherDownloadPaidCourseFees'),
    url(r'create_test_replica/$',views.CreateTestReplica.as_view(), name='CreateTestReplica'),
    url(r'evaluate_test_all/$', views.EvaluateTestExam.as_view(),name='EvaluateTestExam'),
    url(r'test_all_marks/$', views.StudentTakentestAllMarksList.as_view(),name='StudentTakentestAllMarksList'),
    url(r'teacher_delete_package_test/$', views.TeacherDeletePackageTest.as_view(),name='TeacherDeletePackageTest'),
    url(r'vertex_ai_chat/$',views.VertexAIChatApi.as_view(), name='VertexAIChatApi'),
    url(r'subjectwise_notes/$',views.SubjectWiseNotes.as_view(), name='SubjectWiseNotes'),
    url(r'subjectwise_notes_copy/$',views.SubjectWiseNotesCopy.as_view(), name='SubjectWiseNotesCopy'),
    path('study_live_video_ownload/', views.StudyLiveVideoDownload.as_view(),name='StudyLiveVideoDownload'),
    url(r'package_share_replica/$',views.PackageShareReplica.as_view(), name='PackageShareReplica'),
    path('create_principle_subject_all_content_replica/',views.CreatePrincipleSubjectAllContentReplica.as_view(), name='CreatePrincipleSubjectAllContentReplica'),
    url(r'teacher_delete_student_review/$',views.TeacherDeleteStudentsReview.as_view(), name='TeacherDeleteStudentsReview'),
    url(r'teacher_edit_student_review/$',views.TeacherEditStudentsReview.as_view(), name='TeacherEditStudentsReview'),

    url(r'all_student_review_institute/$',views.AllStudentsReviewInstitute.as_view(), name='AllStudentsReviewInstitute'),
    url(r'student_review_institute/$',views.StudentReviewInstitute.as_view(), name='student_review_institute'),
    url(r'student_payment_history/$',views.StudentPaymentHistory.as_view(),name='student_payment_history'),
    url(r'student_register_form/$',views.CreateRegisterExamForm.as_view(), name='CreateRegisterExamForm'),
    url(r'teacher_all_pay_register_student/$',views.AllStudentListRegistered.as_view(), name='AllStudentListRegistered'),
    url(r'teacher_get_register_student_profile/$',views.TeacherGetRegisterStudent.as_view(), name='TeacherGetRegisterStudent'),
    url(r'student_register_from_profile/$',views.StudentRegisterPaidform.as_view(), name='StudentRegisterPaidform'),
    
    url(r'student_recent_class_wise_report/$',views.StudentRecentClassWiseReport.as_view(), name='student_recent_class_wise_report'),
    url(r'student_recent_test_assignment_report/$',views.StudentRecentTestAssignmentReport.as_view(), name='student_recent_test_assignment_report'),
    url(r'student_class_report_details/$',views.StudentClassReportDetails.as_view(), name='student_class_report_details'),
    url(r'student_assignment_report_details/$',views.StudentAssignmentReportDetails.as_view(), name='student_assignment_report_details'),
    
    url(r'student_admit_card/$',views.StudentAdmitCard.as_view(), name='StudentAdmitCard'),
    url(r'student_score_card/$',views.StudentScoreCard.as_view(), name='StudentScoreCard'),
    url(r'teacher_create_test_testing/$', views.TeacherCreateTestTesting.as_view(),name='TeacherCreateTestTesting'),
    url(r'teacher_create_test_secation/$', views.TeacherCreateSectionForTest.as_view(),name='TeacherCreateSectionForTest'),
    url(r'counseling_course_list/$',views.CounselingCourseList.as_view(),name='counseling_course_list'),
    url(r'student_course_counseling/$',views.StudentCourseCounseling.as_view(),name='student_course_counseling'),
    url(r'course_counseling_details/$',views.CourseCounselingDetails.as_view(),name='course_counseling_details'),
    url(r'student_admit_card_exam_list/$',views.StudentAdmitCardExamList.as_view(),name='StudentAdmitCardExamList'),
    url(r'student_score_card_exam_list/$',views.StudentScoreCardExamList.as_view(),name='StudentScoreCardExamList'),
    url(r'btach_wise_all_content/$',views.AllSubjectBatchWise.as_view(), name='AllSubjectBatchWise'),
    url(r'eclassopedia_web_link/$',views.EclassopediaWebLink.as_view(), name='EclassopediaWebLink'),
    url(r'teacher_add_certificate/$',views.PackageStudentAddCertificate.as_view(), name='PackageStudentAddCertificate'),
    url(r'teacher_get_student_certificate/$',views.TeacherGetStudentCertificate.as_view(), name='TeacherGetStudentCertificate'),
    url(r'student_get_certificate/$',views.StudentGetCertificate.as_view(), name='StudentGetCertificate'),
    url(r'evaluate_test_oneword/$', views.EvaluateTestOption.as_view(),name='EvaluateTestOption'),
    url(r'download_UPM_studentsCsv/$', views.DownloadUPMStudentsCsv.as_view(),name='download_UPM_studentsCsv'),
    url(r'add-subject/$', views.AddSubjectInInstitute.as_view(),name='AddSubjectInInstitute'),
    url(r'add-package-certificate/$', views.AddPackageCretification.as_view(),name='AddPackageCretification'),
    url(r'student_package_data_filter_test/$',views.StudentPackageDataFilter1.as_view(), name='StudentPackageDataFilter1'),
    url(r'add_course_certification/$',views.AddCourseCertification.as_view(), name='add_course_certification'),
    url(r'all_package_list/$',views.AllPackageList.as_view(), name='all_package_list'),
    url(r'package_buy_latest/$',views.PackageBuyLatest.as_view(), name='package_buy_latest'),
    
    url(r'get_all_offline_test_list/$',views.GetAllOfflineTestList.as_view(), name='get_all_offline_exma_list'),
    url(r'offline_test_subject_list/$',views.OfflineTestSubjectList.as_view(), name='offline_exam_subject_list'),
    url(r'student_get_offline_test_marks/$',views.StudentGetOfflineTestMarks.as_view(), name='student_get_offline_exam_marks'),
    url(r'teacher_get_test_students_list/$',views.TeacherGetTestAllStudentsList.as_view(), name='teacher_get_test_students_list'),
    url(r'teacher_get_offline_test_marks/$',views.TeacherGetOfflineTestMarks.as_view(), name='teacher_get_offline_exam_marks'),
    
    url(r'owner_list_shop/$',views.OwnerListShop.as_view(), name='owner_list_shop'),
    url(r'delete_shop_photo/$',views.DeleteShopPhoto.as_view(), name='delete_shop_photo'),
    url(r'single_shop_view/$',views.SingleShopView.as_view(), name='single_shop_view'),
    url(r'client_get_all_shop/$',views.ClientGetAllShop.as_view(), name='client_get_all_shop'),
    url(r'search_shop/$',views.SearchShop.as_view(), name='search_shop'),
    url(r'shop_gallery/$',views.ShopGallery.as_view(), name='shop_gallery'),
    
    url(r'teacher_list_books/$',views.TeacherListBooks.as_view(), name='teacher_list_books'),
    url(r'translate_dynamic_questions/$',views.TranslateIndividualQuestions.as_view(), name='translate_individual_questions'),
    url(r'delete_token/$',views.DeleteTokenView.as_view(), name='delete_token'),
    url(r'student_check_test_taken_new/$',views.StudentTakenTestNew.as_view(), name='student_check_test_taken_new'),
    url(r'teacher_all_blogs/$',views.TeacherAllBlogs.as_view(), name='teacher_all_blogs'),
    
    url(r'teacher_all_coins/$',views.TeacherAllCoins.as_view(), name='teacher_all_coins'),
    url(r'teacher_request_coins/$',views.TeacherRequestCoin.as_view(), name='teacher_request_coins'),
    url(r'teacher_approve_coins_request/$',views.TeacherApproveCoinsRequest.as_view(), name='teacher_approve_coins_request'),
    url(r'all_approved_request/$',views.AllApprovedRequest.as_view(), name='all_approved_request'),
    url(r'all_rejected_request/$',views.AllRejectedRequest.as_view(), name='all_rejected_request'),
    url(r'teacher_all_request/$',views.TeacherAllRequest.as_view(), name='teacher_all_request'),
    url(r'all_teachers_list/$',views.AllTeachersList.as_view(), name='all_teachers_list'),
    url(r'teacher_all_coins_record/$',views.TeacherAllCoinsRecord.as_view(), name='teacher_all_coins_record'),
    
    url(r'subInstitute_all_student_list_download/$',views.SubInstituteAllStudentListDownload.as_view(), name='subInstitute_all_student_list_download'),
    url(r'translate_question/$',views.TranslateQuestion.as_view(), name='translate_question'),
    url(r'package_wise_test_list/$',views.PackageWiseTestList.as_view(), name='package_wise_test_list'),
    url(r'test_wise_student_list/$',views.TestWiseStudentList.as_view(), name='test_wise_student_list'),
    url(r'student_test_attempt_list/$',views.StudentTestAttemptList.as_view(), name='student_test_attempt_list'),
    url(r'check_question/$',views.CheckQuestion.as_view(), name='check_question'),
    url(r'package_demo_content_duplicate/$',views.PackageDemoContentDuplicate.as_view(), name='package_demo_content_duplicate'),
    url(r'question_details/$',views.QuestionDetails.as_view(), name='question_details'),
    url(r'batch_wise_all_tests/$',views.BatchWiseAllTests.as_view(), name='batch_wise_all_tests'),
    url(r'batch_all_student_test_result_download/(?P<batch_id>.*)/(?P<test_id>.*)/$',views.BatchAllStudentTestResultDownload.as_view(), name='batch_all_student_test_result_download'),
    url(r'youtube_live_student_details_download/(?P<video_id>.*)/$',views.YoutubeLiveStudentDetailsDownload.as_view(), name='youtube_live_student_details_download'),
    url(r'server_usedby_teacher/$',views.ServerUsedByTeacher.as_view(), name='server_usedby_teacher'),
    url(r'student_remove_from_batches/$',views.StudentRemoveFromBatches.as_view(), name='student_remove_from_batches'),
    
    url(r'verify_firebase_token/$',views.VerifyFirebaseToken.as_view(), name='verify_firebase_token'),
    url(r'send_user_notification/$',views.SendUserNotification.as_view(), name='send_user_notification'),
    url(r'send_user_chat_notification/$',views.SendUserChatNotification.as_view(), name='send_user_chat_notification'),
    url(r'teacher_get_topic_wise_videos/$',views.TeacherGetTopicWiseVideos.as_view(), name='teacher_get_topic_wise_videos'),
    url(r'teacher_get_topic_wise_notes/$',views.TeacherGetTopicWiseNotes.as_view(), name='teacher_get_topic_wise_notes'),
    
    path('student_test_entry/',views.StudentTestEntry.as_view(), name='student-test-entry'),
    path('evaluate_test_league/',views.EvaluateTestLeague.as_view(), name='evaluate-test-league'),
    path('calculate-test-ranks/',views.CalculateTestRanks.as_view(), name='calculate-test-ranks'),
    path('prize-levels/', views.PrizeLevelList.as_view(), name='prize-level-list'),  
    path('prize-levels/<int:pk>/', views.PrizeLevelDetail.as_view(), name='prize-level-detail'),  
    path('test-prize-levels/<int:test_id>/', views.TestPrizeLevel.as_view(), name='test-prize-levels'),
    path('quiz-categories/', views.QuizCategoryList.as_view(), name='quiz_category_list'),
    path('quiz-categories/<int:pk>/', views.QuizCategoryDetail.as_view(), name='quiz_category_detail'),
    path('contest-categories/', views.ContestCategoryListing.as_view(), name='contest-category-list-create'),
    path('contest-categories/<int:pk>/', views.ContestCategoryUpdateView.as_view(), name='contest-category-detail'),
    path('test-participants/', views.TestParticipant.as_view(), name='test-participants'),
    path('quiz-contest-categories/<int:quiz_category_id>/', views.ContestCategoryByQuizCategory.as_view(), name='contest_categories_by_quiz_category'),
    path('contest-category-tests/<int:contest_category_id>/', views.TestByContestCategory.as_view(), name='tests_by_contest_categories'),
    path('test-join-students/<int:test_id>/', views.TestJoinStudents.as_view(), name='test-join-students'),
    path('test-leaderboard/<int:test_id>/', views.LeaderboardAPIView.as_view(), name='leaderboard'),
    path('student-test-room/', views.StudentTestRoom.as_view(), name='student-test-room'),
    path('check-student-attempted-test/<int:test_id>/', views.CheckStudentAttemptAPIView.as_view(), name='check-student-attempt'),
    path('get_quiz_contest/', views.GetQuizContest.as_view(),name='get_quiz_contest'),
    path('coin-payout/', views.CoinPayoutView.as_view(), name='coin-payout'),
    path('coin-payout/', views.CoinPayoutView.as_view(), name='coin-payout'),
    path('student-coins-view/',views.StudentCoinsView.as_view(), name='student-coins-view'),
    path('withdraw-coins-view/',views.WithdrawCoinsView.as_view(), name='withdraw-coins-view'),
    path('manage-withraw-request/', views.ManageWithdrawRequestView.as_view(), name='manage-withraw-request'),
    path('list-withraw-request/', views.ListWithdrawRequestsView.as_view(), name='list-withraw-request'),
    path('list-pending-withraw-request/', views.ListPendingWithdrawRequestsView.as_view(), name='list-pending-withraw-request'),
    path('teacher-add-coins/', views.TeacherAddCoinsView.as_view(), name='teacher-add-coins'),
    
    path('jobs/', views.JobInformationList.as_view(), name='job_list'),
    path('jobs/<int:pk>/', views.JobInformationDetail.as_view(), name='job_detail'),
    path('institute_student_list_download/',views.InstituteStudentListDownload.as_view(), name='institute_student_list_download'),
    path('delete_client_records/', views.DeleteClientRecords.as_view(), name='delete_client_records'),
    path('add_student_package/', views.AddStudentPackage.as_view(), name='add_student_package'),
]





==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/views.py
--------------------------------------------------

import os
import json
import pyrebase
import csv
import pandas as pd
import math
import hashlib
import base64
import string
import requests
import base64
import hashlib
import hmac
import time
import logging
import re
import random
from random import randint
import boto3
from boto3.session import Session
from datetime import datetime, timedelta
from django.utils import timezone
from fractions import Fraction
from bs4 import BeautifulSoup
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAdminUser
from django.db.models.aggregates import Avg
from basicinformation.models import *
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *
from membership.models import *
from management.models import *
from content.models import *
from content.content_helper import *
from content.query import *
from rest_framework.authtoken.models import Token
from google.cloud import translate_v2 as translate
from django.contrib.postgres.search import SearchVector
from rest_framework import permissions, status, authentication
from django.core.files.storage import default_storage
from Crypto.Cipher import AES
from django.db.models import Q, Sum, Avg
from rest_framework.renderers import TemplateHTMLRenderer
from more_itertools import unique_everseen
from django.contrib.auth.models import User, Group
from django.http import HttpResponse
from django.contrib.auth import authenticate
from rest_framework.authtoken.models import Token
from content.api.liveVideos.dyte.dyte_api_functions import *
from google.cloud import storage
from google.cloud.video import transcoder_v1
from google.cloud.video.transcoder_v1.services.transcoder_service import TranscoderServiceClient
from cryptography.fernet import Fernet
from fractions import Fraction
from django.core.exceptions import ObjectDoesNotExist
import firebase_admin
from firebase_admin import credentials, messaging,auth
from google.cloud import storage
from django.shortcuts import get_object_or_404
from .serializers import *
from django.http import Http404
import razorpay
from celery.result import AsyncResult

AWS_UPLOAD_BUCKET = 'aprilvideosdashmalav'
AWS_UPLOAD_REGION = 'us-east-1'
AWS_UPLOAD_ACCESS_KEY_ID = 'AKIAU6GDXBLXWBRNUKF7'
AWS_UPLOAD_SECRET_KEY = '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'

IV = "@@@@&&&&####$$$$"
BLOCK_SIZE = 16

BUCKET_NAME = 'testjuly'
GCP_UPLOAD_ACCESS_KEY_ID ='GOOG1E3JFMAGFPMABQHH7AZTKDP2I6ROII4GVYA3UEAUKKRBVZCNO6EGM55A2'
GC_UPLOAD_SECRET_KEY = 'cY15FClMzweTeQxVvMFvzpUmNYjbOzSWqNma0ZNW'

AzureStorageAccountName = 'bodhiaigeneral'
ContainerName = 'testjune'
SASToken =  'sp=rw&st=2023-06-21T12:12:29Z&se=2024-06-21T20:12:29Z&spr=https&sv=2022-11-02&sr=c&sig=5RVmj%2BKhILsYvuS4oKVtCiOKGAH0xHBmJrzaHXWTBfI%3D'

def __pad__(s): return s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)

def __unpad__(s): return s[0:-ord(s[-1])]

firebaseConfig = {
    'apiKey': "AIzaSyBPgZLKA1F__xrKGEGOAENmZ4weNSvix-k",
    'authDomain': "student-website-8dd82.firebaseapp.com",
    'databaseURL': "https://student-website-8dd82.firebaseio.com",
    'projectId': "student-website-8dd82",
    'storageBucket': "student-website-8dd82.appspot.com",
    'messagingSenderId': "444604978733",
    'appId': "1:444604978733:web:c4b217823a5ed2025d8aa4",
    'measurementId': "G-DEK2NHG39N"
}
firebase = pyrebase.initialize_app(firebaseConfig)
storage = firebase.storage()

class GetPackageBuyBaseUrl(APIView):
    def get(self, request):
        base_url = "https://bodhiai.live/content/package_details/"
        return Response(base_url)

class TeacherGetSubjects(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            if me.profile.mainTeacher:
                subjects = Subject.objects.filter(teachersubject__institute=me.profile.institute).distinct()
            else:
                subjects = me.profile.subjects.all()

            subjects_list = []
            for subject in subjects:
                if subject.language:
                    language_dict = {'id': subject.language.id,'language': subject.language.language}
                else:
                    language_dict = {}

                subject_dict = {'name': subject.name, 'id': subject.id,'icon': subject.icon, 'language': language_dict}
                subjects_list.append(subject_dict)

            context = {'status':True,'subjects': subjects_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherGetAllChapters(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.prefetch_related('chapter_subject').get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject).order_by('id')
            
            chapter_list = []
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapter_list.append(chapter_dict)
                
            context = {'status':True, 'chapters': chapter_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherUploadNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            title = data.get('title')
            subject_id = data['subject_id']
            chapter_id = data['chapter_id']
            thumbnail = data.get('thumbnail')
            note_details = data['note_details']
            image = json.loads(data.get('image', "false"))
            topic_id = json.loads(data.get('topic_id', "null"))
            subtopic_id = json.loads(data.get('subTopic_id', "null"))

            try:
                batches_ids = data['batches_ids']
                batch_list = batches_ids.strip('][').split(',')
            except:
                batch_list = None

            try:
                noteViewsLimite = data['noteViewsLimite']
            except:
                noteViewsLimite = None

            note_url = note_details.strip('][')
            subject = Subject.objects.get(id=subject_id)
            chapter = Chapter.objects.get(id=chapter_id)

            main_note = Note()
            main_note.title = title
            main_note.thumbnail = thumbnail
            main_note.subject = subject
            main_note.chapter = chapter
            main_note.noteViewsLimite = noteViewsLimite
            main_note.image = image
            main_note.save()
            main_note.teacher.add(me.profile)

            if topic_id != None:
                topic = QuestionTopic.objects.get(id=topic_id)
                main_note.topic.add(topic)

            if subtopic_id != None:
                subtopic = QuestionSubTopic.objects.get(id=subtopic_id)
                main_note.subTopic.add(subtopic)

            note_url_ = NoteURL()
            note_url_.note = main_note
            note_url_.link = note_url
            note_url_.save()

            if batch_list != None:
                institute_code_list = ["wisdombrains","mbca"]
                notification = {"title": f"NEW NOTES", "body": f'A new note {title} of {subject.name} has been uploaded for you by {me.profile.name}'}
                data = {'id': str(main_note.id), 'type': 'note', 'title': str(main_note.title), 'link': str(note_url_.link)}
                
                try:
                    server_key = me.profile.institute.serverKey
                except Exception as e:
                    server_key = None
                    
                try:
                    json_file_url = me.profile.institute.json_file
                except Exception as e:
                    json_file_url = None

                for bat in batch_list:
                    batch = Batch.objects.get(id=bat)
                    institute_code = me.profile.institute.code
                    if institute_code not in institute_code_list:
                        if json_file_url == None:
                            send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat), data = data)
                        else:
                            send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat), data = data)

                    main_note.batches.add(batch)
                    main_note.save()

            context = {'status': 'Success', 'id': main_note.id, 'image': main_note.image, 'pages': len(note_details)}
            
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
            
        return Response(context)

class TeacherGetAllVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        
        try:
            if me.profile.teacheruser.username == 'eduprep_teacher':
                videos = Video.objects.filter(teacher=me.profile).order_by('id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute)
                    videos = Video.objects.filter(teacher__in=teachers).order_by('-id')
                else:
                    videos = Video.objects.filter(teacher=me.profile).order_by('id')

            videos_list = []
            for video in videos:
                subject = video.subject.name
                chapter = video.chapter.name
                batches = video.batches.all()
                batch_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)
                    
                video_dict = {
                    'id': video.id, 
                    'title': video.title, 
                    'url': video.urlLink, 
                    'publishDate': video.publishDate,
                    'generalVideo': video.generalVideo, 
                    'subject': subject, 
                    'chapter': chapter, 
                    'batches': batch_list
                    }
                videos_list.append(video_dict)
                context = {'status':True,'videos': videos_list}
                
        except Exception as e:
            context = {'status':False,'message':str(e)}
        
        return Response(context)
    
class TeacherGetAllNotes(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        
        try:
            if me.profile.teacheruser.username == 'eduprep_teacher':
                notes = Note.objects.filter(teacher=me.profile).order_by('-id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute)
                    notes = Note.objects.filter(teacher__in=teachers).order_by('-id')
                else:
                    notes = Note.objects.filter(teacher=me.profile).order_by('id')
                    
            notes_list = []
            for note in notes:
                title = note.title
                publishDate = note.publishDate
                noteViewsLimite = note.noteViewsLimite
                batches = note.batches.all()
                batch_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                    
                url_list = [note_link]

                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'
                    
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = 'Deleted Chapter'
                    
                try:
                    chapter_id = note.chapter.id
                except:
                    chapter_id = 0
                    
                note_dict = {
                    'id': note.id, 
                    'title': title, 
                    'subject_id': note.subject.id, 
                    'subject_name': subject_name,
                    'chapter_id': chapter_id, 
                    'chapter_name': chapter_name, 
                    'publishDate': publishDate, 
                    'note_url': url_list, 
                    'batches': batch_list, 
                    'noteViewsLimite': noteViewsLimite
                    }
                notes_list.append(note_dict)
            
            context = {'status':True, 'notes': notes_list}
        
        except Exception as e:
            context = {'status':False, 'message':str(e)}
                
        return Response(context)

class TeacherGetAllTests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                tests = Test.objects.filter(createdBy__in=teachers).order_by('-id')
            else:
                tests = Test.objects.filter(createdBy=me.profile).order_by('-id')

            tests_list = []
            for test in tests:
                subjects_list = [subject.name for subject in test.subjects.all()]
                chapters_list = [chapter.name for chapter in test.chapters.all()]
                numberQuestions = test.questions.all().count()
                
                test_dict = {
                    'id': test.id, 
                    'name': test.name, 
                    'subjects': subjects_list, 
                    'chapters': chapters_list,
                    'published': test.published, 
                    'totalMarks': test.totalMarks, 
                    'numberQuestions': numberQuestions, 
                    'time': test.time
                    }
                tests_list.append(test_dict)
                
            context = {'status':True, 'tests': tests_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class StudentGetSubjects(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            subjects = me.profile.subjects.all().order_by('id')
            subjects_list = []
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name, 'icon': subject.icon}
                subjects_list.append(subject_dict)
            context = {'status':True, 'subjects': subjects_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class StudentGetChapters(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject).order_by('id')
            chapters_list = []
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name}
                chapters_list.append(chapter_dict)
                
            context = {'status':True, 'chapters': chapters_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentSeeTopicsChapterWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            topics = QuestionTopic.objects.filter(chapters__id=chapter_id)
            topics_list = []
            for topic in topics:
                topics_dict = {'id': topic.id, 'name': topic.topic}
                topics_list.append(topics_dict)
            context = {'status': 'success', 'topics': topics_list}

        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentSeeTopicWiseSubTopics(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            topic_id = data['topic_id']
            question_topic = QuestionTopic.objects.get(id=topic_id)
            sub_topics = QuestionSubTopic.objects.filter(topic=question_topic)
            subtopics_list = []
            for subtopic in sub_topics:
                subtopics_dict = {'id': subtopic.id, 'name': subtopic.name}
                subtopics_list.append(subtopics_dict)
                
            context = {'status': 'success', 'sub_topics': subtopics_list}

        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
            
        return Response(context)

class StudentSeeTopicsAllData(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        data = request.data
        
        try:
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            student_brought_tests = student_brought_packages.get_all_brought_tests()
            student_brought_filetest = student_brought_packages.get_all_brought_fileTests()
            student_brought_notes = student_brought_packages.get_all_brought_notes()
            student_brought_videos = student_brought_packages.get_all_brought_videos()

            if me.institute.listReversed:
                data_order = '-id'
            else:
                data_order = 'id'

            video_list = []
            notes_list = []
            tests_list = []
            ftest_list = []
            
            topic_id = data['topic_id']
           
            if me.profile.accessVideo == True:
                videos = Video.objects.filter(batches__in=batches, topics=topic_id).select_related(
                    'subject', 'chapter').prefetch_related('teacher').distinct().order_by(data_order)
                
                video_teachers_list = []
                for video in videos:
                    video_teachers = video.teacher.all()
                    for teacher in video_teachers:
                        video_teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        video_teachers_list.append(video_teacher_dict)

                    bought = False
                    if video.id in student_brought_videos:
                        bought = True

                    if video.locked == False:
                        bought = True

                    videos_dict = {
                        'id': video.id,
                        'name': video.title,
                        'teacher': video_teachers_list,
                        'subject': video.subject.name,
                        'chapter': video.chapter.name,
                        'urlLink': video.urlLink,
                        'lowLink': video.lowlink,
                        'highLink': video.highlink,
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate,
                        'thumbnail': video.thumbnail,
                        'viewsLimite': video.viewsLimite,
                        'bought': bought,
                    }
                    video_list.append(videos_dict)

            if me.profile.accessNotes == True:
                notes = Note.objects.filter(batches__in=batches,topic=topic_id).select_related(
                    'subject', 'chapter').prefetch_related('teacher').distinct().order_by(data_order)

                for note in notes:
                    bought = False
                    if note.id in student_brought_notes:
                        bought = True

                    if note.locked == False:
                        bought = True

                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                    teachers = note.teacher.all()
                    note_teachers_list = []
                    for teacher in teachers:
                        note_teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        note_teachers_list.append(note_teacher_dict)
                    notes_dict = {
                        'id': note.id,
                        'title': note.title,
                        'teacher': note_teachers_list,
                        'publishDate': note.publishDate,
                        'thumbnail': note.thumbnail,
                        'subject': note.subject.name,
                        'chapter': note.chapter.name,
                        'locked': note.locked,
                        'noteViewsLimite': note.noteViewsLimite,
                        'link': note_link,
                        'bought': bought,
                    }
                    notes_list.append(notes_dict)

            if me.profile.accessTests == True:
                tests = Test.objects.filter(batches__in=batches,topics=topic_id).select_related(
                    'createdBy').prefetch_related('questions', 'subjects', 'chapters', 'batches').distinct().order_by(data_order)
                
                taken_tests = set(student_marks.test for student_marks in StudentMarks.objects.select_related('test').filter(student=me.profile))
                
                chapter_list = []
                subject_list = []
                batches_list = []

                for test in tests:
                    total_questions = test.questions.all().count()
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    batches = test.batches.all()

                    bought = False
                    if test.id in student_brought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    for subject in subjects:
                        try:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                        except:
                            subject_dict = {'id': 0, 'name': 'General'}
                        subject_list.append(subject_dict)

                    for chapter in chapters:
                        try:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        except:
                            chapter_dict = {'id': 0, 'name': 'General', 'code': 0}
                        chapter_list.append(chapter_dict)

                    for batch in batches:
                        try:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                        except:
                            batch_dict = {'id': 0, 'name': 'General'}
                        batches_list.append(batch_dict)

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test in taken_tests:
                        first_attempt = False
                    else:
                        first_attempt = True

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.get(student=me.profile)
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'name': test.name, 
                                    'total_Attempts': student_last_report.attempt_count,
                                    'totalMarks': test.totalMarks, 
                                    'passing_marks': test.passing_marks,
                                    'published': test.published,
                                    'time': test.time,
                                    'locked': test.locked,
                                    'total_questions': total_questions,
                                    'testTimeOver': testTimeOver,
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'subjects': subject_list,
                                    'chapters': chapter_list,
                                    'batches': batches_list,
                                    'bought': bought,}
                                tests_list.append(test_dict)

                        else:
                            test_dict = {
                                'id': test.id,
                                'name': test.name, 
                                'first_attempt': first_attempt, 
                                'total_Attempts': student_last_report.attempt_count,
                                'totalMarks': test.totalMarks,
                                'passing_marks': test.passing_marks,
                                'published': test.published,
                                'time': test.time,
                                'locked': test.locked,
                                'total_questions': total_questions,
                                'testTimeOver': testTimeOver,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'subjects': subject_list,
                                'chapters': chapter_list,
                                'batches': batches_list,
                                'bought': bought,
                                }
                            tests_list.append(test_dict)

                    elif first_attempt == False and test.repeatTest == False:
                        pass

                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'total_Attempts': 0, 
                            'createdBy': test.createdBy.name,
                            'first_attempt': first_attempt,
                            'totalMarks': test.totalMarks,
                            'passing_marks': test.passing_marks,
                            'published': test.published,
                            'time': test.time,
                            'locked': test.locked,
                            'total_questions': total_questions,
                            'testTimeOver': testTimeOver,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'batches': batches_list,
                            'bought': bought,
                            }
                        tests_list.append(test_dict)

            if me.profile.accessTests == True:
                ftests = FileTest.objects.filter(batches__in=batches,topic=topic_id).select_related(
                    'subject','chapter','topic','sub_topic','createdBy').prefetch_related('batches').distinct().order_by(data_order)

                taken_tests = set(student_marks.fileTest for student_marks in StudentFileTestMarks.objects.select_related('fileTest').filter(student=me.profile))

                for test in ftests:
                    if test:
                        bought = False
                        if test.id in student_brought_filetest:
                            bought = True

                        if test.locked == False:
                            bought = True

                        try:
                            subject = test.subject.name
                        except:
                            subject = None

                        try:
                            chapter = test.chapter.name
                        except:
                            chapter = None

                        if test in taken_tests:
                            first_attempt = False
                        else:
                            first_attempt = True

                        if first_attempt == False and test.repeatTest == True:
                            student_last_report = test.marks_filetest.get(student=me.profile)
                            if test.test_count != None:
                                if student_last_report.attempt_count < test.test_count:
                                    test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                                'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                                    ftest_list.append(test_dict)
                            else:
                                test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                            'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                                ftest_list.append(test_dict)

                        elif first_attempt == False and test.repeatTest == False:
                            pass
                        else:
                            test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                        'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                            ftest_list.append(test_dict)

            all_data = {
                'video_list': video_list,
                'notes_list': notes_list,
                'tests_list': tests_list,
                'ftest_list': ftest_list,
            }

            context = {'status': 'success', 'all_data': all_data}

        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
            
        return Response(context)

class StudentSeeSubTopicsAllData(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        data = request.data
        
        try:
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            student_brought_videos = student_brought_packages.get_all_brought_videos()
            student_brought_tests = student_brought_packages.get_all_brought_tests()
            student_brought_filetest = student_brought_packages.get_all_brought_fileTests()
            student_brought_notes = student_brought_packages.get_all_brought_notes()

            if me.institute.listReversed:
                data_order = '-id'
            else:
                data_order = 'id'
        
            subtopic_id = data['subtopic_id']
            
            video_list = []
            if me.profile.accessVideo == True:
                videos = Video.objects.filter(batches__in=batches, subTopics=subtopic_id).select_related(
                    'subject', 'chapter').prefetch_related('teacher').order_by(data_order)

                video_teachers_list = []
                for video in videos:
                    video_teachers = video.teacher.all()
                    for teacher in video_teachers:
                        video_teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        video_teachers_list.append(video_teacher_dict)

                    bought = False
                    if video.id in student_brought_videos:
                        bought = True

                    if video.locked == False:
                        bought = True

                    videos_dict = {
                        'id': video.id,
                        'name': video.title,
                        'teacher': video_teachers_list,
                        'subject': video.subject.name,
                        'chapter': video.chapter.name,
                        'urlLink': video.urlLink,
                        'lowLink': video.lowlink,
                        'highLink': video.highlink,
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate,
                        'thumbnail': video.thumbnail,
                        'viewsLimite': video.viewsLimite,
                        'bought': bought,
                    }
                    video_list.append(videos_dict)

            notes_list = []
            if me.profile.accessNotes == True:
                notes = Note.objects.filter(batches__in=batches,subTopic=subtopic_id).select_related(
                    'subject', 'chapter').prefetch_related('teacher').order_by(data_order)

                for note in notes:
                    bought = False
                    if note.id in student_brought_notes:
                        bought = True

                    if note.locked == False:
                        bought = True

                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                    teachers = note.teacher.all()
                    note_teachers_list = []
                    for teacher in teachers:
                        note_teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        note_teachers_list.append(note_teacher_dict)
                    notes_dict = {
                        'id': note.id,
                        'title': note.title,
                        'teacher': note_teachers_list,
                        'publishDate': note.publishDate,
                        'thumbnail': note.thumbnail,
                        'subject': note.subject.name,
                        'chapter': note.chapter.name,
                        'locked': note.locked,
                        'noteViewsLimite': note.noteViewsLimite,
                        'link': note_link,
                        'bought': bought,
                    }
                    notes_list.append(notes_dict)

            tests_list = []
            if me.profile.accessTests == True:
                tests = Test.objects.filter(batches__in = batches,subTopics = subtopic_id).select_related(
                    'createdBy').prefetch_related('questions', 'subjects', 'chapters', 'batches').order_by(data_order)

                taken_tests = set(student_marks.test for student_marks in StudentMarks.objects.select_related('test').filter(student = me.profile))

                chapter_list = []
                subject_list = []
                batches_list = []

                for test in tests:
                    total_questions = test.questions.all().count()
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    batches = test.batches.all()

                    bought = False
                    if test.id in student_brought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    for subject in subjects:
                        try:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                        except:
                            subject_dict = {'id': 0, 'name': 'General'}
                        subject_list.append(subject_dict)

                    for chapter in chapters:
                        try:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        except:
                            chapter_dict = {'id': 0, 'name': 'General', 'code': 0}
                        chapter_list.append(chapter_dict)

                    for batch in batches:
                        try:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                        except:
                            batch_dict = {'id': 0, 'name': 'General'}
                        batches_list.append(batch_dict)

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test in taken_tests:
                        first_attempt = False
                    else:
                        first_attempt = True

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.get(student=me.profile)
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'name': test.name, 
                                    'total_Attempts': student_last_report.attempt_count,
                                    'totalMarks': test.totalMarks, 
                                    'passing_marks': test.passing_marks,
                                    'published': test.published,
                                    'time': test.time,
                                    'locked': test.locked,
                                    'total_questions': total_questions,
                                    'testTimeOver': testTimeOver,
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'subjects': subject_list,
                                    'chapters': chapter_list,
                                    'batches': batches_list,
                                    'bought': bought,}
                                tests_list.append(test_dict)

                        else:
                            test_dict = {
                                'id': test.id,
                                'name': test.name, 
                                'first_attempt': first_attempt, 
                                'total_Attempts': student_last_report.attempt_count,
                                'totalMarks': test.totalMarks,
                                'passing_marks': test.passing_marks,
                                'published': test.published,
                                'time': test.time,
                                'locked': test.locked,
                                'total_questions': total_questions,
                                'testTimeOver': testTimeOver,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'subjects': subject_list,
                                'chapters': chapter_list,
                                'batches': batches_list,
                                'bought': bought,
                                }
                            tests_list.append(test_dict)

                    elif first_attempt == False and test.repeatTest == False:
                        pass

                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'total_Attempts': 0, 
                            'createdBy': test.createdBy.name,
                            'first_attempt': first_attempt,
                            'totalMarks': test.totalMarks,
                            'passing_marks': test.passing_marks,
                            'published': test.published,
                            'time': test.time,
                            'locked': test.locked,
                            'total_questions': total_questions,
                            'testTimeOver': testTimeOver,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'batches': batches_list,
                            'bought': bought,
                            }
                        tests_list.append(test_dict)
                        
            ftest_list = []
            if me.profile.accessTests == True:
                ftests = FileTest.objects.filter(batches__in=batches,sub_topic=subtopic_id).select_related(
                    'subject','chapter','topic','sub_topic','createdBy').prefetch_related('batches').order_by(data_order)

                taken_tests = set(student_marks.fileTest for student_marks in StudentFileTestMarks.objects.select_related('fileTest').filter(student=me.profile))

                for test in ftests:
                    if test:
                        bought = False
                        if test.id in student_brought_filetest:
                            bought = True

                        if test.locked == False:
                            bought = True

                        try:
                            subject = test.subject.name
                        except:
                            subject = None

                        try:
                            chapter = test.chapter.name
                        except:
                            chapter = None

                        if test in taken_tests:
                            first_attempt = False
                        else:
                            first_attempt = True

                        if first_attempt == False and test.repeatTest == True:
                            student_last_report = test.marks_filetest.get(student=me.profile)
                            if test.test_count != None:
                                if student_last_report.attempt_count < test.test_count:
                                    test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                                'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                                    ftest_list.append(test_dict)
                            else:
                                test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                            'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                                ftest_list.append(test_dict)

                        elif first_attempt == False and test.repeatTest == False:
                            pass
                        else:
                            test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subject': subject, 'chapter': chapter,
                                        'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought}
                            ftest_list.append(test_dict)

            all_data = {
                'video_list': video_list,
                'notes_list': notes_list,
                'tests_list': tests_list,
                'ftest_list': ftest_list,
            }

            context = {'status': 'success', 'all_data': all_data}

        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
            
        return Response(context)

class ChapterWisePackageTopics(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        try:
            chapter_id = data['chapter_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            videos_id = package.videos.all().values_list('id', flat=True)
            notes_id = package.notes.all().values_list('id', flat=True)
            tests_id = package.tests.all().values_list('id', flat=True)
            chapter = Chapter.objects.get(id=chapter_id)

            videos_topic_list = []
            if videos_id:
                videos = Video.objects.filter(id__in=videos_id, chapter__id=chapter_id)
                for video in videos:
                    videos_dict = {'id': video.id, 'name': video.title, 'topic': video.topics.topic}
                    if videos_dict not in videos_topic_list: 
                        videos_topic_list.append(videos_dict)

            notes_topic_list = []
            if notes_id:
                notes = Note.objects.filter(id__in=notes_id, chapter=chapter)
                topic_list = []
                for note in notes:
                    notes_topic = note.topic.all()
                    for i in notes_topic:
                        topic_dict = {'id': i.id, 'topic': i.topic}
                        if topic_dict not in topic_list:
                            topic_list.append(topic_dict)
                    
                    if topic_list not in notes_topic_list:
                        notes_topic_list.append(topic_list)

            test_topic_list = []
            if tests_id:
                tests = Test.objects.filter(id__in=tests_id, chapters__id__in=chapter_id)
                topic_list1 = []
                for test in tests:
                    test_topic = test.topics.all()
                    for i in test_topic:
                        topic_dict = {'id': i.id, 'topic': i.topic}
                        if topic_dict not in topic_list1:
                            topic_list1.append(topic_dict)
                    
                    if topic_list1 not in test_topic_list:
                        test_topic_list.append(topic_list1)

            topics_dict = {
                'videos_topic_list': videos_topic_list,
                'notes_topic_list': notes_topic_list,
                'test_topic_list': test_topic_list,
            }

            context = {'status': True,'message': 'Success', 'data': topics_dict}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentGetNotesChapter(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        if me.institute.listReversed:
            order_id = '-id'
        else:
            order_id = 'id'
        
        try:
            data = request.data
            batches = me.profile.batches.all()
            chapter_id = data['chapter_id']

            notes = Note.objects.filter(chapter__id=chapter_id, batches__in=batches).select_related('subject', 'chapter').order_by(order_id)
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = student_brought_packages.get_all_brought_notes()
            Bookmark_Object = CheckBookmark(me.profile)
            
            notes_list = []
            for note in notes:
                subject = note.subject.name
                chapter = note.chapter.name
                
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""

                bought = False
                
                if note in bought_notes:
                    bought = True

                if note.locked == False:
                    bought = True

                vision = True
                if note.noteViewsLimite:
                    vision = CheckNoteViewLimite(me.profile, note.id, note.noteViewsLimite)
                    
                try:
                    Bookmark = Bookmark_Object.isNoteBookmark(note.id)
                except:
                    Bookmark = False

                note_dict = {
                    'id': note.id,
                    'title': note.title,
                    'image': note.image,
                    'teacher': 'teacher',
                    'publishDate': note.publishDate,
                    'thumbnail': note.thumbnail,
                    'subject': subject,
                    'chapter_object': chapter,
                    'url': note_link,
                    'bought': bought,
                    'vision': vision,
                    'Bookmark':Bookmark,
                    }
                notes_list.append(note_dict)
            context = {'status':True, 'notes': notes_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherCreatePackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            title = data['name']
            price = float(data['price'])
            max_price = data.get('max_price', 0.0)
            duration = int(data['duration'])
            details = data['details']
            thumbnail = data.get('thumbnail', None)
            fixDuration = data.get('fixDuration', 'false') == 'true'
            course_id = data.get('course_id', None)
            batches_ids = data.get('batches_ids', None)
            
            package = Package(
                title=title,
                teacher=me.profile,
                price=price,
                basePrice=price,
                max_price=max_price,
                duration=duration,
                details=details,
                thumbnail=thumbnail
            )
                
            if course_id:
                course = Course.objects.get(id=course_id)
                package.course = course

                course_category_id = data.get('course_category_id', None)
                if course_category_id:
                    course_category = CourseCategory.objects.get(id=course_category_id, course=course)
                    package.course_category = course_category
                
            package.save()
            
            if batches_ids and len(batches_ids) != 2:
                batch_list = batches_ids.strip('][').split(',')
                batches = Batch.objects.filter(id__in=batch_list)
                package.batches.add(*batches)

            order_package = PackageOrderWise(package=package, order=0, fixDuration=fixDuration)
            order_package.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            data = {'id':str(package.id),'type':'package','title':str(package.title),'link':None}
            notification = {"title": "NEW PACKAGE", "body": f'{title}, New Package has been Created for You'}
            
            batches = me.profile.batches.all()
            for batch in batches:
                institute_code= me.profile.institute.code

                if not institute_code=="wisdombrains":
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey=server_key,notification=notification,batch_id=batch.id,data = data)
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = batch.id, data = data)

            context = {'status':'Success', 'package_id': package.id}
            
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
            
        return Response(context)

class TeacherGetPackages(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        
        try:
            packages_list = []

            if me.profile.mainTeacher or me.profile.institute.code == 'tgja':
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                for teacher in teachers:
                    if me.profile.institute.code == 'salesforce':
                        packages = Package.objects.select_related('course').prefetch_related('batches','students').filter(teacher=teacher).order_by('-id')
                    else:
                        packages = Package.objects.select_related('course').prefetch_related('batches','students').filter(teacher=teacher, marketLevelPackage=False).order_by('-id')
                    
                    for package in packages:
                        coupon_list = []
                        coupons = CouponCode.objects.filter(package=package)
                        for coupon in coupons:
                            couponstudents = coupon.couponUsedStudents.all()
                            couponStudents_list = []
                            for cs in couponstudents:
                                couponStudent_dict = {'id': cs.id, 'name': cs.name}
                                couponStudents_list.append(couponStudent_dict)
                                
                            coupon_dict = {
                                'id': coupon.id, 
                                'amount': coupon.amount, 
                                'created': coupon.created, 
                                'code': coupon.code, 
                                'totalStudents': len(couponstudents), 
                                'couponUsedStudents': couponStudents_list
                                }
                            coupon_list.append(coupon_dict)
                            
                        students = package.students.all().count()
                        
                        if package.course:
                            course = package.course.id
                        else:
                            course = None
                            
                        try:
                            course_category_id = package.course_category.id
                            course_category = package.course_category.name
                        except:
                            course_category_id = None
                            course_category = None
                            
                        batches = package.batches.all()
                        batches_ids_list = []
                        for i in batches:
                            batches_ids_list.append(i.id)
                            
                        packages_dict = {
                            'id': package.id, 
                            'title': package.title, 
                            'number_students': students, 
                            'duration': package.duration, 
                            'details': package.details, 
                            'price': package.price,
                            'max_price': package.max_price,
                            'coupons': coupon_list, 
                            'thumbnail': package.thumbnail, 
                            'publish': package.publish, 
                            'fixDuration': package.fixDuration, 
                            'course_id': course, 
                            'course_category_id':course_category_id,
                            'course_category': course_category,
                            'batches': batches_ids_list
                            }
                        packages_list.append(packages_dict)
                    context = {'status':True, 'packages': packages_list}

            else:
                packages_list = Package.objects.prefetch_related('sub_teacher').filter(
                    Q(teacher=me.profile) | Q(sub_teacher=me.profile)).filter(marketLevelPackage=False)

                teacher_package = []
                for package in packages_list:
                    students = package.students.all().count()
                    coupon_list = []
                    coupons = CouponCode.objects.filter(package=package)
                    for coupon in coupons:
                        couponstudents = coupon.couponUsedStudents.all()
                        couponStudents_list = []
                        for cs in couponstudents:
                            couponStudent_dict = {'id': cs.id, 'name': cs.name}
                            couponStudents_list.append(couponStudent_dict)
                            
                        coupon_dict = {
                            'id': coupon.id, 
                            'amount': coupon.amount, 
                            'created': coupon.created,
                            'code': coupon.code, 
                            'totalStudents': len(couponstudents), 
                            'couponUsedStudents': couponStudents_list
                            }
                        coupon_list.append(coupon_dict)
                        
                    if package.course:
                        course = package.course.id
                    else:
                        course = None
                        
                    try:
                        course_category_id = package.course_category.id
                        course_category = package.course_category.name
                    except:
                        course_category_id = None
                        course_category = None

                    batches = package.batches.all()
                    batches_ids_list = []
                    for i in batches:
                        batches_ids_list.append(i.id)
                        
                    packages_dict = {
                        'id': package.id, 
                        'title': package.title,
                        'number_students': students,  
                        'duration': package.duration, 
                        'details': package.details, 
                        'price': package.price,
                        'max_price': package.max_price,
                        'thumbnail': package.thumbnail, 
                        'coupons': coupon_list, 
                        'publish': package.publish, 
                        'fixDuration': package.fixDuration, 
                        'course_id': course, 
                        'course_category_id': course_category_id,
                        'course_category': course_category,
                        'batches': batches_ids_list
                        }
                    teacher_package.append(packages_dict)
                context = {'status':True, 'packages': teacher_package}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherEditPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            title = data.get('title')
            price = data.get('price')
            max_price = data.get('max_price', 0.0)
            details = data.get('details')
            duration = data.get('duration')
            isTeacherChangeStudentsPackageDuration = data.get('isTeacherChangeStudentsPackageDuration', False)
            batches_ids = data.get('batches_ids', None)
            course_id = data.get('course_id')
            fixDuration = data.get('fixDuration', False)
            
            package = Package.objects.get(id=package_id)
            
            if isinstance(fixDuration, str):
                if fixDuration.lower() == 'true':
                    package.fixDuration = True
                elif fixDuration.lower() == 'false':
                    package.fixDuration = False
            
            if title:
                package.title = title

            if price:
                package.price = price

            if details:
                package.details = details

            if duration:
                package.duration = duration

            if max_price:
                package.max_price = max_price
                
            package.save()

            if isTeacherChangeStudentsPackageDuration == 'true':
                students = package.students.all()
                for student in students:
                    sp = StudentPackage.objects.get(package=package, student=student)
                    sp.endDate = sp.startDate + timedelta(days=int(package.duration))
                    sp.save()

            if course_id:
                course = Course.objects.get(id=course_id)
                package.course = course

                course_category_id = data.get('course_category_id')
                if course_category_id:
                    course_category = CourseCategory.objects.get(id=course_category_id, course=course)
                    package.course_category = course_category

                package.save()

            if batches_ids and len(batches_ids) != 2:
                package.batches.clear()
                batch_list = batches_ids.strip('][').split(',')
                students = package.students.all()
                batches = Batch.objects.filter(id__in=batch_list)
                package.batches.add(*batches)
                
                for student in students:
                    student_batches = set(student.batches.all().values_list('id', flat=True))
                    new_batches = [batch for batch in batches if batch.id not in student_batches]
                    if new_batches:
                        student.batches.add(*new_batches)
                        student.save()
                    
            context = {'status': 'Success', 'message': 'Package Updated Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PackageAddVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            videos = data['videos_id']
            package_id = data['package_id']
            videos_list = videos.strip('][').split(',')
            package = Package.objects.get(id=package_id)
            videos_added = []
            for video in videos_list:
                video_object = Video.objects.get(id=video)
                packages = video_object.package_set.all()
                if packages:
                    isInDemo = False
                    for pack in packages:
                        try:
                            PackageDemoContent.objects.get(package=pack, videos=video_object)
                            isInDemo = True
                            break
                        except:
                            pass
                        
                    if isInDemo == False:
                        video_object.locked = True
                        video_object.save()
                    else:
                        video_object.locked = False
                        video_object.save()
                else:
                    video_object.locked = True
                    video_object.save()

                package.videos.add(video_object)
                videos_added.append(video_object.title)
                
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW VIDEO","body": f"new video uploaded for you in {package.title} package"}
            institute_code= me.profile.institute.code
            if not institute_code =="mbca":
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id = package.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id = package.id)
                    
            context = {'status':'Success', 'videos': videos_added}
            
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
            
        return Response(context)

class PackageAddYoutubeLiveVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            institute_code = me.profile.institute.code
            videos = data['videos_id']
            package_id = data['package_id']
            videos_list = videos.strip('][').split(',')
            package = Package.objects.get(id=package_id)
            
            videos_added = []
            for video in videos_list:
                video_object = LiveVideoLink.objects.get(id=video)
                video_object.locked = True
                video_object.save()
                package.youtubeLiveVideos.add(video_object)
                videos_added.append(video_object.title)
                if institute_code in ['studli',] and not video_object.download_link:
                    upload_yt_live_video_to_gcp.delay(video_object.id)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW LIVE VIDEO","body": f"A new youtube Live video uploaded for you in {package.title} package"}
            institute_code = me.profile.institute.code
            if not institute_code =="mbca":
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id)
                
            context = {'status':'Success', 'videos': videos_added}
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
        return Response(context)

class PackageAddTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            tests = data['tests_id']
            tests_list = tests.strip('][').split(',')
            package = Package.objects.get(id=package_id)
            for te_id in tests_list:
                test = Test.objects.get(id=te_id)
                packages = test.package_set.all()
                if packages:
                    isInDemo = False
                    for pack in packages:
                        try:
                            PackageDemoContent.objects.get(package=pack, tests=test)
                            isInDemo = True
                            break
                        except:
                            pass
                        
                    if isInDemo == False:
                        test.locked = True
                        test.save()
                    else:
                        test.locked = False
                        test.save()
                else:
                    test.locked = True
                    test.save()
                package.tests.add(test)
                
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW TEST","body": f"A new test uploaded for you in {package.title} package"}
            institute_code= me.profile.institute.code
            if not institute_code =="mbca":
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id)
                
            context = {'status':'Success', 'message': 'Tests added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherPackagePermission(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            packages_list = []
            if me.profile.mainTeacher:
                packages = Package.objects.filter(teacher=me.profile.mainTeacher).order_by('-id')
                for package in packages:
                    packages_dict = {
                        'id': package.id, 
                        'title': package.title,
                        'details': package.details, 
                        'price': package.price
                        }
                    packages_list.append(packages_dict)
            context = {'status':True,'packages': packages_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class SubTeacherAddToPackageThroughPermission(APIView):
    def post(self, request):
        data = request.data
        try:
            teacher_id = data.get('teacher_id')
            teacher = Teacher.objects.filter(id=teacher_id).first()
            if not teacher:
                return Response({'status': 'failed', 'message': 'Incorrect teacher_id'})

            package_id_list = (data.get('package_id')).strip("][").split(",")
            package_rejected = []
            packages_added = []
            for package_id in package_id_list:
                try:
                    package = Package.objects.get(id=package_id)
                    if teacher not in [tech for tech in package.sub_teacher.all()]:
                        package.sub_teacher.add(teacher)
                        packages_added.append(package_id)
                    package.save()

                except:
                    package_rejected.append(package_id)

            context = {'status': 'success','message': f'add successfully','packages_added': packages_added}
            
            if package_rejected:
                context['rejected'] = package_rejected
                
        except Exception as e:
            context = {'status':'failed','message':str(e)}

        return Response(context)

class SubTeacherInPackage(APIView):
    def post(self, request):
        teacher = Teach(self.request.user)
        try:
            data = request.data
            teacher_id = data.get('teacher_id')
            sub_teacher = Teacher.objects.filter(id=teacher_id).first()
            if not sub_teacher:
                return Response({'status': 'Failed', 'message': 'No Teacher Define'})

            packages = Package.objects.filter(teacher=teacher.profile)
            packages_list = []
            for pack in packages:
                if sub_teacher in [tech for tech in pack.sub_teacher.all()]:
                    packages_list.append({'id': pack.id,'title': pack.title})

            context = {'status':'Success','packages': packages_list}
            
        except Exception as e:
            context = {'status':'Failed','message':str(e)}

        return Response(context)

class SubTeacherPackageDeleteByTeacher(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data.get('package_id')
            teacher_id = data.get('teacher_id')

            teacher = Teacher.objects.filter(id=teacher_id).first()
            if not teacher:
                return Response({'status': 'Failed', 'message': 'No Teacher Define'})

            package = Package.objects.filter(id=package_id, teacher=me.profile).first()
            
            for sub_teacher in package.sub_teacher.all():
                if sub_teacher == teacher:
                    package.sub_teacher.remove(sub_teacher)

            context = {'status': 'Success','message': 'Removed Successfuly'}
        except:
            context = {'status': 'Failed','message': 'Package not exist'}

        return Response(context)

class InstituteShowMarketStore(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        return Response(me.profile.institute.access_to_market_place_store)

class TeacherGetIndividualPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            notes = package.notes.all().order_by('id')
            videos = package.videos.all().order_by('id')
            youtubeLivevideos = package.youtubeLiveVideos.all().order_by('id')
            tests = package.tests.all().order_by('id')
            fileTests = package.fileTests.all().order_by('id')
            students = package.students.all().order_by('id')

            number_videos = videos.count()
            number_notes = notes.count()
            number_tests = tests.count()
            number_fileTests = fileTests.count()

            title = package.title
            price = package.price
            details = package.details
            duration = package.duration
            videos_list = []
            youtube_list = []
            notes_list = []
            tests_list = []
            fileTests_list = []

            for video in videos:
                inPackage = False
                try:
                    demoContent = PackageDemoContent.objects.get(package=package, videos=video)
                    inPackage = True
                except PackageDemoContent.DoesNotExist:
                    inPackage = False
                    
                try:
                    subject = video.subject.name
                except:
                    subject = None
                    
                try:
                    chapter = video.chapter.name
                except:
                    chapter = None
                        
                video_dict = {
                    'video_id': video.id, 
                    'title': video.title, 
                    'url': video.urlLink, 
                    'generalVideo': video.generalVideo,
                    'publishDate': video.publishDate, 
                    'subject': subject, 
                    'chapter': chapter, 
                    'inPackage': inPackage
                    }
                videos_list.append(video_dict)
                
            for ylv in youtubeLivevideos:
                try:
                    demoContent = PackageDemoContent.objects.get(package=package, youtubeLiveVideos=ylv)
                    inPackage = True
                except PackageDemoContent.DoesNotExist:
                    inPackage = False
                    
                video_dict = {
                    'video_id': ylv.id, 
                    'title': ylv.title, 
                    'url': ylv.link,
                    'generalVideo': False, 
                    'publishDate': ylv.time, 
                    'inPackage': inPackage
                    }
                youtube_list.append(video_dict)
                
            for note in notes:
                inPackage = False
                try:
                    demoContent = PackageDemoContent.objects.get(package=package, notes=note)
                    inPackage = True
                except PackageDemoContent.DoesNotExist:
                    inPackage = False
                    
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                    
                if note.chapter == None:
                    chapter_name = 'none'
                else:
                    chapter_name = note.chapter.name
                    
                note_dict = {
                    'note_id': note.id, 
                    'title': note.title, 
                    'subject': note.subject.name, 
                    'chapter': chapter_name,
                    'publishDate': note.publishDate, 
                    'url': note_link, 
                    'inPackage': inPackage
                    }
                notes_list.append(note_dict)
                
            for test in tests:
                inPackage = False
                try:
                    demoContent = PackageDemoContent.objects.get(package=package, tests=test)
                    inPackage = True
                except PackageDemoContent.DoesNotExist:
                    inPackage = False

                subjects_list = []
                chapters_list = []
                subjects = test.subjects.all()
                chapters = test.chapters.all()
                numberQuestions = test.questions.all().count()
                
                for subject in subjects:
                    subjects_list.append(subject.name)
                    
                for chapter in chapters:
                    chapters_list.append(chapter.name)
                    
                test_dict = {
                    'id': test.id, 
                    'name': test.name, 
                    'subject': subjects_list, 
                    'chapter': chapters_list, 
                    'time': test.time,
                    'totalMarks': test.totalMarks, 
                    'publisehd': test.published, 
                    'numberQuestions': numberQuestions, 
                    'inPackage': inPackage
                    }
                tests_list.append(test_dict)
                
            for test in fileTests:
                inPackage = False
                try:
                    demoContent = PackageDemoContent.objects.get(package=package, fileTests=test)
                    inPackage = True
                except PackageDemoContent.DoesNotExist:
                    inPackage = False

                try:
                    subject = test.subject.name
                except:
                    subject = None
                    
                try:
                    chapter = test.chapter.name
                except:
                    chapter = None
                
                numberQuestions = test.totalQuestion
                test_dict = {
                    'id': test.id, 
                    'name': test.title, 
                    'subject': subject, 
                    'chapter': chapter, 
                    'time': test.testTime,
                    'totalMarks': test.totalMarks, 
                    'publisehd': test.published, 
                    'numberQuestions': numberQuestions, 
                    'inPackage': inPackage
                    }
                fileTests_list.append(test_dict)

            package_details = {
                'id': package.id, 
                'title': title, 
                'price': price, 
                'duration': duration, 
                'videos': videos_list, 
                'notes': notes_list, 
                'numberVideos': number_videos, 
                'numberNotes': number_notes,
                'numberTests': number_tests, 
                'details': details, 
                'tests': tests_list, 
                'youtube_live': youtube_list, 
                'fileTests': fileTests_list, 
                'numberFileTests': number_fileTests
                }
            context = {'status':True,'package': package_details}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherPackageVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            videos = package.videos.all().order_by('id')
            videos_list = []
            for video in videos_list:
                video_dict = {
                    'package_id': package.id, 
                    'video_id': video.id, 
                    'url': video.urlLink, 
                    'publishDate': video.publishDate, 
                    'generalVideo': video.generalVideo, 
                    'subject': video.subject.name, 
                    'chapter': video.chapter.name
                    }
                videos_list.append(video_dict)
            context = {'status':True, 'videos': videos_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class PackageAddNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            notes = data['notes_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            notes_list = notes.strip('][').split(',')
            notes_added = []
            for note in notes_list:
                try:
                    note_object = Note.objects.get(id=note)
                    packages = note_object.package_set.all()
                    if packages:
                        isInDemo = False
                        for pack in packages:
                            try:
                                PackageDemoContent.objects.get(package=pack, notes=note_object)
                                isInDemo = True
                                break
                            except:
                                pass
                        if isInDemo == False:
                            note_object.locked = True
                            note_object.save()
                        else:
                            note_object.locked = False
                            note_object.save()
                    else:
                        note_object.locked = True
                        note_object.save()

                    package.notes.add(note_object)
                    notes_added.append(note_object.title)
                except:
                    pass

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
            
            notification = {"title": f"NEW NOTES","body": f"A new notes uploaded for you in {package.title} package"}
            data = {"id":str(package.id),"type": "notes","title":str(package.title) ,"link":None }
            institute_code= me.profile.institute.code
            if not institute_code =="mbca":
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id, data = data)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id, data = data)
                
            context = {'status': 'Success', 'notes': notes_added}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class PackageRemoveNote(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            note_id = data['note_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            note = Note.objects.get(id=note_id)
            package.notes.remove(note)
            packages = note.package_set.all()

            if packages:
                isInDemo = False
                for pack in packages:
                    try:
                        PackageDemoContent.objects.get(package=pack, notes=note)
                        isInDemo = True
                        break
                    except:
                        pass

                if isInDemo == False:
                    note.locked = True
                    note.save()
                else:
                    note.locked = False
                    note.save()
            else:
                note.locked = False
                note.save()

            try:
                demoContent = PackageDemoContent.objects.get(package=package, notes=note)
                demoContent.notes.remove(note)
            except:
                pass

            context = {'status': 'Success','message': '{} package removed'.format(note.title)}
        except Exception as e:
            context = {'status': 'Failed','message':str(e)}
        return Response(context)

class PackageRemoveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            video_id = data['video_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            video = Video.objects.get(id=video_id)
            package.videos.remove(video)

            packages = video.package_set.all()
            if packages:
                isInDemo = False
                for pack in packages:
                    try:
                        PackageDemoContent.objects.get(package=pack, videos=video)
                        isInDemo = True
                        break
                    except:
                        pass

                if isInDemo == False:
                    video.locked = True
                    video.save()
                else:
                    video.locked = False
                    video.save()
            else:
                video.locked = False
                video.save()

            try:
                demoContent = PackageDemoContent.objects.get(package=package, videos=video)
                demoContent.videos.remove(video)
            except:
                pass
            context = {'status': 'Success','message': '{} package removed'.format(video.title)}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)

class PackageRemoveYoutubeLive(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            video_id = data['video_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            video = LiveVideoLink.objects.get(id=video_id)
            video.locked = False
            video.save()
            package.youtubeLiveVideos.remove(video)
            try:
                demoContent = PackageDemoContent.objects.get(package=package, youtubeLiveVideos=video)
                demoContent.youtubeLiveVideos.remove(video)
            except:
                pass
            
            context = {'status': 'Success','message': '{} package removed'.format(video.title)}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)

class PackageRemoveTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            test_id = data['test_id']
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            test = Test.objects.get(id=test_id)
            package.tests.remove(test)

            packages = test.package_set.all()
            if packages:
                isInDemo = False
                for pack in packages:
                    try:
                        PackageDemoContent.objects.get(package=pack, tests=test)
                        isInDemo = True
                        break
                    except:
                        pass

                if isInDemo == False:
                    test.locked = True
                    test.save()
                else:
                    test.locked = False
                    test.save()
            else:
                test.locked = False
                test.save()

            try:
                demoContent = PackageDemoContent.objects.get(
                    package=package, tests=test)
                demoContent.tests.remove(test)
            except:
                pass
            context = {'status': 'Success','message': '{} test has been removed from package'.format(test.name)}
        except Exception as e:
            context = {'status':'Failed','message':str(e)} 
        return Response(context)

class TeacherChapterwiseQuestions(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            questions = Question.objects.filter(chapter=chapter).order_by('-id')
            my_batches = me.profile.batches.all()
            questions_list = []
            for question in questions:
                used_list = []
                for batch in my_batches:
                    try:
                        timesUsed =TimesUsed.objects.get(question=question, institute=me.profile.institute, batch=bat)
                        times_used_dict = {'used': timesUsed.used, 'batch': batch.name}
                        used_list.append(times_used_dict)
                    except:
                        times_used_dict = {'used': 0, 'batch': batch.name}
                        used_list.append(times_used_dict)
                        
                text = question.text
                difficulty = question.difficulty
                probability = question.probability
                topics = question.topic.all()
                topic_list = []
                for t in topics:
                    topic_dict = {'id': t.id, 'name': t.topic}
                    topic_list.append(topic_dict)

                sub_topics = question.subTopic.all()
                sub_topic_list = []
                for t in sub_topics:
                    topic_dict = {'id': t.id, 'name': t.topic}
                    sub_topic_list.append(topic_dict)
                    
                picture = question.picture
                subject_dict = {'id': question.subject.id, 'name': question.subject.name}
                chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name}
                if question.direction != None:
                    direction_dict = {'id': question.direction.id, 'text': question.direction.text,'picture': question.direction.picture}
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}
                    
                language = question.language
                source = question.source
                marks = question.marks
                dynamicText = question.dynamicText
                negativeMarks = question.negativeMarks
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    optionText = option.text
                    optionPicture = option.picture
                    explanationText = option.explanationText
                    explanationPicture = option.explanationPicture
                    correct = option.correct
                    option_dict = {'id': option.id, 'text': text, 'text': optionText, 'picture': optionPicture,
                            'explanationText': explanationText, 'explanationPicture': explanationPicture, 'correct': correct}
                    options_list.append(option_dict)

                question_dict = {'id': question.id, 'text': text, 'dynamicText': dynamicText, 'picture': picture, 'subject': subject_dict, 'chapter': chapter_dict, 'topic': topic_list, 'subtopic': sub_topic_list, 'difficulty': difficulty,
                        'probability': probability, 'direction': direction_dict, 'options': options_list, 'language': language, 'source': source, 'marks': marks, 'negativeMarks': negativeMarks, 'numberUsed': used_list}
                questions_list.append(question_dict)
                
            context = {'status':True,'questions': questions_list}
        except Exception as e:
            context = {'status':False,'message':str(e)} 
        return Response(context)

class TeacherChapterTopicwiseQuestionsPagination(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            selected_topic = data['topic_id']
            selected_subTopic = data['subTopic_id']
            page = data['page']
            item_page = 20
            start_index = int(page) * item_page
            end_index = int(start_index) + item_page
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject

            if selected_topic != 'null' and selected_subTopic != 'null':
                questions = Question.objects.filter(subject=subject, chapter=chapter, topic=selected_topic, subTopic=selected_subTopic).order_by('-id')[start_index:end_index]
            elif selected_topic != 'null':
                questions = Question.objects.filter(subject=subject, chapter=chapter, topic=selected_topic).order_by('-id')[start_index:end_index]
            else:
                questions = Question.objects.filter(subject=subject, chapter=chapter).order_by('-id')[start_index:end_index]

            questions_list = []
            my_batches = me.profile.batches.all()
            for question in questions:
                used_list = []
                for batch in my_batches:
                    try:
                        timesUsed = TimesUsed.objects.get(question=question, institute=me.profile.institute, batch=bat)
                        times_used_dict = {'used': timesUsed.used, 'batch': batch.name}
                        used_list.append(times_used_dict)
                    except:
                        times_used_dict = {'used': 0, 'batch': batch.name}
                        used_list.append(times_used_dict)
                        
                text = question.text
                picture = question.picture
                subject_dict = {'id': question.subject.id, 'name': question.subject.name}
                chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name}
                if question.direction != None:
                    direction_dict ={'id': question.direction.id, 'text': question.direction.text,'picture': question.direction.picture}
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}
                    
                language = question.language
                source = question.source
                difficulty = question.difficulty
                marks = question.marks
                dynamicText = question.dynamicText
                negativeMarks = question.negativeMarks
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    optionText = option.text
                    optionPicture = option.picture
                    explanationText = option.explanationText
                    explanationPicture = option.explanationPicture
                    correct = option.correct
                    option_dict ={'id': option.id, 'text': text, 'text': optionText, 'picture': optionPicture,
                            'explanationText': explanationText, 'explanationPicture': explanationPicture, 'correct': correct}
                    options_list.append(option_dict)

                question_dict ={'id': question.id, 'text': text, 'dynamicText': dynamicText, 'picture': picture, 'subject': subject_dict, 'chapter': chapter_dict, 'direction': direction_dict,
                        'options': options_list, 'language': language, 'source': source, 'marks': marks, 'negativeMarks': negativeMarks, 'difficulty': difficulty, 'numberUsed': used_list}
                questions_list.append(question_dict)
            context = {'status':True,'questions': questions_list}
        except Exception as e:
            context = {'status':False,'message':str(e)} 
        return Response(context)

class TeacherCreateTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        questions = data['questions']
        batches = data['batches']
        time = data['time']
        title = data.get('title',None)
        max_marks = data.get('max_marks',None)
        negative_marks = data.get('negative_marks',None)
        publishStatus = data.get('publishStatus',None)
        testStartDateTime = data.get('testStartDateTime',None)
        testEndDateTime = data.get('testEndDateTime',None)
        studentWillAttemptQuestions = data.get('studentWillAttemptQuestions',None)
        testInstructions = data.get('testInstructions',None)
        is_answers_showing = data.get('is_answers_showing',None)
        entry_fee = data.get('entry_fee',None)
        max_participants = data.get('max_participants',None)
        
        try:
            contest_category_id = int(data.get('contest_category'))
            contest_category_object = ContestCategory.objects.get(id=contest_category_id)
        except (ValueError, TypeError):
            contest_category_object = None 

        try:
            test_count = int(data.get('test_count'))
        except (ValueError, TypeError):
            test_count = None

        try:
            passing_marks = data['passing_marks']
        except:
            passing_marks = max_marks/3

        try:
            questions_list = questions.strip('][').split(',')
            batches_list = batches.strip('][').split(',')

            test = Test()
            if title != None:
                test.name = title
            else:
                test.name = me.profile.name + ' ' + str(timezone.now())

            if publishStatus == 'false':
                test.publish = False

            test.published = timezone.now()
            test.createdBy = me.profile
            test.time = time
            test.studentWillAttemptQuestions = studentWillAttemptQuestions
            test.testInstructions = testInstructions
            test.totalMarks = 0
            test.test_count = test_count

            if test_count != None and int(test_count) > 1:
                test.repeatTest = True

            if testStartDateTime:
                test.testStartDateTime = testStartDateTime
            else:
                test.testStartDateTime = timezone.now()

            if testEndDateTime:
                test.testEndDateTime = testEndDateTime

            if is_answers_showing == 'false':
                test.is_answers_showing = False
                
            if entry_fee != None:
                test.entry_fee = entry_fee
                
            if max_participants != None:
                test.max_participants = max_participants

            test.contest_category = contest_category_object
            test.save()

            total_marks = 0.0
            for question_id in questions_list:
                question = Question.objects.get(id=question_id)
                test.questions.add(question)

                if max_marks != '0.0':
                    question.marks = max_marks

                if negative_marks:
                    question.negativeMarks = negative_marks

                total_marks += float(question.marks)
                subject = question.subject
                chapter = question.chapter
                test.subjects.add(subject)
                test.chapters.add(chapter)
                question.save()

                topics = question.topic.all()
                subTopics = question.subTopic.all()
                test.topics.add(*topics)
                test.subTopics.add(*subTopics)

                for batch_id in batches_list:
                    batch = Batch.objects.get(id=batch_id)
                    try:
                        timesUsed = TimesUsed.objects.get(
                            institute=me.profile.institue, question=question, batch=batch)
                        timesUsed.used += 1
                        timesUsed.save()
                    except:
                        timesUsed = TimesUsed()
                        timesUsed.question = question
                        timesUsed.institute = me.profile.institute
                        timesUsed.batch = batch
                        timesUsed.used = 1
                        timesUsed.save()

            test.totalMarks = total_marks
            test.passing_marks = passing_marks
            test.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            data = {"id":str(test.id),"type": "test","title":str(test.name) ,"link":None}
            notification = {"title": f"NEW TEST","body": f'A new test {title} has been created for you by {me.profile.name}'}

            for batch_id in batches_list:
                batch = Batch.objects.get(id=batch_id)
                students = Student.objects.filter(batches=batch)
                test.batches.add(batch)
                test.students.add(*students)

                if publishStatus == 'true':
                    institute_code= me.profile.institute.code
                    if not institute_code=="wisdombrains":
                        announcement = Announcement()
                        announcement.announcementFrom = me.profile 
                        announcement.text = test.name 
                        announcement.notification_id = test.id 
                        announcement.type = "test" 
                        announcement.save() 
                        announcement.students.add(*students)
                        announcement.batches.add(batch)

                        if not institute_code=="mbca":
                            if json_file_url == None:
                                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(batch_id), data = data)
                            else:
                                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(batch_id), data = data)
                            
            context = {'status': 'Success','message': 'Test Successfully Created','test_id':test.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherSeeBatchWiseTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            batch_id = data['batch_id']
            batch1 = Batch.objects.get(id=batch_id)

            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                tests = Test.objects.filter(createdBy__in=teachers, batches=batch_id).order_by('-id')
            else:
                subjects1 = me.profile.subjects.all()
                tests = Test.objects.filter(Q(createdBy__subjects__in=subjects1) | Q(createdBy=me.profile), batches=batch_id).order_by('-id').distinct()
                
            tests_list = []
            for test in tests:
                number_questions = test.questions.all().count()
                subjects_list = []
                subjects = test.subjects.all().values('id', 'name')
                for subject in subjects:
                    subjects_list.append(subject)

                chapters_list = []
                chapters = test.chapters.all().values('id', 'name', 'code')
                for chapter in chapters:
                    chapters_list.append(chapter)

                packages = Package.objects.filter(tests=test)
                packages_list = []
                for package in packages:
                    package_dict = {
                        'id': package.id,
                        'title': package.title,
                        'price': package.price,
                        'details': package.details,
                        'students': package.students.all().count()}
                    packages_list.append(package_dict)

                batches_list = []
                batches = test.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)

                test_dict = {
                    'id': test.id,
                    'numberQuestions': number_questions,
                    'subjects': subjects_list,
                    'chapters': chapters_list,
                    'time': test.time,
                    'published': test.published,
                    'packages': packages_list,
                    'batches': batches_list,
                    'totalMarks': test.totalMarks,
                    'title': test.name,
                    'publish': test.publish}
                tests_list.append(test_dict)

            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                fileTest = FileTest.objects.filter(createdBy__in=teachers, batches=batch1)
            else:
                subjects2 = me.profile.subjects.all()
                fileTest = FileTest.objects.filter(Q(createdBy__subjects__in=subjects2) | Q(createdBy=me.profile), batches=batch1).order_by('-id').distinct()

            allFileTest_list = []
            for ft in fileTest:
                subjects_list = []
                if ft.subject:
                    subject_dict = {'id': ft.subject.id, 'name': ft.subject.name}
                    subjects_list.append(subject_dict)

                chapters_list = []
                if ft.chapter:
                    chapter_dict = {'id': ft.chapter.id, 'name': ft.chapter.name, 'code': ft.chapter.code}
                    chapters_list.append(chapter_dict)

                test_dict = {
                    'id': ft.id,
                    'subjects': subjects_list,
                    'chapters': chapters_list,
                    'title': ft.title,
                    'time': ft.testTime,
                    'totalQuestion': ft.totalQuestion,
                    'totalMarks': ft.totalMarks,
                    'questionFile': ft.questionFile,
                    'published': ft.published
                    }
                allFileTest_list.append(test_dict)

            allTests = tests_list + allFileTest_list
            allTests = sorted(allTests, key=lambda i: i['published'], reverse=True)

            context = {'status':True,'tests': allTests}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class TeacherSeeAllTests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                tests = Test.objects.filter(createdBy__in=teachers).order_by('-id')
            else:
                tests = Test.objects.filter(createdBy=me.profile).order_by('-id')
                    
            tests_list = []
            for test in tests:
                number_questions = test.questions.all().count()
                subjects_list = []
                subjects = test.subjects.all()
                for subject in subjects:
                    subject_dict = {'id': subject.id, 'name': subject.name}
                    subjects_list.append(subject_dict)
                    
                chapters_list = []
                chapters = test.chapters.all()
                for chapter in chapters:
                    chapter_dict ={'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                    chapters_list.append(chapter_dict)
                    
                packages = Package.objects.filter(tests=test)
                packages_list = []
                for package in packages:
                    package_dict ={
                        'id': package.id, 
                        'title': package.title, 
                        'price': package.price,
                        'details': package.details, 
                        'students': package.students.all().count()
                        }
                    packages_list.append(package_dict)
                    
                batches_list = []
                batches = test.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                    
                test_dict ={
                    'id': test.id, 
                    'numberQuestions': number_questions, 
                    'subjects': subjects_list, 
                    'chapters': chapters_list, 
                    'time': test.time, 
                    'publisehd': test.published, 
                    'packages': packages_list,
                    'batches': batches_list, 
                    'totalMarks': test.totalMarks, 
                    'title': test.name, 
                    'publish': test.publish, 
                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions
                    }
                tests_list.append(test_dict)
            context = {'status':True,'tests': tests_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherIndividualTestDetails(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            questions_list = []
            if TestQuestionSequess.objects.filter(test=test).first():
                test_question_seq = TestQuestionSequess.objects.filter(test=test)
                questions = Question.objects.prefetch_related('test_question_order').filter(
                    test_question_order__in=test_question_seq).order_by('test_question_order__order')
            else:
                questions = test.questions.all()
            
            for question in questions:
                subject_dict = {'id': question.subject.id, 'name': question.subject.name}
                chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name,'code': question.chapter.code}
                direction = question.direction
                if direction != None:
                    direction_dict = {'id': direction.id, 'text': direction.text,'picture': direction.picture}
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    optionText = option.text
                    optionPicture = option.picture
                    explanationText = option.explanationText
                    explanationPicture = option.explanationPicture
                    correct = option.correct
                    option_dict = {'id': option.id, 'text': optionText, 'picture': optionPicture,
                            'explanationText': explanationText, 'explanationPicture': explanationPicture, 'correct': correct}
                    options_list.append(option_dict)
                    
                question_dict ={'id': question.id, 'text': question.text, 'dynamicText': question.dynamicText, 'picture': question.picture, 
                                'subject': subject_dict, 'chapter': chapter_dict, 'marks': question.marks, 'negativeMarks': question.negativeMarks, 
                                'language': question.language, 'source': question.source, 'direction': direction_dict, 'options': options_list
                                }
                questions_list.append(question_dict)
                
            subjects = test.subjects.all()
            subjects_list = []
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name}
                subjects_list.append(subject_dict)
                
            chapters = test.chapters.all()
            chapters_list = []
            for chapter in chapters:
                chapter_dict ={'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
                
            test_dict ={
                'id': test.id, 
                'name': test.name, 
                'published': test.published, 
                'questions': questions_list,
                'subjects': subjects_list, 
                'chapters': chapters_list, 
                'totalMarks': test.totalMarks
                }
            context = {'status':True,'test': test_dict}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentGetAllVideos(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        if me.institute.listReversed:
            order_by = '-id'
        else:
            order_by = 'id'
            
        try:
            institute = me.institute
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=institute)
            videos = Video.objects.filter(batches__in=batches).select_related('subject', 'chapter').order_by(order_by)
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_videos = bought_packages.get_all_brought_videos()
                    
            videos_list = []
            for video in videos:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                    
                try:
                    subject_dict = {'id': video.subject.id,'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name,'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None,'name': 'General', 'code': None}

                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)

                bought = False
                if video.id in bought_videos:
                    bought = True
                if video.locked == False:
                    bought = True

                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""
                    
                if video.publish == True:
                    video_dict = {'id': video.id, 'teacher': teachers_list, 'subject': subject_dict, 
                                'chapter': chapter_dict, 'link': video.urlLink, 'download_link': download_link, 
                                'generalVideo': video.generalVideo, 'publishDate': video.publishDate,
                                'title': video.title, 'bought': bought, 'lowLink': video.lowlink, 
                                'highLink': video.highlink, 'thumbnail': video.thumbnail, 
                                'locked': video.locked, 'vision': vision
                                }
                    videos_list.append(video_dict)
                
            final_video_list = list(unique_everseen(videos_list))
            context = {'status':True,'videos': final_video_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentIndividualVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            video = Video.objects.get(id=video_id)
            teacher_dict = {'id': video.teacher.id, 'name': video.teacher.name}
            video_dict = {'id': video.id, 'teacher': teacher_dict, 'subject': video.subject, 
                        'chapter': video.chapter, 'link': video.urlLink, 'generalVideo': video.generalVideo, 
                        'publishDate': video.publishDate, 'title': video.title, 'lowLink': video.lowlink, 
                        'highLink': video.highLink}
            
            context = {'status':True,'video': video_dict}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentGetTest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data.get('test_id')
            test = Test.objects.prefetch_related('subjects','chapters','questions').get(id=test_id)

            try:
                student_coins = StudentCoins.objects.filter(student=me.profile).first()
                if student_coins and student_coins.actual_coins >= test.entry_fee:
                    student_coins.actual_coins -= test.entry_fee
                    student_coins.save()
                    StudentTestAttempt.objects.create(student=me.profile,test=test,coins_deducted=test.entry_fee)
            except StudentCoins.DoesNotExist:
                pass

            try:
                contest_start_time = test.contest_category.start_time
                contest_date = contest_start_time.strftime('%d:%m:%y')  # Format date as dd:mm:yy
                contest_time = contest_start_time.strftime('%H:%M:%S')

                current_time = timezone.now()
                if contest_start_time <= current_time:
                    is_test_start = True # student can start test
                    remaining_time = "Test has already started."
                else:
                    is_test_start = False

                    time_diff = contest_start_time - current_time

                    if time_diff.total_seconds() > 86400:  # 24 * 60 * 60 seconds
                        remaining_time = f"Date: {contest_date}\nTime: {contest_time}"
                    else:
                        hours, remainder = divmod(time_diff.seconds, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        remaining_time = f"{hours}h:{minutes}m:{seconds}s"

            except:
                contest_start_time = None
                contest_date = None
                contest_time = None
                is_test_start = False # student can't start test
                remaining_time = "No contest start time available."
            
            if TestQuestionSequess.objects.filter(test=test).first():
                test_question_seq = TestQuestionSequess.objects.filter(test=test)
                questions = Question.objects.select_related('subject','chapter').prefetch_related('test_question_order').filter(
                    test_question_order__in=test_question_seq).order_by('test_question_order__order')
            else:
                questions = test.questions.select_related('subject','chapter').all()

            total_marks = 0
            Bookmark_Object = CheckBookmark(me.profile)

            questions_list = []
            for question in questions:
                direction = question.direction
                if direction != None:
                    direction_dict = {
                        'id': direction.id,
                        'text': direction.text,
                        'picture': direction.picture
                        }
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}

                subject = question.subject

                if subject == None:
                    subject_dict = {'id': 0, 'name': 'extra'}
                else:
                    subject_dict = {'id': subject.id, 'name': subject.name}

                chapter = question.chapter

                if chapter == None:
                    chapter_dict = {'id': 0, 'name': 'extra', 'code': '1.1'}
                else:
                    chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                    
                try:
                    Bookmark = Bookmark_Object.isQuestionBookmark(question.id)
                except:
                    Bookmark = False

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    option_dict = {
                        'id': option.id,
                        'text': option.text,
                        'hindi_text': option.hindi_text,
                        'picture': option.picture,
                        'explanationText': option.explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct}
                    options_list.append(option_dict)

                question_dict = {
                    'id': question.id,
                    'text': question.text,
                    'hindi_text': question.hindi_text,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'direction': direction_dict,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'language': question.language,
                    'source': question.source,
                    'options': options_list,
                    'oneWordQuestion': question.oneWordQuestion,
                    'Bookmark': False,
                    'video_url': question.video_url,
                    }
                total_marks += question.marks
                questions_list.append(question_dict)

            subjects_list = []
            subjects = test.subjects.all()
            for sub in subjects:
                subject_dict = {'id': sub.id, 'name': sub.name}
                subjects_list.append(subject_dict)

            chapters_list = []
            chapters = test.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
            
            if total_marks != test.totalMarks:
                test.totalMarks = total_marks
                test.save()
                
            now = timezone.now()
            remaining_minutes = 0
            if test.testEndDateTime and test.testEndDateTime > now:
                remaining_time = test.testEndDateTime - now
                remaining_minutes = int(remaining_time.total_seconds() / 60)
            
            if remaining_minutes < test.time:
                test_time = remaining_minutes
            else:
                test_time = test.time
            
            try:    
                percentage_passing = round(((test.passing_marks / test.totalMarks) * 100),2)
            except:
                percentage_passing = 0
                
            try:
                test_attempt = StudentMarks.objects.get(student=me.profile,test=test)
                total_attempt = test_attempt.attempt_count
            except:
                total_attempt = 0

            test_dict = {
                'id': test.id,
                'name': test.name,
                'time': test.time,
                'max_attempt_allowed': test.test_count,
                'total_attempt': total_attempt,
                'mark_per_question': test.correct_check_mark,
                'negative_mark': test.incorrect_check_mark,
                'totalMarks': test.totalMarks,
                'passing_marks': test.passing_marks,
                'percentage_passing': percentage_passing,
                'questions': questions_list,
                'published': test.published,
                'subjects': subjects_list,
                'chapters': chapters_list,
                'remaining_test_time':test_time,
                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                'testInstructions': test.testInstructions,
                'is_answers_showing': test.is_answers_showing,
                'contest_start_time': contest_start_time,
                'contest_date': contest_date,
                'contest_time': contest_time,
                'is_test_start': is_test_start,
                'remaining_time': remaining_time,
                }

            context = {'status':True,'test': test_dict}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)
    
class StudentGetTestScheduleWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data.get('test_id')
            test = Test.objects.prefetch_related('subjects','chapters','questions').get(id=test_id)
            
            if TestQuestionSequess.objects.filter(test=test).first():
                test_question_seq = TestQuestionSequess.objects.filter(test=test)
                questions = Question.objects.select_related('subject','chapter').prefetch_related('test_question_order').filter(
                    test_question_order__in=test_question_seq).order_by('test_question_order__order')
            else:
                questions = test.questions.select_related('subject','chapter').all()

            total_marks = 0
            Bookmark_Object = CheckBookmark(me.profile)

            questions_list = []
            for question in questions:
                direction = question.direction
                if direction != None:
                    direction_dict = {'id': direction.id,'text': direction.text,'picture': direction.picture}
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}

                subject = question.subject
                if subject == None:
                    subject_dict = {'id': 0, 'name': 'extra'}
                else:
                    subject_dict = {'id': subject.id, 'name': subject.name}

                chapter = question.chapter
                if chapter == None:
                    chapter_dict = {'id': 0, 'name': 'extra', 'code': '1.1'}
                else:
                    chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                    
                try:
                    Bookmark = Bookmark_Object.isQuestionBookmark(question.id)
                except:
                    Bookmark = False

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    option_dict = {
                        'id': option.id,
                        'text': option.text,
                        'picture': option.picture,
                        'explanationText': option.explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct}
                    options_list.append(option_dict)

                question_dict = {
                    'id': question.id,
                    'text': question.text,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'direction': direction_dict,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'language': question.language,
                    'source': question.source,
                    'options': options_list,
                    'oneWordQuestion': question.oneWordQuestion,
                    'Bookmark': False
                    }
                total_marks += question.marks
                questions_list.append(question_dict)

            subjects_list = []
            subjects = test.subjects.all()
            for sub in subjects:
                subject_dict = {'id': sub.id, 'name': sub.name}
                subjects_list.append(subject_dict)

            chapters_list = []
            chapters = test.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)

            if total_marks != test.totalMarks:
                test.totalMarks = total_marks
                test.save()
                
            now = timezone.now()
            if test.testEndDateTime and test.testEndDateTime > now:
                remaining_time = test.testEndDateTime - now
                remaining_minutes = int(remaining_time.total_seconds() / 60)
            
                if remaining_minutes and remaining_minutes < test.time:
                    test_time = remaining_minutes
                    
            elif test.testEndDateTime and test.testEndDateTime < now:
                test_time = 0
                
            else:
                test_time = test.time

            test_dict = {
                'id': test.id,
                'name': test.name,
                'questions': questions_list,
                'totalMarks': test.totalMarks,
                'published': test.published,
                'subjects': subjects_list,
                'chapters': chapters_list,
                'time': test_time,
                'remaining_test_time':test_time,
                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                'testInstructions': test.testInstructions,
                'is_answers_showing': test.is_answers_showing
                }

            context = {'status':True,'test': test_dict}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentTakentestAllMarksList(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            marks = StudentMarks.objects.select_related('test').filter(student=me.profile, test__is_answers_showing=True,test=test_id).order_by('-id')
            marks_list = []
            for mark in marks:
                time = mark.time
                attemptTime = mark.attemptTime
                test = mark.test
                
                marks_dict = {'id': mark.id, 'test_id': test.id, 'time': mark.time, 'attemptTime': attemptTime,'marks':mark.marks,"result":mark.result,'percentage':mark.percentage}
                marks_list.append(marks_dict)
            context = {'status': 'Success', 'test': marks_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentAllPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            institute = me.profile.institute
            packages_list = []
            today = timezone.now()
            packages = Package.objects.filter(teacher__institute=institute, publish=True).prefetch_related(
                'students', 'notes', 'videos', 'youtubeLiveVideos', 'tests').order_by('-id')
            for pack in packages:
                student_ids = set(student.id for student in pack.students.all())
                if me.profile.id in student_ids:
                    try:
                        studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                        if studentPackage.endDate.replace(tzinfo=None) <= today:
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = studentPackage.startDate
                            sbph.endDate = studentPackage.endDate
                            sbph.save()
                            studentPackage.delete()
                            pack.students.remove(me.profile)
                            for i in pasp:
                                i.delete()
                            bought = False
                        else:
                            bought = True

                    except StudentPackage.MultipleObjectsReturned:
                        studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                        totalStudentPackagesCount = studentPackage.count()
                        for sp in studentPackage:
                            if sp.endDate.replace(tzinfo=None) <= today.now():
                                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                                totalPaidAmount = 0
                                for i in pasp:
                                    totalPaidAmount += i.paidAmount
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = totalPaidAmount
                                sbph.startDate = sp.startDate
                                sbph.endDate = sp.endDate
                                sbph.save()
                                sp.delete()
                                for i in pasp:
                                    i.delete()

                                if totalStudentPackagesCount == 1:
                                    pack.students.remove(me.profile)
                                    pack.save()
                                    bought = False
                                else:
                                    bought = True

                            else:
                                bought = True

                    except Exception as e:
                        context = {'status': 'Failed', 'message': str(e)}
                        return Response(context)
                else:
                    bought = False

                if bought == False:
                    packages_list.append((pack, False))
                else:
                    packages_list.append((pack, True))

            final_list = []
            for package, bought in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()

                if package.course:
                    course_name = package.course.name
                    course_id = package.course.id
                else:
                    course_name = None
                    course_id = None

                package_dict = {
                    'id': package.id,
                    'title': package.title,
                    'marketLevelPackage': package.marketLevelPackage,
                    'price': package.price,
                    'duration': package.duration,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'course_name': course_name,
                    'course_id': course_id,
                    'numberTests': numberTests,
                    'numberVideos': numberVideos,
                    'numberNotes': numberNotes,
                    'date': package.date,
                    'bought': bought,
                }
                final_list.append(package_dict)
            context = {'status':True,'packages': final_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentNotBoughtPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            institute = me.profile.institute
            packages_list = []
            today = timezone.now()
            
            packages = Package.objects.filter(teacher__institute=institute, publish=True).select_related('course').prefetch_related(
                'students', 'notes', 'videos', 'youtubeLiveVideos', 'tests').order_by('-id')

            for pack in packages:
                student_id_list = set(student.id for student in pack.students.all() if student)
                bought = False 

                if me.profile.id in student_id_list:
                    try:
                        studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                        if studentPackage.endDate.replace(tzinfo=None) <= today:
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = studentPackage.startDate
                            sbph.endDate = studentPackage.endDate
                            sbph.save()
                            studentPackage.delete()
                            pack.students.remove(me.profile)
                            for i in pasp:
                                i.delete()
                            bought = False
                        else:
                            bought = True

                    except StudentPackage.MultipleObjectsReturned:
                        studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                        for sp in studentPackage:
                            if sp.endDate.replace(tzinfo=None) <= today.now():
                                totalStudentPackagesCount = StudentPackage.objects.filter(package=pack, student=me.profile).count()
                                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                                totalPaidAmount = 0
                                for i in pasp:
                                    totalPaidAmount += i.paidAmount
                                    
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = totalPaidAmount
                                sbph.startDate = sp.startDate
                                sbph.endDate = sp.endDate
                                sbph.save()
                                sp.delete()
                                
                                if totalStudentPackagesCount == 1:
                                    pack.students.remove(me.profile)
                                    pack.save()
                                else:
                                    pass
                                
                                for i in pasp:
                                    i.delete()
                                    
                                if totalStudentPackagesCount == 1:
                                    bought = False
                                else:
                                    bought = True
                                    
                            else:
                                bought = True

                    except Exception as e:
                        context = {'status': 'Failed', 'message': str(e)}
                        
                if bought == False:
                    packages_list.append((pack, False))

            final_list = []
            for package, bought in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()

                if package.course:
                    course_name = package.course.name
                    course_id = package.course.id
                else:
                    course_name = None
                    course_id = None

                package_dict = {
                    'id': package.id,
                    'title': package.title,
                    'marketLevelPackage': package.marketLevelPackage,
                    'price': package.price,
                    'max_price': package.max_price,
                    'duration': package.duration,
                    'bought': bought,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'course_id': course_id,
                    'course_name': course_name,
                    'numberTests': numberTests,
                    'numberVideos': numberVideos,
                    'numberNotes': numberNotes,
                    'date': package.date
                    }
                final_list.append(package_dict)
            context = {'status':True,'packages': final_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentGetBoughtPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            final_list = []
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            sbph = StudentBroughtPackagesHelper(me.profile)
            total_package = len(sbph.brought_packages)
            for package in sbph.brought_packages:
                context = sbph.progress_of_brought_packages(package)
                try:
                    student_package = StudentPackage.objects.get(student= me.profile, package = package)
                    start_date = student_package.startDate
                    end_date = student_package.endDate
                    if end_date:
                        remaining_days = end_date.date() - timezone.now().date()
                        remaining_days = str(remaining_days).split(',')[0]
                    else:
                        remaining_days = None
                except:
                    start_date = None
                    end_date = None
                    remaining_days = None

                package_dict = {
                    'id': package.id,
                    'title': package.title,
                    'price': package.price,
                    'duration': package.duration,
                    'start_date': start_date,
                    'remaining_days': remaining_days,
                    'bought': True,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                }
                package_dict.update(context)
                final_list.append(package_dict)
                
            studentAllPackageLength = me.profile.package_student.count() + me.profile.boughtPackage_student.count()
            
            context = {
                'packages': final_list, 
                'teachers': len(teachers), 
                'allpackages': total_package, 
                'studentAllPackageLenght': studentAllPackageLength
                }
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentIndividualPackageDetail(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            students = package.students.all()
            all_students_list = []
            for student in students:
                print(student.studentuser.username)
                all_students_list.append(student.id)
            
            if me.profile.id in all_students_list:
                try:
                    sp = StudentPackage.objects.get(student=me.profile, package=package)
                    endDate = sp.endDate
                except:
                    endDate = ''
                bought = True
            else:
                try:
                    sp = StudentPackage.objects.get(student=me.profile, package=package)
                    endDate = sp.endDate
                except:
                    endDate = ""
                bought = False

            if endDate:
                remaining_days = endDate.date() - timezone.now().date()
                remaining_days = str(remaining_days).split(',')[0] + ' left'
            else:
                remaining_days = None
                
            youtube_live = package.youtubeLiveVideos.all().order_by('id')
            notes = package.notes.select_related('subject', 'chapter', 'noteurl_note').order_by('id')
            videos = package.videos.select_related('subject', 'chapter').all().order_by('id')
            tests = package.tests.prefetch_related('subjects', 'chapters','questions').all().order_by('id')
            fileTests = package.fileTests.select_related('subject', 'chapter').filter(publish=True).order_by('id')
            student_helper = StudentPackageHelper(me.profile)
            taken_ftests = student_helper.taken_file_test()

            number_videos = len(videos)
            number_notes = len(notes)
            number_tests = len(tests)
            number_fileTests = len(fileTests)

            title = package.title
            price = package.price
            max_price = package.max_price
            details = package.details
            duration = package.duration
            
            youtube_live_list = []
            videos_list = []
            notes_list = []
            tests_list = []
            fileTests_list = []
            
            package_content_demo = PackageDemoContentHelper(package)
            
            if youtube_live.exists():
                for yl in youtube_live:
                    isYoutubeDemo = package_content_demo.check_youtubeLiveVideo_demo(yl)
                    
                    yl_dict = {
                        'yl_id': yl.id, 
                        'title': yl.title, 
                        'url': yl.link,
                        'generalVideo': False, 
                        'publishDate': yl.time, 
                        'download_link': yl.download_link,
                        'isDemo': isYoutubeDemo
                        }
                    youtube_live_list.append(yl_dict)
            
            if videos.exists():
                for video in videos:
                    isVideoDemo = package_content_demo.check_video_demo(video)
                    
                    if video.publish == True:
                        try:
                            chapter = video.chapter.name
                        except:
                            chapter = 'none'
                            
                        video_dict = {
                            'video_id': video.id, 
                            'title': video.title, 
                            'url': video.urlLink, 
                            'generalVideo': video.generalVideo,
                            'publishDate': video.publishDate, 
                            'subject': video.subject.name, 
                            'chapter': chapter,
                            'isDemo': isVideoDemo
                            }
                        videos_list.append(video_dict)
                    
            if notes.exists():
                for note in notes:
                    isNoteDemo = package_content_demo.check_note_demo(note)
                    
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""

                    if note.chapter == None:
                        chapter_name = 'none'
                    else:
                        chapter_name = note.chapter.name
                        
                    note_dict = {
                        'note_id': note.id, 
                        'title': note.title, 
                        'image': note.image, 
                        'subject': note.subject.name,
                        'chapter': chapter_name, 
                        'publishDate': note.publishDate, 
                        'url': note_link,
                        'isDemo': isNoteDemo
                        }
                    notes_list.append(note_dict)
                
            if tests.exists():
                for test in tests:
                    if test.publish == True:
                        isTestDemo = package_content_demo.check_test_demo(test)
                        numberQuestions = test.questions.all().count()
                        subjects_list = []
                        chapters_list = []
                        subjects = test.subjects.all()
                        chapters = test.chapters.all()
                        
                        for subject in subjects:
                            subjects_list.append(subject.name)
                            
                        for chapter in chapters:
                            chapters_list.append(chapter.name)
                            
                        sm = StudentMarks.objects.filter(student = me.profile, test__id = test.id).last()
                        if sm:
                            test_taken = True
                        else:
                            test_taken = False 
                            
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'subject': subjects_list, 
                            'chapter': chapters_list, 
                            'time': test.time,
                            'totalMarks': test.totalMarks, 
                            'publisehd': test.published, 
                            'numberQuestions': numberQuestions,
                            'isDemo': isTestDemo,
                            'test_taken':test_taken,
                            'repeatTest':test.repeatTest,
                            }
                        tests_list.append(test_dict)
                    
            if fileTests.exists():
                for test in fileTests:
                    isFileTestDemo = package_content_demo.check_fileTest_demo(test)
                    
                    try:
                        studentMarks = StudentFileTestMarks.objects.get(fileTest=test, student=me.profile)
                        if studentMarks:
                            taken = True
                            attempt_count = mark.attempt_count
                        
                    except:
                        taken = False
                        attempt_count = 0
                        
                    if test.test_count:
                        remaining_attempt = test.test_count - attempt_count
                    else:
                        remaining_attempt = None
                        
                    try:
                        subject = test.subject.name
                    except:
                        subject = None
                        
                    try:
                        chapter = test.chapter.name
                    except:
                        chapter = None
                        
                    if test.fileTestEndDateTime:
                        if test.fileTestEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test in taken_ftests:
                        first_attempt = False
                    else:
                        first_attempt = True
                        
                    test_dict = {
                            'id': test.id, 
                            'name': test.title, 
                            'published': test.published,
                            'testTime': test.testTime, 
                            'locked': test.locked, 
                            'subjects': subject,
                            'chapters': chapter, 
                            'questionFile': test.questionFile, 
                            'solutionsFile': test.solutionsFile, 
                            'negativeMarks': test.negativeMarks, 
                            'numberQuestions': test.totalQuestion, 
                            'totalMarks': test.totalMarks, 
                            'first_attempt': first_attempt, 
                            'testTimeOver': testTimeOver,
                            'isDemo': isFileTestDemo,
                            'repeatTest':test.repeatTest,
                            'taken': taken,
                            'remaining_attempt':remaining_attempt,
                        }
                    fileTests_list.append(test_dict)

            fileTest_performance = []
            fileTest_ids = fileTests.values_list('id', flat=True)
            marks = StudentFileTestMarks.objects.filter(student=me.profile, fileTest__id__in=fileTest_ids).order_by('-id')
            for mark in marks:
                test = mark.fileTest
                test_dict = {
                    'id': mark.id,
                    'test_id': test.id,
                    'name': test.title,
                    'published': test.published,
                    'testTime': test.testTime,
                    'locked': test.locked,
                    'subjects': 'None',
                    'chapters': 'None',
                    'questionFile': test.questionFile,
                    'solutionsFile': test.solutionsFile,
                    'negativeMarks': test.negativeMarks
                }
                fileTest_performance.append(test_dict)
                
            package_details = {
                'id': package.id, 
                'title': title, 
                'price': price, 
                'max_price': max_price,
                'duration': duration, 
                'details': details,
                'bought': bought, 
                'endDate': endDate, 
                'remaining_days': remaining_days,
                'videos': videos_list, 
                'notes': notes_list, 
                'tests': tests_list, 
                'fileTests_list': fileTests_list, 
                'youtubeLiveVideos': youtube_live_list, 
                'numberVideos': number_videos, 
                'numberNotes': number_notes, 
                'numberTests': number_tests, 
                'number_fileTests': number_fileTests,
                'fileTest_performance': fileTest_performance,
            }
            context = {'status':True,'package_details': package_details}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentBuyPackage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            package_id = data['package_id']
            amount = data['amount']
            tcode = data.get('tcode')
            code = me.profile.institute.code
            package = Package.objects.get(id=package_id)
            price = package.price
            package.students.add(me.profile)

            if package.fixDuration:
                endDate = package.date + timedelta(days=package.duration)
                packageFixDurationWhileAddPackage = True
            else:
                endDate = timezone.now().date() + timedelta(days=package.duration)
                packageFixDurationWhileAddPackage = False

            try:
                coupon_id = data['coupon_id']
                coupon = CouponCode.objects.get(id=coupon_id, package=package)
                coupon.couponUsedStudents.add(me.profile)
                coupon.save()
            except:
                pass
            
            studentPackage = StudentPackage()
            studentPackage.student = me.profile
            studentPackage.package = package
            studentPackage.startDate = timezone.now().date()
            studentPackage.endDate = endDate
            studentPackage.packageFixDurationWhileAddPackage = packageFixDurationWhileAddPackage
            studentPackage.packageDurationWhileAddPackage = package.duration
            studentPackage.tcode = tcode
            studentPackage.save()
            
            if tcode != 'No-Code' and tcode != None:
                teacher = Teacher.objects.get(teacher_code = tcode)
                package_offer = 5 # in percent
                coins = (package_offer / 100) * price
                teacher_coins = TeacherPackageCoins()
                teacher_coins.teacher = teacher
                teacher_coins.package = package
                teacher_coins.student = me.profile
                teacher_coins.coins = coins
                teacher_coins.save()
                
                try:
                    teacher_total_coins = TeacherTotalCoins.objects.get(teacher = teacher)
                    teacher_total_coins.total_coins += coins
                    teacher_total_coins.save()
                except TeacherTotalCoins.DoesNotExist:
                    teacher_total_coins = TeacherTotalCoins(teacher = teacher, total_coins = coins)
                    teacher_total_coins.save()
            
            paidAmount = PaidAmountStudentPackage(studentPackage=studentPackage, paidAmount=price, date=timezone.now())
            paidAmount.save()

            try:
                payment = EaseBuzzPaymentResponseRecord.objects.get(payment=data['txnid'])
                payment.package_buy = paidAmount
                payment.save()
            except:
                pass

            create_or_update_record_of_package_earning.delay(package_id)

            try:
                manipulation = ManipulatedCoin.objects.filter(student=me.profile).order_by('-id')
                found = 'no'
                student_txt = ''
                my_coins = Coin.objects.filter(student=me.profile)
                if len(my_coins) == 1:
                    if code =="shivsaiacademy":
                        new_coins = my_coins[0].coins - float(amount)*4
                    else:
                        new_coins = my_coins[0].coins - float(amount)
                    
                    if new_coins < 0:
                        my_coins[0].coins = 0
                    else:
                        my_coins[0].coins = new_coins
                    my_coins[0].save()

                elif len(my_coins) == 0:
                    my_coins = Coin(student=me.profile, coins=0)
                    my_coins.save()

                elif len(my_coins) > 1:
                    for ind, nc in enumerate(new_coins):
                        if ind != 0:
                            nc.delete()

                for man in manipulation:
                    if man.studentSales != None and man.studentSales != me.profile:
                        other_student = man.studentSales
                        found = 'yes'
                        student_txt = str(other_student.name)
                        his_coins = Coin.objects.get(student=other_student)
                        his_coins.coins += me.profile.institute.buyCourseCoins
                        his_coins.save()
                        my_coins = Coin.objects.get(student=me.profile)
                        manipulated = ManipulatedCoin()
                        manipulated.coin = my_coins
                        manipulated.coinChanged = my_coins.coins
                        manipulated.reason = 'buyPackage'
                        manipulated.date = timezone.now()
                        manipulated.studentSales = other_student
                        manipulated.student = me.profile
                        manipulated.save()
                        my_coins.coins = 0
                        my_coins.save()
                        break
            except:
                pass

            youtubelive = LiveVideoLink.objects.filter(packages=package, locked=False, deleted=False)
            for lv in youtubelive:
                lv.students.add(me.profile)
                lv.save()

            try:
                student_batches = me.profile.batches.all().values_list('id', flat=True)
                batches = package.batches.all()
                for i in batches:
                    if i.id not in student_batches:
                        batch = Batch.objects.get(id=i.id)
                        me.profile.batches.add(batch)
            except:
                pass
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None

            try:
                app_token = app_serverKey(code)
                deviceId = package.teacher.firebaseToken
                teacher_id = package.teacher.id
                to_text = f'Congrats!! {me.profile.name} bought a new package {package.title}'
                notification = {"title":"New Notification","body": to_text,}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification,deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
            
            except Exception as f:
                print(str(f))
                
            context = {'status': 'Success','message': 'Package Successfully Purchased','found': found,'student': student_txt}
        
        except Exception as e:
            error = 'error in student buy package api -----' + str(e)
            UpdatedAgoraCode.objects.create(code=error, updateTime=timezone.now())
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentTakenTest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            try:
                studentMarks = StudentMarks.objects.get(test=test, student=me.profile)
                if test.repeatTest == True:
                    studentMarks.delete()
                    context = {'taken': False}
                else:
                    context = {'taken': True}
            except:
                context = {'taken': False}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentFireBaseToken(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            token = data['token']
            
            try:
                newStudent = data['newStudent']
            except:
                newStudent = None
                
            me.profile.firebaseToken = token
            me.profile.save()
            welcomeText = me.profile.institute.welcomeNoteText
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": 'Dear {}'.format(me.profile.name)}
            
            if welcomeText:
                notification["body"] = welcomeText
            else:
                notification["body"] = 'Congratulations on being part of our {} institute team'.format(me.profile.institute.name)

            if newStudent == 'true':
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, student_id=me.profile.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, student_id=me.profile.id)
                
            context = {'status': 'Sucess', 'token': me.profile.firebaseToken}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class StudentGetAllNotes(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        if me.institute.listReversed:
            order_by = '-id'
        else:
            order_by = 'id'
        
        try:
            institute = me.profile.institute
            currentAffairsSubjectId = institute.currentAffairsSubjectId
            batches = me.profile.batches.all()
            notes = Note.objects.filter(batches__in=batches).select_related('subject', 'chapter', 'noteurl_note').distinct('id').order_by(order_by)
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = student_brought_packages.get_all_brought_notes()
            Bookmark_object = CheckBookmark(me.profile)
            
            notes_list = []
            for note in notes:
                if note.subject.id != currentAffairsSubjectId:
                    if note.subject.id == 1680 or note.subject.id == 7178 or note.subject.id == 6629:
                        continue
                    
                    try:
                        subject_dict = {'id': note.subject.id,'name': note.subject.name}
                    except:
                        subject_dict = {}

                    try:
                        chapter_dict = {'id': note.chapter.id,'name': note.chapter.name,'code': note.chapter.code}
                    except:
                        chapter_dict = {}
                    
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    bought = False
                    if note in bought_notes:
                        bought = True
                        
                    if note.locked == False:
                        bought = True

                    try:
                        Bookmark = Bookmark_object.isNoteBookmark(note.id)
                    except:
                        Bookmark = False

                    vision = True
                    if note.noteViewsLimite:
                        vision = CheckNoteViewLimite(me.profile, note.id, note.noteViewsLimite)

                    note_dict = {
                        'id': note.id,
                        'title': note.title,
                        'teacher': '',
                        'publishDate': note.publishDate,
                        'thumbnail': note.thumbnail,
                        'image': note.image,
                        'subject': subject_dict,
                        'chapter': chapter_dict,
                        'url': note_link,
                        'locked': note.locked,
                        'bought': bought,
                        'Bookmark': Bookmark,
                        'vision': vision
                        }
                    
                    notes_list.append(note_dict)
                        
            context = {'notes': notes_list, 'len': len(notes)}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class PublishLiveVideoLink(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            url = data['link']
            url = url.replace('\"', '')
            
            try:
                title = data['title']
            except:
                title = 'Live Video'
                
            try:
                batches = data['batch_ids']
                batch_list = batches.strip('][').split(',')
            except:
                batch_list = None

            try:
                live_video = LiveVideoLink.objects.get(link=url.strip())
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            except Exception as e:
                live_video = LiveVideoLink()
                live_video.teacher = me.profile
                live_video.title = title
                live_video.link = url.strip()
                live_video.is_live = True
                live_video.save()

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            data = {"id":str(live_video.id),"type": "youtubeLive","title":str(live_video.title),"link":str(live_video.link)}
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name)}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"
                
            if batch_list != None:
                for bat in batch_list:
                    batch = Batch.objects.get(id=bat)
                    live_video.batches.add(batch)
                    live_video.save()
                    students = Student.objects.filter(batches=batch)
                    live_video.students.add(*students)
                    live_video.save()
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat), data = data)
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat), data = data)
                    
            else:
                students = Student.objects.filter(institute=me.profile.institute)
                live_video.students.add(*students)
                live_video.save()
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, institute_id=me.profile.institute.id,data = data)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, institute_id=me.profile.institute.id,data = data)
                
            context = {'status': 'Success', 'message': 'Notification sent to students'}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)

class PublishYouTubePackageWiseLive(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            url = data['link']
            url = url.replace('\"', '')
            title = data['title']
            packages = data['package_id']
            package_list = packages.strip('][').split(',')

            try:
                live_video = LiveVideoLink.objects.get(link=url.strip())
                context = {'status': 'Failed', 'message': str(e)}
                
            except Exception as e:
                live_video = LiveVideoLink()
                live_video.teacher = me.profile
                live_video.title = title
                live_video.link = url.strip()
                live_video.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            data = {"id":str(live_video.id),"type": "youtubeLive","title":str(live_video.title),"link":str(live_video.link)}
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name)}
            
            for pack_id in package_list:
                package = Package.objects.get(id=pack_id)
                live_video.packages.add(package)
                students = package.students.all()
                live_video.students.add(*students)
                institute_code= me.profile.institute.code
                if not institute_code =="mbca":
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id, data = data)
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id, data = data)
                
            context = {'status': 'Success','message': 'Notification Sent to Students'}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)

class PublishYouTubePackageWiseLiveNew(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            url = data['link']
            url = url.replace('\"', '')
            title = data['title']
            packages = data['package_id']
            package_list = packages.strip('][').split(',')

            try:
                live_video = LiveVideoLink()
                live_video.teacher = me.profile
                live_video.title = title
                live_video.link = url.strip()
                live_video.save()
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            data = {"id":str(live_video.id),"type": "youtubeLive","title":str(live_video.title),"link":str(live_video.link)}
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name)}
            for pack_id in package_list:
                package = Package.objects.get(id=pack_id)
                live_video.packages.add(package)
                students = package.students.all()
                live_video.students.add(*students)
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id, data = data)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id, data = data)
                
            context = {'status': 'Success','message': 'Notification Sent to Students'}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)

class StudentGetLiveVideoLink(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessYouTubeLiveVideos == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            batches = me.profile.batches.all()
            live_videos_list = []

            all_live_videos = LiveVideoLink.objects.filter(Q(batches__in=batches) | Q(students=me.profile)).filter(
                locked=False, deleted=False).select_related('teacher').order_by('-id').distinct('id')

            live_videos = all_live_videos
            for lv in live_videos:
                live_videos_list.append(lv)

            videos = []
            for lv in live_videos_list:
                teacher = lv.teacher
                try:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                except:
                    teacher_dict = {}
                    
                lv_dict = {'id': lv.id, 'link': lv.link, 'teacher': teacher_dict,'time': lv.time, 'title': lv.title}
                videos.append(lv_dict)

            context = {'videos': videos, 'message': 'Link Get'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentGetLiveVideoLinkPaginationWiseTesting(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessYouTubeLiveVideos == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            page = int(data['page'])
            item_per_page = 10
            start_index = page * item_per_page
            end_index = int(start_index) + item_per_page
            batches = me.profile.batches.all()
            student_package = me.profile.package_student.all()
            packages = set()
            
            for st_pack in student_package:
                if st_pack.endDate:
                    if st_pack.endDate >= datetime.now():
                        packages.add(st_pack.package)
                        
                if st_pack.packageDurationWhileAddPackage:
                    if (st_pack.startDate + timedelta(days=st_pack.packageDurationWhileAddPackage)) >= datetime.now():
                        packages.add(st_pack.package)
                        
            packages = list(packages)
            live_videos_list = []

            all_live_videos = LiveVideoLink.objects.filter(Q(batches__in=batches) | Q(students=me.profile) | Q(packages__in=packages)).filter(
                locked=False, deleted=False).select_related('teacher').order_by('-id')

            live_videos = all_live_videos[start_index:end_index]
            for lv in live_videos:
                live_videos_list.append(lv)

            videos = []
            for lv in live_videos_list:
                teacher = lv.teacher
                teacher_dict = {'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                lv_dict = {'id': lv.id, 'link': lv.link, 'teacher': teacher_dict,'time': lv.time, 'title': lv.title}
                videos.append(lv_dict)

            context = {'videos': videos, 'message': 'Link Get'}
            
            if page == 0:
                total_count = all_live_videos.count()
                context['totalPage'] = math.ceil(total_count/item_per_page)
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentGetLiveVideoLinkPaginationWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessYouTubeLiveVideos == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            datetimenow = datetime.now()
            page = int(data.get('page', 0))
            item_per_page = 10
            start_index = page * item_per_page
            end_index = int(start_index) + item_per_page
            batches = me.profile.batches.all()

            packs = Package.objects.prefetch_related('student_package').filter(student_package__student=me.profile).filter(student_package__endDate__gt=datetimenow)
            
            all_live_videos = LiveVideoLink.objects.select_related('teacher').prefetch_related('batches', 'packages',).filter(Q(batches__in=batches) | Q(students=me.profile) | Q(packages__in=packs)).filter(
                locked=False, deleted=False).order_by('-id').distinct('id')

            live_videos = all_live_videos[start_index:end_index]

            videos = []
            for lv in live_videos:
                teacher = lv.teacher
                teacher_dict = {'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                lv_dict = {'id': lv.id, 'link': lv.link, 'teacher': teacher_dict,'time': lv.time, 'title': lv.title}
                videos.append(lv_dict)

            context = {'videos': videos, 'message': 'Link Get'}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
            
        return Response(context)

class StudentGetPackageWiseLiveVideoLink(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            live_videos_list = []
            live_videos = LiveVideoLink.objects.filter(students=me.profile, locked=False).order_by('-id')
            for lv in live_videos:
                if lv in live_videos_list:
                    continue
                else:
                    live_videos_list.append(lv)
                    
            videos = []
            for lv in live_videos_list:
                teacher = lv.teacher
                teacher_dict ={'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                lv_dict = {'id': lv.id, 'link': lv.link, 'teacher': teacher_dict,'time': lv.time, 'title': lv.title}
                videos.append(lv_dict)
                
            context = {'videos': videos, 'message': 'Done'}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class FilePolicyAPI(APIView):
    def post(self, request):
        try:
            data = request.data
            filename_req = data['filename']
            filename_split = data['filename'].split('.')[0].replace(" ", "")
            print('policy filename {}--{}'.format(filename_req, filename_split))
            if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)
            policy_expires = int(time.time()+500000)
            user = request.user
            username_str = str(request.user.username)

            file_obj_id = randint(100, 99999)
            file_obj_id = timezone.now().date()
            upload_start_path = "{username}/{file_obj_id}/{filename_req}/".format(
                username=username_str,
                file_obj_id=file_obj_id,
                filename_req=filename_split
            )
            _, file_extension = os.path.splitext(filename_req)
            filename_final = "{file_obj_id}{file_extension}".format(file_obj_id=file_obj_id,file_extension=file_extension)
            final_upload_path = "{upload_start_path}{filename_final}".format(
                upload_start_path=upload_start_path,
                filename_final=filename_final,
            )

            policy_document_context = {
                "expire": policy_expires,
                "bucket_name": AWS_UPLOAD_BUCKET,
                "key_name": "",
                "acl_name": "private",
                "content_name": "",
                "content_length": 5242880000,
                "upload_start_path": upload_start_path,
            }

            aws_secret = str.encode(AWS_UPLOAD_SECRET_KEY)
            policy_document_str_encoded = str.encode(policy_document.replace(" ", ""))
            url = 'https://{bucket}.s3.amazonaws.com/'.format(bucket=AWS_UPLOAD_BUCKET,)

            policy = base64.b64encode(policy_document_str_encoded)
            signature = base64.b64encode(hmac.new(aws_secret, policy, hashlib.sha1).digest())
            data = {
                "policy": policy,
                "signature": signature,
                "key": AWS_UPLOAD_ACCESS_KEY_ID,
                "file_bucket_path": upload_start_path,
                "file_id": file_obj_id,
                "filename": filename_final,
                "url": url,
                "username": username_str,
            }
            return Response(data, status=status.HTTP_200_OK)
        
        except KeyError as e:
            logging.error(f"KeyError: Missing field {str(e)}")
            return Response({"message": f"Missing field {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        
        except ObjectDoesNotExist as e:
            logging.error(f"ObjectDoesNotExist: {str(e)}")
            return Response({"message": f"Object not found: {str(e)}"}, status=status.HTTP_404_NOT_FOUND)

        except Exception as e:
            logging.error(f"An unexpected error occurred: {str(e)}")
            return Response({"message": f"An unexpected error occurred: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

def generate_blob_name(file_name,username_str):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    file_extension = os.path.splitext(file_name)[1]
    random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    return f"{username_str}/{random_string}/{timestamp}{file_extension}"

def generate_blob_name_gc(file_name):
    timestamp = datetime.now().strftime("%Y-%m-%d")
    file_extension = os.path.splitext(file_name)[1]
    random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    return f"{random_string}/{timestamp}{file_extension}"

class FilePolicyAPIAzure(APIView):
    def post(self, request):
        data = request.data
        try:
            filename_req = data['filename']
            filename_split = filename_req.split('.')[0].replace(" ", "")
            if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)

            username_str = str(request.user.username)
            file_obj_id = timezone.now().date()
            
            blob_name = generate_blob_name(filename_req,username_str)

            url = f"https://{AzureStorageAccountName}.blob.core.windows.net/{ContainerName}/{blob_name}?{SASToken}"

            data = {
                "filename": filename_req,
                "url": url,
                "username": username_str,
            }
            return Response(data, status=status.HTTP_200_OK)
        
        except KeyError as e:
            logging.error(f"KeyError: Missing field {str(e)}")
            return Response({"message": f"Missing field {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        
        except ObjectDoesNotExist as e:
            logging.error(f"ObjectDoesNotExist: {str(e)}")
            return Response({"message": f"Object not found: {str(e)}"}, status=status.HTTP_404_NOT_FOUND)

        except Exception as e:
            logging.error(f"An unexpected error occurred: {str(e)}")
            return Response({"message": f"An unexpected error occurred: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class FilePolicyAPIGoogleCloud(APIView):
    def post(self, request):
        data = request.data
        try:
            filename_req = data['filename']  
            if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)
            
            policy_expires = int(time.time()+5000000)
            username_str = str(data['username'])
            file_obj_id = timezone.now().date()
            blob_name = f"{username_str}"
            blob_name_file = generate_blob_name_gc(filename_req)

            policy_document_context = {
                "expire": policy_expires,
                "bucket_name": BUCKET_NAME,
                "key_name": "",
                "content_name": "",
                "content_length": 5242880000,
                "upload_start_path": blob_name_file,
            }
            
            gcp_secret = str.encode(GC_UPLOAD_SECRET_KEY)
            policy_document_str_encoded = str.encode(policy_document.replace(" ", ""))
            url = f"https://storage.googleapis.com/{BUCKET_NAME}/{blob_name}"

            policy = base64.b64encode(policy_document_str_encoded)
            signature = base64.b64encode(hmac.new(gcp_secret, policy, hashlib.sha1).digest())

            googleAccessId = urllib.parse.quote(GCP_UPLOAD_ACCESS_KEY_ID, safe='')
            encodedSignature = urllib.parse.quote(signature, safe='')
            data = {
                "policy": policy,
                "signature": encodedSignature,
                "key": googleAccessId,
                "file_bucket_path": blob_name_file,
                "file_id": file_obj_id,
                "username": username_str,
                "url": url,
                "filename": blob_name_file,
            }
            return Response(data, status=status.HTTP_200_OK)

        except KeyError as e:
            logging.error(f"KeyError: Missing field {str(e)}")
            return Response({"message": f"Missing field {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        
        except ObjectDoesNotExist as e:
            logging.error(f"ObjectDoesNotExist: {str(e)}")
            return Response({"message": f"Object not found: {str(e)}"}, status=status.HTTP_404_NOT_FOUND)

        except Exception as e:
            logging.error(f"An unexpected error occurred: {str(e)}")
            return Response({"message": f"An unexpected error occurred: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
class NotesFilePolicyAPIGoogleCloud(APIView):
    def post(self, request):
        data = request.data
        try:
            filename_req = data['filename']  
            if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)
            
            policy_expires = int(time.time()+500000)
            username_str = str(data['username'])
            file_obj_id = timezone.now().date()
            blob_name = f"{username_str}"
            blob_name_file = generate_blob_name_gc(filename_req)

            policy_document_context = {
                "expire": policy_expires,
                "bucket_name": BUCKET_NAME,
                "key_name": "",
                "content_name": "",
                "content_length": 5242880000,
                "upload_start_path": blob_name_file,
            }
            

            gcp_secret = str.encode(GC_UPLOAD_SECRET_KEY)
            policy_document_str_encoded = str.encode(policy_document.replace(" ", ""))
            url = f"https://storage.googleapis.com/{BUCKET_NAME}/{blob_name}/"

            policy = base64.b64encode(policy_document_str_encoded)
            signature = base64.b64encode(hmac.new(gcp_secret, policy, hashlib.sha1).digest())

            googleAccessId = urllib.parse.quote(GCP_UPLOAD_ACCESS_KEY_ID, safe='')
            encodedSignature = urllib.parse.quote(signature, safe='')
            data = {
                "policy": policy,
                "signature": encodedSignature,
                "key": googleAccessId,
                "file_bucket_path": blob_name_file,
                "file_id": file_obj_id,
                "username": username_str,
                "url": url,
                "filename": blob_name_file,
            }
            return Response(data, status=status.HTTP_200_OK)
        
        except KeyError as e:
            logging.error(f"KeyError: Missing field {str(e)}")
            return Response({"message": f"Missing field {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        
        except ObjectDoesNotExist as e:
            logging.error(f"ObjectDoesNotExist: {str(e)}")
            return Response({"message": f"Object not found: {str(e)}"}, status=status.HTTP_404_NOT_FOUND)

        except Exception as e:
            logging.error(f"An unexpected error occurred: {str(e)}")
            return Response({"message": f"An unexpected error occurred: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class NotesFilePolicyAPIGoogleCloud2(APIView):
    def post(self, request):
        data = request.data
        try:
            filename_req = data['filename']  
            if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)
            
            policy_expires = int(time.time()+500000)
            username_str = str(data['username'])
            file_obj_id = timezone.now().date()
            blob_name = f"{username_str}"
            blob_name_file = generate_blob_name_gc(filename_req)
            note_bucket_name = "bodhi_old_bucket"
            note_folder_name = "notes_bodhiai"

            policy_document_context = {
                "expire": policy_expires,
                "bucket_name": note_bucket_name,
                "folder_name": note_folder_name,
                "key_name": "",
                "content_name": "",
                "content_length": 5242880000,
                "upload_start_path": blob_name_file,
            }
            

            
            gcp_secret = str.encode(GC_UPLOAD_SECRET_KEY)
            policy_document_str_encoded = str.encode(policy_document.replace(" ", ""))
            url = f"https://storage.googleapis.com/{note_bucket_name}/{note_folder_name}/{blob_name}"

            policy = base64.b64encode(policy_document_str_encoded)
            signature = base64.b64encode(hmac.new(gcp_secret, policy, hashlib.sha1).digest())

            googleAccessId = urllib.parse.quote(GCP_UPLOAD_ACCESS_KEY_ID, safe='')
            encodedSignature = urllib.parse.quote(signature, safe='')
            data = {
                "policy": policy,
                "signature": encodedSignature,
                "key": googleAccessId,
                "file_bucket_path": blob_name_file,
                "file_id": file_obj_id,
                "username": username_str,
                "url": url,
                "filename": blob_name_file,
            }
            return Response(data, status=status.HTTP_200_OK)
        
        except KeyError as e:
            logging.error(f"KeyError: Missing field {str(e)}")
            return Response({"message": f"Missing field {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)
        
        except ObjectDoesNotExist as e:
            logging.error(f"ObjectDoesNotExist: {str(e)}")
            return Response({"message": f"Object not found: {str(e)}"}, status=status.HTTP_404_NOT_FOUND)

        except Exception as e:
            logging.error(f"An unexpected error occurred: {str(e)}")
            return Response({"message": f"An unexpected error occurred: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class GetSubjectChapters(APIView):
    def post(self, request):
        data = request.data
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject).order_by('id')
            chapter_list = []
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name}
                chapter_list.append(chapter_dict)
            context = {'status':True,'chapters': chapter_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentGetAgoraLiveVideo(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            video_list = []
            nv_list = set()
            g_meet_list = set()

            nativeLiveVideo = set(video for video in NativeLiveVideo.objects.filter(batches__in=batches, live=True))
            nv_list.update(nativeLiveVideo)

            nativeLiveVideos = set(video for video in NativeLiveVideo.objects.filter(students=me.profile, live=True).select_related('teacher').order_by('-id'))
            nv_list.update(nativeLiveVideos)

            g_meet = set(g_video for g_video in GoogleMeetLive.objects.filter(students=me.profile, live=True).select_related('teacher').order_by('-id'))
            g_meet_list.update(g_meet)

            for gm in g_meet_list:
                try:
                    teacher_dict = {
                        'id': gm.teacher.id,
                        'name': gm.teacher.name,
                        'username': gm.teacher.teacheruser.username,
                        'photo': gm.teacher.photo
                    }

                    live_dict = {
                        'id': gm.id,
                        'title': gm.title,
                        'teacher': teacher_dict,
                        'time': gm.time,
                        'live': gm.live,
                        'antVideo': False,
                        'streamId': gm.link,
                        'multipeer': False,
                        'jitsi': False}
                    video_list.append(live_dict)
                except Exception as e:
                    print(str(e))

            for live in nv_list:
                try:
                    stream_id = live.teacher.teacheruser.username.split('@')[0]
                    final_id = stream_id.replace('.', '')
                    teacher_dict = {
                        'id': live.teacher.id,
                        'name': live.teacher.name,
                        'username': final_id,
                        'photo': live.teacher.photo
                    }

                    live_dict = {
                        'id': live.id,
                        'title': live.title,
                        'teacher': teacher_dict,
                        'time': live.time,
                        'live': live.live,
                        'antVideo': live.antVideo,
                        'streamId': live.streamId,
                        'multipeer': live.multipeer,
                        'jitsi': live.jitsiVideo,
                        'jitsiLink': live.jitsiLink,
                        'subject': live.subject,
                    }
                    video_list.append(live_dict)
                except Exception as e:
                    print(str(e))
            context = {'status':True,'videos': video_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherAddYoutubeVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        url = data['url']
        title = data['title']

        try:
            batches_ids = data['batches_ids']
            batch_list = batches_ids.strip('][').split(',')
        except:
            batch_list = None

        try:
            topic_id = data['topic_id']
            topics = QuestionTopic.objects.get(id=topic_id)
        except:
            topics = None

        try:
            subtopic_id = data['subtopic_id']
            sub_topic = QuestionSubTopic.objects.get(id=subtopic_id)
        except:
            sub_topic = None

        try:
            video = Video()
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            video.subject = subject
            video.chapter = chapter
            video.title = title
            video.topics = topics
            video.subTopics = sub_topic
            video.urlLink = url.replace("\"", "")
            video.generalVideo = False
            video.save()
            video.teacher.add(me.profile)

            if me.profile.institute.youtube_video_save_to_server:
                upload_yt_video_to_google_cloud.delay(video.id, me.profile.id)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"NEW VIDEO","body": f'A New Video {title} of {subject.name} has been Uploaded for you by {me.profile.name}',}
            data = {"id":str(video.id),"type": "video","title":str(video.title) ,"link":str(video.urlLink)}
            
            if batch_list != None:
                for bat in batch_list:
                    batch = Batch.objects.get(id=bat)
                    video.batches.add(batch)
                    videoOrder = VideoOrderBatchWise()
                    videoOrder.batch = batch
                    videoOrder.video = video
                    videoOrder.order = 0
                    videoOrder.save()
                    institute_code= me.profile.institute.code
                    institute_code_list = ["wisdombrains","mbca"]
                    if institute_code not in institute_code_list:
                        if json_file_url == None:
                            send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat), data = data)
                        else:
                            send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat), data = data)
                        
            context = {'status': 'Success', 'message': 'Successfully Added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': f'{e}'}
        return Response(context)

class StudentSendMessageLiveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            message = data['message']
            if len(message) < 1:
                context = {'status': 'Success'}
                return Response(context)
            video_id = data['video_id']
            try:
                videoObject = NativeLiveVideo.objects.get(id=video_id, live=True)
                messageObject = MessageLiveVideo()
                messageObject.student = me.profile
                messageObject.video = videoObject
                messageObject.message = message
                messageObject.save()
                context = {'status': 'Success'}
                studentInfo = LiveVideoStudentInformation.objects.filter(video=videoObject, student=me.profile)
                if len(studentInfo) > 0:
                    pass
                else:
                    studentInfo = LiveVideoStudentInformation(video=videoObject, student=me.profile, joinTime=timezone.now())
                    studentInfo.save()
                    context = {'status': 'Failed', 'message': str(e)}
                    
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                videoObjectOld = NativeLiveVideo.objects.get(id=video_id)
                teacher = videoObjectOld.teacher
                newVideoObject = NativeLiveVideo.objects.get(teacher=teacher, live=True)
                messageObject = MessageLiveVideo()
                messageObject.student = me.profile
                messageObject.video = newVideoObject
                messageObject.message = message
                messageObject.save()
                context = {'status': 'Success'}
                studentInfo = LiveVideoStudentInformation.objects.filter(video=newVideoObject, student=me.profile)
                if len(studentInfo) > 0:
                    pass
                else:
                    studentInfo = LiveVideoStudentInformation(video=newVideoObject, student=me.profile, joinTime=timezone.now())
                    studentInfo.save()
                    context = {'status': 'Failed', 'message': 'second'+str(e)}
                    
                context = {'status': 'Success', 'message': 'sent'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetLiveMessages(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            messages_list = []
            video_id = data['video_id']
            messageObjects = MessageLiveVideo.objects.filter(video__id=video_id).order_by('-id')
            for ind, mo in enumerate(messageObjects):
                if ind == 10:
                    break
                mo_dict = {'id': mo.id, 'message': mo.message,'student': mo.student.name, 'student_id': mo.student.id}
                messages_list.append(mo_dict)
            context = {'status':True, 'messages': messages_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class TeacherDeleteVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            video = Video.objects.get(id=video_id)
            video.delete()
            context = {'status': 'Success', 'message': 'Video Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user) 
        data = request.data
        
        try:
            video_id = data['video_id']
            video = Video.objects.get(id=video_id)
            
            if me.profile.mainTeacher or video.teacher.filter(id=me.profile.id).count() == 1:
                video.delete()
                context = {'status': 'Success', 'message': 'Video Deleted'}
            else:
                context = {'status': 'Failed', 'message': 'You do not have permission to delete this video.'}
        
        except Video.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Video not found.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        
        return Response(context)

class TeacherDeleteNote(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            note_id = data['note_id']
            note = Note.objects.get(id=note_id)
            if me.profile.mainTeacher or note.teacher.filter(id=me.id).count() == 1:
                note.noteurl_note.delete()
                note.delete()
                context = {'status': 'Success', 'message': 'Note Deleted'}
            else:
                context = {'status': 'Failed', 'message': 'You do not have permission to delete this note.'}
        except Note.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Note not found.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentChapterWiseTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)

        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        try:
            data = request.data
            batches = me.profile.batches.all()
            chapter_id = data['chapter_id']
            
            tests = Test.objects.prefetch_related('subjects', 'chapters', 'batches', 'questions').filter(
                Q(batches__in=batches) & 
                Q(chapters__id=chapter_id) & 
                (Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now())),
                publish=True
            ).distinct().order_by('-published')

            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests_ids = student_test_helper.taken_test()

            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_tests = stud_pack_helper.get_all_brought_tests()

            tests_list = []
            for test in tests:
                subject_list = [{'id': subject.id, 'name': subject.name or 'General'} for subject in test.subjects.all()]
                chapter_list = [{'id': chapter.id, 'name': chapter.name or 'General', 'code': chapter.code or 0} for chapter in test.chapters.all()]

                teacher_dict = {'id': 0, 'name': 'teacher'}
                batches_list = [{'id': batch.id, 'name': batch.name} for batch in test.batches.all()]

                bought = test.id in bought_tests or not test.locked
                testTimeOver = test.testEndDateTime and test.testEndDateTime < timezone.now()

                try:
                    student_mark = StudentMarks.objects.filter(student=me.profile, test=test).last()
                    mark_id = student_mark.id
                    test_taken = True
                except:
                    mark_id = None
                    test_taken = False

                first_attempt = test.id not in taken_tests_ids

                if not first_attempt and test.repeatTest:
                    student_last_report = test.marks_test.filter(student=me.profile).last()
                    if test.test_count is None or student_last_report.attempt_count < test.test_count:
                        test_dict = {
                            'id': test.id,
                            'name': test.name,
                            'totalMarks': test.totalMarks,
                            'published': test.published,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'createdBy': teacher_dict,
                            'time': test.time,
                            'locked': test.locked,
                            'batches': batches_list,
                            'numberQuestions': test.questions.count(),
                            'bought': bought,
                            'testTimeOver': testTimeOver,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'repeatTest': test.repeatTest,
                            'first_attempt': first_attempt,
                            'test_taken': test_taken,
                            'mark_id': mark_id,
                        }
                        tests_list.append(test_dict)
                else:
                    test_dict = {
                        'id': test.id,
                        'name': test.name,
                        'totalMarks': test.totalMarks,
                        'published': test.published,
                        'subjects': subject_list,
                        'chapters': chapter_list,
                        'createdBy': teacher_dict,
                        'time': test.time,
                        'locked': test.locked,
                        'batches': batches_list,
                        'numberQuestions': test.questions.count(),
                        'bought': bought,
                        'testTimeOver': testTimeOver,
                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                        'repeatTest': test.repeatTest,
                        'first_attempt': first_attempt,
                        'test_taken': test_taken,
                        'mark_id': mark_id,
                    }
                    tests_list.append(test_dict)
            
            context = {'status': True, 'tests': tests_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class StudentGetChapterWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        if me.institute.listReversed:
            order_by = '-id'
        else:
            order_by = 'id'
        
        try:
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=me.institute)
            videos = Video.objects.select_related('subject','chapter').prefetch_related('teacher').filter(
                    teacher__in=teachers, chapter=chapter, batches__in=batches).distinct().order_by(order_by)

            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_videos = bought_packages.get_all_brought_videos()
            Bookmark_Object = CheckBookmark(me.profile)
            
            final_videos_list = []
            for video in videos:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                bought = False

                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                    
                try:
                    Bookmark = Bookmark_Object.isVideoBookmark(video.id)
                except:
                    Bookmark = False

                if video in bought_videos:
                    bought = True
                    
                if video.locked == False:
                    bought = True
                    
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""

                if video.publish == True:
                    video_dict = {
                        'id': video.id,
                        'title': video.title,
                        'link': video.urlLink,
                        'lowLink': video.lowlink,
                        'highLink': video.highlink,
                        'download_link': download_link,
                        'teacher': teachers_list,
                        'subject': subject_dict,
                        'chapter': chapter_dict,
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate,
                        'bought': bought,
                        'thumbnail': video.thumbnail,
                        'vision': vision,
                        'Bookmark':Bookmark
                        }
                    final_videos_list.append(video_dict)

            context = {'status':True, 'videos': final_videos_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherAddChapter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        chapter_name = data['chapter_name']
        subject = Subject.objects.get(id=subject_id)
        chapters = Chapter.objects.filter(subject=subject)
        code = self.get_chapter_code(chapters)

        try:
            new_chapter = Chapter.objects.get(subject=subject, name=chapter_name)
            context = {'status': 'Failed','message': 'Chapter {} already exists'.format(chapter_name)}
            
        except Chapter.DoesNotExist:
            new_chapter = Chapter()
            new_chapter.name = chapter_name
            new_chapter.subject = subject
            new_chapter.code = code
            new_chapter.save()
            context = {'status': 'Success','message': 'Chapter Successfully Added'}
            
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
            
        return Response(context)

    def get_chapter_code(self, chapters):
        already_code_list = []
        if chapters.count() != 0:
            for chapter in chapters:
                already_code_list.append(chapter.code)
            last_code = max(already_code_list)
            new_code = last_code + 0.1
            new_code_final = round(new_code, 2)
        else:
            new_code_final = 1.1
        return new_code_final

class StudentAllAssignments(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            assignment_list = []
            assignments = Assignment.objects.filter(batches__in=batches, publish=True)
                    
            for assignment in assignments:
                assignment_dict = {
                    'id': assignment.id, 'title': assignment.title, 'description': assignment.description,
                    'link': assignment.link, 'published': assignment.published, 'dueDate': assignment.dueDate
                }
                assignment_list.append(assignment_dict)
                
            context = {'assignments': assignment_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class TeacherSubjectInfo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject)
            chapters_list = []
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
            subject_dict = {'id': subject.id, 'name': subject.name}
            context = {'subject': subject_dict, 'chapters': chapters_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetCourses(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        all_courses_list = []
        all_course_ids = []
        try:
            for bat in batches:
                courses = bat.course.all()
                for course in courses:
                    if course.id in all_course_ids:
                        pass
                    else:
                        course_dict = {'id': course.id, 'name': course.name, 'thumbnail':course.thumbnail}
                        all_courses_list.append(course_dict)
                        all_course_ids.append(course.id)
                   
            context = {'courses': all_courses_list}
        except Exception as e:
            context = {'courses': all_courses_list, 'message': str(e)}
        return Response(context)

class StudentGetCourseSubjects(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            subjects = course.subjects.all().order_by('id')
            subjects_list = []
            for sub in subjects:
                sub_dict = {'id': sub.id, 'name': sub.name, "icon": sub.icon}
                subjects_list.append(sub_dict)
                
            context = {'subjects': subjects_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class StudentGetCourseWiseSubjectsTestwin(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            course_id = data['course_id']
            my_languages = me.profile.student_language.all().values_list('id', flat=True)
            subjects = Subject.objects.filter(course_subject__id=course_id, language__id__in=my_languages).order_by('id').values()
            context = {'status': 'success', 'subjects': subjects}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        return Response(context)

class StudentGetSubjectWiseChaptersTestwin(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            subject_id = data['subject_id']
            chapters = Chapter.objects.filter(subject__id=subject_id).order_by('id').values()
            context = {'status': 'success', 'chapters': chapters}
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
        
        return Response(context)

class TeacherGetAllCourses(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            courses = Course.objects.filter(institute=me.profile.institute).order_by('id')
            courses_list = []
            for course in courses:
                course_dict = {'id': course.id, 'name': course.name, 'thumbnail': course.thumbnail}
                courses_list.append(course_dict)
                
            context = {'courses': courses_list}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class TeacherCourseSubjects(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            subjects = course.subjects.all().order_by('id')
            subjects_list = []
            for subject in subjects:
                sub_dict = {'id': subject.id, 'name': subject.name}
                subjects_list.append(sub_dict)
            context = {'subjects': subjects_list}
        except Exception as e:
            context = {'subjects': subjects_list, 'message': str(e)}

        return Response(context)

class TeacherCourseBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            batches = Batch.objects.filter(course=course).order_by('id')
            batch_list = []
            for bat in batches:
                bat_dict = {'id': bat.id, 'name': bat.name}
                batch_list.append(bat_dict)
            context = {'batches': batch_list}
        except Exception as e:
            context = {'batches': batch_list, 'message': str(e)}
        return Response(context)

class TeacherDeleteCourse(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            course.delete()
            context = {'status': 'Success', 'message': 'Course deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddCourseBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            batch_id = data['batch_ids']
            batch_list = batch_id.strip('][').split(',')
            course = Course.objects.get(id=course_id)
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                batch.course.add(course)
            context = {'status': 'Success', 'message': 'Course added to batch'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddCourseSubjects(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            subject_id = data['subject_ids']
            subject_list = subject_id.strip('][').split(',')
            course = Course.objects.get(id=course_id)
            for sub in subject_list:
                subject = Subject.objects.get(id=sub)
                course.subjects.add(subject)
            context = {'status': 'Success','message': 'Subject added to course'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRemoveCourseBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            course_id = data['course_id']
            batch_id = data['batch_id']
            course = Course.objects.get(id=course_id)
            batch = Batch.objects.get(id=batch_id)
            batch.course.remove(course)
            context = {'status': 'Success','message': 'Batch removed from course'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRemoveCourseSubject(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            subject_id = data['subject_id']
            course = Course.objects.get(id=course_id)
            subject = Subject.objects.get(id=subject_id)





            course.subjects.remove(subject)

            context = {'status': 'Success','message': 'Subject Removed from Course'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateCourse(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            course_name = data['course_name']
            thumbnail = data.get('thumbnail')
            course = Course(name=course_name, thumbnail=thumbnail, institute=me.profile.institute)
            course.save()
            
            if me.profile.institute.id == 49112:
                batch = Batch.objects.get(id=105968)
                batch.course.add(course)
                
            context = {'status': 'Success', 'message': 'Course Created','course_id':course.id}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherCreateCourseCategory(APIView):
    def post(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            course_id = data['course_id']
            category_name = data['category_name']
            image = data.get('image')
            course = Course.objects.get(id=course_id)

            CourseCategory.objects.create(course=course, name=category_name, image =image)
            return Response({'status': True, 'response': 'Course Category Created Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def put(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            record_id = data['record_id']
            course_id = data['course_id']
            category_name = data['category_name']
            image_url = data.get('image_url')
            course = Course.objects.get(id=course_id)
            course_category = CourseCategory.objects.get(id=record_id)
            course_category.course = course
            course_category.name = category_name
            course_category.image = image_url
            course_category.save()

            return Response({'status': True, 'response': 'Course Category Updated Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def delete(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            record_id = data['record_id']

            CourseCategory.objects.get(id=record_id).delete()
            return Response({'status': True, 'response': 'Course Category Deleted Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

class CourseWiseCategoryList(APIView):
    def post(self, request):
        try:
            Teach(self.request.user)
        except:
            Studs(self.request.user)
            
        try:
            data = request.data
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)

            all_category = CourseCategory.objects.filter(course=course).order_by('-id')
            category_list = []
            for category in all_category:
                category_dict = {
                    'id': category.id,
                    'name': category.name,
                    'image_url': category.image,
                }
                category_list.append(category_dict)
            
                
            return Response({'status': True, 'category_list': category_list})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

class StudentRequestBuyPackage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        time = data['time']
        phone = data['phone']
        if len(phone) not in (10, 9):
            context = {'status': 'Failed', 'message': 'Wrong number'}
            return Response(context)
        try:
            package = Package.objects.get(id=package_id)
            if package.marketLevelPackage:
                context = {'status': 'Failed','message': 'Buy Offilne Package Not Allowed'}
                return Response(context)
            
            teacher = Teacher.objects.get(institute=me.profile.institute, mainTeacher=True)
            try:
                packageRequest = BuyPackageRequest.objects.filter(package=package, student=me.profile)
                for pack_req in packageRequest:
                    if pack_req.inProcess == True:
                        context = {'status': 'Failed','message': 'Buy Request Already Sent'}
                        return Response(context)

                packageRequest = BuyPackageRequest()
                packageRequest.student = me.profile
                packageRequest.package = package
                packageRequest.teacher = teacher
                packageRequest.time = time
                packageRequest.phone = phone
                try:
                    price = data['price']
                    if price:
                        packageRequest.price = price
                except:
                    pass
                
                packageRequest.save()
                context = {'status': 'Success','message': 'Buy Package Request Sent to Teacher'}

            except Exception as e:
                packageRequest = BuyPackageRequest()
                packageRequest.student = me.profile
                packageRequest.package = package
                packageRequest.teacher = teacher
                packageRequest.time = time
                packageRequest.phone = phone
                try:
                    price = data['price']
                    if price:
                        packageRequest.price = price
                except:
                    pass
                packageRequest.save()
                context = {'status': 'Success','message': 'Buy Package Request Sent to Teacher'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherAllBuyPackageRequests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            packageRequests = BuyPackageRequest.objects.filter(package__teacher=me.profile, inProcess=True).order_by('-id')
            package_requests_list = []
            for pr in packageRequests:
                try:
                    package_dict = {
                        'id': pr.package.id, 'name': pr.package.title, 'numberStudents': pr.package.students.all().count(), 
                        'numberNotes': pr.package.notes.all().count(), 'numberVideos': pr.package.videos.all().count(), 
                        'numberTests': pr.package.tests.all().count(), 'price': pr.package.price, 
                        'duration': pr.package.duration, 'details': pr.package.details}
                    
                    studentDetails = StudentDetails.objects.get(student=pr.student)
                    photo = studentDetails.photo
                    student_dict = {'id': pr.student.id, 'name': pr.student.name,
                            'username': pr.student.studentuser.username, 'photo': photo}
                    pr_dict = {'id': pr.id, 'student': student_dict, 'time': pr.time,
                            'phone': pr.phone, 'package_details': package_dict}
                    package_requests_list.append(pr_dict)
                except:
                    pass
            context = {'packageRequests': package_requests_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class IsBuyPackageRequest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        try:
            packageRequest = BuyPackageRequest.objects.get(package=package, student=me.profile,inProcess=True)
            context = {'isRequest': True}
        except:
            context = {'isRequest': False}
        return Response(context)

class IsBuyPackageRequestReject(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        try:
            packageRequest = BuyPackageRequest.objects.get(package=package, student=me.profile, accepted=False)
            context = {'isRejected': True}
        except:
            context = {'isRejected': False}
        return Response(context)

class AcceptStudentBuyPackageRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        request_id = data['package_request_id']
        time = data['time']
        endDate = data['endDate']
        endDate = str(endDate.split(' ')[0])
        paidAmount = data['paidAmount']
        buyRequest = BuyPackageRequest.objects.get(id=request_id)
        student = buyRequest.student
        package = buyRequest.package
        today = timezone.now()
        try:
            studentPackage = StudentPackage.objects.get(student=student, package=package)

            if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                package.students.remove(student)
                package.save()
                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                totalPaidAmount = 0
                for i in pasp:
                    totalPaidAmount += i.paidAmount
                sbph = StudentBoughtPackageHistory()
                sbph.student = student
                sbph.package = package.title
                sbph.packagePrice = package.price
                sbph.duration = package.duration
                sbph.paidAmount = totalPaidAmount
                sbph.startDate = studentPackage.startDate
                sbph.endDate = studentPackage.endDate
                sbph.save()
                studentPackage.delete()
                for i in pasp:
                    i.delete()
                buyRequest.inProcess = False
                buyRequest.accepted = True
                buyRequest.save()

                raise StudentPackage.DoesNotExist
            else:
                buyRequest.inProcess = False
                buyRequest.accepted = True
                buyRequest.save()
                context = {'status': 'Failed','message': 'Student Already in Package'}

        except StudentPackage.MultipleObjectsReturned:
            buyRequest.inProcess = False
            buyRequest.accepted = True
            buyRequest.save()
            context = {'status': 'Failed','message': 'Student Already in Package'}

        except StudentPackage.DoesNotExist:
            if float(paidAmount) > package.price:
                context = {
                    'status': 'Failed', 'message': 'Paid amount can\'t be greater than price of package'}
            else:
                dueAmount = package.price - float(paidAmount)
                buyRequest.inProcess = False
                buyRequest.acceptTime = time
                buyRequest.paidAmount = paidAmount
                buyRequest.dueAmount = int(dueAmount)
                buyRequest.save()
                studentPackage = StudentPackage(package=package, startDate=time,endDate=endDate, student=student)
                studentPackage.save()
                paidPackages = PaidAmountStudentPackage()
                paidPackages.studentPackage = studentPackage
                paidPackages.paidAmount = int(paidAmount)
                paidPackages.date = time
                paidPackages.save()
                package.students.add(student)
                try:
                    student_batches = student.batches.all().values_list('id', flat=True)
                    batches = package.batches.all()
                    for i in batches:
                        if i.id not in student_batches:
                            batch = Batch.objects.get(id=i.id)
                            student.batches.add(batch)
                            student.save()
                except:
                    pass

                youtubelive = LiveVideoLink.objects.filter(packages=package, locked=False, deleted=False)
                for lv in youtubelive:
                    lv.students.add(student)
                    lv.save()

                context = {'status': 'Success','message': 'Student Added to Package'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherPackagePurchasedDetail(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            studentPackages = StudentPackage.objects.filter(package=package)
            packages_list = []
            for sp in studentPackages:
                paidPackage = PaidAmountStudentPackage.objects.filter(studentPackage=sp).order_by('id')
                paid_package_list = []
                for pp in paidPackage:
                    pp_dict = {'paidAmount': pp.paidAmount, 'date': pp.date}
                    paid_package_list.append(pp_dict)
                    
                student_dict = {'id': sp.student.id, 'name': sp.student.name,'username': sp.student.username}
                startDate = sp.startDate
                endDate = sp.endDate
                sp_dict = {'id': sp.id, 'startDate': startDate, 'endDate': endDate,'student': student_dict, 'payments': paid_package_list}
            context = {'paidStudents': packages_list}
            
        except Exception as e:
            context = {'paidStudents': packages_list, 'message': str(e)}
            
        return Response(context)

class TeacherStudentTestPerformance(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentMarks.objects.get(id=marks_id)
            total_marks = 0
            attemptedQuestions = studentMarks.questions.all()
            attempted_questions_list = []
            right_number = 0
            wrong_number = 0
            skipped_number = 0
            for aq in attemptedQuestions:
                question = aq.question
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)
                attempted = aq.attempted
                right = aq.right
                if right:
                    total_marks += question.marks
                    right_number += 1
                elif right == False:
                    total_marks -= question.negativeMarks
                    wrong_number += 1
                if aq.attempted == False:
                    skipped_number += 1
                time = aq.time
                direction = question.direction
                if direction != None:
                    direction_dict =\
                        {'id': direction.id, 'text': direction.text,
                            'picture': direction.picture}
                else:
                    direction_dict =\
                        {'id': None, 'text': None, 'picture': None}
                subject = question.subject
                subject_dict = {'id': subject.id, 'name': subject.name}
                chapter = question.chapter
                chapter_dict =\
                    {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True
                    optionPicture = option.picture
                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    option_dict =\
                        {'id': option.id, 'text': option.text, 'picture': optionPicture, 'explanationText': option.explanationText,
                            'explanationPicture': option.explanationPicture, 'correct': option.correct, 'selected': selected, 'explanationVideo': option.explanationVideo}
                    options_list.append(option_dict)
                question_dict =\
                    {'id': question.id, 'text': question.text, 'picture': question.picture, 'direction': direction_dict, 'subject': subject_dict, 'chapter': chapter_dict, 'marks': question.marks, 'negativeMarks': question.negativeMarks,
                        'language': question.language, 'source': question.source, 'oneWordQuestion': question.oneWordQuestion, 'oneWordAnswer': question.oneWordAnswer, 'oneWordExplanation': question.oneWordExplanation, 'options': options_list}

                aq_dict =\
                    {'id': aq.id, 'question': question_dict,
                        'attempted': attempted, 'right': right, 'time': time}
                attempted_questions_list.append(aq_dict)

            test_marks_dict =\
                {'id': studentMarks.id, 'totalMarks': total_marks, 'time': studentMarks.time, 'attemptedTime': studentMarks.attemptTime,
                    'attemptedQuestions': attempted_questions_list, 'right': right_number, 'wrong': wrong_number, 'skipped': skipped_number}
            context = {'status': 'Success', 'performance': test_marks_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Performance not found'}
        return Response(context)

class StudentGetCurrentAffairVideos(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        showBodhiCurrentAffairs = institute.showBodhiCurrentAffairs
        batches = me.profile.batches.all()
        currentAffairssubject = institute.currentAffairsSubjectId
        if currentAffairssubject:
            subject = Subject.objects.get(id=currentAffairssubject)
        else:
            subject = Subject.objects.get(id=267)
            
        teachers = Teacher.objects.filter(institute=institute)
        bodhiTeacher = Teacher.objects.get(teacheruser__username='teacherdemo')
        teacher_list = []
        if institute.showBodhiCurrentAffairs:
            for tea in teachers:
                teacher_list.append(tea)
            teacher_list.append(bodhiTeacher)
        else:
            for tea in teachers:
                teacher_list.append(tea)
                
        videos_list = []
        for teacher in teacher_list:
            for batch in batches:
                videos =Video.objects.filter(subject=subject, batches=batch,).order_by('-publishDate')
                for video in videos:
                    if video in videos_list:
                        pass
                    else:
                        videos_list.append(video)
                        
        final_videos_list = []
        for video in videos_list:
            teachers = video.teacher.all()
            teachers_list = []
            for teacher in teachers:
                teacher_dict = {'id': teacher.id, 'name': teacher.name}
                teachers_list.append(teacher_dict)
            subject_dict = {'id': video.subject.id, 'name': video.subject.name}
            chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name,'code': video.chapter.code}
            
            if video.download_link:
                download_link = video.download_link
            else:
                download_link = ""

            video_dict = {
                'id': video.id, 'teacher': teachers_list, 'subject': subject_dict, 
                'chapter': chapter_dict, 'link': video.urlLink, 'download_link': download_link,
                'generalVideo': video.generalVideo, 'publishDate': video.publishDate, 
                'title': video.title, 'thumbnail': video.thumbnail}
            final_videos_list.append(video_dict)
            
        context = {'videos': final_videos_list}
        return Response(context)

class StudentGetCurrentAffairNotes(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        batches = me.profile.batches.all()
        bodhiteacher = Teacher.objects.get(teacheruser__username='teacherdemo')
        currentAffairssubject = institute.currentAffairsSubjectId
        if currentAffairssubject:
            subject_object = Subject.objects.get(id=currentAffairssubject)
        else:
            subject_object = Subject.objects.get(id=267)

        notes_objects_list = []
        teacher_list = []
        if institute.showBodhiCurrentAffairs:
            for tea in teachers:
                teacher_list.append(tea)
            teacher_list.append(bodhiteacher)
        else:
            for tea in teachers:
                teacher_list.append(tea)

        for teacher in teacher_list:
            for batch in batches:
                notes = Note.objects.select_related('noteurl_note', 'subject', 'chapter').filter(
                    subject=subject_object, teacher=teacher, batches=batch).order_by('-id')
                for note in notes:
                    if note in notes_objects_list:
                        pass
                    else:
                        notes_objects_list.append(note)

        notes_list = []
        for note in notes_objects_list:
            try:
                subject = note.subject
                subject_dict = {'id': subject.id, 'name': subject.name}
            except:
                subject_dict = ""

            try:
                chapter = note.chapter
                chapter_dict = {'id': chapter.id,
                                'name': chapter.name, 'code': chapter.code}
            except:
                chapter_dict = ""

            try:
                note_url = note.noteurl_note
                url = note_url.link
            except:
                url = ""

            note_dict = {
                'id': note.id,
                'title': note.title,
                'teacher': teacher.name,
                'publishDate': note.publishDate,
                'subject': subject_dict,
                'chapter': chapter_dict,
                'url': url}
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class GetPackageStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.prefetch_related('students__studentuser').get(id=package_id)
        students = package.students.all()
        student_photos = StudentDetails.objects.filter(student__in=students)
        student_photos_dict = {i.student: i.photo for i in student_photos}
        student_package_list = []
        for student in students:
            try:
                photo = student_photos_dict.get(student)
                if photo != None:
                    photo = photo
                else:
                    photo = 'https://www.pinclipart.com/picdir/middle/60-602450_profile-clipart-profile-icon-round-profile-pic-png.png'
                
                student_dict = {
                        'id': student.id, 
                        'name': student.name, 
                        'photo': photo,
                        'username': student.studentuser.username}
                studentPackage = StudentPackage.objects.get(package=package, student=student)
                paidPackage = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage).order_by('-date')
                if studentPackage.endDate >= timezone.now():
                    packageEnd = False
                else:
                    packageEnd = True

                paid_list = []
                for pp in paidPackage:
                    pp_dict = {'id': pp.id,'paid': pp.paidAmount, 'date': pp.date}
                    paid_list.append(pp_dict)
                

                package_details = {
                    'id': studentPackage.id, 'startDate': studentPackage.startDate,
                    'endDate': studentPackage.endDate, 'student': student_dict, 'packageEnd':packageEnd,
                    'paid_details': paid_list
                    }
                student_package_list.append(package_details)
                context = {'studentPackages': student_package_list}
            except Exception as e:
                context = {'status':False,'message':str(e)}
        
        return Response(context)

class TeacherAddStudentPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            package_id = data['package_id']
            startDate = data['startDate']
            endDate = data['endDate']
            student = Student.objects.get(id=student_id)
            package = Package.objects.get(id=package_id)
            
            studentPackage = StudentPackage()
            studentPackage.student = student
            studentPackage.package = package
            studentPackage.startDate = startDate
            studentPackage.endDate = endDate
            studentPackage.save()
            context = {'status': 'Success','message': 'Student added to package'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditPackageFixDuration(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        package_id = data['package_id']
        fixDurations = data['fixDuration']

        try:
            package = Package.objects.get(id=package_id)
            if fixDurations == 'true':
                package.fixDuration = True
                package.save()
                students = package.students.all()

                endDate = package.date + timedelta(days=int(package.duration))
                sp = StudentPackage.objects.filter(package=package, student__in=students).update(endDate=endDate)

            else:
                package.fixDuration = False
                package.save()
                students = package.students.all()
                for i in students:
                    sp = StudentPackage.objects.get(package=package, student=i)
                    endDate = sp.startDate + timedelta(days=int(package.duration))
                    sp.endDate = endDate
                    sp.save()

            context = {'status': 'success','message': 'Successfully changed!!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class EditPackageStudentDetails(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_package_id = data['student_package_id']
            try:
                startDate = data['startDate']
            except:
                startDate = None
            endDate = data['endDate']
            paid = data['paid']
            studentPackage = StudentPackage.objects.get(id=student_package_id)
            
            if endDate != None or endDate != '':
                new_date = datetime.strptime(endDate, '%Y-%m-%d %H:%M:%S')
                studentPackage.endDate = endDate
                studentPackage.save()
                
            if paid != None or paid != '':
                paidPackage = PaidAmountStudentPackage()
                paidPackage.studentPackage = studentPackage
                paidPackage.paidAmount = int(paid)
                paidPackage.date = timezone.now()
                paidPackage.save()
            context = {'status': 'Success', 'message': 'Updated'}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherDeletePackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            try:
                package_earning = PackageEarning.objects.get(package=package)
                if package_earning:
                    package_history = PackageEarningHis()
                    package_history.packages = package
                    package_history.units_sold = package_earning.units_sold
                    package_history.total_price = package_earning.total_price
                    package_history.base_price_total = package_earning.base_price_total
                    package_history.teacher = me.profile
                    package_history.save()
                    package.total_package_earning.delete()
            except:
                pass

            if package.marketLevelPackage:
                context = {
                    "status": 'failed',
                    "message": "Store Package Can't deleted. You can only Unpublish it."
                }
                return Response(context)
            videos = package.videos.all().update(locked=False)
            notes = package.notes.all().update(locked=False)
            tests = package.tests.all().update(locked=False)
            fileTests = package.fileTests.all().update(locked=False)
            youtubeLiveVideos = package.youtubeLiveVideos.all().update(locked=False)
            
            package.delete()
            context = {'status': 'Success', 'message': 'Pacakge deleted !'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class RemoveStudentfromPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            studentPackage = StudentPackage.objects.get(id=package_id)
            student = studentPackage.student
            package = studentPackage.package
            package.students.remove(student)
            studentPackage.delete()
            context = {'status': 'Success', 'message': 'Student Removed'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentGetSubjectWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            institute = me.institute
            teachers = Teacher.objects.filter(institute=institute)
            batches = me.profile.batches.all()
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            videos = Video.objects.filter(teacher__in=teachers, batches__in=batches, subject=subject, publish=True).select_related('chapter','subject').prefetch_related('teacher').distinct('id').order_by('-id')
        
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_videos = bought_packages.get_all_brought_videos()

            videos_list = []
            for video in videos:
                
                bought = False
                if video in bought_videos:
                    bought = True
                    
                if video.locked == False:
                    bought = True
                
                teachers_list = []
                teachers = video.teacher.all()
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                    
                try:
                    subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                except AttributeError:
                    subject_dict = {}
                    
                try:
                    chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name,'code': video.chapter.code}
                except AttributeError:
                    chapter_dict = {}
                    
                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                    
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""

                video_dict = {
                    'id': video.id, 
                    'teacher': teachers_list, 
                    'subject': subject_dict, 
                    'chapter': chapter_dict, 
                    'link': video.urlLink, 
                    'download_link': download_link, 
                    'generalVideo': video.generalVideo,
                    'publishDate': video.publishDate, 
                    'title': video.title, 
                    'locked': video.locked, 
                    'bought': bought, 
                    'thumbnail': video.thumbnail, 
                    'vision': vision
                    }
                videos_list.append(video_dict)
                
            context = {'status':'success','videos': videos_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class GenerateChecksumPayTm(APIView):
    def post(self, request):
        data = request.data
        params = data['params']
        params = json.loads(params)
        print('checksum {} - type {}'.format(params, type(params)))
        merchant_key = 'AYn&Pmk_zywF&2LK'
        params_string = self.__get_param_string__(params)
        checksum = self.generate_checksum_by_str(params_string, merchant_key)
        context = {'checksum': checksum}
        return Response(context)

    def __encode__(self, to_encode, iv, key):
        to_encode = __pad__(to_encode)
        c = AES.new(key, AES.MODE_CBC, iv)
        to_encode = c.encrypt(to_encode)
        to_encode = base64.b64encode(to_encode)
        return to_encode.decode("UTF-8")

    def __decode__(to_decode, iv, key):
        to_decode = base64.b64decode(to_decode)
        c = AES.new(key, AES.MODE_CBC, iv)
        to_decode = c.decrypt(to_decode)
        if type(to_decode) == bytes:
            to_decode = to_decode.decode()
        return __unpad__(to_decode)

    def __id_generator__(self, size=6, chars=string.ascii_uppercase + string.digits + string.ascii_lowercase):
        return ''.join(random.choice(chars) for _ in range(size))

    def __get_param_string__(self, params, escape_refund=True):
        params_string = []
        for key in sorted(params.keys()):
            if ("|" in params[key] or (escape_refund == True and "REFUND" in params[key])):
                respons_dict = {}
                exit()
            value = params[key]
            params_string.append('' if value == 'null' else str(value))
        return '|'.join(params_string)

    def generate_refund_checksum(param_dict, merchant_key, salt=None):
        for i in param_dict:
            if ("|" in param_dict[i]):
                param_dict = {}
                exit()
        params_string = __get_param_string__(param_dict, False)
        return generate_checksum_by_str(params_string, merchant_key, salt)

    def generate_checksum_by_str(self, param_str, merchant_key, salt=None):
        params_string = param_str
        salt = salt if salt else self.__id_generator__(4)
        final_string = '%s|%s' % (params_string, salt)

        hasher = hashlib.sha256(final_string.encode())
        hash_string = hasher.hexdigest()

        hash_string += salt

        return self.__encode__(hash_string, IV, merchant_key)

    def verify_checksum(param_dict, merchant_key, checksum):
        if 'CHECKSUMHASH' in param_dict:
            param_dict.pop('CHECKSUMHASH')

        params_string = __get_param_string__(param_dict, False)
        return verify_checksum_by_str(params_string, merchant_key, checksum)

    def verify_checksum_by_str(param_str, merchant_key, checksum):
        paytm_hash = __decode__(checksum, IV, merchant_key)
        salt = paytm_hash[-4:]
        calculated_checksum = generate_checksum_by_str(
            param_str, merchant_key, salt=salt)
        return calculated_checksum == checksum

class TeacherEditChapter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            chapter_name = data['chapter_name']
            chapter = Chapter.objects.get(id=chapter_id)
            sub_id = chapter.subject.id
            subject_list = [267, 1, 2, 3, 4, 7, 6, 5, 8, 9, 10, 11, 12, 1680, 6628, 6629, 7178]
            if sub_id in subject_list:
                context = {'status': 'Failed','message': 'You can\'t edit this chapter'}
                return Response(context)
            
            chapter.name = chapter_name
            chapter.save()
            context = {'status': 'Success', 'message': 'Chapter Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            teachers = Teacher.objects.filter(institute=me.profile.institute, mainTeacher=False).order_by('-id')
            teacher_list = []
            for teacher in teachers:
                teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username}
                teacher_list.append(teacher_dict)
            context = {'teachers': teacher_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherGetBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            batches = teacher.batches.all()
            batch_list = []
            for batch in batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                batch_list.append(batch_dict)
            context = {'batches': batch_list}
        except Exception as e:
            context = {'batches': str(e)}
        return Response(context)

class TeacherAssignBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            batch_ids = data['batch_ids']
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            batch_list = batch_ids.strip('][').split(',')
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                teacher.batches.add(batch)
                teacher.save()
            context = {'status': 'Success', 'message': 'Batches added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteBatch(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            batch_id = data['batch_id']
            teacher = Teacher.objects.get(id=teacher_id)
            batch = Batch.objects.get(id=batch_id)
            teacher.batches.remove(batch)
            teacher.save()
            context = {'status': 'Success', 'message': 'Batch removed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherSeeAllStudentTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            student_marks = StudentMarks.objects.filter(test=test)
            marks = []
            for sm in student_marks:
                total_marks = 0
                attempted = sm.questions.all()
                for att in attempted:
                    right = att.right
                    if right == True:
                        total_marks += att.question.marks
                    if right == False:
                        total_marks -= att.question.negativeMarks
                student = sm.student
                details = StudentDetails.objects.get(student=student)
                photo = details.photo
                testmarks = sm.test.totalMarks

                pass_marks = sm.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'
                student_dict = {'id': student.id, 'name': student.name,
                        'username': student.studentuser.username, 'photo': photo}
                sm_dict = {'id': sm.id, 'marks': total_marks, 'student': student_dict,
                        'time': sm.attemptTime, 'testMarks': testmarks, 'result': result}
                marks.append(sm_dict)
            marks = sorted(marks, key=lambda i: i['marks'], reverse=True)
            context = {'marks': marks}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherBatchwiseSeeAllStudentTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['test_id']
        batch_id = data['batch_id']

        try:
            testType = data['testType']
        except:
            testType = None

        batch = Batch.objects.get(id=batch_id)

        if testType == 'mcqTest' or testType == None:
            try:
                test = Test.objects.get(id=test_id)
                student_marks = StudentMarks.objects.filter(
                    test=test, student__batches=batch)
                marks = []
                for sm in student_marks:
                    total_marks = 0
                    attempted = sm.questions.all()
                    for att in attempted:
                        right = att.right
                        if right == True:
                            total_marks += att.question.marks
                        if right == False:
                            total_marks -= att.question.negativeMarks
                    student = sm.student
                    details = StudentDetails.objects.get(student=student)
                    photo = details.photo
                    testmarks = sm.test.totalMarks

                    pass_marks = sm.test.passing_marks
                    if pass_marks:
                        if total_marks > pass_marks or total_marks == pass_marks:
                            result = 'pass'
                        else:
                            result = 'failed'
                    else:
                        result = 'undefined'
                    student_dict =\
                        {'id': student.id, 'name': student.name,
                            'username': student.studentuser.username, 'photo': photo}
                    sm_dict =\
                        {'id': sm.id, 'marks': total_marks, 'student': student_dict,
                            'time': sm.attemptTime, 'testMarks': testmarks, 'result': result}
                    marks.append(sm_dict)

            except Test.DoesNotExist:
                test = FileTest.objects.get(id=test_id)
                student_marks = StudentFileTestMarks.objects.filter(
                    fileTest=test, student__batches=batch)
                marks = []
                for sm in student_marks:
                    total_marks = sm.marks
                    student = sm.student
                    photo = student.student.photo
                    testmarks = sm.fileTest.totalMarks
                    pass_marks = sm.fileTest.passing_marks

                    if pass_marks:
                        if total_marks > pass_marks or total_marks == pass_marks:
                            result = 'pass'
                        else:
                            result = 'failed'
                    else:
                        result = 'undefined'
                    student_dict =\
                        {'id': student.id, 'name': student.name,
                            'username': student.studentuser.username, 'photo': photo}
                    sm_dict =\
                        {'id': sm.id, 'marks': total_marks, 'student': student_dict,
                            'time': sm.attemptTime, 'testMarks': testmarks, 'result': result}
                    marks.append(sm_dict)

            except Exception as e:
                print('error -', e)
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)

        else:
            test = FileTest.objects.get(id=test_id)
            student_marks = StudentFileTestMarks.objects.filter(
                fileTest=test, student__batches=batch)
            marks = []
            for sm in student_marks:
                total_marks = sm.marks
                student = sm.student
                photo = student.student.photo
                testmarks = sm.fileTest.totalMarks
                pass_marks = sm.fileTest.passing_marks

                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'
                student_dict =\
                    {'id': student.id, 'name': student.name,
                        'username': student.studentuser.username, 'photo': photo}
                sm_dict =\
                    {'id': sm.id, 'marks': total_marks, 'student': student_dict,
                        'time': sm.attemptTime, 'testMarks': testmarks, 'result': result}
                marks.append(sm_dict)

        marks = sorted(marks, key=lambda i: i['marks'], reverse=True)
        context = {'marks': marks}
        return Response(context)

class TeacherIndividualTestPerformance(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentMarks.objects.get(id=marks_id)
            total_marks = 0
            attemptedQuestions = studentMarks.questions.all()
            attempted_questions_list = []
            right_number = 0
            wrong_number = 0
            skipped_number = 0
            for aq in attemptedQuestions:
                question = aq.question
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)
                attempted = aq.attempted
                right = aq.right
                if right:
                    total_marks += question.marks
                    right_number += 1
                elif right == False:
                    total_marks -= question.negativeMarks
                    wrong_number += 1
                if aq.attempted == False:
                    skipped_number += 1
                time = aq.time
                direction = question.direction
                if direction != None:
                    direction_dict =\
                        {'id': direction.id, 'text': direction.text,
                            'picture': direction.picture}
                else:
                    direction_dict =\
                        {'id': None, 'text': None, 'picture': None}
                subject = question.subject
                subject_dict = {'id': subject.id, 'name': subject.name}
                chapter = question.chapter
                dynamicText = question.dynamicText
                chapter_dict =\
                    {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True
                    optionPicture = option.picture
                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    if option.explanationText:
                        explanationText = option.explanationText
                    else:
                        explanationText = option.explanation

                    if not explanationText:
                        explanationText = None

                    if option.explanationVideo:
                        explanationVideo = option.explanationVideo
                    else:
                        explanationVideo = None

                    option_dict =\
                        {'id': option.id, 'text': option.text, 'picture': optionPicture, 'explanationText': explanationText,
                            'explanationPicture': option.explanationPicture, 'correct': option.correct, 'selected': selected, 'explanationVideo': explanationVideo}
                    options_list.append(option_dict)
                question_dict =\
                    {'id': question.id, 'text': question.text, 'dynamicText': dynamicText, 'picture': question.picture, 'direction': direction_dict, 'subject': subject_dict,
                        'chapter': chapter_dict, 'marks': question.marks, 'negativeMarks': question.negativeMarks, 'language': question.language, 'source': question.source, 'options': options_list}

                aq_dict =\
                    {'id': aq.id, 'question': question_dict,
                        'attempted': attempted, 'right': right, 'time': time}
                attempted_questions_list.append(aq_dict)
            pass_marks = studentMarks.test.passing_marks
            if pass_marks:
                if total_marks > pass_marks or total_marks == pass_marks:
                    result = 'pass'
                else:
                    result = 'failed'
            else:
                result = 'undefined'
            test_marks_dict =\
                {'id': studentMarks.id, 'totalMarks': total_marks, 'time': studentMarks.time, 'attemptedTime': studentMarks.attemptTime,
                    'attemptedQuestions': attempted_questions_list, 'right': right_number, 'wrong': wrong_number, 'skipped': skipped_number, 'result': result}
            context = {'status': 'Success', 'performance': test_marks_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Performance not found'}
        return Response(context)

class StudentSendYoutubeMessageLiveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            message = data['message']
            if len(message) < 1:
                context = {'status': 'Success'}
                return Response(context)
            
            try:
                videoObject = LiveVideoLink.objects.get(id=video_id)
                messageObject = MessageLiveVideo()
                messageObject.student = me.profile
                messageObject.youtubeVideo = videoObject
                messageObject.message = message
                messageObject.save()
                context = {'status': 'Success'}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherShowMessageYoutubeVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            videoObject = LiveVideoLink.objects.get(id=video_id)
            messages =\
                MessageLiveVideo.objects.select_related('student__studentuser').filter(
                    youtubeVideo=videoObject).order_by('-id')
            message_list = []
            count = 0
            for message in messages:
                if count == 30:
                    break
                else:
                    message_dict = {'id': message.id, 'student': message.student.name,
                            'message': message.message, 'time': message.time}
                    message_list.append(message_dict)
                count += 1
            context = {'messages': message_list}
        except Exception as e:
            context = {'messages': []}
        return Response(context)

class StudentSeeMessageYoutubeVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            videoObject = LiveVideoLink.objects.get(id=video_id)
            messages = MessageLiveVideo.objects.filter(youtubeVideo=videoObject).order_by('-id')
            message_list = []
            count = 0
            for message in messages:
                if count == 30:
                    break
                else:
                    message_dict = {'id': message.id, 'student': message.student.name,
                            'message': message.message, 'time': message.time}
                    message_list.append(message_dict)
                count += 1
            context = {'messages': message_list}
        except Exception as e:
            context = {'messages': []}
        return Response(context)

class TeacherGetAllYoutubeLiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            liveVideos = LiveVideoLink.objects.filter(teacher=me.profile).order_by('-id')
            video_list = []
            for lv in liveVideos:
                lv_dict = {'id': lv.id, 'time': lv.time, 'link': lv.link,'title': lv.title, 'deleted': lv.deleted}
                video_list.append(lv_dict)
            context = {'videos': video_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherCreateTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        name = data['name']
        chapter = Chapter.objects.get(id=chapter_id)
        try:
            thumbnail = data['thumbnail']
        except:
            thumbnail = ""
        try:
            topic = QuestionTopic.objects.get(chapters=chapter, topic=name)
            context = {'status': 'Failed', 'message': 'Topic already exists.'}
            
        except QuestionTopic.DoesNotExist:
            topic = QuestionTopic()
            topic.topic = name
            topic.thumbNail = thumbnail
            topic.save()
            topic.chapters.add(chapter)
            topic.save()
            context = {'status': 'Success', 'message': 'Topic Added'}
            
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
            
        return Response(context)

class TeacherGetChapterTopics(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            topics = QuestionTopic.objects.filter(chapters=chapter)
            topic_list = []
            for topic in topics:
                topic_dict = {'id': topic.id, 'name': topic.topic,"thumbnail":topic.thumbNail}
                topic_list.append(topic_dict)
            context = {'topics': topic_list}
        except Exception as e:
            context = {'topics': [], 'message': str(e)}
        return Response(context)

class TeacherCreateSubTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        topic_id = data['topic_id']
        name = data['name']
        topic = QuestionTopic.objects.get(id=topic_id)
        try:
            subTopic = QuestionSubTopic.objects.get(topic=topic, name=name)
            context = {'status': 'Failed','message': 'Sub Topic already exists.'}
        
        except QuestionSubTopic.DoesNotExist:
            subTopic = QuestionSubTopic()
            subTopic.name = name
            subTopic.save()
            subTopic.topic.add(topic)
            subTopic.save()
            context = {'status': 'Success', 'message': 'Sub Topic Added'}
            
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
            
        return Response(context)

class TeacherGetSubTopics(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            topic_id = data['topic_id']
            topic = QuestionTopic.objects.get(id=topic_id)
            subtopics = QuestionSubTopic.objects.filter(topic=topic)
            subtopic_list = []
            for subtopic in subtopics:
                subtopic_dict = {'id': subtopic.id, 'name': subtopic.name}
                subtopic_list.append(subtopic_dict)
            context = {'subtopics': subtopic_list}
        except Exception as e:
            context = {'subtopics': [], 'message': str(e)}
        return Response(context)

class TeacherDeleteTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            topic_id = data['topic_id']
            topic = QuestionTopic.objects.get(id=topic_id)
            topic.delete()
            context = {'status': 'Success', 'message': 'Topic Deleted'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherDeleteSubTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            topic_id = data['subtopic_id']
            subtopic = QuestionSubTopic.objects.get(id=topic_id)
            subtopic.delete()
            context = {'status': 'Success', 'message': 'Topic Deleted'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class DummyEvaluate(APIView):
    def post(self, request):
        data = request.data
        test_id = data['test_id']
        answers = data['answers']
        totalTime = data['totalTime']
        answers = answers.replace('\"', '')
        answers = answers.split(',')
        test = Test.objects.get(id=test_id)
        try:
            testMarks = StudentMarks.objects.get(student=me.profile, test=test)
            context = {'status': 'Failed', 'message': 'Test already taken'}
        except:
            inner = []
            outer = []
            for ind, ans in enumerate(answers):
                try:
                    val = ans.replace('[', '')
                    val = val.replace(']', '')
                    val = val.replace(' ', '')
                    inner.append(int(val))
                    if (ind+1) % 3 == 0:
                        outer.append(inner)
                        inner = []
                except Exception as e:
                    print(str(e))
        context = {'outer': outer, 'inner': inner}
        return Response(context)

class TeacherStudentHostLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        video_id = data['video_id']
        status = data['status']
        print('host status {}'.format(status))
        if 'true' in str(status):
            status = True
        else:
            status = False
        try:
            student = Student.objects.get(id=student_id)
            video = NativeLiveVideo.objects.get(id=video_id)
            try:
                hostLiveVideo = StudentHostLiveVideo.objects.get(student=student, video=video)
                hostLiveVideo.inProcess = status
                hostLiveVideo.save()
                context = {'status': 'Success', 'live': hostLiveVideo.status, 'message': 'Already Exists'}
                
            except StudentHostLiveVideo.DoesNotExist:
                hostLiveVideo = StudentHostLiveVideo()
                hostLiveVideo.student = student
                hostLiveVideo.video = video
                hostLiveVideo.inProcess = status
                hostLiveVideo.save()
                context = {'status': 'Success', 'live': status}
                
        except Exception as e:
            context = {'status': 'Failed', 'live': status, 'message': str(e)}
            
        return Response(context)

class CheckStudentLiveHostVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            video = NativeLiveVideo.objects.get(id=video_id)
            hostLiveVideo = StudentHostLiveVideo.objects.get(student=me.profile, video=video)
            context = {'status': 'Success', 'live': hostLiveVideo.inProcess}
        except Exception as e:
            context = {'status': 'Failed', 'live': False, 'message': str(e)}
        return Response(context)

class TeacherEditNote(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        note_id = data['note_id']
        title = data['title']
        batch_ids = data['batch_ids']
        batch_list = batch_ids.strip('][').split(',')

        try:
            noteViewsLimite = data['noteViewsLimite']
        except:
            noteViewsLimite = None

        try:
            note = Note.objects.get(id=note_id)
            try:
                link = data['link']
                note_url = NoteURL.objects.get(note=note)
                note_url.link = link
                note_url.save()
            except:
                pass

            note.title = title
            note.noteViewsLimite = noteViewsLimite
            note.save()
            note.batches.clear()
            for bl in batch_list:
                batch = Batch.objects.get(id=bl)
                note.batches.add(batch)

            context = {'status': 'Success', 'message': 'Notes Updated'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherEditVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        title = data['title']
        batch_ids = data['batch_ids']
        batch_list = batch_ids.strip('][').split(',')
        
        try:
            publish_data = data['publish']
        except:
            publish_data = None
            
        try:
            viewsLimite = data['viewsLimite']
        except:
            viewsLimite = None
            
        try:
            video = Video.objects.get(id=video_id)
            video.title = title
            try:
                youtube_url = data['youtube_url']
                video.urlLink = youtube_url
            except:
                pass
            
            if publish_data != None:
                if publish_data == 'true':
                    video.publish = True
                else:
                    video.publish = False

            if viewsLimite == '0':
                video.viewsLimite = None
            else:
                if viewsLimite.isnumeric():
                    video.viewsLimite = viewsLimite

            video.save()
            
            existing_batches = video.batches.all()
            video.batches.clear()
            former_batch_ids = []
            for eb in existing_batches:
                former_batch_ids.append(eb.id)

            for bl in batch_list:
                batch = Batch.objects.get(id=bl)
                video.batches.add(batch)
                try:
                    videoOrder = VideoOrderBatchWise.objects.get(video=video, batch=batch)

                except VideoOrderBatchWise.MultipleObjectsReturned:
                    VideoOrderBatchWise.objects.filter(video=video, batch=batch).delete()
                    videoOrder = VideoOrderBatchWise()
                    videoOrder.batch = batch
                    videoOrder.video = video
                    videoOrder.order = 0
                    videoOrder.save()

                except VideoOrderBatchWise.DoesNotExist:
                    videoOrder = VideoOrderBatchWise()
                    videoOrder.batch = batch
                    videoOrder.video = video
                    videoOrder.order = 0
                    videoOrder.save()

            for fbi in former_batch_ids:
                if fbi not in batch_list:
                    try:
                        batch = Batch.objects.get(id=fbi)
                        videoOrder = VideoOrderBatchWise.objects.get(video=video, batch=batch)
                        videoOrder.delete()
                    except:
                        pass

            context = {'status': 'Success', 'message': 'Video Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetTestRanking(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            marks_id = data['marks_id']
            studentMarks = StudentMarks.objects.select_related('test').get(id=marks_id)
            my_marks = round(studentMarks.marks,3)
            all_student_marks = StudentMarks.objects.select_related('test','student').filter(test=studentMarks.test)
            all_student_list = []
            for asm in all_student_marks:
                if asm.marks != None:
                    try:
                        photo = asm.student.student.photo
                    except:
                        photo = None
                        
                    student_dict = {
                        'name': asm.student.name, 
                        'photo': photo,
                        'marks': round(asm.marks,3), 
                        'total_marks': asm.totalTestMarks,
                        'attempt_count': asm.attempt_count,
                        }
                    all_student_list.append(student_dict)
                    
            sorted_list = sorted(all_student_list, key=lambda x: (x['marks']), reverse=True)
            count = 1
            my_rank = 0
            rank_list = []
            my_details = []
            for student_details in sorted_list:
                if student_details['marks'] == my_marks and student_details['name'] == me.profile.name:
                    my_rank = count
                    my_details = [count, student_details]
                rank_list.append((count, student_details))
                count += 1
            context = {'rankList': rank_list,'my_rank': my_rank, 'my_details': my_details}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherAddSubjects(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            subjects_ids = data['subject_ids']
            subject_list = subjects_ids.strip('][').split(',')
            teacher = Teacher.objects.get(id=teacher_id)
            for sub_id in subject_list:
                subject = Subject.objects.get(id=sub_id)
                teacher.subjects.add(subject)
                teacher.save()
            context = {'status': 'Success', 'message': 'Subjects added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetAllSubjects(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            subjects = teacher.subjects.all()
            subject_list = []
            for sub in subjects:
                sub_dict = {'id': sub.id, 'name': sub.name}
                subject_list.append(sub_dict)
            context = {'subjects': subject_list}
        except Exception as e:
            context = {'subjects': [], 'message': str(e)}
        return Response(context)

class TeacherRemoveSubject(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            subject_id = data['subject_id']
            teacher = Teacher.objects.get(id=teacher_id)
            subject = Subject.objects.get(id=subject_id)
            teacher.subjects.remove(subject)
            teacher.save()
            context = {'status': 'Success', 'message': 'Subject Removed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteYoutubeLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            video = LiveVideoLink.objects.get(id=video_id)
            video.deleted = True
            video.is_live = False
            video.save()
            context = {'status': 'Success','message': 'Video Removed', 'deleted': video.deleted}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)
    
class TeacherDeleteYoutubeLiveAllVideo(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            videos = LiveVideoLink.objects.filter(teacher=me.profile)
            total = videos.count()
            print(total)
            videos.delete()
            context = {'status': 'Success','message': 'All Video Removed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeMarksChapter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        max_marks = data['max_marks']
        negative_marks = data['negative_marks']
        try:
            chapter = Chapter.objects.get(id=chapter_id)
            questions = Question.objects.filter(chapter=chapter)
            for question in questions:
                question.marks = max_marks
                question.negativeMarks = negative_marks
                question.save()
            context = {"status": 'Success', 'message': 'Marks changed'}
        except Exception as e:
            context = {"status": 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChangeCorrectOption(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        question_id = data['question_id']
        option_id = data['option_id']
        which_option = ''
        try:
            question = Question.objects.get(id=question_id)
            options = Option.objects.filter(question=question)
            for opt in options:
                if opt.id == option_id:
                    opt.correct = True
                    which_option = opt.text
                else:
                    opt.correct = False
                opt.save()
            context = {'status': 'Success',
                       'message': 'Option changed to {}'.format(which_option)}
        except Exception as e:
            context = {'status': 'Failded', 'message': str(e)}
        return Response(context)

class StudentGetTeacherWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        batches = me.profile.batches.all()
        institute = me.institute
        teacher = Teacher.objects.get(id=teacher_id)
        videos_list = []
        for batch in batches:
            if me.institute.listReversed:
                videos =\
                    Video.objects.filter(
                        teacher=teacher, batches=batch).order_by('-id')

            else:
                videos =\
                    Video.objects.filter(
                        teacher=teacher, batches=batch).order_by('id')
            videos_list.extend(videos)
        videos_list = list(unique_everseen(videos_list))
        final_videos_list = []
        bought_videos = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                videos = bp.videos.all()
                for video in videos:
                    bought_videos.append(video.id)
            except:
                pass

        for video in videos_list:
            teachers = video.teacher.all()
            teachers_list = []
            for teacher in teachers:
                teacher_dict = {'id': teacher.id, 'name': teacher.name}
                teachers_list.append(teacher_dict)
            subject_dict = {'id': video.subject.id, 'name': video.subject.name}
            chapter_dict =\
                {'id': video.chapter.id, 'name': video.chapter.name,
                    'code': video.chapter.code}
            bought = False
            if video.id in bought_videos:
                bought = True
            if video.locked == False:
                bought = True
            if video.download_link:
                download_link = video.download_link
            else:
                download_link = ""
            video_dict =\
                {'id': video.id, 'teacher': teachers_list, 'subject': subject_dict, 'chapter': chapter_dict, 'link': video.urlLink, 'download_link': download_link,
                    'generalVideo': video.generalVideo, 'publishDate': video.publishDate, 'title': video.title, 'bought': bought}
            final_videos_list.append(video_dict)
        context = {'videos': final_videos_list}
        return Response(context)

class StudentTeacherWiseNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        institute = me.profile.institute
        batches = me.profile.batches.all()
        teachers = Teacher.objects.filter(institute=institute)
        teacher_id = data['teacher_id']
        teacher = Teacher.objects.get(id=teacher_id)
        notes_objects_list = []
        for batch in batches:
            if me.institute.listReversed:
                if me.institute.name == 'Oxford' or me.institute.name == 'DLM Academy' or me.institute.name == 'Competitive Pharma' or me.institute.name == 'Giri Chemistry':
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, batches=batch).order_by('-id')
                else:
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, locked=False, batches=batch).order_by('-id')
            else:
                if me.institute.name == 'Oxford' or me.institute.name == 'DLM Academy' or me.institute.name == 'Competitive Pharma' or me.institute.name == 'Giri Chemistry':
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, batches=batch).order_by('id')
                else:
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, batches=batch, locked=False).order_by('id')

            for note in notes:
                notes_objects_list.append(note)
        notes_list = []
        bought_notes = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                notes = bp.notes.all()
                for note in notes:
                    bought_notes.append(note.id)
            except:
                pass
        for note in notes_objects_list:
            subject = note.subject
            chapter = note.chapter
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
            bought = False
            if note.id in bought_notes:
                bought = True
            if note.locked == False:
                bought = True
            note_dict =\
                {'id': note.id, 'title': note.title, 'image': note.image, 'teacher': teacher.name, 'publishDate': note.publishDate,
                    'subject': subject.name, 'chapter_object': chapter.name, 'url': note_link, 'bought': bought}
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class StudentEbooks(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        batches = me.profile.batches.all()
        teachers = Teacher.objects.filter(institute=institute)
        ebooksSubject = institute.ebooksSubjectId
        if ebooksSubject:
            subject_object = Subject.objects.get(id=ebooksSubject)
        else:
            subject_object = Subject.objects.get(id=1680)

        notes_objects_list = []
        first_notes = 0
        for batch in batches:
            notes =\
                Note.objects.filter(subject=subject_object,
                                    batches=batch).order_by('-id')
            for note in notes:
                notes_objects_list.append(note)
        notes_list = []
        bought_notes = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(
            student=me.profile).select_related('package').prefetch_related('package__notes')
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                notes = bp.notes.all()
                for note in notes:
                    bought_notes.append(note.id)
            except:
                pass

        unique_id = set()
        for note in notes_objects_list:
            try:
                subject = note.subject
                chapter = note.chapter
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                bought = False
                if note.id in bought_notes:
                    bought = True
                if note.locked == False:
                    bought = True
                if chapter == None:
                    chapter_name = 'none'
                else:
                    chapter_name = chapter.name
                note_dict =\
                    {'id': note.id, 'title': note.title, 'image': note.image, 'publishDate': note.publishDate, 'subject': subject.name,
                        'chapter_object': chapter_name, 'url': note_link, 'bought': bought}
                if note.id not in unique_id:
                    notes_list.append(note_dict)
                    unique_id.add(note.id)
            except:
                pass

        context =\
            {'notes': notes_list}
        return Response(context)

class YoutubeIFrame(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.institute == 'Darshan Academy':
            context = {'htmlCode': None}
            return Response(context)
        else:
            data = request.data
            url = data['url']
            print('video url {}'.format(url))
            context = {'htmlcode': code}
            return Response(context)

class TeacherCreateAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            pdfLink = data['pdfLink']
            title = data['title']
            description = data['description']
            dueDate = data['dueDate']
            batches_ids = data['batch_ids']
            batch_list = batches_ids.strip('][').split(',')
            date = str(dueDate.split('.')[0])
            date = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
            assignment = Assignment()
            assignment.teacher = me.profile
            assignment.link = pdfLink
            assignment.published = timezone.now()
            assignment.dueDate = date
            assignment.title = title
            assignment.description = description
            assignment.save()
            
            for bat in batch_list:
                assignment.batches.add(bat)
                assignment.save()

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"NEW Assignment","body": f'A New Assignment {assignment.title} has been Created for you by {me.profile.name}',}
            
            for batch_id in batch_list:
                institute_code = me.profile.institute.code
                institute_code_list = ["wisdombrains","mbca"]
                if institute_code not in institute_code_list:
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))
                
            context = {'status': 'Success', 'message': 'Assignmnet Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateSubjectiveTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            pdfLink = data['pdfLink']
            title = data['title']
            description = data['description']
            dueDate = data['dueDate']
            batches_ids = data['batch_ids']
            batch_list = batches_ids.strip('][').split(',')
            date = str(dueDate.split('.')[0])
            date = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
            assignment = Assignment()
            assignment.subjecttiveTest = True
            assignment.teacher = me.profile
            assignment.link = pdfLink
            assignment.link = pdfLink
            assignment.published = timezone.now()
            assignment.dueDate = date
            assignment.title = title
            assignment.description = description
            assignment.save()
            for bat in batch_list:
                assignment.batches.add(bat)
                assignment.save()
            context = {'status': 'Success', 'message': 'Subjective Test Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            assignment_id = data['assignment_id']
            batches_ids = data['batch_ids']
            batch_list = batches_ids.strip('][').split(',')
            assignment = Assignment.objects.get(id=assignment_id)
            assigned_batches = assignment.batches.all()
            for i in assigned_batches:
                batch = Batch.objects.get(id=i.id)
                assignment.batches.remove(batch)
                assignment.save()
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                assignment.batches.add(batch)
                assignment.save()
            context = {'status': 'Success',
                       'message': 'Assignmnet Batch Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAntMediaGoLive(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'content/antPublish.html'

    def get(self, request):
        me = Teach(self.request.user)
        return Response({'teacher': me.profile.teacheruser.username})

class StudentLiveClassAttendance(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        liveVideoInfo = LiveVideoStudentInformation.objects.filter(student=me.profile)
        live_attendance = []
        for lvi in liveVideoInfo:
            try:
                lv = lvi.video
                time = lv.time
                teacher = lv.teacher.name
                lvi_dict = {'id': lvi.id, 'video': teacher,'time': time, 'joinTime': lvi.joinTime}
                live_attendance.append(lvi_dict)
            except:
                pass

        sylvi = StudentYoutubeLiveVideoInformation.objects.filter(student=me.profile)
        for i in sylvi:
            try:
                teacher = i.video.teacher.name
                time = i.video.time
                lvi_dict = {'id': i.id, 'video': teacher,'time': time, 'joinTime': i.joinTime}
                live_attendance.append(lvi_dict)
            except:
                pass
        context = {'onlineAttendance': live_attendance}
        return Response(context)

class TeacherGetAllAssignment(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        assignments = Assignment.objects.filter(teacher=me.profile, subjecttiveTest=False).order_by('-id')
        assignment_list = []
        for asign in assignments:
            try:
                batches_list = []
                batches = asign.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                assign_dict = {'id': asign.id, 'link': asign.link, 'published': asign.published, 'dueDate': asign.dueDate,
                               'title': asign.title, 'description': asign.description, 'batches': batches_list, 'publish': asign.publish}
                assignment_list.append(assign_dict)
            except:
                pass
        context = {'assignments': assignment_list}
        return Response(context)

class TeacherGetAllSubjectiveTests(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            assignments = Assignment.objects.filter(teacher=me.profile, subjecttiveTest=True).order_by('-id')
            assignment_list = []
            for asign in assignments:
                batches_list = []
                batches = asign.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                    assign_dict = {'id': asign.id, 'link': asign.link, 'published': asign.published, 'dueDate': asign.dueDate, 'title': asign.title,
                                    'description': asign.description, 'batches': batches_list, 'publish': asign.publish, 'subjectiveTest': asign.subjecttiveTest}
                assignment_list.append(assign_dict)
                
            context = {'status':True,'assignments': assignment_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherScheduleAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        assignment_id = data['assignment_id']
        assignment_publish = data['publish']
        assignment = Assignment.objects.get(id=assignment_id)
        if assignment_publish == 'true':
            assignment.publish = True
        else:
            assignment.publish = False
        assignment.save()
        context = {'status': 'Success', 'message': assignment_publish}
        return Response(context)

class TeacherDeleteAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            assignment_id = data['assignment_id']
            assignment = Assignment.objects.get(id=assignment_id)
            assignment.delete()
            context = {'status': 'Success', 'message': 'Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetAllAssignment(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        assignment_list = []
        for batch in batches:
            try:
                assignments = Assignment.objects.filter(batches=batch.id, subjecttiveTest=False).order_by('-id')
                for assignment in assignments:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    student_assignments = assignment.student_assignment.filter(student=me.profile)
                    studAssignments_list = []
                    for studAssi in student_assignments:
                        studAssignments_dict = {'marks': studAssi.marks, 'remarks': studAssi.remark,"pdfLink":studAssi.pdfLink}
                        studAssignments_list.append(studAssignments_dict)
                    assign_dict = {'id': assignment.id, 'link': assignment.link, 'published': assignment.published, 'dueDate': assignment.dueDate,
                            'title': assignment.title, 'description': assignment.description, 'batches': batch_dict, 'studentAssignments': studAssignments_list}
                    assignment_list.append(assign_dict)
                context = {'status':True,'assignments': assignment_list}
            except Exception as e:
                context = {'status':False, 'message': str(e)}
        
        return Response(context)

class StudentGetAllSubjectiveTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            assignment_list = []
            for batch in batches:
                assignments = Assignment.objects.filter(batches=batch.id, subjecttiveTest=True).order_by('-id')
                for assignment in assignments:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    student_assignments = assignment.student_assignment.filter(student=me.profile)
                    studAssignments_list = []
                    for studAssi in student_assignments:
                        studAssignments_dict = {'marks': studAssi.marks, 'remarks': studAssi.remark}
                        studAssignments_list.append(studAssignments_dict)
                        
                    assign_dict = {
                        'id': assignment.id, 
                        'link': assignment.link, 
                        'published': assignment.published, 
                        'dueDate': assignment.dueDate, 
                        'title': assignment.title,
                        'description': assignment.description, 
                        'batches': batch_dict, 
                        'subjectiveTest': assignment.subjecttiveTest, 
                        'studentAssignments': studAssignments_list
                        }
                    assignment_list.append(assign_dict)
            
            context = {'status':True, 'assignments': assignment_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentUploadAssignment(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        pdfLink = data['pdfLink']
        assignment_id = data['assignment_id']
        try:
            assignment = Assignment.objects.get(id=assignment_id)
        except:
            context = {'status': 'Failed', 'message': 'Assignment not found'}
        try:
            studentAssignment = StudentAssignment()
            studentAssignment.student = me.profile
            studentAssignment.assignment = assignment
            studentAssignment.submissionDate = timezone.now()
            studentAssignment.pdfLink = pdfLink
            studentAssignment.save()
            context = {'status': 'Success', 'message': 'Assignment Submitted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentCheckAssignmentSubmission(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        assignment_id = data['assignment_id']
        try:
            assignment = Assignment.objects.get(id=assignment_id)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        try:
            studentAssignment = StudentAssignment.objects.get(student=me.profile, assignment=assignment)
            pdfLink = studentAssignment.pdfLink
            context = {'status': 'Success', 'message': pdfLink}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubmittedAssignments(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            assignment_id = data['assignment_id']
            assignment = Assignment.objects.get(id=assignment_id)
            studentAssignments = StudentAssignment.objects.filter(assignment=assignment)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)
        assignment_list = []
        for sa in studentAssignments:
            details = StudentDetails.objects.get(student=sa.student)
            photo = details.photo
            student_dict =\
                {'id': sa.student.id, 'name': sa.student.name,
                    'username': sa.student.studentuser.username, 'photo': photo}
            sa_dict =\
                {'id': sa.id, 'marks': sa.marks, 'link': sa.pdfLink,
                    'student': student_dict, 'submissionDate': sa.submissionDate}
            assignment_list.append(sa_dict)
        context = {'assignments': assignment_list}
        return Response(context)

class TeacherGetAssignmentBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        assignment_id = data['assignment_id']
        assignment = Assignment.objects.get(id=assignment_id)
        batches = assignment.batches.all()
        batches_list = []
        for batch in batches:
            batch_dict = {'id': batch.id, 'name': batch.name}
            batches_list.append(batch_dict)
        context = {'assingmentBatches': batches_list}
        return Response(context)

class TeacherBatchWiseStudentAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        assignment_id = data['assignment_id']
        student_assignment_list = []
        assignment = Assignment.objects.get(id=assignment_id)
        studentAssignments = StudentAssignment.objects.filter(assignment=assignment)
        for sa in studentAssignments:
            batches = sa.student.batches.all()
            for bat in batches:
                if bat.id == int(batch_id):
                    student_assignment_list.append(sa)
        final_assignments = []
        for sa in student_assignment_list:
            details = StudentDetails.objects.get(student=sa.student)
            photo = details.photo
            student_dict =\
                {'id': sa.student.id, 'name': sa.student.name,
                    'username': sa.student.studentuser.username, 'photo': photo}
            sa_dict =\
                {'id': sa.id, 'marks': sa.marks, 'link': sa.pdfLink,
                    'student': student_dict, 'submissionDate': sa.submissionDate}
            final_assignments.append(sa_dict)
        context = {'assignments': final_assignments}
        return Response(context)

class StudentSpecificPackages(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        object_id = data['object_id']  ### example - test id
        type_object = data['type_object']  ### type - test
        
        packages_list = []
        for teacher in teachers:
            packages = Package.objects.filter(teacher=teacher).prefetch_related('tests','videos','notes','students')
            for pack in packages:
                student_id_list = []
                students = pack.students.all()
                for student in students:
                    student_id_list.append(student.id)
                    
                if me.profile.id in student_id_list:
                    bought = True
                else:
                    bought = False
                    
                if bought == False:
                    packages_list.append(pack)
                    
        final_list = []
        for package in packages_list:
            notes_ids = []
            videos_ids = []
            tests_ids = []
            ftests_ids = []
            numberTests = package.tests.all().count()
            numberFileTests = package.fileTests.all().count()
            numberVideos = package.videos.all().count()
            numberNotes = package.notes.all().count()

            if type_object == 'E_book' or type_object == 'e_book':
                notes = package.notes.all()
                for note in notes:
                    notes_ids.append(note.id)
                    
                if int(object_id) in notes_ids:
                    package_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'numberTests': numberTests, 
                        'numberVideos': numberVideos, 
                        'numberNotes': numberNotes,
                        'price': package.price, 
                        'duration': package.duration, 
                        'details': package.details, 
                        'thumbnail': package.thumbnail,
                        'bought': False, 
                        }
                    final_list.append(package_dict)
                    
            elif type_object == 'video':
                videos = package.videos.all()
                for video in videos:
                    videos_ids.append(video.id)
                    
                if int(object_id) in videos_ids:
                    package_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'numberTests': numberTests, 
                        'numberVideos': numberVideos, 
                        'numberNotes': numberNotes,
                        'price': package.price, 
                        'duration': package.duration, 
                        'details': package.details, 
                        'thumbnail': package.thumbnail,
                        'bought': False, 
                        }
                    final_list.append(package_dict)
                    
            elif type_object == 'test':
                tests = package.tests.all()
                for test in tests:
                    print(test.id)
                    tests_ids.append(test.id)
                    
                if int(object_id) in tests_ids:
                    package_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'numberTests': numberTests, 
                        'numberVideos': numberVideos, 
                        'numberNotes': numberNotes,
                        'price': package.price, 
                        'duration': package.duration, 
                        'details': package.details, 
                        'thumbnail': package.thumbnail,
                        'bought': False, 
                        }
                    final_list.append(package_dict)
                    
            elif type_object == 'filetest':
                file_tests = package.fileTests.all()
                for ftest in file_tests:
                    ftests_ids.append(ftest.id)
                    
                if int(object_id) in ftests_ids:
                    package_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'numberTests': numberTests, 
                        'numberFileTests': numberFileTests,
                        'numberVideos': numberVideos, 
                        'numberNotes': numberNotes,
                        'price': package.price, 
                        'duration': package.duration, 
                        'details': package.details, 
                        'thumbnail': package.thumbnail,
                        'bought': False, 
                        }
                    final_list.append(package_dict)
                    
        context = {'packages': final_list, 'numberPackages': len(packages_list)}
        return Response(context)

class StudentGetLiveAntPlayer(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'content/studentAntLivePlayer.html'

    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        teacherUsername = data['teacher_username']
        studentName = data['student_name']
        return Response({'teacher': teacherUsername, 'student': me.profile.name})

class TeacherSaveRecordedLiveVideosNew(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
            print(me.profile.institute)
            list_to_preform = (
                (
                    'AKIAZQ3DRQCZ6EBJM4MC',
                    '6/RajI7CxuefRNXA1l3tIg6sYeJp4PCC/tLpNWT0',
                    'janbbucket',
                    None
                ),
            )
            for access_key, secret_key, bucket, cloudfront in list_to_preform:
                res = find_s3_recorded_videos_new.delay(
                    teacher_id = me.profile.id,
                    access_key = access_key,
                    secret_key = secret_key,
                    bucket_name = bucket,
                    cloudfront = cloudfront,
                )
            context = {'status': 'Success'}
                
        except Exception as e:
            context = {'status': str(e)}

        return Response(context)


class TeacherRejectBuyPackageRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        buy_package_id = data['buy_package_id']
        try:
            buy_package_request = BuyPackageRequest.objects.get(id=buy_package_id)
            buy_package_request.inProcess = False
            buy_package_request.accepted = False
            buy_package_request.save()
            context = {'status': 'Success', 'message': 'Request Rejected'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CreateJitsiLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            multi_peer = data['multipeer']
            if multi_peer == 'true':
                multi_pper = True
            else:
                multi_peer = False
        except:
            multi_peer = False

        try:
            batch_ids = data['batch_ids']
            batch_list = batch_ids.strip('][').split(',')
            liveVideo = NativeLiveVideo()
            liveVideo.streamId = self.request.user.username
            liveVideo.jitsiLink = "https://khoz.live/" + str(self.request.user.username)
            liveVideo.teacher = me.profile
            liveVideo.antVideo = False
            liveVideo.jitsiVideo = True
            liveVideo.live = True
            if multi_peer:
                liveVideo.multipeer = True
            liveVideo.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name),}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"

            if me.profile.institute.code == 'etuson':
                notification["image"] = f"https://bodhiuploadbucket.azureedge.net/testing-bodhiai/2023-04-12_13-10-12/vu73qd92/image.jpg"

            for bat in batch_list:
                batch = Batch.objects.prefetch_related('studentbatch').get(id=bat)
                students = batch.studentbatch.all()
                for stud in students:
                    liveVideo.students.add(stud)

                liveVideo.batches.add(batch)
                liveVideo.save()
                institute_code= me.profile.institute.code
                if not institute_code =="mbca":
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(bat))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(bat))
                
            try:
                student = Student.objects.get(studentuser__username='7732847694@ou')
                liveVideo.students.add(student)
                liveVideo.save()
            except:
                pass

            context = {'status': 'Success', 'response': liveVideo.streamId,'video_id': liveVideo.id,'type': 'jitsi'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class CreateJitsiLiveNew(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            multi_peer = data['multipeer']
            if multi_peer == 'true':
                multi_pper = True
            else:
                multi_peer = False
        except:
            multi_peer = False

        try:
            batch_ids = data['batch_ids']
            batch_list = batch_ids.strip('][').split(',')
            liveVideo = NativeLiveVideo()
            liveVideo.streamId = self.request.user.username
            liveVideo.jitsiLink = "https://khoz.live/" + str(self.request.user.username)
            liveVideo.teacher = me.profile
            liveVideo.antVideo = False
            liveVideo.jitsiVideo = True
            liveVideo.live = True
            if multi_peer:
                liveVideo.multipeer = True
            liveVideo.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name),}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"

            for bat in batch_list:
                batch = Batch.objects.prefetch_related('studentbatch').get(id=bat)
                students = batch.studentbatch.all()
                liveVideo.students.add(*students)
                liveVideo.batches.add(batch)
                liveVideo.save()
                
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat))

            try:
                student = Student.objects.get(studentuser__username='7732847694@ou')
                liveVideo.students.add(student)
                liveVideo.save()
            except:
                pass

            context = {'status': 'Success', 'response': liveVideo.streamId,'video_id': liveVideo.id, 'type': 'jitsi'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CreateRTMPBroadCast(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            multi_peer = data['multipeer']
            if multi_peer == 'true':
                multi_pper = True
            else:
                multi_peer = False
        except:
            multi_peer = False

        try:
            batch_ids = data['batch_ids']
            batch_list = batch_ids.strip('][').split(',')

            previous_live_videos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
            for plv in previous_live_videos:
                plv.live = False
                plv.save()
                
            liveVideo = NativeLiveVideo()
            liveVideo.streamId = self.request.user.username
            liveVideo.teacher = me.profile
            liveVideo.antVideo = True
            liveVideo.live = True
            if multi_peer:
                liveVideo.multipeer = True
            liveVideo.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"LIVE VIDEO","body": '{} has started a live video'.format(me.profile.name),}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"

            for bat in batch_list:
                batch = Batch.objects.prefetch_related('studentbatch').get(id=bat)
                students = batch.studentbatch.all()
                liveVideo.students.add(*students)
                liveVideo.batches.add(batch)
                liveVideo.save()
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat))
                
            try:
                student = Student.objects.get(studentuser__username='7732847694@ou')
                liveVideo.students.add(student)
                liveVideo.save()
            except:
                pass
            
            context = {'status': 'Success', 'response': liveVideo.streamId,'video_id': liveVideo.id, 'type': 'ant'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CreateRTMPBroadCastPackageWiseLiveVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            multi_peer = data['multipeer']
            if multi_peer == 'true':
                multi_pper = True
            else:
                multi_peer = False
        except:
            multi_peer = False

        try:
            package_ids = data['package_ids']
            package_list = package_ids.strip('][').split(',')
            previous_live_videos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True)
            for plv in previous_live_videos:
                plv.live = False
                plv.save()
                
            nativeLiveVideo = NativeLiveVideo()
            nativeLiveVideo.streamId = self.request.user.username
            nativeLiveVideo.teacher = me.profile
            nativeLiveVideo.live = True
            nativeLiveVideo.antVideo = True
            if multi_peer:
                nativeLiveVideo.multipeer = True
            nativeLiveVideo.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"LIVE CLASS","body": '{} has started a live class'.format(me.profile.name)}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"
                
            for pack_id in package_list:
                package = Package.objects.prefetch_related('students').get(id=pack_id)
                students = package.students.all()
                nativeLiveVideo.students.add(*students)
                nativeLiveVideo.packages.add(package)
                nativeLiveVideo.save()
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=int(pack_id))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=int(pack_id))
                
            try:
                student = Student.objects.get(studentuser__username='7732847694@ou')
                nativeLiveVideo.students.add(student)
                nativeLiveVideo.save()
            except:
                pass
            
            context = {'status': 'Success', 'message': 'Package Live Video created', 'id': nativeLiveVideo.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubjectWiseVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        before_video_list = []
        if me.profile.teacheruser.username == 'eduprep_teacher':
            before_video_list = Video.objects.select_related('subject').filter(teacher=me.profile,subject=subject).order_by('id')
        else:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                for teacher in teachers:
                    videos = Video.objects.select_related('subject','chapter').prefetch_related('batches').filter(teacher=teacher, subject=subject).order_by('-id')
                    for video in videos:
                        before_video_list.append(video)
            else:
                before_video_list = Video.objects.select_related('subject','chapter').prefetch_related('batches').filter(teacher=me.profile, subject=subject).order_by('id')

        videos_list = []
        for video in before_video_list:
            try:
                try:
                    subject = video.subject.name
                except:
                    subject = None
                    
                try:
                    chapter = video.chapter.name
                except:
                    chapter = None
                
                batch_list = []
                batches = video.batches.all()
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)

                video_dict = {
                    'id': video.id, 
                    'title': video.title, 
                    'subject': subject,
                    'chapter': chapter, 
                    'url': video.urlLink, 
                    'publishDate': video.publishDate, 
                    'generalVideo': video.generalVideo, 
                    'batches': batch_list, 
                    'publish': video.publish, 
                    'thumbnail': video.thumbnail, 
                    'viewsLimite': video.viewsLimite
                    }
                videos_list.append(video_dict)
                
                context = {'videos': videos_list}
            except Exception as e:
                context = {'status':False, 'message': str(e)}
        
        return Response(context)

class EditTestBatches(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['test_id']
        bat_ids = data['batches_ids']
        title = data['title']
        time = data.get('time')
        
        try:
            contest_category_id = int(data.get('contest_category'))
            contest_category_object = ContestCategory.objects.get(id=contest_category_id)
        except:
            contest_category_object = None

        try:
            publish_data = data['publish']
        except:
            publish_data = None

        try:
            repeat_test = data['repeatTest_status']
        except:
            repeat_test = None

        try:
            testEndDateTime = data['testEndDateTime']
        except:
            testEndDateTime = None

        try:
            testInstructions = data['testInstructions']
        except:
            testInstructions = None

        try:
            is_answers_showing = data['is_answers_showing']
        except:
            is_answers_showing = None

        try:
            batch_list = bat_ids.strip('][').split(',')
            test = Test.objects.get(id=test_id)
            try:
                test_count = json.loads(data.get('test_count', "null"))
                test.test_count = test_count
                if test_count != None or test_count>1:
                   test.repeatTest = True
            except:
                if repeat_test == 'true':
                    test.repeatTest = True
                else:
                    test.repeatTest = False
            
            test.name = title
            if publish_data == 'true':
                test.publish = True
            else:
                test.publish = False

            if testEndDateTime:
                test.testEndDateTime = testEndDateTime
            else:
                test.testEndDateTime = None

            if is_answers_showing == 'false':
                test.is_answers_showing = False
            else:
                test.is_answers_showing = True

            test.testInstructions = testInstructions
            if time:
                test.time = time
        
            test.contest_category = contest_category_object
            test.batches.clear()
            test.save()
            
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                test.batches.add(batch)
                test.save()
                
            context = {'status': 'Success', 'message': 'Updated Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubjectWiseNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        before_notes_list = []
        if me.profile.teacheruser.username == 'eduprep_teacher':
            before_notes_list = Note.objects.filter(teacher=me.profile,subject=subject).order_by('-id')
        else:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                for teacher in teachers:
                    notes = Note.objects.filter(teacher=teacher, subject=subject).order_by('-id')
                    for note in notes:
                        before_notes_list.append(note)
            else:
                before_notes_list = Note.objects.filter(teacher=me.profile, subject=subject).order_by('-id')
                
        notes_list = []
        for note in before_notes_list:
            try:
                title = note.title
                publishDate = note.publishDate
                batches = note.batches.all()
                batch_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                url_list = [note_link]

                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = 'Deleted Chapter'
                try:
                    chapter_id = note.chapter.id
                except:
                    chapter_id = 0

                note_dict =\
                    {'id': note.id, 'title': title, 'subject_id': note.subject.id, 'subject_name': subject_name, 'chapter_id': chapter_id,
                        'chapter_name': chapter_name, 'publishDate': publishDate, 'note_url': url_list, 'batches': batch_list, 'noteViewsLimite': note.noteViewsLimite}
                notes_list.append(note_dict)
                context = {'notes': notes_list}
                
            except Exception as e:
                context = {'message':str(e)}
                
        return Response(context)

class TeacherGetVideoViews(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            video = Video.objects.get(id=video_id)
            videoview = VideoView.objects.get(video=video)
            studentsViews = StudentVideoView.objects.select_related('student').filter(videoview=videoview)
            sv_list = []
            for sv in studentsViews:
                try:
                    details = StudentDetails.objects.get(student=sv.student)
                    photo = details.photo
                except Exception as e:
                    photo = None
                    
                student_dict = {'id': sv.student.id, 'name': sv.student.name, 'photo': photo}
                sv_dict = {'id': sv.id, 'time': sv.time,'student': student_dict}
                sv_list.append(sv_dict)
                
            context = {'totalViews': videoview.views, 'student_list': sv_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetNoteViews(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        note_id = data['note_id']
        try:
            note = Note.objects.get(id=note_id)
            noteview = NoteView.objects.get(note=note)
            studentsViews = StudentNoteView.objects.select_related('student').filter(noteview=noteview)
            sv_list = []
            for sv in studentsViews:
                try:
                    details = StudentDetails.objects.get(student=sv.student)
                    photo = details.photo
                except Exception as e:
                    photo = None
                    
                student_dict = {'id': sv.student.id, 'name': sv.student.name, 'photo': photo}
                sv_dict = {'id': sv.id, 'time': sv.time,'student': student_dict}
                sv_list.append(sv_dict)
                
            context = {'totalViews': noteview.views, 'student_list': sv_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetTestViews(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['test_id']
        try:
            test = Test.objects.get(id=test_id)
            testview = TestView.objects.get(test=test)
            studentsViews = StudentTestView.objects.select_related('student').filter(testview=testview)
            sv_list = []
            for sv in studentsViews:
                try:
                    details = StudentDetails.objects.get(student=sv.student)
                    photo = details.photo
                except Exception as e:
                    photo = None
                    
                student_dict = {'id': sv.student.id, 'name': sv.student.name, 'photo': photo}
                sv_dict = {'id': sv.id, 'time': sv.time,'student': student_dict}
                sv_list.append(sv_dict)
                
            context = {'status': 'Success', 'totalViews': testview.views, 'student_list': sv_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherAddStudentPackageManually(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            package_id = data['package_id']
            student = Student.objects.get(id=student_id)
            pack = Package.objects.get(id=package_id)
            today = timezone.now()

            studentPackage = StudentPackage.objects.get(student=student, package=pack)
            if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                pack.students.remove(student)
                pack.save()
                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                totalPaidAmount = 0
                for i in pasp:
                    totalPaidAmount += i.paidAmount
                sbph = StudentBoughtPackageHistory()
                sbph.student = student
                sbph.package = pack.title
                sbph.packagePrice = pack.price
                sbph.duration = pack.duration
                sbph.paidAmount = totalPaidAmount
                sbph.startDate = studentPackage.startDate
                sbph.endDate = studentPackage.endDate
                sbph.save()
                studentPackage.delete()
                for i in pasp:
                    i.delete()
                raise StudentPackage.DoesNotExist
            else:
                context = {'status': 'Failed', 'message': 'Already Added'}
                
        except StudentPackage.MultipleObjectsReturned:
            context = {'status': 'Failed', 'message': 'Already Added'}

        except StudentPackage.DoesNotExist:
            endDate = timezone.now().date() + timezone.timedelta(days=pack.duration)
            studentPackage = StudentPackage()
            startDate = timezone.now().date()
            studentPackage.student = student
            studentPackage.package = pack
            studentPackage.startDate = startDate
            studentPackage.endDate = endDate
            studentPackage.save()
            pack.students.add(student)
            pack.save()

            try:
                student_batches = student.batches.all().values_list('id', flat=True)
                batches = pack.batches.all()
                for i in batches:
                    if i.id not in student_batches:
                        batch = Batch.objects.get(id=i.id)
                        student.batches.add(batch)
                        student.save()
            except:
                pass

            youtubelive = LiveVideoLink.objects.filter(packages=pack, locked=False, deleted=False)
            for lv in youtubelive:
                lv.students.add(student)
                lv.save()

            context = {'status': 'Success', 'message': 'Student Addded'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        
        return Response(context)

class TeacherGetRecordedVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        video_list = []
        if me.profile.mainTeacher == True:
            all_teachers = Teacher.objects.filter(institute=me.profile.institute)
            recordedVideo = RecordedVideo.objects.prefetch_related('teacher').filter(teacher__in=all_teachers, deleted=False).order_by('-id')
            for rv in recordedVideo:
                rv_dict = {'id': rv.id, 'link': rv.link, 'deleted': rv.deleted,'title': rv.title, 'teacher': rv.teacher.teacheruser.username}
                video_list.append(rv_dict)
        else:
            recordedVideo = RecordedVideo.objects.prefetch_related('teacher').filter(teacher=me.profile, deleted=False).order_by('-id')
            for rv in recordedVideo:
                rv_dict = {'id': rv.id, 'link': rv.link, 'deleted': rv.deleted,'title': rv.title, 'teacher': rv.teacher.teacheruser.username}
                video_list.append(rv_dict)
                
        video_list = list(unique_everseen(video_list))
        context = {'videos': video_list}
        return Response(context)

class TeacherGetDateWiseRecordedVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        date = data['date']
        recordedVideo = RecordedVideo.objects.filter(teacher=me.profile, deleted=False).order_by('-id')
        video_list = []
        for rv in recordedVideo:
            try:
                title = rv.title
                title_date = re.search('\d{4}-\d{2}-\d{2}', title)
                final_dates = datetime.datetime.strptime(title_date.group(), '%Y-%m-%d').date()
                final_date = final_dates.strftime('%Y-%m-%d')
            except:
                final_date = ''
                
            if final_date == date:
                rv_dict = {'id': rv.id, 'link': rv.link, 'deleted': rv.deleted, 'title': rv.title, 'date': rv.time}
                video_list.append(rv_dict)
           
        video_list = list(unique_everseen(video_list))
        context = {'total': len(video_list), 'date': date, 'videos': video_list}
        return Response(context)

class DeleteRecordedVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            recordedVideo = RecordedVideo.objects.get(id=video_id)
            recordedVideo.deleted = True
            recordedVideo.save()
            context = {'id': recordedVideo.id, 'status': 'Success', 'message': 'Video Deleted', 'deleted': recordedVideo.deleted}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherChapterwiseQuestionsPagination(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        page = data['page']
        item_page = 20
        start_index = int(page) * item_page
        end_index = int(start_index) + item_page
        chapter = Chapter.objects.get(id=chapter_id)
        questions = Question.objects.filter(chapter=chapter).order_by('-id')[start_index:end_index]
        questions_list = []
        my_batches = me.profile.batches.all()
        for question in questions:
            used_list = []
            for bat in my_batches:
                try:
                    timesUsed = TimesUsed.objects.get(question=question, institute=me.profile.institute, batch=bat)
                    times_used_dict = {'used': timesUsed.used, 'batch': bat.name}
                    used_list.append(times_used_dict)
                except:
                    times_used_dict = {'used': 0, 'batch': bat.name}
                    used_list.append(times_used_dict)
                    
            text = question.text
            picture = question.picture
            subject_dict = {'id': question.subject.id, 'name': question.subject.name}
            chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name}
            
            if question.direction != None:
                direction_dict = {'id': question.direction.id, 'text': question.direction.text,'picture': question.direction.picture}
            else:
                direction_dict = {'id': None, 'text': None, 'picture': None}
                
            language = question.language
            source = question.source
            difficulty = question.difficulty
            marks = question.marks
            dynamicText = question.dynamicText
            negativeMarks = question.negativeMarks
            options = Option.objects.filter(question=question)
            options_list = []
            for option in options:
                optionText = option.text
                optionPicture = option.picture
                explanationText = option.explanationText
                explanationPicture = option.explanationPicture
                correct = option.correct
                option_dict = {
                    'id': option.id, 
                    'text': text, 
                    'text': optionText, 
                    'picture': optionPicture,
                    'explanationText': explanationText, 
                    'explanationPicture': explanationPicture, 
                    'correct': correct
                    }
                options_list.append(option_dict)

            question_dict = {
                'id': question.id, 
                'text': text, 
                'dynamicText': dynamicText, 
                'picture': picture, 
                'subject': subject_dict, 
                'chapter': chapter_dict, 
                'direction': direction_dict,
                'options': options_list, 
                'language': language, 
                'source': source, 
                'marks': marks, 
                'negativeMarks': negativeMarks, 
                'difficulty': difficulty, 
                'numberUsed': used_list
                }
            questions_list.append(question_dict)
        context = {'questions': questions_list}
        return Response(context)

class StudentYoutubeLiveVideoJoinInfo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']

        try:
            video = LiveVideoLink.objects.get(id=video_id)
            deviceAndVersion = data.get('deviceAndVersion')

            if deviceAndVersion:
                me.profile.student.deviceAndVersion = deviceAndVersion
                me.profile.student.save()
                
            join_session = StudentYoutubeLiveVideoSession.objects.create(
                student=me.profile,
                video=video,
                joinTime=timezone.now()
                )
            
            youtube_join_info, created = StudentYoutubeLiveVideoInformation.objects.get_or_create(
                video=video,
                student=me.profile,
                defaults={'joinTime': timezone.now(), 'isLive': True}
            )

            if not created:
                youtube_join_info.isLive = True
                youtube_join_info.joinTime = timezone.now()
                youtube_join_info.save()
                context = {'status': 'Success', 'message': 'Already Joined'}
            else:
                context = {'status': 'Success', 'message': 'Attendance Marked'}

        except LiveVideoLink.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Live video not found'}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentYoutubeLiveVideoLeaveVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        video_id = data['video_id']
        
        try:
            video = LiveVideoLink.objects.get(id=video_id)
            youtube_join_info = StudentYoutubeLiveVideoInformation.objects.get(video=video, student=me.profile)

            if youtube_join_info.isLive:
                leave_time = timezone.now()
                youtube_join_info.leaveTime = leave_time

                latest_session = StudentYoutubeLiveVideoSession.objects.filter(
                    student=me.profile,video=video,leaveTime__isnull=True).order_by('-joinTime').first()

                if latest_session:
                    latest_session.leaveTime = leave_time
                    latest_session.save()

                youtube_join_info.isLive = False
                youtube_join_info.save()
                context = {'status': 'Success', 'message': 'Video Left'}
            else:
                context = {'status': 'Failed', 'message': 'Not Currently Watching'}

        except LiveVideoLink.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Live Video not found'}
        except StudentYoutubeLiveVideoInformation.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Live Video not attended'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)
    
class CheckIsTeacherLiveOnYoutube(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        try:
            video_id = data['video_id']
            live_video = LiveVideoLink.objects.get(id=video_id)
            IsLive = live_video.is_live
            
            try:
                is_rating = VideoRatingFeedback.objects.get(student=me.profile, video__id=video_id)
                is_rating = True
            except VideoRatingFeedback.DoesNotExist:
                is_rating = False
                
            context = {'status': True, 'IsLive': IsLive, 'is_rating':is_rating}
       
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)
    
class StudentLiveSessionRating(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        try:
            video_id = data['video_id']
            video = LiveVideoLink.objects.get(id=video_id)
            video_rating = data.get('session_rating')
            teacher_rating = data.get('teacher_rating')
            feedback = data.get('feedback')
            rating_feedback = VideoRatingFeedback()
            rating_feedback.student = me.profile
            rating_feedback.video = video
            rating_feedback.video_rating = video_rating
            rating_feedback.teacher_rating = teacher_rating
            rating_feedback.feedback = feedback
            rating_feedback.save()
                            
            context = {'status': True, 'message': "Successfully Done"}
       
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentGetSubjects(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            my_batches = me.profile.batches.all()
            courses_list = []
            for batch in my_batches:
                courses = batch.course.all()
                for course in courses:
                    if course in courses_list:
                        pass
                    else:
                        courses_list.append(course)
                        
            subs_list = []
            for co in courses_list:
                subjects = co.subjects.all()
                for sub in subjects:
                    if sub in subs_list:
                        pass
                    else:
                        subs_list.append(sub)
                    
            subs_list_final = []
            for su in subs_list:
                su_dict = {'id': su.id, 'name': su.name}
                subs_list_final.append(su_dict)
                
            context = {'subjects': subs_list_final}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        
        return Response(context)

class StudentGetSubjectChapters(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        chapters = Chapter.objects.filter(subject=subject).order_by('id')
        chapter_list = []
        for chapter in chapters:
            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
            chapter_list.append(chapter_dict)
        context = {'chapters': chapter_list}
        return Response(context)

class StudentCreateTest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')

        if me.profile.institute.code == 'krishana_sarathi':
            number_questions = 50
        else:
            number_questions = 10

        if subject_id:
            all_questions = Question.objects.filter(subject=subject_id)

        if chapter_id:
            all_questions = Question.objects.filter(chapter=chapter_id)

        if topic_id:
            all_questions = Question.objects.filter(topic=topic_id)

        if subtopic_id:
            all_questions = Question.objects.filter(subTopic=subtopic_id)

        title = 'selfTest_{}'.format(me.profile.name)
        try:
            if len(all_questions) == 0:
                context = {'status': 'Failed','message': 'No questions are available to create Test.'}
                return Response(context)
            
            test = Test()
            test.published = timezone.now()
            test.time = 40
            test.totalMarks = 0
            test.name = title
            test.save()
            
            total_marks = 0
            all_previous_questions = []
            student_marks = StudentMarks.objects.filter(student=me.profile)

            for sm in student_marks:
                attemptedquestions = sm.questions.all()
                for quest in attemptedquestions:
                    print('al taken {}'.format(quest.id))
                    all_previous_questions.append(quest.question)

            for question_obj in all_questions:
                if question_obj in all_previous_questions:
                    continue
                else:
                    if test.questions.count() < number_questions:
                        test.questions.add(question_obj)
                        total_marks += question_obj.marks
                        subject = question_obj.subject
                        chapter = question_obj.chapter
                        test.subjects.add(subject)
                        test.chapters.add(chapter)

            if me.profile.institute.code == 'krishana_sarathi':
                if test.questions.count() < number_questions:
                    for q_obj in all_questions:
                        if test.questions.count() < number_questions:
                            if q_obj not in test.questions.all():
                                test.questions.add(q_obj)
                                total_marks += q_obj.marks
                        else:
                            break
            else:
                if test.questions.count() < number_questions:
                    import random
                    all_questions = all_questions.values('id')
                    for i in all_questions:
                        random_id = random.choice(all_questions)["id"]
                        if test.questions.count() < number_questions:
                            question_obj = Question.objects.get(id=random_id)
                            test.questions.add(question_obj)
                            total_marks += question_obj.marks
                        else:
                            break

            test.totalMarks = total_marks

            if me.profile.institute.code == 'gradous':
                totalQuestions = test.questions.count() * 2
                test.time = totalQuestions
            test.save()
            test.students.add(me.profile)

            context = {'status': 'Success', 'testID': test.id,'testcheck': len(all_questions)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
 
class StudentCreateTestOld(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        if me.profile.institute.code == 'krishana_sarathi':
            number_questions = 50
        else:
            number_questions = 10

        title = 'selfTest_{}'.format(me.profile.name)
        try:
            try:
                serverKey = me.profile.institute.serverKey
            except Exception as e:
                serverKey = None
                print(str(e))

            chapter = Chapter.objects.get(id=chapter_id)
            questions_chapter = Question.objects.filter(chapter=chapter)
            if len(questions_chapter) == 0:
                context = {'status': 'Failed','message': 'No questions in chapter'}
                return Response(context)
            
            test = Test()
            test.published = timezone.now()
            test.time = 40
            test.totalMarks = 0
            test.name = title
            test.save()
            
            total_marks = 0
            all_previous_questions = []
            student_marks = StudentMarks.objects.filter(student=me.profile)

            for sm in student_marks:
                attemptedquestions = sm.questions.all()
                for quest in attemptedquestions:
                    print('al taken {}'.format(quest.id))
                    all_previous_questions.append(quest.question)

            for question_obj in questions_chapter:
                if question_obj in all_previous_questions:
                    continue
                else:
                    if test.questions.count() < number_questions:
                        test.questions.add(question_obj)
                        total_marks += question_obj.marks
                        subject = question_obj.subject
                        chapter = question_obj.chapter
                        test.subjects.add(subject)
                        test.chapters.add(chapter)

            if me.profile.institute.code == 'krishana_sarathi':
                if test.questions.count() < number_questions:
                    for q_obj in questions_chapter:
                        if test.questions.count() < number_questions:
                            if q_obj not in test.questions.all():
                                test.questions.add(q_obj)
                                total_marks += q_obj.marks
                        else:
                            break
            else:
                if test.questions.count() < number_questions:
                    import random
                    questions_chapter = questions_chapter.values('id')
                    for i in questions_chapter:
                        random_id = random.choice(questions_chapter)["id"]
                        if test.questions.count() < number_questions:
                            question_obj = Question.objects.get(id=random_id)
                            test.questions.add(question_obj)
                            total_marks += question_obj.marks
                        else:
                            break

            test.totalMarks = total_marks

            if me.profile.institute.code == 'gradous':
                totalQuestions = test.questions.count() * 2
                test.time = totalQuestions
            test.save()
            test.students.add(me.profile)

            context = {'status': 'Success', 'testID': test.id,'testcheck': len(questions_chapter)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherPublishRecordedVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        videoURL = data['url']
        batches = data['batches']
        title = data['title']
        subject_id = data['subject_id']
        chapter_id = data['chapter_id']
        try:
            subject = Subject.objects.get(id=subject_id)
            chapter = Chapter.objects.get(id=chapter_id)
            batch_list = batches.strip('][').split(',')
            video = Video()
            video.title = title
            video.urlLink = videoURL
            video.publishDate = timezone.now()
            video.subject = subject
            video.chapter = chapter
            video.save()
            video.teacher.add(me.profile)
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                video.batches.add(batch)
                video.save()
            context = {'status': 'Success', 'message': 'Published'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetAllFreeOMRTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'status': False, 'tests': []}
            return Response(context)
      
        try:
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'
                    
                tests = FileTest.objects.filter(batches=outer_batch).order_by(order_by)

                package_tests = Package.objects.filter(teacher__institute=me.profile.institute).values_list('fileTests__id', flat=True)

                tests_list = []
                for test in tests:
                    if test.id not in package_tests:
                        batches = test.batches.all()
                        batches_list = []
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)

                        if test.locked == False:
                            bought = True
                        else:
                            bought = False

                        test_dict = {
                            'id': test.id,
                            'name': test.title,
                            'createdBy': test.createdBy.name,
                            'subject': test.subject.name,
                            'chapter': test.chapter.name,
                            'testTime': test.testTime,
                            'numberQuestions': test.totalQuestion,
                            'totalMarks': test.totalMarks,
                            'questionFile': test.questionFile,
                            'solutionsFile': test.solutionsFile,
                            'published': test.published,
                            'locked': test.locked,
                            'batches': batches_list,
                            'bought': bought,
                        }
                        tests_list.append(test_dict)

                context = {'status': True, 'tests': tests_list}
            else:
                context = {'status': False, 'message': 'Student is not in Outer Batch'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentGetAllFreeTests(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            if me.profile.accessTests == False:
                context = {'tests': []}
                return Response(context)

            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'
                    
                tests = Test.objects.filter(batches = outer_batch).select_related('createdBy').prefetch_related('subjects','chapters','questions','package_set','batches').order_by(order_by)
                student_test_helper = StudentPackageHelper(me.profile)
                taken_tests_ids = student_test_helper.taken_test()
                last_tests_list = Package.objects.filter(teacher__institute=me.profile.institute).values_list('tests__id', flat=True)
                tests_list = []
                for test in tests:
                    if not test.package_set.all() and test.id not in last_tests_list:
                        numberQuestions = test.questions.all().count()
                        teacher = test.createdBy
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        
                        subject_list = []
                        subjects = test.subjects.all()
                        for subject in subjects:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                        
                        chapter_list = []
                        chapters = test.chapters.all()
                        for chapter in chapters:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                            chapter_list.append(chapter_dict)
                            
                        batches_list = []
                        batches = test.batches.all()
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                        
                        bought = False
                        if test.locked == False:
                            bought = True

                        if test.id in taken_tests_ids:
                            first_attempt = False
                        else:
                            first_attempt = True
                                
                        if test.testEndDateTime:
                            if test.testEndDateTime >= timezone.now():
                                testTimeOver = False
                            else:
                                testTimeOver = True
                        else:
                            testTimeOver = False

                        if first_attempt == False and test.repeatTest == True:
                            student_last_report = test.marks_test.get(student=me.profile)
                            if test.test_count != None:
                                if student_last_report.attempt_count < test.test_count:
                                    test_dict = {
                                        'id': test.id, 
                                        'name': test.name, 
                                        'time': test.time, 
                                        'bought': bought, 
                                        'totalMarks': test.totalMarks, 
                                        'published': test.published, 
                                        'subjects': subject_list, 
                                        'chapters': chapter_list, 
                                        'createdBy': teacher_dict, 
                                        'locked': test.locked,
                                        'batches': batches_list, 
                                        'first_attempt': first_attempt, 
                                        'numberQuestions': numberQuestions, 
                                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                        'is_answers_showing': test.is_answers_showing,
                                        'testTimeOver': testTimeOver
                                        }
                                    tests_list.append(test_dict)
                            else:
                                test_dict = {
                                    'id': test.id, 
                                    'name': test.name, 
                                    'bought': bought, 
                                    'time': test.time, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'first_attempt': first_attempt, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                    'is_answers_showing': test.is_answers_showing,
                                    'testTimeOver': testTimeOver
                                    }
                                tests_list.append(test_dict)

                        elif first_attempt == False and test.repeatTest == False:
                            pass
                        else:
                            test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'time': test.time, 
                                'locked': test.locked,
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': bought, 
                                'first_attempt': first_attempt, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                'is_answers_showing': test.is_answers_showing,
                                'testTimeOver': testTimeOver
                                }
                            tests_list.append(test_dict)
                context = {'status': 'Success', 'tests': tests_list}
            else:
                context = {'status': 'Failed', 'message': 'Student is not in Outer Batch'}
            
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
            
        return Response(context)
    
class StudentGetFreeVideos(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'

                subject_list = ['1680','7178','6629']
                videos = Video.objects.select_related('subject', 'chapter').prefetch_related('package_set').filter(batches=outer_batch, locked=False).exclude(subject__in=subject_list).order_by(order_by)
                
                videos_list = set()
                for video in videos:
                    if not video.package_set.all():
                        videos_list.add(video)
                    else:
                        print(video)

                final_videos_list = []
                
                for video in videos_list:
                    try:
                        teachers_list = []
                        try:
                            subject_dict = {'id': video.subject.id,'name': video.subject.name}
                        except:
                            subject_dict = {'id': None, 'name': 'General'}

                        try:
                            chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                        except:
                            chapter_dict = {'id': None,'name': 'General', 'code': None}
                            
                        bought = False
                        if video.locked == False:
                            bought = True
                            
                        if video.download_link:
                            download_link = video.download_link
                        else:
                            download_link = ""

                        if video.publish == True and bought == True:
                            video_dict = {
                                'id': video.id, 
                                'teacher': teachers_list, 
                                'subject': subject_dict, 
                                'chapter': chapter_dict, 
                                'link': video.urlLink, 
                                'download_link': download_link, 
                                'generalVideo': video.generalVideo,
                                'publishDate': video.publishDate, 
                                'title': video.title, 
                                'bought': True, 
                                'lowLink': video.lowlink, 
                                'highLink': video.highlink, 
                                'thumbnail': video.thumbnail
                                }
                            final_videos_list.append(video_dict)
                    except Exception as e:
                        print('student all videos {}'.format(str(e)))
                        
                context = {'status':'Success','videos': final_videos_list}
            else:
                context = {'status': 'Failed', 'message': 'Student is not in Outer Batch'}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)
    
class StudentGetFreeNotes(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        try:
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            if outer_batch in student_all_batch:
                teachers = Teacher.objects.filter(institute=me.profile.institute).order_by('-id')
                notes_objects_list = set()
                subject_list = ['1680','7178','6629']
                
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'

                for teacher in teachers:
                    notes = Note.objects.filter(batches=outer_batch,locked=False).select_related('noteurl_note','subject','chapter').prefetch_related('batches','package_set').exclude(subject__in=subject_list).order_by(order_by)

                    for note in notes:
                        if not note.package_set.all():
                            notes_objects_list.add(note)

                notes_list = list(notes_objects_list)
                return_list = []

                for note in notes_list:
                    try:
                        subject_dict = {'id': note.subject.id,'name': note.subject.name}
                    except:
                        subject_dict = {}
                        
                    try:
                        chapter_dict = {'id': note.chapter.id, 'name': note.chapter.name,'code': note.chapter.code}
                    except:
                        chapter_dict = {}
                        
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    bought = False
                    if note.locked == False:
                        bought = True
                        
                    note_dict = {
                        'id': note.id, 
                        'title': note.title, 
                        'image': note.image, 
                        'teacher': teacher.name, 
                        'thumbnail': note.thumbnail,
                        'publishDate': note.publishDate, 
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'url': note_link, 
                        'locked': note.locked, 
                        'bought': bought
                        }
                    return_list.append(note_dict)

                context = {'notes': return_list}
            else:
                context = {'status': 'Failed', 'message': 'Student is not in Outer Batch'}
        except Exception as e:
            context = {'status':'Failed','message':str(e)}
        return Response(context)

class StudentSubjectwiseFreeTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'
                
                tests = Test.objects.filter(batches = outer_batch, subjects=subject).order_by(order_by)
                student_test_helper = StudentPackageHelper(me.profile)
                taken_tests_ids = student_test_helper.taken_test()
                last_tests_list = Package.objects.filter(teacher__institute=me.profile.institute).values_list('tests__id', flat=True)

                tests_list = []
                for test in tests:
                    if test.id not in last_tests_list:
                        numberQuestions = test.questions.all().count()
                        
                        subject_list = []
                        subjects = test.subjects.all()
                        for subject in subjects:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                        
                        chapter_list = []
                        chapters = test.chapters.all()
                        for chapter in chapters:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name,'code': chapter.code}
                            chapter_list.append(chapter_dict)
                            
                        batches_list = []
                        batches = test.batches.all()
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                            
                        teacher = test.createdBy
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        
                        bought = False
                        if test.locked == False:
                            bought = True

                        if test.testEndDateTime:
                            if test.testEndDateTime >= timezone.now():
                                testTimeOver = False
                            else:
                                testTimeOver = True
                        else:
                            testTimeOver = False

                        if test.id in taken_tests_ids:
                            first_attempt = False
                        else:
                            first_attempt = True

                        if first_attempt == False and test.repeatTest == True:
                            student_last_report = test.marks_test.get(student=me.profile)
                            if test.test_count != None:
                                if student_last_report.attempt_count < test.test_count:
                                    test_dict = {
                                        'id': test.id, 
                                        'name': test.name, 
                                        'totalMarks': test.totalMarks, 
                                        'published': test.published, 
                                        'subjects': subject_list, 
                                        'chapters': chapter_list, 
                                        'createdBy': teacher_dict, 
                                        'time': test.time, 
                                        'locked': test.locked,
                                        'batches': batches_list, 
                                        'numberQuestions': numberQuestions, 
                                        'bought': True, 
                                        'first_attemptFreeTests': first_attempt, 
                                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                        'is_answers_showing': test.is_answers_showing,
                                        'testTimeOver':testTimeOver
                                        }
                                    tests_list.append(test_dict)
                            else:
                                test_dict = {
                                    'id': test.id, 
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': True, 
                                    'first_attempt': first_attempt, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                    'is_answers_showing': test.is_answers_showing,
                                    'testTimeOver':testTimeOver
                                    }
                                tests_list.append(test_dict)

                        elif first_attempt == False and test.repeatTest == False:
                            pass
                        else:
                            test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'time': test.time, 
                                'locked': test.locked,
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': True, 
                                'first_attempt': first_attempt, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions, 
                                'is_answers_showing': test.is_answers_showing,
                                'testTimeOver':testTimeOver
                                }
                            tests_list.append(test_dict)
                context = {'status':'Success', 'tests': tests_list}
            else:
                context = {'status': 'Failed', 'message': 'Student is not in Outer Batch'}
        except Exception as e:
            context = {'status':'Failed', 'message':str(e)}
                
        return Response(context)
 
class StudentSubjectwiseFreeVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                subject_list = ['1680','7178','6629']
                
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'

                videos = Video.objects.filter(batches = outer_batch, locked = False, subject = subject).select_related('subject', 'chapter').prefetch_related('package_set').exclude(subject__in=subject_list).order_by(order_by)
                    
                videos_list = set()   
                for video in videos:
                    if not video.package_set.all():
                        videos_list.add(video)
        
                final_videos_list = []
                for video in videos_list:
                    try:
                        subject_dict = {'id': video.subject.id,'name': video.subject.name}
                    except:
                        subject_dict = {'id': None, 'name': 'General'}

                    try:
                        chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name,'code': video.chapter.code}
                    except:
                        chapter_dict = {'id': None,'name': 'General', 'code': None}
                
                    if video.download_link:
                        download_link = video.download_link
                    else:
                        download_link = ""

                    if video.publish == True:
                        video_dict =\
                            {'id': video.id, 'subject': subject_dict, 'chapter': chapter_dict, 'link': video.urlLink, "download_link": download_link, 'generalVideo': video.generalVideo,
                                'publishDate': video.publishDate, 'title': video.title, 'lowLink': video.lowlink, 'highLink': video.highlink, 'thumbnail': video.thumbnail}
                        final_videos_list.append(video_dict)

                final_video_list = list(unique_everseen(final_videos_list))
                context = {'status': 'Success', 'videos': final_videos_list}
            else:
                context = {'status': 'Failed', 'message': 'Student is not in Outer Batch'}
        
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentSubjectwiseFreeNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_id = '-id'
                else:
                    order_id = 'id'
                
                notes = Note.objects.filter(batches = outer_batch, subject=subject).order_by(order_id)
                notes_list = set()   
                for note in notes:
                    if not note.package_set.all():
                        notes_list.add(note)
                        
                return_list = []
                for note in notes_list:
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    bought = False
                    if note.locked == False:
                        bought = True
                        
                    note_dict = {
                        'id': note.id, 
                        'title': note.title, 
                        'publishDate': note.publishDate, 
                        'thumbnail': note.thumbnail,
                        'subject': note.subject.name, 
                        'chapter': note.chapter.name, 
                        'url': note_link, 
                        'locked': note.locked, 
                        'bought': bought
                        }
                    return_list.append(note_dict)

                context = {'status': True, 'notes': return_list}
            else:
                context = {'status': False, 'message': 'Student is not in Outer Batch'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class StudentGetSubjectWiseOMRFree(APIView):
    def post(self, request):
        me = Studs(self.request.user)

        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_by = '-id'
                else:
                    order_by = 'id'
                
                fileTests = FileTest.objects.filter(batches = outer_batch, subject__id=subject_id, publish=True).distinct().order_by(order_by)
                package_tests = Package.objects.filter(teacher__institute=me.profile.institute).values_list('fileTests__id', flat=True)

                tests_list = []
                for test in fileTests:
                    if test.id not in package_tests:
                        batches = test.batches.all()
                        batches_list = []
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)

                        if test.locked == False:
                            bought = True
                        else:
                            bought = False

                        test_dict = {
                            'id': test.id,
                            'name': test.title,
                            'createdBy': test.createdBy.name,
                            'subject': test.subject.name,
                            'chapter': test.chapter.name,
                            'testTime': test.testTime,
                            'numberQuestions': test.totalQuestion,
                            'totalMarks': test.totalMarks,
                            'questionFile': test.questionFile,
                            'solutionsFile': test.solutionsFile,
                            'published': test.published,
                            'locked': test.locked,
                            'batches': batches_list,
                            'bought': bought,
                        }
                        tests_list.append(test_dict)
                context = {'status': True, 'tests': tests_list}
            else:
                context = {'status': False, 'message': 'Student is not in Outer Batch'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class StudentChapterWiseFreeTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        try:
            data = request.data
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_id = '-id'
                else:
                    order_id = 'id'
                
                tests = Test.objects.filter(batches=outer_batch, chapters=chapter)\
                        .prefetch_related('subjects','chapters','batches').select_related('createdBy').order_by(order_id)
                student_test_helper = StudentPackageHelper(me.profile)
                taken_tests_ids = student_test_helper.taken_test()
                package_tests_ids = Package.objects.filter(teacher__institute=me.profile.institute).values_list('tests__id', flat=True)

                tests_list = []
                for test in tests:
                    if test.id not in package_tests_ids:
                        subject_list = []
                        chapter_list = []
                        batches_list = []
                        
                        subjects = test.subjects.all()
                        chapters = test.chapters.all()
                        batches = test.batches.all()
                        
                        for subject in subjects:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                            
                        for chapter in chapters:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name,'code': chapter.code}
                            chapter_list.append(chapter_dict)
                            
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                            
                        teacher = test.createdBy
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        total_questions = test.questions.all().count()
                        
                        bought = False
                        if test.locked == False:
                            bought = True
                        
                        if test.id in taken_tests_ids:
                            first_attempt = False
                        else:
                            first_attempt = True
                        
                        if first_attempt == False and test.repeatTest == True:
                            student_last_report = test.marks_test.get(student=me.profile)
                            if test.test_count != None:
                                if student_last_report.attempt_count < test.test_count:
                                    test_dict = {
                                        'id': test.id,
                                        'name': test.name, 
                                        'total_Attempts': student_last_report.attempt_count,
                                        'totalMarks': test.totalMarks, 
                                        'passing_marks': test.passing_marks,
                                        'published': test.published,
                                        'time': test.time,
                                        'locked': test.locked,
                                        'total_questions': total_questions,
                                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                        'subjects': subject_list,
                                        'chapters': chapter_list,
                                        'batches': batches_list,
                                        'bought': bought,
                                        }
                                    tests_list.append(test_dict)

                            else:
                                test_dict = {
                                    'id': test.id,
                                    'name': test.name, 
                                    'first_attempt': first_attempt, 
                                    'total_Attempts': student_last_report.attempt_count,
                                    'totalMarks': test.totalMarks,
                                    'passing_marks': test.passing_marks,
                                    'published': test.published,
                                    'time': test.time,
                                    'locked': test.locked,
                                    'total_questions': total_questions,
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'subjects': subject_list,
                                    'chapters': chapter_list,
                                    'batches': batches_list,
                                    'bought': bought,
                                    }
                                tests_list.append(test_dict)

                        elif first_attempt == False and test.repeatTest == False:
                            pass

                        else:
                            test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'total_Attempts': 0, 
                                'createdBy': test.createdBy.name,
                                'first_attempt': first_attempt,
                                'totalMarks': test.totalMarks,
                                'passing_marks': test.passing_marks,
                                'published': test.published,
                                'time': test.time,
                                'locked': test.locked,
                                'total_questions': total_questions,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'subjects': subject_list,
                                'chapters': chapter_list,
                                'batches': batches_list,
                                'bought': bought,
                                }
                            tests_list.append(test_dict)
                            
                context = {'status':True, 'data': tests_list}
            else:
                context = {'status':False, 'message': 'Student is not in Outer Batch'}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)    
    
class StudentChapterWiseFreeNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        try:
            data = request.data
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_id = '-id'
                else:
                    order_id = 'id'
            
                notes = Note.objects.filter(batches = outer_batch, chapter=chapter)\
                        .select_related('subject','chapter').order_by(order_id)
                package_notes_ids = Package.objects.filter(teacher__institute=me.profile.institute).values_list('notes__id', flat=True)
                
                notes_list = []
                for note in notes:
                    if note.id not in package_notes_ids:
                        try:
                            subject = note.subject.name
                        except:
                            subject = None

                        try:
                            chapter = note.chapter.name
                        except:
                            chapter = None
                            
                        try:
                            note_link = note.noteurl_note.link
                        except:
                            note_link = ""
                            
                        bought = False
                        if note.locked == False:
                            bought = True
                            
                        note_dict = {
                            'id': note.id, 
                            'locked': note.locked, 
                            'bought': bought,
                            'title': note.title, 
                            'publishDate': note.publishDate, 
                            'thumbnail': note.thumbnail,
                            'subject': subject, 
                            'chapter': chapter, 
                            'url': note_link, 
                            }
                        notes_list.append(note_dict)

                context = {'status':True, 'data': notes_list}
            else:
                context = {'status':False, 'message': 'Student is not in Outer Batch'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class StudentChapterWiseFreeVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            student_all_batch = me.profile.batches.all()
            
            if outer_batch in student_all_batch:
                if me.institute.listReversed:
                    order_id = '-id'
                else:
                    order_id = 'id'

                videos = Video.objects.filter(batches=outer_batch,chapter=chapter)\
                        .select_related('subject', 'chapter').prefetch_related('batches').order_by(order_id)
                        
                package_videos_ids = Package.objects.filter(teacher__institute=me.profile.institute).values_list('videos__id', flat=True)
        
                videos_list = []
                for video in videos:
                    if video.id not in package_videos_ids:
                        
                        if video.locked == False:
                            bought = True
                    
                        try:
                            subject = video.subject.name
                        except:
                            subject = None

                        try:
                            chapter = video.chapter.name
                        except:
                            chapter = None

                        if video.download_link:
                            download_link = video.download_link
                        else:
                            download_link = ""

                        if video.publish == True:
                            video_dict = {
                                'id': video.id, 
                                'locked': video.locked,
                                'bought': bought,
                                'title': video.title, 
                                'subject': subject, 
                                'chapter': chapter, 
                                'link': video.urlLink, 
                                'download_link': download_link, 
                                'generalVideo': video.generalVideo,
                                'publishDate': video.publishDate, 
                                'lowLink': video.lowlink, 
                                'highLink': video.highlink, 
                                'thumbnail': video.thumbnail,
                                }
                            videos_list.append(video_dict)

                context = {'status':True, 'data': videos_list}
            else:
                context = {'status':False, 'message': 'Student is not in Outer Batch'}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class StudentGetAllPaidTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        all_test_objects = []
        my_batches = me.profile.batches.all()
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        for bat in my_batches:
            if me.institute.listReversed:
                tests_objects = Test.objects.filter(
                    batches=bat).order_by('-id')
            else:
                tests_objects = Test.objects.filter(batches=bat).order_by('id')

            for to in tests_objects:
                all_test_objects.append(to)
        taken_tests = StudentMarks.objects.filter(student=me.profile)
        taken_tests_ids = []
        t_list = []
        for tt in taken_tests:
            taken_tests_ids.append(tt.test.id)
        for to in all_test_objects:
            if to.id in taken_tests_ids:
                pass
            else:
                t_list.append(to)
        bought_tests_list = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        last_tests_list = []
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                tests = bp.tests.all()
                for test in tests:
                    last_tests_list.append(test)
                    bought_tests_list.append(test.id)
            except Exception as e:
                print(str(e))

        tests_list = []
        paid_packages_list = []
        packages = Package.objects.filter(
            teacher__institute=me.profile.institute)
        for pack in packages:
            tests = pack.tests.all()
            for test in tests:
                paid_packages_list.append(test.id)
        for test in t_list:
            if test.id in paid_packages_list:
                try:
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    subject_list = []
                    chapter_list = []
                    for subject in subjects:
                        subject_dict = {'id': subject.id, 'name': subject.name}
                        subject_list.append(subject_dict)
                    for chapter in chapters:
                        chapter_dict =\
                            {'id': chapter.id, 'name': chapter.name,
                                'code': chapter.code}
                        chapter_list.append(chapter_dict)
                    teacher = test.createdBy
                    bought = False
                    if test.id in bought_tests:
                        bought = True
                    if test.locked == False:
                        bought = True

                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    batches = test.batches.all()
                    batches_list = []
                    for batch in batches:
                        batch_dict = {'id': batch.id, 'name': batch.name}
                        batches_list.append(batch_dict)
                    numberQuestions = test.questions.all().count()
                    test_dict =\
                        {'id': test.id, 'name': test.name, 'totalMarks': test.totalMarks, 'published': test.published, 'subjects': subject_list, 'chapters': chapter_list, 'createdBy': teacher_dict,
                            'time': test.time, 'locked': test.locked, 'batches': batches_list, 'numberQuestions': numberQuestions, 'bought': bought, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                    tests_list.append(test_dict)
                except Exception as e:
                    print(str(e))
        context = {'tests': tests_list}
        return Response(context)

class CouponCodeCreationTeacher(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        coupon = data['coupon']
        package_id = data['package_id']
        amount = data['amount']
        coupon_length = len(coupon)

        try:
            expire_date = data['expire_date']
        except:
            expire_date = None

        try:
            total_count = data['total_count']
        except:
            total_count = None

        if coupon_length < 5:
            context = {'status': 'Failed','message': 'Coupon length too small'}
            return Response(context)

        try:
            package = Package.objects.get(id=package_id)
        except:
            context = {'status': 'Failed', 'message': 'Package not found'}
            return Response(context)

        try:
            coupon = CouponCode.objects.get(code=coupon, package=package)
            context = {'status': 'Failed','message': 'Coupon code for this package already exists.'}
            return Response(context)
        except:
            pass
        
        coupon_code = CouponCode()
        coupon_code.code = coupon
        coupon_code.amount = amount
        coupon_code.teacher = me.profile
        coupon_code.package = package
        coupon_code.expire_date = expire_date
        coupon_code.total_count = total_count
        coupon_code.save()
        context = {'status': 'Success', 'message': 'Coupon Created Successfully'}
        return Response(context)

class TeacherGetCouponCodes(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        coupon_codes = CouponCode.objects.filter(teacher=me.profile)
        codes_list = []
        for cc in coupon_codes:
            pack = cc.package
            package_dict = {'id': pack.id,'name': pack.title, 'price': pack.price}
            cc_dict =\
                {'id': cc.id, 'code': cc.code, 'package': package_dict,
                    'discount_price': cc.amount, 'created': str(cc.created)}
            codes_list.append(cc_dict)
        context = {'coupon_list': codes_list}
        return Response(context)

class TeacherDeleteCouponCode(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        coupon_id = data['coupon_id']
        try:
            coupon_code = CouponCode.objects.get(id=coupon_id)
            coupon_code.delete()
            context = {'status': 'Success', 'message': 'Coupon code deleted'}
            return Response(context)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class StudentGetJobAlertsPDF(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        subject_object = Subject.objects.get(id=6628)
        notes_objects_list = []
        teacher_list = []
        for tea in teachers:
            teacher_list.append(tea)

        for teacher in teacher_list:
            notes = Note.objects.filter(subject=subject_object,teacher=teacher).order_by('-id')
            for note in notes:
                notes_objects_list.append(note)

        notes_list = []
        for note in notes_objects_list:
            subject = note.subject
            chapter = note.chapter
            subject_dict = {'id': subject.id, 'name': subject.name}
            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
                
            note_dict =\
                {'id': note.id, 'title': note.title, 'teacher': teacher.name, 'publishDate': note.publishDate,
                    'subject': subject_dict, 'chapter': chapter_dict, 'url': note_link}
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class StudentGetPreviousYearPDF(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all()
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute)
        previousYearsSubject = institute.previousYearsSubjectId
        if previousYearsSubject:
            subject_object = Subject.objects.get(id=previousYearsSubject)
        else:
            subject_object = Subject.objects.get(id=6629)
        notes_objects_list = []
        teacher_list = []
        for tea in teachers:
            teacher_list.append(tea)

        for teacher in teacher_list:
            notes =Note.objects.filter(subject=subject_object,teacher=teacher,batches__in=batches).order_by('-id')
            for note in notes:
                notes_objects_list.append(note)

        notes_list = []
        for note in notes_objects_list:
            subject = note.subject
            chapter = note.chapter
            subject_dict = {'id': subject.id, 'name': subject.name}
            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}

            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
            note_dict =\
                {'id': note.id, 'title': note.title, 'image': note.image, 'teacher': teacher.name, 'publishDate': note.publishDate,
                    'subject': subject_dict, 'chapter': chapter_dict, 'url': note_link}
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class TeacherAntMediaConferencing(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'content/conferencing.html'

    def get(self, request):
        me = Teach(self.request.user)
        return Response({'teacher': me.profile.teacheruser.username})

class StudentAntMediaConference(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'content/conf.html'

    def get(self, request):
        me = Studs(self.request.user)
        mainTeacher = Teacher.objects.get(mainTeacher=True, institute=me.profile.institute)
        return Response({'teacherusername': mainTeacher.teacheruser.username})

class ChangeQuestionLink(APIView):
    def post(self, request):
        data = request.data
        alreadyLink = data['alreadyLink']
        newLink = data['newLink']
        question = Question.objects.filter(picture=alreadyLink)
        if len(question) > 0:
            for quest in question:
                quest.picture = newLink
                quest.save()
        context = {'message': 'Successfully change link of {} questions'.format(len(question))}
        return Response(context)

class StudentGetDateWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        institute = me.institute
        data = request.data
        date = data['date']
        finalDate = datetime.strptime(date, "%Y-%m-%d")
        teachers = Teacher.objects.filter(institute=institute)
        videos_list = []
        my_batches = me.profile.batches.all()
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        for teacher in teachers:
            for bat in my_batches:
                if me.institute.listReversed:
                    videos = Video.objects.filter(teacher=teacher, publishDate__date=finalDate).order_by('-id')
                else:
                    videos = Video.objects.filter(teacher=teacher, publishDate__date=finalDate).order_by('id')
                    
                for video in videos:
                    batches = video.batches.all()
                    if batches.count() == 0:
                        pass
                    else:
                        for bat in my_batches:
                            for video_bat in batches:
                                if bat.id == video_bat.id:
                                    if video not in videos_list:
                                        videos_list.append(video)

        videos_list = list(unique_everseen(videos_list))
        final_videos_list = []
        bought_videos = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                videos = bp.videos.all()
                for video in videos:
                    bought_videos.append(video.id)
            except Exception as e:
                print(str(e))
        Bookmark_Object = CheckBookmark(me.profile)
        for video in videos_list:
            try:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                try:
                    subject_dict = {'id': video.subject.id,
                                    'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict =\
                        {'id': video.chapter.id, 'name': video.chapter.name,
                            'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None,
                                    'name': 'General', 'code': None}
                
                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(
                        me.profile, video.id, video.viewsLimite)

                bought = False
                if video.id in bought_videos:
                    bought = True
                if video.locked == False:
                    bought = True
                try:
                    Bookmark = Bookmark_Object.isVideoBookmark(video.id)
                except:
                    Bookmark = False
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""
                if video.publish == True:
                    video_dict =\
                        {'id': video.id, 'teacher': teachers_list, 'subject': subject_dict, 'chapter': chapter_dict, 'link': video.urlLink, 'download_link': download_link, 'generalVideo': video.generalVideo,
                            'publishDate': video.publishDate, 'title': video.title, 'bought': bought, 'lowLink': video.lowlink, 'highLink': video.highlink, 'thumbnail': video.thumbnail, 'vision': vision,'Bookmark':Bookmark}
                    final_videos_list.append(video_dict)
            except Exception as e:
                print('student all videos {}'.format(str(e)))
        final_video_list = list(unique_everseen(final_videos_list))
        context = {'videos': final_videos_list}
        return Response(context)

class StudentGetDateWiseNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        date = data['date']
        finalDate = datetime.strptime(date, "%Y-%m-%d")
        institute = me.profile.institute
        teachers = Teacher.objects.filter(institute=institute).order_by('-id')
        notes_objects_list = []
        my_batches = me.profile.batches.all()
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        for teacher in teachers:
            for bat in my_batches:
                if me.institute.listReversed:
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, publishDate__date=finalDate).order_by('-id')
                else:
                    notes =\
                        Note.objects.filter(
                            teacher=teacher, publishDate__date=finalDate).order_by('id')

                for note in notes:
                    batches = note.batches.all()
                    if batches.count() == 0:
                        notes_objects_list.append(note)
                    else:
                        for bat in batches:
                            for bat in my_batches:
                                for note_bat in batches:
                                    if bat.id == note_bat.id:
                                        if note not in notes_objects_list:
                                            notes_objects_list.append(note)

        notes_list = []
        bought_notes = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                notes = bp.notes.all()
                for note in notes:
                    bought_notes.append(note.id)
            except Exception as e:
                print(str(e))
        Bookmark_Object = CheckBookmark(me.profile)
        for note in notes_objects_list:
            try:
                subject_dict = {'id': note.subject.id,
                                'name': note.subject.name}
                chapter_dict =\
                    {'id': note.chapter.id, 'name': note.chapter.name,
                        'code': note.chapter.code}
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                bought = False
                if note.id in bought_notes:
                    bought = True
                if note.locked == False:
                    bought = True

                vision = True
                if note.noteViewsLimite:
                    vision = CheckNoteViewLimite(
                        me.profile, note.id, note.noteViewsLimite)
                try:
                    Bookmark = Bookmark_Object.isNoteBookmark(note.id)
                except:
                    Bookmark = False

                note_dict =\
                    {'id': note.id, 'title': note.title, 'teacher': teacher.name, 'publishDate': note.publishDate, 'thumbnail': note.thumbnail, 'subject': subject_dict,
                        'chapter': chapter_dict, 'url': note_link, 'locked': note.locked, 'bought': bought, 'vision': vision, 'Bookmark': Bookmark}
                notes_list.append(note_dict)
            except Exception as e:
                print(str(e))

        context = {'notes': notes_list}
        return Response(context)

class StudentDateWiseTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        date = data['date']
        finalDate = datetime.strptime(date, "%Y-%m-%d")
        my_batches = me.profile.batches.all()
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        all_test_objects = []
        test_ids = []
        for bat in my_batches:
            if me.institute.listReversed:
                tests_objects =\
                    Test.objects.filter(Q(batches=bat, published__date=finalDate, publish=True) & Q(
                        Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now()))).order_by('-id')
            else:
                tests_objects =\
                    Test.objects.filter(Q(batches=bat, published__date=finalDate, publish=True) & Q(
                        Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now()))).order_by('id')

            for to in tests_objects:
                if to.id in test_ids:
                    pass
                else:
                    test_ids.append(to.id)
                    all_test_objects.append(to)

        taken_tests_ids = set(student_marks.test for student_marks in StudentMarks.objects.select_related('test').filter(student=me.profile))

        bought_tests = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
        for bp in bought_packages_list:
            try:
                tests = bp.tests.all()
                for test in tests:
                    bought_tests.append(test.id)
            except Exception as e:
                print(str(e))

        tests_list = []
        for test in all_test_objects:
            try:
                subjects = test.subjects.all()
                chapters = test.chapters.all()
                subject_list = []
                chapter_list = []
                for subject in subjects:
                    subject_dict = {'id': subject.id, 'name': subject.name}
                    subject_list.append(subject_dict)
                for chapter in chapters:
                    chapter_dict =\
                        {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                    chapter_list.append(chapter_dict)
                teacher = test.createdBy
                bought = False
                if test.id in bought_tests:
                    bought = True
                if test.locked == False:
                    bought = True

                teacher_dict = {'id': teacher.id, 'name': teacher.name}
                batches = test.batches.all()
                batches_list = []
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                numberQuestions = test.questions.all().count()

                if test.testEndDateTime:
                    if test.testEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                first_attempt = True
                if test.id in taken_tests_ids:
                    first_attempt = False
                else:
                    first_attempt = True

                if first_attempt == False and test.repeatTest == True:
                    student_last_report = test.marks_test.get(
                        student=me.profile)
                    if test.test_count != None:
                        if student_last_report.attempt_count < test.test_count:
                            test_dict =\
                                {'id': test.id, 'name': test.name, 'totalMarks': test.totalMarks, 'published': test.published, 'subjects': subject_list, 'chapters': chapter_list, 'createdBy': teacher_dict, 'time': test.time, 'locked': test.locked,
                                    'batches': batches_list, 'numberQuestions': numberQuestions, 'bought': bought, 'first_attempt': first_attempt, 'testTimeOver': testTimeOver, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                            tests_list.append(test_dict)
                    else:
                        test_dict =\
                            {'id': test.id, 'name': test.name, 'totalMarks': test.totalMarks, 'published': test.published, 'subjects': subject_list, 'chapters': chapter_list, 'createdBy': teacher_dict, 'time': test.time, 'locked': test.locked,
                                'batches': batches_list, 'numberQuestions': numberQuestions, 'bought': bought, 'first_attempt': first_attempt, 'testTimeOver': testTimeOver, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                        tests_list.append(test_dict)

                elif first_attempt == False and test.repeatTest == False:
                    pass
                else:
                    test_dict =\
                        {'id': test.id, 'name': test.name, 'totalMarks': test.totalMarks, 'published': test.published, 'subjects': subject_list, 'chapters': chapter_list, 'createdBy': teacher_dict, 'time': test.time, 'locked': test.locked,
                            'batches': batches_list, 'numberQuestions': numberQuestions, 'bought': bought, 'first_attempt': first_attempt, 'testTimeOver': testTimeOver, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                    tests_list.append(test_dict)
            except Exception as e:
                print(str(e))
        context = {'tests': tests_list}
        return Response(context)

class GetTopicsByChaptersAndPackage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            topics = []
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            content_type = data.get('content_type')
            package = Package.objects.get(id = package_id)

            if content_type == 'notes':
                topics = package.notes.filter(chapter=chapter_id).exclude(topic__id__isnull=True).values(
                    'topic__id', 'topic__topic').order_by('-id')
                
            elif content_type == 'videos':
                topics = package.videos.filter(chapter=chapter_id).exclude(topics__id__isnull=True).values(
                    'topics__id', 'topics__topic').order_by('-id')
                
            else:
                topics = package.tests.filter(chapters=chapter_id, topics__isnull=False).values(
                    'topics__id', 'topics__topic').order_by('-id')
                
            topics = pd.DataFrame(topics).drop_duplicates().to_dict('records')
            context = {'topics': topics}
                
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentGetPackageVideosSubjects(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)

        videos = package.videos.all().values('subject__id', 'subject__name')
        df = pd.DataFrame(videos)
        df = df.fillna('')
        df = df.rename(columns={"subject__id": "id", "subject__name": "name"})
        all_subjects = df.to_dict('records')
        all_subjects = list(unique_everseen(all_subjects))

        context = {'subjects': all_subjects}
        return Response(context)

class StudentGetPackageNotesSubjects(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)

        notes = package.notes.all().values('subject__id', 'subject__name')
        df = pd.DataFrame(notes)
        df = df.fillna('')
        df = df.rename(columns={"subject__id": "id", "subject__name": "name"})
        all_subjects = df.to_dict('records')
        all_subjects = list(unique_everseen(all_subjects))

        context = {'subjects': all_subjects}
        return Response(context)

class StudentGetPackageTestsSubjects(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)

        tests = package.tests.all().values('subjects__id', 'subjects__name')
        df = pd.DataFrame(tests)
        df = df.fillna('')
        df = df.rename(columns={"subjects__id": "id","subjects__name": "name"})
        all_subjects = df.to_dict('records')
        all_subjects = list(unique_everseen(all_subjects))

        context = {'subjects': all_subjects}
        return Response(context)

class StudentGetSubjectwisePackageVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data['subject_id']
        package = Package.objects.get(id=package_id)
        subject = Subject.objects.get(id=subject_id)
        videos = package.videos.select_related('subject','chapter').all().order_by('id')
        
        videos_list = []
        for video in videos:
            if video.subject == subject and video.publish == True:
                if video.chapter == None:
                    chapter_name = 'none'
                else:
                    chapter_name = video.chapter.name
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""
                video_dict =\
                    {'video_id': video.id, 'title': video.title, 'url': video.urlLink, 'download_link': download_link, 'lowLink': video.lowlink, 'highLink': video.highlink, 'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate, 'subject': video.subject.name, 'chapter': chapter_name, 'thumbnail': video.thumbnail}
                videos_list.append(video_dict)
        context = {'videos': videos_list}
        return Response(context)

class StudentGetSubjectwisePackageNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data['subject_id']
        package = Package.objects.get(id=package_id)
        subject = Subject.objects.get(id=subject_id)
        notes = package.notes.select_related('subject','chapter','noteurl_note').all()
        notes_list = []
        for note in notes:
            try:
                if note.subject == subject:
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                    if note.chapter == None:
                        chapter_name = 'none'
                    else:
                        chapter_name = note.chapter.name
                    note_dict =\
                        {'note_id': note.id, 'title': note.title, 'subject': note.subject.name,
                            'chapter': chapter_name, 'publishDate': note.publishDate, 'url': note_link}
                    notes_list.append(note_dict)
            except:
                pass

        context = {'notes': notes_list}
        return Response(context)

class StudentGetSubjectwisePackageTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data['subject_id']
        package = Package.objects.get(id=package_id)
        subject = Subject.objects.get(id=subject_id)
        videos = package.videos.all()
        tests_list = []
        tests = package.tests.filter(subjects=subject)
        for test in tests:
            if test.publish == True:
                try:
                    subjects_list = []
                    chapters_list = []
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    numberQuestions = test.questions.all().count()
                    for subject in subjects:
                        subjects_list.append(subject.name)
                        
                    for chapter in chapters:
                        chapters_list.append(chapter.name)
                        
                    test_dict = {
                        'id': test.id, 
                        'name': test.name, 
                        'subject': subjects_list, 
                        'chapter': chapters_list, 
                        'time': test.time,
                        'totalMarks': test.totalMarks, 
                        'publisehd': test.published, 
                        'numberQuestions': numberQuestions
                        }
                    tests_list.append(test_dict)
                except:
                    pass
        context = {'tests': tests_list}
        return Response(context)

class StudentSubjectWiseTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        if me.profile.accessTests == False:
            return Response({'tests': []})
        
        try:
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            my_batches = me.profile.batches.all()
            orderBy = '-id' if me.institute.listReversed else 'id'
            tests = (
                Test.objects
                .select_related('createdBy')
                .prefetch_related('subjects', 'chapters', 'questions', 'batches')
                .filter(
                    Q(batches__in=my_batches, subjects=subject, publish=True) & 
                    Q(Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now()))
                )
                .distinct()
                .order_by(orderBy)
            )

            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests_ids = student_test_helper.taken_test()
                    
            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_tests = stud_pack_helper.get_all_brought_tests()

            tests_list = []
            for test in tests:
                if test.publish == True:
                    student_mark = StudentMarks.objects.filter(test = test, student = me.profile).last()
                    student_mark_id = student_mark.id if student_mark else None
                        
                    student_marks_list = []
                    if me.profile.institute.code == 'pcbtnursing':
                        student_marks = StudentMarks.objects.filter(test=test, student = me.profile).order_by('id')
                        student_marks_list = [{'id': sm.id, 'attemptTime': sm.attemptTime, 'student': sm.student.name} for sm in student_marks]
                    
                    subject_list = [{'id': subject.id, 'name': subject.name} for subject in test.subjects.all()]
                    chapter_list = [{'id': chapter.id, 'name': chapter.name, 'code': chapter.code} for chapter in test.chapters.all()]
                    batches_list = [{'id': batch.id, 'name': batch.name} for batch in test.batches.all()]

                    teacher_dict = {'id': test.createdBy.id, 'name': test.createdBy.name}
                    numberQuestions = test.questions.all().count()
                    bought = test.id in bought_tests or not test.locked
                    
                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    first_attempt = True
                    if test.id in taken_tests_ids:
                        first_attempt = False
                    else:
                        first_attempt = True
                    
                    if (first_attempt == False and test.repeatTest == True) or (first_attempt == True and test.repeatTest == True):
                        if test.test_count != None:
                            try:
                                student_last_report = test.marks_test.filter(student=me.profile).last()
                                test_attempted = student_last_report.attempt_count
                            except:
                                test_attempted = 0
                                
                            try:
                                remaining_attempt = test.test_count - test_attempted
                                if remaining_attempt == 0:
                                    can_attempt = False
                                else:
                                    can_attempt = True
                            except:
                                remaining_attempt = 0
                                can_attempt = False
                                
                            if test_attempted < test.test_count:
                                test_dict = {
                                    'id': test.id, 
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': bought, 
                                    'testTimeOver': testTimeOver, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'student_mark_id': student_mark_id,
                                    'student_marks_list': student_marks_list,
                                    'test_count': test.test_count,
                                    'first_attempt': first_attempt,
                                    'repeatTest': test.repeatTest, 
                                    'remaining_attempt': remaining_attempt,
                                    'can_attempt': can_attempt,
                                }
                                tests_list.append(test_dict)
                            else:
                                test_dict = {
                                    'id': test.id, 
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': bought, 
                                    'testTimeOver': testTimeOver, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'student_mark_id': student_mark_id,
                                    'student_marks_list': student_marks_list,
                                    'test_count': test.test_count,
                                    'first_attempt': first_attempt,
                                    'repeatTest': test.repeatTest, 
                                    'remaining_attempt': remaining_attempt,
                                    'can_attempt': can_attempt,
                                }
                                tests_list.append(test_dict)
                        else:
                            test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'time': test.time, 
                                'locked': test.locked,
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': bought, 
                                'testTimeOver': testTimeOver, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'student_mark_id': student_mark_id,
                                'student_marks_list': student_marks_list,
                                'test_count': test.test_count,
                                'first_attempt': first_attempt,
                                'repeatTest': test.repeatTest, 
                                'remaining_attempt': None,
                                'can_attempt': None,
                            }
                            tests_list.append(test_dict)
                        
                    elif first_attempt == False and test.repeatTest == False:
                            pass
                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'totalMarks': test.totalMarks, 
                            'published': test.published, 
                            'subjects': subject_list, 
                            'chapters': chapter_list, 
                            'createdBy': teacher_dict, 
                            'time': test.time, 
                            'locked': test.locked,
                            'batches': batches_list, 
                            'numberQuestions': numberQuestions, 
                            'bought': bought, 
                            'testTimeOver': testTimeOver, 
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'student_mark_id': student_mark_id,
                            'student_marks_list': student_marks_list,
                            'test_count': test.test_count,
                            'first_attempt': first_attempt,
                            'repeatTest': test.repeatTest, 
                            'remaining_attempt': None,
                            'can_attempt': None,
                        }
                        tests_list.append(test_dict)
                        
            context = {'tests': tests_list,'all_test_objects': len(tests)}

        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)
        
class TeacherSeeChapterWiseTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        initial_test_list = []
        institute = me.profile.institute
        if me.profile.mainTeacher:
            tests = Test.objects.filter(subjects=subject, chapters=chapter,createdBy__institute = institute).order_by('-id')

            initial_test_list.extend(tests)
        else:
            init_test_list = Test.objects.filter(Q(createdBy__subjects=subject) | Q(createdBy=me.profile), subjects=subject, chapters=chapter,createdBy__institute = institute).order_by('-id').distinct()
            for te in init_test_list:
                initial_test_list.append(te)
        tests_list = []
        for test in initial_test_list:
            number_questions = test.questions.all().count()
            subjects_list = []
            subjects = test.subjects.all()
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name}
                subjects_list.append(subject_dict)
            chapters_list = []
            chapters = test.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id,
                                'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
            packages = Package.objects.filter(tests=test)
            packages_list = []
            for package in packages:
                package_dict =\
                    {'id': package.id, 'title': package.title, 'price': package.price,
                        'details': package.details, 'students': package.students.all().count()}
                packages_list.append(package_dict)
            batches_list = []
            batches = test.batches.all()
            for batch in batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                batches_list.append(batch_dict)
            test_dict = {
                'id': test.id,
                'test_count': test.test_count,
                'numberQuestions': number_questions,
                'subjects': subjects_list,
                'chapters': chapters_list,
                'time': test.time,
                'publisehd': test.published,
                'packages': packages_list,
                'batches': batches_list,
                'totalMarks': test.totalMarks,
                'title': test.name,
                'publish': test.publish,
                'passing_marks': test.passing_marks,
                'repeatTest_status': test.repeatTest,
                'testStartDateTime': test.testStartDateTime,
                'testEndDateTime': test.testEndDateTime,
                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                'testInstructions': test.testInstructions,
                'is_answers_showing': test.is_answers_showing}
            tests_list.append(test_dict)
        context = {'tests': tests_list}
        return Response(context)

class TeacherSeeSubjectWiseTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        initial_test_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                tests = Test.objects.filter(createdBy=teacher, subjects=subject).order_by('-id')
                for test in tests:
                    initial_test_list.append(test)
        else:
            init_test_list = Test.objects.filter(createdBy=me.profile,subjects=subject).order_by('-id')
            for te in init_test_list:
                initial_test_list.append(te)
                
        tests_list = []
        for test in initial_test_list:
            number_questions = test.questions.all().count()
            subjects_list = []
            subjects = test.subjects.all()
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name}
                subjects_list.append(subject_dict)
            chapters_list = []
            chapters = test.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
            packages = Package.objects.filter(tests=test)
            packages_list = []
            for package in packages:
                package_dict =\
                    {'id': package.id, 'title': package.title, 'price': package.price,
                        'details': package.details, 'students': package.students.all().count()}
                packages_list.append(package_dict)
            batches_list = []
            batches = test.batches.all()
            for batch in batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                batches_list.append(batch_dict)
            test_dict =\
                {'id': test.id, 'numberQuestions': number_questions, 'subjects': subjects_list, 'chapters': chapters_list, 'time': test.time, 'publisehd': test.published, 'packages': packages_list, 'batches': batches_list,
                    'totalMarks': test.totalMarks, 'title': test.name, 'publish': test.publish, 'passing_marks': test.passing_marks, 'repeatTest_status': test.repeatTest, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
            tests_list.append(test_dict)
        context = {'tests': tests_list}
        return Response(context)

class ChangeVideoOrderBatchWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_list = data['video_ids']
        batch_id = data['batch_id']
        try:
            batch = Batch.objects.get(id=batch_id)
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Batch not found'}
            return Response(context)

        videos = str(video_list)[:]
        videos = videos.strip('][').split(',')

        for ind, video_id in enumerate(videos):
            video = Video.objects.get(id=video_id)
            ind += 1
            try:
                videoOrder = VideoOrderBatchWise.objects.get(video=video, batch=batch)
                videoOrder.order = ind
                videoOrder.save()
            except VideoOrderBatchWise.MultipleObjectsReturned:
                VideoOrderBatchWise.objects.filter(video=video, batch=batch).delete()
                videoOrder = VideoOrderBatchWise()
                videoOrder.batch = batch
                videoOrder.video = video
                videoOrder.order = ind
                videoOrder.save()
            except VideoOrderBatchWise.DoesNotExist:
                videoOrder = VideoOrderBatchWise()
                videoOrder.batch = batch
                videoOrder.video = video
                videoOrder.order = ind
                videoOrder.save()
        context = {'status': 'Success', 'message': 'Order changed'}
        return Response(context)

class TeacherGetBatchWiseVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        batch = Batch.objects.get(id=batch_id)
        before_video_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                videos =\
                    Video.objects.filter(
                        teacher=teacher, batches=batch).order_by('-id')
                videosOrderObjects =\
                    VideoOrderBatchWise.objects.select_related('video__subject','video__chapter').prefetch_related('video__batches').filter(
                        batch=batch, video__teacher=teacher).order_by('order')
                for voo in videosOrderObjects:
                    before_video_list.append(voo.video)
        else:
            videosOrderObjects =\
                VideoOrderBatchWise.objects.select_related('video__subject','video__chapter').prefetch_related('video__batches').filter(
                    batch=batch, video__teacher=me.profile).order_by('order')
            for voo in videosOrderObjects:
                before_video_list.append(voo.video)

        videos_list = []
        print(len(before_video_list))
        for video in before_video_list:
            try:
                subject = video.subject.name
                chapter = video.chapter.name
                batches = video.batches.all()
                batch_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)
                video_dict = {
                    'id': video.id, 
                    'title': video.title, 
                    'url': video.urlLink, 
                    'publishDate': video.publishDate,
                    'generalVideo': video.generalVideo, 
                    'subject': subject, 
                    'chapter': chapter, 
                    'batches': batch_list, 
                    'publish': video.publish
                    }
                videos_list.append(video_dict)
            except Exception as e:
                print('teacher all videos error {}'.format(str(e)))
        video_list1 = list(unique_everseen(videos_list))
        context = {'videos': video_list1}
        return Response(context)

class StudentGetOrderWiseAllVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        try:
            data = request.data
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            
            if me.institute.listReversed:
                orderBy = '-id'
            else:
                orderBy = 'id'
            
            videos = Video.objects.filter(batches=batch).select_related('subject', 'chapter').prefetch_related('demo_video').order_by(orderBy)

            final_videos_list = []

            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_videos_list = stud_pack_helper.get_all_brought_videos()

            Bookmark_Object = CheckBookmark(me.profile)
            video_view_object = VideoViewLimitCheck(me.profile)
            for video in videos:
                teachers_list = []
                try:
                    subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None, 'name': 'General', 'code': None}
                    
                try:
                    Bookmark = Bookmark_Object.isVideoBookmark(video.id)
                except:
                    Bookmark = False

                vision = video_view_object.vision(video.id, video.viewsLimite)

                bought = False
                if not bought and video in bought_videos_list:
                    bought = True
                    
                if not bought:
                    demoVideo = video.demo_video.exists()
                    if demoVideo:
                        bought = True
                        
                if video.locked == False:
                    bought = True
                    
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""
                    
                if video.publish == True:
                    video_dict = {
                        'id': video.id, 
                        'teacher': teachers_list, 
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'link': video.urlLink, 
                        'download_link': download_link, 
                        'generalVideo': video.generalVideo, 
                        'publishDate': video.publishDate,
                        'title': video.title, 
                        'bought': bought, 
                        'lowLink': video.lowlink, 
                        'highLink': video.highlink, 
                        'thumbnail': video.thumbnail, 
                        'Bookmark': Bookmark, 
                        'vision': vision
                        }
                    final_videos_list.append(video_dict)
                
            final_video_list = list(unique_everseen(final_videos_list))
            context = {'videos': final_video_list}
            
        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)

class NewOrderWiseBatchWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        data = request.data
        batch_id = data['batch_id']
        try:
            batch = Batch.objects.get(id=batch_id)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)
        
        try:
            videos_list = []
            videoOrder = VideoOrderBatchWise.objects.filter(batch=batch).select_related('video').order_by('order')
            for vo in videoOrder:
                if vo.video in videos_list:
                    pass
                else:
                    videos_list.append(vo.video)
                    
            final_videos_list = []
            bought_videos = []
            bought_packages_list = []
            boughtPackages = StudentPackage.objects.filter(student=me.profile).select_related('package').prefetch_related('package__videos')
            for bp in boughtPackages:
                bought_packages_list.append(bp.package)
                
            for bp in bought_packages_list:
                try:
                    videos = bp.videos.all()
                    for video in videos:
                        bought_videos.append(video.id)
                except Exception as e:
                    print(str(e))
                    
            teachers_list = []
            for video in videos_list:
                try:
                    subject_dict = {'id': video.subject.id,'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None,'name': 'General', 'code': None}
                    
                bought = False
                if video.id in bought_videos:
                    bought = True
                    
                if video.locked == False:
                    bought = True
                    
                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                    
                if video.publish == True:
                    video_dict = {
                        'id': video.id, 
                        'teacher': teachers_list, 
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'link': video.urlLink, 
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate, 
                        'title': video.title, 
                        'bought': bought, 
                        'lowLink': video.lowlink, 
                        'highLink': video.highlink, 
                        'thumbnail': video.thumbnail,
                        'vision': vision,
                        }
                    final_videos_list.append(video_dict)
                
            final_video_list = list(unique_everseen(final_videos_list))
            context = {'videos': final_videos_list}
        except Exception as e:
            context = {'message':str(e)}
        return Response(context)

class TeacherChangeVideoThumbnail(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        imageURL = data['imageURL']
        video_id = data['videoId']
        try:
            video = Video.objects.get(id=video_id)
            video.thumbnail = imageURL
            video.save()
            context = {'status': 'Success', 'message': 'Thumbnail changed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentSubjectwiseFreeNotesOld(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            
            if me.institute.listReversed:
                order_id = '-id'
            else:
                order_id = 'id'
            
            notes_objects_list = []
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            notes = Note.objects.filter(teacher__in=teachers, subject=subject).order_by(order_id)
            my_batches = me.profile.batches.all()
            for bat in my_batches:
                for note in notes:
                    batches = note.batches.all()
                    
                    if batches.count() == 0:
                        notes_objects_list.append(note)
                    else:
                        for bat in batches:
                            for bat in my_batches:
                                for note_bat in batches:
                                    if bat.id == note_bat.id:
                                        if note not in notes_objects_list:
                                            notes_objects_list.append(note)

            notes_list = list(unique_everseen(notes_objects_list))
            bought_notes = []
            boughtPackages = StudentPackage.objects.filter(student=me.profile)
            
            packages = Package.objects.filter(teacher__institute=me.profile.institute)
            package_notes_list = []
            for package in packages:
                try:
                    notes = package.notes.all()
                    for note in notes:
                        package_notes_list.append(note)
                except Exception as e:
                    print(str(e))

            return_list = []
            for note in notes_list:
                if note not in package_notes_list:
                    subject_dict = {'id': note.subject.id,'name': note.subject.name}
                    chapter_dict = {'id': note.chapter.id, 'name': note.chapter.name,'code': note.chapter.code}
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    bought = False
                    if note.id in bought_notes:
                        bought = True
                        
                    if note.locked == False:
                        bought = True
                        
                    note_dict = {
                        'id': note.id, 
                        'title': note.title, 
                        'teacher': 'teacher.name', 
                        'publishDate': note.publishDate, 
                        'thumbnail': note.thumbnail,
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'url': note_link, 
                        'locked': note.locked, 
                        'bought': bought
                        }
                    return_list.append(note_dict)

            context = {'status': True, 'notes': return_list}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class TalentHuntExamForm(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        testDate = data['testDate']
        city = data['city']
        state = data['state']
        couponCode = data['couponCode']
        testDay = datetime.strptime(testDate, "%Y-%m-%d")
        try:
            talentHuntForm = TalentHuntExamDetail.objects.get(student=me.profile)
            context = {'status': 'Failed', 'message': 'Form already filled'}
        except TalentHuntExamDetail.DoesNotExist:
            talentHuntForm = TalentHuntExamDetail()
            talentHuntForm.student = me.profile
            talentHuntForm.testDate = testDay
            talentHuntForm.city = city
            talentHuntForm.state = state
            talentHuntForm.couponCode = couponCode
            talentHuntForm.institute = me.profile.institute
            talentHuntForm.save()
            context = {'status': 'Success', 'message': 'Form filled'}
        return Response(context)

class CheckTalentHuntFormFilled(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            talentHuntForm = TalentHuntExamDetail.objects.get(student=me.profile)
            context = {'status': True}
        except:
            context = {'status': False}
        return Response(context)

class StudentGetDailyVocabPDF(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = me.institute
        batches = me.profile.batches.all()
        teachers = Teacher.objects.filter(institute=institute)
        electric_english = Institute.objects.get(id=170)
        dailyVocabSubject = institute.dailyVocabSubjectId
        if dailyVocabSubject:
            subject_object = Subject.objects.get(id=dailyVocabSubject)
        else:
            subject_object = Subject.objects.get(id=7178)
        
        notes_objects_list = []
        teacher_list = []
        for teacher in teachers:
            teacher_list.append(teacher)

        subject_object2 = Subject.objects.get(id=4183)
        for teacher in teacher_list:
            if institute == electric_english:
                notes = Note.objects.filter(subject=subject_object2, teacher=teacher).order_by('-id')
                for note in notes:
                    notes_objects_list.append(note)
            else:
                notes = Note.objects.filter(subject=subject_object, teacher=teacher).order_by('-id')
                for note in notes:
                    notes_objects_list.append(note)

        notes_list = []
        for note in notes_objects_list:
            subject = note.subject
            chapter = note.chapter
            subject_dict = {'id': subject.id, 'name': subject.name}
            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}

            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""

            note_dict = {
                'id': note.id, 
                'title': note.title, 
                'teacher': teacher.name, 
                'publishDate': note.publishDate,
                'subject': subject_dict, 
                'chapter': chapter_dict, 
                'url': note_link,
                }
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class StudentSeeDailyVocabWebsites(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        institute = me.institute
        batches = me.profile.batches.all()
        subject_id = data['subject_id']
        try:
            website_list = []
            websites = ContentWebsite.objects.filter(batches__in=batches,chapter__subject__id = subject_id).order_by('date')
            for website in websites:
                website_dict = {
                    'id': website.id,
                    'website_title':  website.website_title,
                    'website_url': website.website_url, 
                    }
                website_list.append(website_dict)

            context = {'status': True, 'response': website_list}
        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

class TeacherPackageChangeThumbnail(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        thumbnail = data['thumbnail']
        try:
            package = Package.objects.get(id=package_id)
            package.thumbnail = thumbnail
            package.save()
            context = {'status': "Success"}
        except Exception as e:
            context = {'status': 'Failed', "message": str(e)}
        return Response(context)

class StudentOSNBuyPackage(APIView):
    def post(self, request):
        data = request.data
        package_id = data['package_id']
        phone = data['phone']
        email = data['email']
        final_username = str(phone) + '@'+'osn_academy'
        
        try:
            user = User.objects.get(username=final_username)
            me = Studs(user)
        except:
            batch = Batch.objects.get(id=6245)
            new_user = User.objects.create_user(username=final_username, password='123', email=email)
            group = Group.objects.get(name='Students')
            group.user_set.add(new_user)
            teacher = Teacher.objects.get(teacheruser__username='osnacademy_teacher')
            student = Student()
            student.name = str(email.split('@')[0])
            student.institute = teacher.institute
            student.studentuser = new_user
            student.save()
            student.batches.add(batch)
            student.save()
            
            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.save()
            me = Studs(new_user)
            f_sent = 'register'
            
            try:
                json_file = teacher.institute.json_file
            except:
                json_file = None
            
            try:
                app_token = list(AppServerKey.objects.all())[0]
                deviceId = teacher.firebaseToken
                to_text = 'Congrats!! New student:{} - {}'.format(student.studentuser, student.name)
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as f:
                f_sent = f
                print(str(f))
        try:
            package = Package.objects.get(id=package_id)
            price = package.price
            package.students.add(me.profile)
            endDate = timezone.now().date() + timedelta(days=package.duration)
            studentPackage =\
                StudentPackage(student=me.profile, package=package,
                               startDate=timezone.now().date(), endDate=endDate)
            studentPackage.save()
            paidAmount =\
                PaidAmountStudentPackage(
                    studentPackage=studentPackage, paidAmount=price, date=timezone.now())
            paidAmount.save()
            manipulation =\
                ManipulatedCoin.objects.filter(
                    student=me.profile).order_by('-id')
            found = 'no'
            student_txt = ''
            for man in manipulation:
                if man.studentSales != None and man.studentSales != me.profile:
                    other_student = man.studentSales
                    found = 'yes'
                    student_txt = str(other_student.name)
                    his_coins = Coin.objects.get(student=other_student)
                    his_coins.coins += me.profile.institute.buyCourseCoins
                    his_coins.save()
                    my_coins = Coin.objects.get(student=me.profile)
                    manipulated = ManipulatedCoin()
                    manipulated.coin = my_coins
                    manipulated.coinChanged = my_coins.coins
                    manipulated.reason = 'buyPackage'
                    manipulated.date = timezone.now()
                    manipulated.studentSales = other_student
                    manipulated.student = me.profile
                    manipulated.save()
                    my_coins.coins = 0
                    my_coins.save()
                    break
            context = {'status': 'Success', 'message': 'Package {} successfully purchased'.format(
                package.id), 'found': found, 'student': me.profile.studentuser.username}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherMarkAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        assignment_id = data['student_assignment_id']
        marks = data['marks']
        try:
            studentAssignment = StudentAssignment.objects.get(id=assignment_id)
            studentAssignment.marks = marks
            studentAssignment.save()
            context = {'status': 'Success', 'message': 'Marks updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAssignmentGiveRemarks(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        assignment_id = data['student_assignment_id']
        remark = data['remarks']
        try:
            studentAssignment = StudentAssignment.objects.get(id=assignment_id)
            studentAssignment.remark = remark
            studentAssignment.save()
            context = {'status': 'Success', 'message': 'Re-mark updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentApplyCouponCode(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        couponCode = data['coupon_code']
        try:
            package = Package.objects.get(id=package_id)
            coupon_code = CouponCode.objects.get(code=couponCode, package=package)
            if not coupon_code:
                context = {'status': 'failed', 'message': 'Coupon not valid for given package'}
                return Response(context)

            if coupon_code.expire_date:
                today = datetime.now().date()
                if coupon_code.expire_date < today:
                    context = {'status': 'failed', 'message': 'Coupon has expired'}
                    return Response(context)

            if isinstance(coupon_code.total_count, int):
                if coupon_code.total_count < 1:
                    context = {'status': 'failed', 'message': 'Coupon has expired'}
                    return Response(context)
                else:
                    coupon_code.total_count += 1
                    coupon_code.save()

            price = package.price
            final_price = price - coupon_code.amount
            context = {'new_price': final_price, 'coupon_id': coupon_code.id}
        except Exception as e:
            context = {'error': str(e)}
        return Response(context)

class ParentAddStudent(APIView):
    def post(self, request):
        me = ParentUser(self.request.user)
        data = request.data
        student_phone = data['student_phone']
        institute_code = me.profile.institute.code
        try:
            student = Student.objects.get(studentuser__username=student_phone+'@'+institute_code)
            me.profile.student.add(student)
            me.profile.save()
            context = {'status': 'Success', 'message': 'Student added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class ParentStudentList(APIView):
    def get(self, request):
        me = ParentUser(self.request.user)
        students = me.profile.student.all()
        student_list = []
        for student in students:
            student_profile = StudentDetails.objects.get(student=student)
            if student_profile.photo != None:
                photo = student_profile.photo
            else:
                photo = None
            student_dict = {'id': student.id,
                            'name': student.name, 'photo': photo}
            student_list.append(student_dict)
        context = {'students': student_list}
        return Response(context)

class ParentLiveClassAttendanceStudent(APIView):
    def post(self, request):
        me = ParentUser(self.request.user)
        data = request.data
        student_id = data['student_id']
        student = Student.objects.get(id=student_id)
        liveVideoInfo = LiveVideoStudentInformation.objects.filter(student=student)
        print(LiveVideoStudentInformation)
        live_attendance = []
        for lvi in liveVideoInfo:
            try:
                lv = lvi.video
                time = lv.time
                teacher = lv.teacher.name
                lvi_dict = {'id': lvi.id, 'video_teacher': teacher, 'time': time,'joinTime': lvi.joinTime, 'endTime': lvi.leaveTime}
                live_attendance.append(lvi_dict)
            except:
                pass
        context = {'onlineAttendance': live_attendance}
        return Response(context)

class ParentGetStudentTakenTestList(APIView):
    def post(self, request):
        me = ParentUser(self.request.user)
        data = request.data
        student_id = data['student_id']
        student = Student.objects.get(id=student_id)
        marks = StudentMarks.objects.filter(student=student).order_by('-id')
        test_list = []
        for mark in marks:
            time = mark.time
            attemptTime = mark.attemptTime
            numberQuestions = mark.questions.all().count()
            test = mark.test
            subjects = test.subjects.all()
            chapters = test.chapters.all()
            subject_list = []
            chapter_list = []
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name}
                subject_list.append(subject_dict)
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapter_list.append(chapter_dict)
            test_dict =\
                {'id': mark.id, 'test_id': test.id, 'name': test.name, 'published': test.published, 'time': test.time, 'locked': test.locked,
                    'subjects': subject_list, 'chapters': chapter_list, 'numberQuestions': numberQuestions, 'attemptTime': attemptTime}
            test_list.append(test_dict)
        context = {'status': 'Success', 'test': test_list}
        return Response(context)

class ParentIndividualTestPerformance(APIView):
    def post(self, request):
        me = ParentUser(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentMarks.objects.get(id=marks_id)
            total_marks = 0
            attemptedQuestions = studentMarks.questions.all()
            attempted_questions_list = []
            right_number = 0
            wrong_number = 0
            skipped_number = 0
            for aq in attemptedQuestions:
                question = aq.question
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)
                attempted = aq.attempted
                right = aq.right
                if right:
                    total_marks += question.marks
                    right_number += 1
                    
                elif right == False:
                    total_marks -= question.negativeMarks
                    wrong_number += 1
                    
                if aq.attempted == False:
                    skipped_number += 1
                    
                time = aq.time
                direction = question.direction
                if direction != None:
                    direction_dict = {'id': direction.id, 'text': direction.text,'picture': direction.picture}
                else:
                    direction_dict = {'id': None, 'text': None, 'picture': None}
                    
                subject = question.subject
                subject_dict = {'id': subject.id, 'name': subject.name}
                chapter = question.chapter
                dynamicText = question.dynamicText
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True
                    optionPicture = option.picture
                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    option_dict =\
                        {'id': option.id, 'text': option.text, 'picture': optionPicture, 'explanationText': option.explanationText,
                            'explanationPicture': option.explanationPicture, 'correct': option.correct, 'selected': selected}
                    options_list.append(option_dict)
                question_dict =\
                    {'id': question.id, 'text': question.text, 'dynamicText': dynamicText, 'picture': question.picture, 'direction': direction_dict, 'subject': subject_dict,
                        'chapter': chapter_dict, 'marks': question.marks, 'negativeMarks': question.negativeMarks, 'language': question.language, 'source': question.source, 'options': options_list}

                aq_dict = {'id': aq.id, 'question': question_dict,'attempted': attempted, 'right': right, 'time': time}
                attempted_questions_list.append(aq_dict)

            test_marks_dict =\
                {'id': studentMarks.id, 'totalMarks': total_marks, 'time': studentMarks.time, 'attemptedTime': studentMarks.attemptTime,
                    'attemptedQuestions': attempted_questions_list, 'right': right_number, 'wrong': wrong_number, 'skipped': skipped_number}
            context = {'status': 'Success', 'performance': test_marks_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': 'Performance not found'}
        return Response(context)



class AllActiveLiveClasses(APIView):
    def get(self, request):
        try:
            liveVideos = NativeLiveVideo.objects.filter(live=True).order_by('-id')
            live_video_list = []
            for lv in liveVideos:
                lv_dict = {
                        'id': lv.id, 
                        'time': lv.time, 
                        'antMedia': lv.antVideo,
                        'streamId': lv.streamId, 
                        'teacher': lv.teacher.name
                        }
                live_video_list.append(lv_dict)
                
            context = {'liveVideos': live_video_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class TeacherAddDemoVideoPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        video_id = data['video_id']
        try:
            video = Video.objects.get(id=video_id)
            video.locked = False
            video.save()
            package = Package.objects.get(id=package_id)
            try:
                demoContent = PackageDemoContent.objects.get(package=package)
                demoContent.videos.add(video)
                context = {'status': 'Success', 'message': 'Demo Video Added'}
                return Response(context)
            except PackageDemoContent.DoesNotExist:
                demoContent = PackageDemoContent()
                demoContent.package = package
                demoContent.save()
                demoContent.videos.add(video)
                demoContent.save()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddDemoNotePackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        note_id = data['note_id']
        try:
            note = Note.objects.get(id=note_id)
            note.locked = False
            note.save()
            package = Package.objects.get(id=package_id)
            try:
                demoContent = PackageDemoContent.objects.get(package=package)
                demoContent.notes.add(note)
                context = {'status': 'Success', 'message': 'Demo Note Added'}
                return Response(context)
            except PackageDemoContent.DoesNotExist:
                demoContent = PackageDemoContent()
                demoContent.package = package
                demoContent.save()
                demoContent.notes.add(note)
                demoContent.save()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddDemoTestPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        test_id = data['test_id']
        try:
            test = Test.objects.get(id=test_id)
            test.locked = False
            test.save()
            package = Package.objects.get(id=package_id)
            try:
                demoContent = PackageDemoContent.objects.get(package=package)
                demoContent.tests.add(test)
                context = {'status': 'Success', 'message': 'Demo Test Added'}
                return Response(context)
            except PackageDemoContent.DoesNotExist:
                demoContent = PackageDemoContent()
                demoContent.package = package
                demoContent.save()
                demoContent.tests.add(test)
                demoContent.save()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddDemoYoutubeLiveVideoPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        video_id = data['video_id']
        try:
            video = LiveVideoLink.objects.get(id=video_id)
            video.locked = False
            video.save()
            package = Package.objects.get(id=package_id)
            try:
                demoContent = PackageDemoContent.objects.get(package=package)
                demoContent.youtubeLiveVideos.add(video)
                context = {'status': 'Success', 'message': 'Demo Video Added'}
                return Response(context)
            except PackageDemoContent.DoesNotExist:
                demoContent = PackageDemoContent()
                demoContent.package = package
                demoContent.save()
                demoContent.youtubeLiveVideos.add(video)
                demoContent.save()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PackageGetDemoContent(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            demoContent = PackageDemoContent.objects.get(package=package)
            videos = demoContent.videos.all()
            notes = demoContent.notes.all()
            tests = demoContent.tests.all()
            file_tests = demoContent.fileTests.all()
            
            student_helper = StudentPackageHelper(me.profile)
            taken_ftests = student_helper.taken_file_test()
            
            videos_list = []
            for video in videos:
                if video.subject:
                    subject = video.subject.name
                else:
                    subject = 'oldsubject'
                if video.chapter:
                    chapter = video.chapter.name
                else:
                    chapter = 'oldchapter'

                video_dict = {'id': video.id, 'title': video.title, 'url': video.urlLink, 'lowLink': video.lowlink, 'highLink': video.highlink,
                        'publishDate': video.publishDate, 'generalVideo': video.generalVideo, 'subject': subject, 'chapter': chapter}
                videos_list.append(video_dict)
                
            notes_list = []
            for note in notes:
                title = note.title
                publishDate = note.publishDate
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                    
                url_list = [note_link]
                
                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'
                    
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = 'Deleted Chapter'
                    
                try:
                    chapter_id = note.chapter.id
                except:
                    chapter_id = 0
                    
                if note != None:
                    note_dict = {'id': note.id, 'title': title, 'subject_id': note.subject.id, 'subject_name': subject_name,
                                'chapter_id': chapter_id, 'chapter_name': chapter_name, 'publishDate': publishDate, 'note_url': url_list}
                else:
                    note_dict = {}
                notes_list.append(note_dict)
                
            tests_list = []
            for test in tests:
                subjects_list = []
                chapters_list = []
                subjects = test.subjects.all()
                chapters = test.chapters.all()
                for subject in subjects:
                    subjects_list.append(subject.name)
                for chapter in chapters:
                    chapters_list.append(chapter.name)
                numberQuestions = test.questions.all().count()
                test_dict =\
                    {'id': test.id, 'name': test.name, 'subjects': subjects_list, 'chapters': chapters_list,
                        'published': test.published, 'totalMarks': test.totalMarks, 'numberQuestions': numberQuestions, 'time': test.time}
                tests_list.append(test_dict)
                
            file_tests_list = []
            for test in file_tests:
                try:
                    studentMarks = StudentFileTestMarks.objects.get(fileTest=test, student=me.profile)
                    if test.repeatTest == True:
                        studentMarks.delete()
                        taken = False
                    else:
                        taken = True
                except:
                    taken = False
                
                try:
                    subject = test.subject.name
                except:
                    subject = None
                    
                try:
                    chapter = test.chapter.name
                except:
                    chapter = None
                    
                if test.fileTestEndDateTime:
                    if test.fileTestEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                if test in taken_ftests:
                    first_attempt = False
                else:
                    first_attempt = True
                    
                test_dict = {
                        'id': test.id, 
                        'name': test.title, 
                        'totalMarks': test.totalMarks, 
                        'questionFile': test.questionFile, 
                        'solutionsFile': test.solutionsFile, 
                        'subjects': subject,
                        'chapters': chapter, 
                        'testTime': test.testTime, 
                        'locked': test.locked, 
                        'numberQuestions': test.totalQuestion, 
                        'negativeMarks': test.negativeMarks, 
                        'first_attempt': first_attempt, 
                        'testTimeOver': testTimeOver,
                        'repeatTest':test.repeatTest,
                        'taken': taken,
                    }
                file_tests_list.append(test_dict)
            
            context = {
                'demoVideos': videos_list, 
                'demoNotes': notes_list, 
                'demoTests': tests_list,
                'demoFileTests': file_tests_list,
                }
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class TeacherSetCurrentAffairSubject(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        try:
            subject = Subject.objects.get(id=subject_id)
            me.profile.institute.currentAffairsSubjectId = subject.id
            me.profile.institute.save()
            context = {'status': 'Success', 'message': 'Current Affairs Subject Updated'}
        except Subject.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Subject Does not Exist'}
        return Response(context)

class TeacherGetSubjectsCurrentAffairSubject(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            subject_id = me.profile.institute.currentAffairsSubjectId
            subject = Subject.objects.get(id=subject_id)
            subject_name = subject.name
            context = {'status': 'Success', 'subject': subject_id,'subject_name': subject_name}
        except Subject.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Subject Does not Exist'}
        return Response(context)

class TeacherRemoveDemoVideoPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        video = Video.objects.get(id=video_id)
        video.locked = True
        video.save()
        demoContent = PackageDemoContent.objects.get(package=package, videos=video)
        demoContent.videos.remove(video)
        context = {'status': 'Success','message': '{}  removed'.format(video.title)}
        return Response(context)

class TeacherRemoveDemoNotePackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        note_id = data['note_id']
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        note = Note.objects.get(id=note_id)
        note.locked = True
        note.save()
        demoContent = PackageDemoContent.objects.get(package=package, notes=note)
        demoContent.notes.remove(note)
        context = {'status': 'Success','message': '{}  removed'.format(note.title)}
        return Response(context)

class TeacherRemoveDemoTestPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['test_id']
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        test = Test.objects.get(id=test_id)
        test.locked = True
        test.save()
        demoContent = PackageDemoContent.objects.get(package=package, tests=test)
        demoContent.tests.remove(test)
        context = {'status': 'Success','message': '{} test has been removed from package'.format(test.name)}
        return Response(context)

class TeacherRemoveDemoYoutubeLiveVideoPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        video = LiveVideoLink.objects.get(id=video_id)
        video.locked = True
        video.save()
        demoContent = PackageDemoContent.objects.get(package=package, youtubeLiveVideos=video)
        demoContent.youtubeLiveVideos.remove(video)
        context = {'status': 'Success','message': '{}  removed'.format(video.title)}
        return Response(context)

class GetMainTeacher(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        mainTeacher = Teacher.objects.get(institute=me.profile.institute, mainTeacher=True)
        context = {'mainTeacher': mainTeacher.teacheruser.username}
        return Response(context)

class TeacherChangePackagePublishStatus(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package_publish = data['publish']
        if package_publish == 'true' or package_publish == 'false':
            try:
                package = Package.objects.get(id=package_id)
                if str(package_publish) == 'true':
                    package.publish = True
                    
                elif str(package_publish) == 'false':
                    package.publish = False
                    
                package.save()
                context = {'status': 'Success', 'message': package_publish}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed', 'message': 'Please only send true or false'}
        return Response(context)

class TeacherGetCourseList(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        courses = TeacherCourse.objects.all()
        courses_list = []
        for course in courses:
            course_dict = {'id': course.id, 'name': course.name}
            courses_list.append(course_dict)
        context = {'courses': courses_list}
        return Response(context)

class TeacherChangepackageOrder(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_list = data['package_ids']
        packages = package_list.strip('][').split(',')
        for ind, package_id in enumerate(packages):
            pack = Package.objects.get(id=package_id)
            try:
                packageOrder = PackageOrderWise.objects.get(package=pack)
                packageOrder.order = ind+1
                packageOrder.save()
            except PackageOrderWise.DoesNotExist:
                packageOrder = PackageOrderWise()
                packageOrder.package = pack
                packageOrder.order = ind+1
                packageOrder.save()

        context = {'status': 'Success', 'message': 'Order Changed'}
        return Response(context)

class TeacherGetOrderWisePackages(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        packages_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                packages = PackageOrderWise.objects.filter(package__teacher=teacher).order_by('order')
                for pack in packages:
                    package = Package.objects.get(id=pack.package.id)
                    coupon_list = []
                    coupons = CouponCode.objects.filter(package=package.id)
                    for coupon in coupons:
                        coupon_dict = {'id': coupon.id, 'amount': coupon.amount,
                                       'created': coupon.created, 'code': coupon.code}
                        coupon_list.append(coupon_dict)
                    packages_dict = {'id': package.id, 'title': package.title, 'duration': package.duration, 'details': package.details,
                                     'price': package.price, 'coupons': coupon_list, 'thumbnail': package.thumbnail, 'publish': package.publish}
                    packages_list.append(packages_dict)
            context = {'packages': packages_list}
            return Response(context)
        else:
            packages_list = PackageOrderWise.objects.filter(package__teacher=me.profile)
            
        teacher_package = []
        for pack in packages_list:
            package = Package.objects.get(id=pack.package.id)
            coupon_list = []
            coupons = CouponCode.objects.filter(package=package.id)
            for coupon in coupons:
                coupon_dict = {
                    'id': coupon.id, 
                    'amount': coupon.amount,
                    'created': coupon.created, 
                    'code': coupon.code
                    }
                coupon_list.append(coupon_dict)
                
            packages_dict = {
                'id': package.id, 
                'title': package.title, 
                'duration': package.duration, 
                'details': package.details,
                'price': package.price, 
                'thumbnail': package.thumbnail, 
                'coupons': coupon_list, 
                'publish': package.publish
                }
            teacher_package.append(packages_dict)
        context = {'packages': teacher_package}
        return Response(context)

class StudentGetPackagesOrderwise(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        packages_list = []
        for teacher in teachers:
            packages = PackageOrderWise.objects.filter(package__teacher=teacher).order_by('order')
            for pack in packages:
                student_id_list = []
                packs = Package.objects.filter(id=pack.package.id, publish=True)
                for package in packs:
                    students = package.students.all()
                    for student in students:
                        student_id_list.append(student.id)
                        
                    if me.profile.id in student_id_list:
                        bought = True
                    else:
                        bought = False
                        
                    if bought == False:
                        packages_list.append(package)
        final_list = []
        for package in packages_list:
            numberTests = package.tests.all().count()
            numberVideos = package.videos.all().count()
            numberNotes = package.notes.all().count()
            
            package_dict = {
                'id': package.id, 
                'title': package.title, 
                'marketLevelPackage': package.marketLevelPackage, 
                'numberTests': numberTests, 
                'numberVideos': numberVideos, 
                'numberNotes': numberNotes,
                'price': package.price, 
                'duration': package.duration, 
                'bought': False, 
                'details': package.details, 
                'thumbnail': package.thumbnail}
            
            final_list.append(package_dict)
        context = {'packages': final_list}
        return Response(context)

class StudentChapterOrderWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        batches = me.profile.batches.all()
        institute = me.institute
        videos_list = []
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        try:
            chapter = Chapter.objects.get(id=chapter_id)
        except:
            context = {'status': 'Failed', 'message': 'Chapter not found'}
            return Response(context)
        
        video_ordered_list = []
        for batch in batches:
            videoOrder = VideoOrderBatchWise.objects.filter(batch=batch, video__chapter=chapter).order_by('order')
                
            for vo in videoOrder:
                if vo not in video_ordered_list:
                    video_ordered_list.append(vo)
                    
        final_videos_list = []
        bought_videos = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile).select_related('package').prefetch_related('package__videos')
        
        for bp in boughtPackages:
            bought_packages_list.append(bp.package)
            
        for bp in bought_packages_list:
            try:
                videos = bp.videos.all()
                for video in videos:
                    bought_videos.append(video.id)
            except:
                pass

        for video_order in video_ordered_list:
            teachers_list = []
            subject_dict = {'id': video_order.video.subject.id,'name': video_order.video.subject.name}
            chapter_dict =\
                {'id': video_order.video.chapter.id, 'name': video_order.video.chapter.name,
                    'code': video_order.video.chapter.code}
            video_object = video_order.video
            inDemo = video_object.demo_video.all()
            bought = False
            if len(inDemo) > 0:
                bought = True
            if video_order.video.id in bought_videos:
                bought = True
            if video_order.video.locked == False:
                bought = True
            if video_order.video.publish == True:
                video_dict =\
                    {'id': video_order.video.id, 'teacher': teachers_list, 'subject': subject_dict, 'chapter': chapter_dict, 'link': video_order.video.urlLink, 'lowLink': video_order.video.lowlink, 'highLink': video_order.video.highlink,
                        'generalVideo': False, 'publishDate': video_order.video.publishDate, 'title': video_order.video.title, 'bought': bought, 'thumbnail': video_order.video.thumbnail, 'order': video_order.order}
                final_videos_list.append(video_dict)
        context = {'videos': final_videos_list}
        return Response(context)

class TeacherGetPackagesList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        packages_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                packages = Package.objects.filter(teacher=teacher).order_by('-id')
                for package in packages:
                    coupon_list = []
                    coupons = CouponCode.objects.filter(package=package)
                    for coupon in coupons:
                        coupon_dict = {'id': coupon.id, 'amount': coupon.amount,
                                       'created': coupon.created, 'code': coupon.code}
                        coupon_list.append(coupon_dict)
                    students = package.students.all().count()
                    
                    if package.course:
                        course = package.course.id
                    else:
                        course = None
                        
                    packages_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'number_students': students, 
                        'duration': package.duration, 
                        'details': package.details,
                        'price': package.price, 
                        'coupons': coupon_list, 
                        'thumbnail': package.thumbnail, 
                        'publish': package.publish, 
                        'course_id': course
                        }
                    packages_list.append(packages_dict)
            context = {'packages': packages_list}
            return Response(context)
        else:
            packages_list = Package.objects.filter(teacher=me.profile)
            
        teacher_package = []
        for package in packages_list:
            students = package.students.all().count()
            coupon_list = []
            coupons = CouponCode.objects.filter(package=package)
            for coupon in coupons:
                coupon_dict = {'id': coupon.id, 'amount': coupon.amount,
                               'created': coupon.created, 'code': coupon.code}
                coupon_list.append(coupon_dict)
                
            if package.course:
                course = package.course.id
            else:
                course = None
                
            packages_dict = {
                'id': package.id, 
                'title': package.title, 
                'duration': package.duration, 
                'details': package.details,
                'price': package.price, 
                'thumbnail': package.thumbnail, 
                'coupons': coupon_list, 
                'publish': package.publish, 
                'course_id': course
                }
            teacher_package.append(packages_dict)
        context = {'packages': teacher_package}
        return Response(context)

class TeacherChangePackageExchangeStatus(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package_exchange = data['exchange']
        if package_exchange == 'true' or package_exchange == 'false':
            try:
                package = Package.objects.get(id=package_id)
                if str(package_exchange) == 'true':
                    package.exchange = True
                    
                elif str(package_exchange) == 'false':
                    package.exchange = False
                package.save()
                context = {'status': 'Success', 'message': package_exchange}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed','message': 'Please only send true or false'}
        return Response(context)

class PackageGetAllContent(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']

        try:
            package = Package.objects.get(id=package_id)
        except Exception as e:
            return Response(str(e))

        coupons_list = []
        videos_list = []
        notes_list = []
        tests_list = []
        youtube_list = []
        filetests_list = []
        all_videos_list = []
        all_notes_list = []
        all_tests_list = []
        all_filetests_list = []
        all_youtubeLiveVideos_list = []
        all_videos = package.videos.select_related('subject', 'chapter').all()
        all_notes = package.notes.select_related('subject', 'chapter', 'noteurl_note').all()
        all_tests = package.tests.prefetch_related('subjects', 'chapters','questions').filter(publish=True).all()
        all_fileTests = package.fileTests.select_related('subject', 'chapter').filter(publish=True).all()
        all_youtubeLiveVideos = package.youtubeLiveVideos.all()
        
        try:
            coupons = CouponCode.objects.filter(package=package)
            for coupon in coupons:
                cdict = {'code':coupon.code, 'amount':coupon.amount}
                coupons_list.append(cdict)
        except:
            pass
        
        try:
            demoContent = PackageDemoContent.objects.get(package=package)
            videos = demoContent.videos.select_related('subject','chapter').all()
            notes = demoContent.notes.select_related('subject','chapter','noteurl_note').all()
            tests = demoContent.tests.prefetch_related('subjects', 'chapters').filter(publish=True).all()
            fileTests = demoContent.fileTests.select_related('subject', 'chapter').filter(publish=True).all()
            youtubeLiveVideos = demoContent.youtubeLiveVideos.all()
            demo_video_ids = videos.values_list('id', flat=True)
            demo_note_ids = notes.values_list('id', flat=True)
            demo_test_ids = tests.values_list('id', flat=True)
            demo_youtubeLiveVideos_ids = youtubeLiveVideos.values_list('id', flat=True)
            demo_fileTests_ids = fileTests.values_list('id', flat=True)
        except:
            videos = []
            notes = []
            tests = []
            fileTests = []
            youtubeLiveVideos = []
            demo_video_ids = []
            demo_note_ids = []
            demo_test_ids = []
            demo_youtubeLiveVideos_ids = []
            demo_fileTests_ids = []
            
        demo = 'demo'
        
        for video in all_videos:
            if video.id not in demo_video_ids:
                if video.subject:
                    subject = video.subject.name
                else:
                    subject = 'oldsubject'
                    
                if video.chapter:
                    chapter = video.chapter.name
                else:
                    chapter = 'oldchapter'

                video_dict =\
                    {'id': video.id, 'type': '', 'title': video.title, 'url': video.urlLink, 'lowLink': video.lowlink, 'highLink': video.highlink,
                        'publishDate': video.publishDate, 'generalVideo': video.generalVideo, 'subject': subject, 'chapter': chapter}
                all_videos_list.append(video_dict)
                
        for video in videos:
            if video.subject:
                subject = video.subject.name
            else:
                subject = 'oldsubject'
                
            if video.chapter:
                chapter = video.chapter.name
            else:
                chapter = 'oldchapter'

            video_dict =\
                {'id': video.id, 'type': demo, 'title': video.title, 'url': video.urlLink, 'lowLink': video.lowlink, 'highLink': video.highlink,
                    'publishDate': video.publishDate, 'generalVideo': video.generalVideo, 'subject': subject, 'chapter': chapter}
            videos_list.append(video_dict)

        for note in all_notes:
            if note.id not in demo_note_ids:
                title = note.title
                publishDate = note.publishDate
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                url_list = [note_link]
               
                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = 'Deleted Chapter'
                try:
                    chapter_id = note.chapter.id
                except:
                    chapter_id = 0

                note_dict =\
                    {'id': note.id, 'type': "", 'title': title, 'subject_id': note.subject.id, 'subject_name': subject_name,
                        'chapter_id': chapter_id, 'chapter_name': chapter_name, 'publishDate': publishDate, 'note_url': url_list}
                all_notes_list.append(note_dict)
                
        for note in notes:
            title = note.title
            publishDate = note.publishDate
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
            url_list = [note_link]
            
            try:
                subject_name = note.subject.name
            except:
                subject_name = 'Deleted Subject'
            try:
                chapter_name = note.chapter.name
            except:
                chapter_name = 'Deleted Chapter'
            try:
                chapter_id = note.chapter.id
            except:
                chapter_id = 0

            note_dict =\
                {'id': note.id, 'type': demo, 'title': title, 'subject_id': note.subject.id, 'subject_name': subject_name,
                    'chapter_id': chapter_id, 'chapter_name': chapter_name, 'publishDate': publishDate, 'note_url': url_list}
            notes_list.append(note_dict)

        for test in all_tests:
            if test.id not in demo_test_ids:
                subjects_list = []
                chapters_list = []
                subjects = test.subjects.all()
                chapters = test.chapters.all()
                for subject in subjects:
                    subjects_list.append(subject.name)
                    
                for chapter in chapters:
                    chapters_list.append(chapter.name)
                    
                numberQuestions = test.questions.all().count()
                
                sm = StudentMarks.objects.filter(student = me.profile, test__id = test.id).last()
                if sm:
                    test_taken = True
                else:
                    test_taken = False 
                
                
                test_dict = {
                    'id': test.id, 
                    'type': "", 
                    'name': test.name, 
                    'subjects': subjects_list, 
                    'chapters': chapters_list,
                    'totalMarks': test.totalMarks, 
                    'numberQuestions': numberQuestions, 
                    'time': test.time,
                    'test_taken': test_taken,
                    'publish': test.publish,
                    'published': test.published, 
                    }
                all_tests_list.append(test_dict)
                
        for test in tests:
            subjects_list = []
            chapters_list = []
            subjects = test.subjects.all()
            chapters = test.chapters.all()
            
            for subject in subjects:
                subjects_list.append(subject.name)
                
            for chapter in chapters:
                chapters_list.append(chapter.name)
                
            numberQuestions = test.questions.all().count()
            
            sm = StudentMarks.objects.filter(student = me.profile, test__id = test.id).last()
            if sm:
                test_taken = True
            else:
                test_taken = False 
                
            test_dict = {
                'id': test.id, 
                'type': demo, 
                'name': test.name, 
                'subjects': subjects_list, 
                'chapters': chapters_list,
                'totalMarks': test.totalMarks, 
                'numberQuestions': numberQuestions, 
                'time': test.time,
                'test_taken': test_taken,
                'publish': test.publish,
                'published': test.published, 
                }
            tests_list.append(test_dict)

        for ylv in all_youtubeLiveVideos:
            if ylv.id not in demo_youtubeLiveVideos_ids:
                video_dict = {'video_id': ylv.id, 'type': "", 'title': ylv.title,
                              'url': ylv.link, 'generalVideo': False, 'publishDate': ylv.time}
                all_youtubeLiveVideos_list.append(video_dict)

        for ylv in youtubeLiveVideos:
            video_dict = {'video_id': ylv.id, 'type': demo, 'title': ylv.title,
                          'url': ylv.link, 'generalVideo': False, 'publishDate': ylv.time}
            youtube_list.append(video_dict)

        for test in all_fileTests:
            if test.id not in demo_fileTests_ids:
                try:
                    subject = test.subject.name
                except:
                    subject = None
                try:
                    chapter = test.chapter.name
                except:
                    chapter = None
                test_dict = {'id': test.id, 'type': "", 'name': test.title, 'totalMarks': test.totalMarks, 
                             'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subjects': subject,
                             'chapters': chapter, 'testTime': test.testTime, 'locked': test.locked, 
                             'numberQuestions': test.totalQuestion, 'negativeMarks': test.negativeMarks, 
                             'published': test.published, 'publish': test.publish}
                all_filetests_list.append(test_dict)
                
        for test in fileTests:
            try:
                subject = test.subject.name
            except:
                subject = None
            try:
                chapter = test.chapter.name
            except:
                chapter = None
                
            test_dict = {'id': test.id, 'type': demo, 'name': test.title, 'totalMarks': test.totalMarks, 
                         'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subjects': subject,
                         'chapters': chapter, 'testTime': test.testTime, 'locked': test.locked, 
                         'numberQuestions': test.totalQuestion, 'negativeMarks': test.negativeMarks, 
                         'published': test.published, 'publish': test.publish}
            filetests_list.append(test_dict)
            
        videosDateWise = videos_list + all_videos_list
        videosDateWise = sorted(videosDateWise, key=lambda i: i['publishDate'], reverse=False)

        notesDateWise = notes_list + all_notes_list
        notesDateWise = sorted(notesDateWise, key=lambda i: i['publishDate'], reverse=False)

        testsDateWise = tests_list + all_tests_list
        testsDateWise = sorted(testsDateWise, key=lambda i: i['published'], reverse=False)

        fileTestsDateWise = filetests_list + all_filetests_list
        fileTestsDateWise = sorted(fileTestsDateWise, key=lambda i: i['published'], reverse=False)
        
        youtubeLiveVideosDateWise = all_youtubeLiveVideos_list + youtube_list
        youtubeLiveVideosDateWise = sorted(youtubeLiveVideosDateWise, key=lambda i: i['publishDate'], reverse=False)

        context = {
            'demoNotes': notesDateWise, 
            'demoTests': testsDateWise,
            'demoVideos': videosDateWise, 
            'fileTestsDateWise': fileTestsDateWise,
            'youtubeLiveVideosDateWise': youtubeLiveVideosDateWise, 
            'coupons_list': coupons_list,
            }
        return Response(context)

class QuestionChangeCorrectAnswer(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            correct_option_id = data['correct_id']
            option = Option.objects.get(id=correct_option_id)
            question = option.question
            all_options = Option.objects.filter(question=question)
            for opt in all_options:
                opt.correct = False
                opt.save()
            option.correct = True
            option.save()
            context = {'status': 'Success', 'message': 'Correct Option Changed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateBook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            name = data['name']
            max_price = data['max_price']
            actual_price = data['actual_price']
            discount = data['discount']
            description = data['description']
            
            try:
                coverPhoto = data['cover_photo']
            except:
                coverPhoto = None

            try:
                publisher = data['publisher']
            except:
                publisher = None
                
            try:
                bookCategory_id = data['bookCategory_id']
                bookCategory_id = bookCategory_id.strip('][').split(',')
            except:
                bookCategory_id = None

            try:
                bookPhotos = data['bookPhotos']
            except:
                bookPhotos = None
                
            try:
                shippingCharges = data['shippingCharges']
            except:
                shippingCharges = 0.0

            actual_price = float(actual_price)
            book = Book()
            book.name = name
            book.teacher = me.profile
            book.maxPrice = max_price
            book.actualPrice = actual_price
            book.discount = float(max_price) - float(actual_price)
            book.publisher = publisher
            book.description = description
            book.shippingCharges = shippingCharges
            
            if bookPhotos:
                bookPhotos = bookPhotos.strip('][').split(',')
                book.bookPhotos = bookPhotos
            else:
                book.bookPhotos = []

            if coverPhoto:
                book.coverPhoto = coverPhoto
                
            book.save()
            
            if bookCategory_id:
                bc = BookCategory.objects.filter(id__in=bookCategory_id)
                book.categories.add(*bc)

            context = {'status': 'Success', 'book_id': book.id}
            
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
            
        return Response(context)
    
class TeacherEditBook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            book_id = data['book_id']
            name = data['name']
            maxPrice = data['maxPrice']
            actualPrice = data['actualPrice']
            discount = data['discount']
            cover_photo = data['cover_photo']
            publisher = data['publisher']
            description = data['description']
            
            try:
                bookCategory_id = data['bookCategory_id']
                bookCategory_id = bookCategory_id.strip('][').split(',')
            except:
                bookCategory_id = None

            try:
                bookPhotos = data['bookPhotos']
            except:
                bookPhotos = None
                
            try:
                shippingCharges = data['shippingCharges']
            except:
                shippingCharges = 0.0

            book = Book.objects.get(id=book_id)
            book.shippingCharges = shippingCharges
            book.save()
            
            if name != None or name != '':
                book.name = name
                book.save()
                
            if maxPrice != None or maxPrice != '':
                book.maxPrice = maxPrice
                book.save()
                
            if actualPrice != None or actualPrice != '':
                book.actualPrice = actualPrice
                book.save()
                
            if discount != None or discount != '':
                book.discount = discount
                book.save()

            if cover_photo != None or cover_photo != '':
                book.cover_photo = cover_photo
                book.save()
                
            if publisher != None or publisher != '':
                book.publisher = publisher
                book.save()
                
            if description != None or description != '':
                book.description = description
                book.save()

            if bookPhotos:
                bookPhotos = bookPhotos.replace('"', '')
                bookPhotos = bookPhotos.strip('][').split(',')
                book.bookPhotos = bookPhotos
                book.save()

            else:
                book.bookPhotos = []
                book.save()

            if bookCategory_id:
                book.categories.clear()
                bc = BookCategory.objects.filter(id__in=bookCategory_id)
                book.categories.add(*bc)

            context = {'status': 'Success', 'message': 'Book Updated'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherGetbooks(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        books = Book.objects.filter(teacher=me.profile)
        books_list = []
        for book in books:
            bookCategory_id = book.categories.all().values()
            students = book.students.all()
            student_list = [] 
            for student in students:
                student_dict = {'id':student.id, 'name':student.name}
                student_list.append(student_dict)
                
            books_dict = {
                'id': book.id, 
                'name': book.name, 
                'maxPrice': book.maxPrice, 
                'actualPrice': book.actualPrice, 
                'discount': book.discount,
                'shippingCharges': book.shippingCharges,
                'cover_photo': book.coverPhoto, 
                'publisher': book.publisher, 
                'descriiption': book.description, 
                'bookPhotos': book.bookPhotos, 
                'bookCategory_id': bookCategory_id,
                'student_list': student_list,
                }
            books_list.append(books_dict)
        context = {'books': books_list}
        return Response(context)

class GetBookStudents(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        book_id = data['book_id']
        book = Book.objects.get(id=book_id)
        students = book.students.all()
        student_book_list = []
        for student in students:
            try:
                student_details = StudentDetails.objects.get(student=student)
                fullName = student_details.fullName
                phone = student_details.phone
                address = student_details.address
                city = student_details.city

                student_dict = {
                    'id': student.id, 
                    'name': student.name,
                    'fullName': fullName, 
                    'phone': phone, 
                    'city': city, 
                    'address': address
                    }
                studentbook = StudentBook.objects.filter(book=book, student=student)
                for sb in studentbook:
                    studentBook_dict = {'id': sb.id, 'date': sb.date, 'isComplete': sb.isComplete,
                                        'quantity': sb.quantity, 'dispatche': sb.dispatche, 'delivered': sb.delivered}
                    paidbook = PaidAmountStudentBook.objects.filter(studentBook=sb)
                    paid_list = []
                    for pp in paidbook:
                        pp_dict = {'id': pp.id,'paid': pp.paidAmount, 'date': pp.date}
                        paid_list.append(pp_dict)
                        
                    book_details = {'total buyers': len(students), 'student': student_dict, 'paid_details': paid_list, 'studentBook_dict': studentBook_dict}
                    student_book_list.append(book_details)
            except Exception as e:
                print(str(e))
        context = {'studentbooks': student_book_list}
        return Response(context)

class TeacherChangeStatusBookBuyer(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        studentBook_id = data['studentBook_id']
        isComplete = data['isComplete']
        try:
            studentbook = StudentBook.objects.get(id=studentBook_id)
            if isComplete == 'true':
                studentbook.isComplete = True
            else:
                studentbook.isComplete = False
            studentbook.save()
            context = {'status': 'success', 'message': 'Successfully Update'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetBooks(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            books_list = []
            for teacher in teachers:
                books = Book.objects.filter(teacher=teacher).order_by('-id')
                for book in books:
                    student_id_list = []
                    students = book.students.all()
                    for student in students:
                        student_id_list.append(student.id)
                        
                    if me.profile.id in student_id_list:
                        bought = True
                    else:
                        bought = False
                    
                    book_dict = {'id': book.id, 
                                'name': book.name, 
                                'maxPrice': book.maxPrice, 
                                'actualPrice': book.actualPrice, 
                                '': bought, 
                                'discount': book.discount,
                                'cover_photo': book.coverPhoto, 
                                'publisher': book.publisher, 
                                'descriiption': book.description, 
                                'bookPhotos': book.bookPhotos
                                }
                    books_list.append(book_dict)
            
            context = {'status':True, 'books': books_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class StudentGetBoughtBooks(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            books_list = []
            student_books = StudentBook.objects.filter(student=me.profile).select_related('book').order_by('-id')
            for sb in student_books:
                if sb.book:  
                    try:
                        coupon_code = BookCouponCode.objects.get(book=sb.book, couponUsedStudents=me.profile)
                        if coupon_code:
                            has_used_coupon = True
                            coupon_price = coupon_code.amount
                    except:
                        has_used_coupon = False
                        coupon_price = None
                      
                    book_dict = {
                        'id': sb.book.id, 
                        'name': sb.book.name, 
                        'cover_photo': sb.book.coverPhoto, 
                        'publisher': sb.book.publisher, 
                        'maxPrice': sb.book.maxPrice,
                        'discount': sb.book.discount,
                        'actualPrice': sb.book.actualPrice,
                        'shippingCharges': sb.book.shippingCharges,
                        'has_used_coupon': has_used_coupon,  
                        'coupon_price': coupon_price,  
                        }
                    books_list.append(book_dict)
    
            context = {'status':True, 'books': books_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)
    
class StudentBookReceipt(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        book_id = data['book_id']
        try:
            book = Book.objects.get(id = book_id)
            record = StudentBook.objects.filter(student=me.profile, book__id = book_id).last()
            book_dict = {
                'id': book.id, 
                'name': book.name, 
                'cover_photo': book.coverPhoto, 
                'publisher': book.publisher, 
                'maxPrice': book.maxPrice,
                'actualPrice': book.actualPrice,
                'discount': book.discount,
                'shippingCharges': book.shippingCharges,
                'address': record.address,
                'city': record.city,
                'state': record.state,
                'pincode': record.pincode,
                'quantity': record.quantity,
            }
    
            context = {'status':True, 'book_dict': book_dict}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class StudentIndividualBookDetail(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        book_id = data['book_id']
        book = Book.objects.get(id=book_id)
        students = book.students.all()
        all_students_list = []
        for student in students:
            all_students_list.append(student.id)
            
        if me.profile.id in all_students_list:
            bought = True
        else:
            bought = False
            
        book_dict = {
            'id': book.id, 
            'name': book.name, 
            'bought': bought, 
            'maxPrice': book.maxPrice, 
            'actualPrice': book.actualPrice, 
            'discount': book.discount,
            'cover_photo': book.coverPhoto, 
            'publisher': book.publisher, 
            'descriiption': book.description, 
            'bookPhotos': book.bookPhotos,
            'shippingCharges': book.shippingCharges,
            }
        context = {'books': book_dict}
        return Response(context)

class StudentBuyBook(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            book_id = data['book_id']
            amount = float(data['amount'])
            quantity = data.get('quantity')

            book = Book.objects.get(id=book_id)
            book.students.add(me.profile)
            book.save()
            
            try:
                coupon_id = data['coupon_id']
                coupon = BookCouponCode.objects.get(id=coupon_id, book=book)
                coupon.couponUsedStudents.add(me.profile)
                coupon.save()
            except:
                pass
        
            try:
                student_details = StudentDetails.objects.get(student=me.profile)
                address = student_details.address
                city = student_details.city
                state = student_details.state
                pincode = student_details.pincode
            except:
                address = None
                city = None
                state = None
                pincode = None
            
            details = StudentBook()
            details.book = book
            details.student = me.profile
            details.address = address
            details.city = city
            details.state = state
            details.pincode = pincode
            details.quantity = quantity
            details.save()
            
            paid_detail = PaidAmountStudentBook()
            paid_detail.studentBook = details
            paid_detail.paidAmount = amount
            paid_detail.save()
            
            try:
                payment = EaseBuzzPaymentResponseRecord.objects.get(payment=data['txnid'])
                payment.books_buy = paid_detail
                payment.save()
            except:
                pass
            
            context = {'status': 'Success', 'message': 'Transaction Successfully Done, Your Book is on the Way'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteBook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        book_id = data['book_id']
        book = Book.objects.get(id=book_id)
        book.delete()
        context = {'message': 'Book Deleted'}
        return Response(context)

class StudentGetPackageTestList(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            videos = package.videos.all()
            tests_list = []
            tests = package.tests.all()
            for test in tests:
                if test.publish == True:
                    numberQuestions = test.questions.all().count()
                    test_dict = {'id': test.id, 'name': test.name, 'time': test.time, 'totalMarks': test.totalMarks,
                                    'publisehd': test.published, 'numberQuestions': numberQuestions}
                    tests_list.append(test_dict)
                
            context = {'tests': tests_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class StudentMyPackageGetTimeTables(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            timeTables = TimeTable.objects.filter(package=package)
            time_table_list = []
            for tt in timeTables:
                tt_dict = {'id': tt.id, 'startTime': tt.startTime, 'endTime': tt.endTime,
                        'description': tt.description, 'subject': tt.subject.name, 'chapter': tt.chapter.name}
                time_table_list.append(tt_dict)
            context = {'time_table_list': time_table_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class TeacherDeleteQuestion(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        q_id = data['question_id']
        try:
            question = Question.objects.get(id=q_id)
            context = {'status': 'Success', 'message': 'Question not Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetTopicChapterWise(APIView):
    def post(self, request):
        data = request.data
        chapter_id = data['chapter_id']
        topics = QuestionTopic.objects.filter(chapters=chapter_id).order_by('id')
        topics_list = []
        for topic in topics:
            topic_dict = {'id': topic.id, 'topic': topic.topic}
            topics_list.append(topic_dict)
        context = {'topics': topics_list}
        return Response(context)

class GetSubTopic_topicWise(APIView):
    def post(self, request):
        data = request.data
        topic_id = data['topic_id']
        Sub_topics = QuestionSubTopic.objects.filter(topic=topic_id).order_by('id')
        sub_topics_list = []
        for Sub_topic in Sub_topics:
            sub_topic_dict = {'id': Sub_topic.id, 'sub_topic': Sub_topic.name}
            sub_topics_list.append(sub_topic_dict)
        context = {'sub_topics': sub_topics_list}
        return Response(context)

class TeacherCreateGoogleMeetLive(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        title = data['title']
        link = data['link']
        batches = data['batches_ids']
        batch_list = batches.strip('][').split(',')
        
        google_meet = GoogleMeetLive()
        google_meet.teacher = me.profile
        google_meet.title = title
        google_meet.link = link
        google_meet.time = timezone.now()
        google_meet.save()
        
        try:
            server_key = me.profile.institute.serverKey
        except Exception as e:
            server_key = None
            
        try:
            json_file_url = me.profile.institute.json_file
        except Exception as e:
            json_file_url = None
            
        notification = {"title": f"LIVE CLASS", "body": '{} has started a live video'.format(title)}
        data = {"id":str(google_meet.id),"type": "google_meet_live","title":str(google_meet.title) ,"link":str(google_meet.link)}
        
        if me.profile.photo:
            notification["image"] = f"{me.profile.photo}"
            
        for bat in batch_list:
            batch = Batch.objects.get(id=bat)
            google_meet.batches.add(batch)
            students = Student.objects.filter(batches=batch)
            google_meet.students.add(*students)
            google_meet.save()
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat), data = data)
            else:
                send_notification_to_multipurpose_new(json_file_url = json_file_url, notification = notification, batch_id = int(bat), data = data)
                
        context = {'status': 'Success'}
        return Response(context)

class TeacherCreatePackageGoogleMeetLive(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        title = data['title']
        link = data['link']
        packages = data['packages_ids']
        package_list = packages.strip('][').split(',')
        google_meet = GoogleMeetLive()
        google_meet.teacher = me.profile
        google_meet.title = title
        google_meet.link = link
        google_meet.time = timezone.now()
        google_meet.save()
        
        try:
            server_key = me.profile.institute.serverKey
        except Exception as e:
            server_key = None
            
        try:
            json_file_url = me.profile.institute.json_file
        except Exception as e:
            json_file_url = None
            
        notification = {"title": f"LIVE CLASS","body": '{} has started a live video'.format(me.profile.name),}
        data = {"id":str(google_meet.id),"type": "google_meet_live","title":str(google_meet.title),"link":str(google_meet.link)}
        
        if me.profile.photo:
            notification["image"] = f"{me.profile.photo}"
            
        for pack_id in package_list:
            package = Package.objects.get(id=pack_id)
            students = package.students.all()
            google_meet.packages.add(package)
            google_meet.students.add(*students)
            google_meet.save()
            institute_code= me.profile.institute.code
            if not institute_code =="mbca":
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=int(pack_id))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=int(pack_id))
                
        context = {'status': 'Success'}
        return Response(context)

class DeactivateGoogleMeet(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        meet_id = data['g_meet_id']
        try:
            meet_video = GoogleMeetLive.objects.get(id=meet_id)
            meet_video.live = False
            meet_video.save()
            
        except GoogleMeetLive.DoesNotExist:
            netiv_video = NativeLiveVideo.objects.get(id=meet_id)
            netiv_video.live = False
            netiv_video.save()
            
        context = {'status': 'Success', 'message': 'Video Deactivated'}
        return Response(context)

class GetListLiveActiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        video_list = []
        nv_list = []
        g_meet_list = []
        nativeLiveVideos = NativeLiveVideo.objects.filter(teacher=me.profile, live=True).select_related('teacher').order_by('-id')
        for nlv in nativeLiveVideos:
            if nlv in nv_list:
                continue
            else:
                nv_list.append(nlv)
        g_meet = GoogleMeetLive.objects.filter(teacher=me.profile, live=True).select_related('teacher').order_by('-id')
        
        for gm in g_meet:
            if gm in g_meet_list:
                continue
            else:
                g_meet_list.append(gm)
                
        for gm in g_meet_list:
            try:
                teacher = gm.teacher
                teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': teacher.photo}
                live_dict =\
                    {'id': gm.id, 'teacher': teacher_dict, 'time': gm.time, 'live': gm.live,
                        'antVideo': False, 'streamId': gm.link, 'multipeer': False}
                video_list.append(live_dict)
            except:
                pass
            
        for live in nv_list:
            try:
                teacher = live.teacher
                teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': teacher.photo}
                live_dict =\
                    {'id': live.id, 'teacher': teacher_dict, 'time': live.time, 'live': live.live,
                        'antVideo': live.antVideo, 'streamId': live.streamId, 'multipeer': live.multipeer}
                video_list.append(live_dict)
            except Exception as e:
                print(str(e))
        context = {'active_videos': video_list}
        return Response(context)

class StudentGetAllNotesBtachWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        batch = Batch.objects.get(id=batch_id)
        notes = batch.notes_batches.all().order_by('-id')
        final_notes_list = []
        bought_notes = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for i in boughtPackages:
            try:
                for note in i.package.notes.all():
                    bought_notes.append(note.id)
            except Exception as e:
                pass
            
        for note in notes:
            topic_list = []
            subtopic_list = []
            try:
                subject_dict = {'id': note.subject.id,'name': note.subject.name}
            except:
                subject_dict = {'id': None, 'name': 'General'}
                
            try:
                chapter_dict = {'id': note.chapter.id,'name': note.chapter.name, 'code': note.chapter.code}
            except:
                chapter_dict = {'id': None, 'name': 'General', 'code': None}

            try:
                topics = note.topic.all()
                for topic in topics:
                    topic_dict = {'id': topic.id, 'topic': topic.topic}
                    topic_list.append(topic_dict)
            except:
                topic_dict = {'id': None, 'topic': 'General'}
                topic_list.append(topic_dict)

            try:
                subtopics = note.subTopic.all()
                for subtopic in subtopics:
                    subtopic_dict = {'id': subtopic.id,'subtopic': subtopic.name}
                    subtopic_list.append(subtopic_dict)
            except:
                chapter_dict = {'id': None, 'name': 'General'}
                subtopic_list.append(subtopic_dict)

            bought = False
            if note.id in bought_notes:
                bought = True
                
            if note.locked == False:
                bought = True
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
            notes_dict = {'id': note.id, 'title': note.title, 'locked': note.locked, 'link': note_link, 'bought': bought, 'publishDate': note.publishDate.date(
            ), 'subject': subject_dict, 'chapter': chapter_dict, 'topic': topic_list, 'subTopic': subtopic_list}
            final_notes_list.append(notes_dict)
        context = {'notes': final_notes_list}
        return Response(context)

class StudentGetAllTestsBtachWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        batch = Batch.objects.get(id=batch_id)
        tests = batch.test_set.all().order_by('-id')

        final_tests_list = []
        test_list = []
        taken_tests = StudentMarks.objects.filter(student=me.profile).values_list('test__id', flat=True)
        for to in tests:
            if to.id in taken_tests:
                pass
            else:
                test_list.append(to)

        bought_tests = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        for i in boughtPackages:
            try:
                for test in i.package.tests.all():
                    bought_tests.append(test.id)
            except Exception as e:
                pass

        for test in test_list:
            subjects_list = []
            chapters_list = []
            batches_list = []
            try:
                subjects = test.subjects.all()
                for sub in subjects:
                    subject_dict = {'id': sub.id, 'name': sub.name}
                    subjects_list.append(subject_dict)
            except:
                subject_dict = {'id': None, 'name': 'General'}
                subjects_list.append(subject_dict)
                
            try:
                chapters = test.chapters.all()
                for chap in chapters:
                    chapter_dict = {'id': chap.id,'name': chap.name, 'code': chap.code}
                    chapters_list.append(chapter_dict)
            except:
                chapter_dict = {'id': None, 'name': 'General', 'code': None}
                chapters_list.append(chapter_dict)

            try:
                batches = test.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
            except Exception as e:
                pass

            numberQuestions = test.questions.all().count()

            bought = False
            if test.id in bought_tests:
                bought = True
                
            if test.locked == False:
                bought = True

            tests_dict = {
                'id': test.id, 
                'name': test.name, 
                'totalMarks': test.totalMarks, 
                'published': test.published, 
                'time': test.time, 
                'publish': test.publish, 
                'bought': bought, 
                'locked': test.locked,
                'numberQuestions': numberQuestions, 
                'passing_marks': test.passing_marks, 
                'subjects': subjects_list, 
                'chapters': chapters_list, 
                'batches': batches_list, 
                'studentWillAttemptQuestions': test.studentWillAttemptQuestions
                }
            final_tests_list.append(tests_dict)
        context = {'tests': final_tests_list}
        return Response(context)

class TeacherEditTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        topic_id = data['topic_id']
        name = data['name']
        try:
            thumbnail = data['thumbnail']
        except:
            thumbnail = ""
            
        try:
            topic = QuestionTopic.objects.get(id=topic_id)
            topic.thumbNail=thumbnail
            topic.topic = name
            topic.save()
            context = {'status': 'Success','message': 'Topic Edit Successful'}
        
        except QuestionTopic.DoesNotExist:
            context = {'status': 'error', 'message': 'Topic Not Found'}
            
        return Response(context)

class TeacherEditSubTopic(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subtopic_id = data['subTopic_id']
        name = data['name']
        try:
            subtopic = QuestionSubTopic.objects.get(id=subtopic_id)
            subtopic.name = name
            subtopic.save()
            context = {'status': 'Success','message': 'Sub Topic Edit Successful'}
        except QuestionTopic.DoesNotExist:
            context = {'status': 'error', 'message': 'Sub Topic not Found'}
        return Response(context)

class StudentGetChapterwisePackageVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        try:
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            package = Package.objects.get(id=package_id)
        except Exception as e:
            context = {'videos': []}
            return Response(context)
        
        videos = package.videos.select_related("subject", "chapter").filter(
            subject=subject, chapter=chapter, publish=True).order_by('id').distinct()
        
        package_demo_object = PackageDemoContentHelper(package)
        
        videos_list = []
        for video in videos:
            chapter_name = video.chapter.name
            isDemo = package_demo_object.check_video_demo(video)
            
            if video.download_link:
                download_link = video.download_link
            else:
                download_link = ""
                
            vision = True
            if video.viewsLimite:
                vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                
            video_dict = {
                'id':video.id,
                'video_id': video.id, 
                'title': video.title, 
                'url': video.urlLink, 
                'download_link': download_link, 
                'lowLink': video.lowlink, 
                'highLink': video.highlink, 
                'generalVideo': video.generalVideo,
                'publishDate': video.publishDate, 
                'subject': video.subject.name, 
                'chapter': chapter_name, 
                'thumbnail': video.thumbnail, 
                'demo': isDemo,
                'vision': vision,
                }
            videos_list.append(video_dict)
        context = {'videos': videos_list}
        return Response(context)

class StudentGetChapterwisePackageNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            package = Package.objects.get(id=package_id)
            chapter = Chapter.objects.select_related('subject').get(id=chapter_id)
            subject = chapter.subject
            
            notes = package.notes.select_related('subject','chapter','noteurl_note').all()
            package_demo_object = PackageDemoContentHelper(package)
            
            notes_list = []
            for note in notes:
                if note.subject == subject and note.chapter == chapter:
                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    chapter_name = note.chapter.name
                    isDemo = package_demo_object.check_note_demo(note)

                    note_dict = {
                        'id': note.id,
                        'note_id': note.id, 
                        'title': note.title, 
                        'thumbnail': note.thumbnail, 
                        'subject': note.subject.name, 
                        'chapter': chapter_name,
                        'publishDate': note.publishDate, 
                        'url': note_link, 
                        'demo': isDemo
                        }
                    notes_list.append(note_dict)
                
            context = {'notes': notes_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class StudentGetChapterwisePackageTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)
            tests = package.tests.filter(chapters__id=chapter_id,publish=True).prefetch_related('subjects','chapters')
            total_tests = tests.count()
            test_ids = [test.id for test in tests]
            package_demo_object = PackageDemoContentHelper(package)
            cleared_tests = [] 
            tests_list = []
            for test in tests:
                chapters = test.chapters.all()
                test_result = StudentMarks.objects.filter(test = test, student = me.profile).first()
                
                if test_result:
                    if test.id not in cleared_tests and test_result.result == 'pass':
                        cleared_tests.append(test.id)

                if cleared_tests and cleared_tests[-1] == test.id:
                    test_status = True
                else:
                    test_status = False

                if cleared_tests:
                    last_test_id = cleared_tests[-1]
                    index_value = test_ids.index(last_test_id)
                    if index_value < len(test_ids) - 1:
                        next_test_id = test_ids[index_value + 1]
                        if test.id == next_test_id:
                            test_status = True
                
                if test.id == test_ids[0]: 
                    test_status = True

                subjects_list = []
                subjects = test.subjects.all()
                for subject in subjects:
                    subjects_list.append(subject.name)
                    
                chapters_list = []
                chapters = test.chapters.all()
                for chapter in chapters:
                    chapters_list.append(chapter.name)
                    
                numberQuestions = test.questions.all().count()
                isDemo = package_demo_object.check_test_demo(test)
                
                if test.testEndDateTime:
                    if test.testEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False
                
                test_dict = {
                    'test_status': test_status,
                    'id': test.id, 
                    'name': test.name, 
                    'subject': subjects_list, 
                    'chapter': chapters_list, 
                    'time': test.time,
                    'totalMarks': test.totalMarks, 
                    'publisehd': test.published, 
                    'numberQuestions': numberQuestions, 
                    'demo': isDemo,
                    'testTimeOver':testTimeOver,
                    }
                tests_list.append(test_dict)
                    
            context = {'status':True,'total_tests':total_tests, 'tests': tests_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentGetChapterwisePackageFileTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            package = Package.objects.get(id=package_id)
            chapter = Chapter.objects.get(id=chapter_id)
            fileTests_list = []
            fileTests = package.fileTests.filter(chapter=chapter, publish=True)
            package_demo_object = PackageDemoContentHelper(package)
            for test in fileTests:
                subject = test.subject.name
                chapter = test.chapter.name
                demoContent = PackageDemoContent.objects.filter(fileTests=test)
                isDemo = package_demo_object.check_fileTest_demo(test)
                test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile, 'subjects': subject,
                                'chapters': chapter, 'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'negativeMarks': test.negativeMarks, 'isDemo': isDemo}
                fileTests_list.append(test_dict)
                
            context = {'fileTests_list': fileTests_list}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)} 
             
        return Response(context)

class TeacherGetChaptersSubjectWiseForTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
            chapters = Test.objects.filter(createdBy__in=teachers, chapters__subject=subject).values(
                'chapters__id', 'chapters__name').order_by('-chapters__id')
            chapters = Test.objects.filter(chapters__subject=subject).values('chapters__id', 'chapters__name').order_by('-chapters__id')
        else:
            chapters = Test.objects.filter(createdBy__subjects=subject, chapters__subject=subject).values(
                'chapters__id', 'chapters__name').order_by('-chapters__id')
            chapters = Test.objects.filter(Q(createdBy__subjects=subject) | Q(createdBy=me.profile),chapters__subject=subject).values('chapters__id', 'chapters__name').order_by('-chapters__id')
            
        chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
        context = {'all_chapters': chapters}
        return Response(context)

class TeacherGetChaptersSubjectWiseForFileTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
            chapters = FileTest.objects.filter(createdBy__in=teachers, chapter__subject=subject).values(
                'chapter__id', 'chapter__name').order_by('-chapter__id')
        else:
            chapters = FileTest.objects.filter(createdBy=me.profile, chapter__subject=subject).values(
                'chapter__id', 'chapter__name').order_by('-chapter__id')
            
        chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
        context = {'all_chapters': chapters}
        return Response(context)

class GetChaptersSubjectAndPackageWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            subject_id = data['subject_id']
            content_type = data.get('content_type')
            package = Package.objects.get(id=package_id)
            if subject_id and subject_id != 'null':
                if content_type == 'notes':
                    chapters = package.notes.all().filter(chapter__subject=subject_id).values(
                        'chapter__id', 'chapter__name').order_by('chapter__id')
                    
                elif content_type == 'videos':
                    chapters = package.videos.all().filter(chapter__subject=subject_id).values(
                        'chapter__id', 'chapter__name').order_by('chapter__id')
                else:
                    chapters = package.tests.all().filter(chapters__subject=subject_id).values(
                        'chapters__id', 'chapters__name').order_by('chapters__id')
                    
                chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
                context = {'all_chapters': chapters}
            else:
                chapters = []
                context = {'status':True, 'all_chapters': chapters}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)
    
class GetChaptersSubjectAndPackageWisePagination(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            page = data['page']
            item_page = 20
            start_index = int(page) * item_page
            end_index = int(start_index) + item_page
            package_id = data['package_id']
            subject_id = data['subject_id']
            content_type = data.get('content_type')
            package = Package.objects.get(id=package_id)
            if subject_id and subject_id != 'null':
                if content_type == 'notes':
                    chapters = package.notes.all().filter(chapter__subject=subject_id).values(
                        'chapter__id', 'chapter__name').order_by('chapter__id')[start_index:end_index]
                    
                elif content_type == 'videos':
                    chapters = package.videos.all().filter(chapter__subject=subject_id).values(
                        'chapter__id', 'chapter__name').order_by('chapter__id')[start_index:end_index]
                else:
                    chapters = package.tests.all().filter(chapters__subject=subject_id).values(
                        'chapters__id', 'chapters__name').order_by('chapters__id')[start_index:end_index]
                    
                chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
                context = {'all_chapters': chapters}
            else:
                chapters = []
                context = {'status':True, 'all_chapters': chapters}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class TeacherGetUploadedContent(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
            totalBanners = Banner.objects.filter(institute=me.profile.institute).count()
            teachersObj = Teacher.objects.filter(institute=me.profile.institute)
            teachers = teachersObj.values_list('id', flat=True)
            totalNotes = Note.objects.filter(teacher__in=teachers).distinct().count()
            totalVideos = Video.objects.filter(teacher__in=teachers).distinct().count()
            totalYoutubeVideo = LiveVideoLink.objects.filter(teacher__in=teachers).distinct().count()
            totalBatches = Batch.objects.filter(institute=me.profile.institute).count()
            subjects_list = []
            for i in teachersObj:
                for k in i.subjects.all():
                    if k.id not in subjects_list:
                        subjects_list.append(k.id)
            
            context = {
                'totalNotes': totalNotes, 
                'totalVideos': totalVideos + totalYoutubeVideo, 
                'totalBanners': totalBanners,
                'totalBatches': totalBatches, 
                'totalSubjects': len(subjects_list)
                }
        except Exception as e:
            context = {'message': str(e)}
        return Response(context)

class InstamojoWebhook(APIView):
    def post(self, request):
        data = request.data
        phone = data['buyer_phone']
        name = data['buyer_name']
        status = data['status']
        payment_id = data['payment_id']
        instamojo_status = InstamojoStatus()
        instamojo_status.phone = phone
        instamojo_status.name = name
        instamojo_status.status = status
        instamojo_status.payment_id = payment_id
        instamojo_status.save()
        context = {'phone': phone, 'name': name, 'status': status}
        print('instamojo context {}'.format(context))
        return Response(context)

class CheckInstamojoStatus(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        phone = data['phone']
        instamojo_status = InstamojoStatus.objects.filter(phone=phone).order_by('-id')
        instamojo_object = instamojo_status[0]
        paid = False
        if instamojo_object.status != 'Failed':
            paid = True
        context = {'paid': paid}
        return Response(context)

class TeacherUploadVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        title = data['title']
        chapter_id = data['chapter_id']
        batches = data['batchList']
        publish_status = data['publishStatus']
        url = data['url']

        try:
            viewsLimite = data['viewsLimite']
        except:
            viewsLimite = None

        batches_list = batches.strip('][').split(',')

        try:
            topic_id = data['topic_id']
            topic = QuestionTopic.objects.get(id=topic_id)
        except:
            topic = None

        try:
            subtopic_id = data['subtopic_id']
            sub_topic = QuestionSubTopic.objects.get(id=subtopic_id)
        except:
            sub_topic = None

        try:
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            upload_video = Video()
            upload_video.title = title
            upload_video.subject = subject
            upload_video.chapter = chapter
            upload_video.topics = topic
            upload_video.subTopics = sub_topic
            upload_video.urlLink = url

            if viewsLimite == '0':
                upload_video.viewsLimite = None
            else:
                if viewsLimite.isnumeric():
                    upload_video.viewsLimite = viewsLimite

            if publish_status == 'true':
                upload_video.publish = True
            else:
                upload_video.publish = False

            upload_video.save()
            upload_video.teacher.add(me.profile)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"LIVE CLASS","body": f'A New Video {title} of {subject.name} has been Uploaded for you by {me.profile.name}',}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"
                
            data = {"id":str(upload_video.id),"type": "video","title":str(upload_video.title) ,"link":str(upload_video.urlLink)}
            
            for bat in batches_list:
                batch = Batch.objects.get(id=int(bat))
                upload_video.batches.add(batch)
                upload_video.save()
                videoOrder = VideoOrderBatchWise()  # creating the orderbatchwise object
                videoOrder.batch = batch
                videoOrder.order = 0
                videoOrder.video = upload_video
                videoOrder.save()
                if publish_status == 'true':
                    institute_code= me.profile.institute.code
                    institute_code_list = ["wisdombrains","mbca"]
                    if institute_code not in institute_code_list:
                        if json_file_url == None:
                            send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(bat), data = data)
                        else:
                            send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(bat), data = data)
                        
            if 'https://bodhiuploadaugust.s3.amazonaws.com' in url:
                new_basic_url = url.replace('https://bodhiuploadaugust.s3.amazonaws.com', 'http://d3hm2dtd91t5z6.cloudfront.net')
            else:
                new_basic_url = url

            upload_video.urlLink = new_basic_url
            upload_video.save()

            context = {'status': 'success', 'message': 'Successfully Uploaded'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetYouTubeLiveVideoInfo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_id = data['video_id']
        try:
            video = LiveVideoLink.objects.get(id=video_id)
            youtube_videoInfo = StudentYoutubeLiveVideoInformation.objects.filter(video=video).select_related('student')
            total_students = youtube_videoInfo.filter(isLive=True).count()
            students_list = []
            for yvi in youtube_videoInfo:
                try:
                    student_name = yvi.student.name
                    deviceAndVersion = None
                except:
                    student_name = None
                    deviceAndVersion = None
                    
                student_dict = {'name': student_name, 'joinTime': yvi.joinTime,
                                'leaveTime': yvi.leaveTime, 'deviceAndVersion': deviceAndVersion}
                students_list.append(student_dict)
            context = {'students_list': students_list,'total_students': total_students}
            
        except LiveVideoLink.DoesNotExist:
            context = {'stauts': 'Failed', 'message': 'Live video not found'}
            
        return Response(context)

class TeacherGetSubjectWiseTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['subject_id']
        subject = Subject.objects.get(id=chapter_id)
        initial_test_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                tests = Test.objects.filter(createdBy=teacher, subjects=subject).order_by('-id')
                for test in tests:
                    initial_test_list.append(test)
        else:
            init_test_list = Test.objects.filter(createdBy=me.profile,subjects=subject).order_by('-id')
            for te in init_test_list:
                initial_test_list.append(te)

        tests_list = []
        for test in initial_test_list:
            number_questions = test.questions.all().count()
            subjects_list = []
            subjects = test.subjects.all()
            for subject in subjects:
                subject_dict = {'id': subject.id, 'name': subject.name}
                subjects_list.append(subject_dict)
            chapters_list = []
            chapters = test.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
                
            packages = Package.objects.filter(tests=test)
            packages_list = []
            for package in packages:
                package_dict =\
                    {'id': package.id, 'title': package.title, 'price': package.price,
                        'details': package.details, 'students': package.students.all().count()}
                packages_list.append(package_dict)
            batches_list = []
            batches = test.batches.all()
            for batch in batches:
                batch_dict = {'id': batch.id, 'name': batch.name}
                batches_list.append(batch_dict)
            test_dict =\
                {'id': test.id, 'numberQuestions': number_questions, 'subjects': subjects_list, 'chapters': chapters_list, 'time': test.time, 'publisehd': test.published, 'packages': packages_list,
                    'batches': batches_list, 'totalMarks': test.totalMarks, 'name': test.name, 'publish': test.publish, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
            tests_list.append(test_dict)
        context = {'tests': tests_list}
        return Response(context)

class TeacherDownloadBookBuyersDetailCSV(APIView):
    def get(self, request, book_id):
        try:
            book = Book.objects.get(id=book_id)
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['id', 'Name Of Student', 'Full Name', 'Email', 'Contact', 'City', 'Address', 'Paid Details'])
            students = book.students.all()
            for student in students:
                sd = StudentDetails.objects.get(student=student)
                studentbook = StudentBook.objects.filter(book=book, student=student)
                paid_list2 = []
                for sb in studentbook:
                    paidbook = PaidAmountStudentBook.objects.filter(studentBook=sb)
                    paid_list = []
                    for pp in paidbook:
                        pp_dict = {'id': pp.id, 'paid': pp.paidAmount,'date': pp.date.date()}
                        paid_list.append(pp_dict)
                        paid_list2.append(paid_list)
                        
                writer.writerow([student.id, student.name, sd.fullName, sd.email, sd.phone, sd.city, sd.address, str(paid_list2)])
            response['Content-Disposition'] = 'attachment; filename="Book buyersDetail_report.csv"'
            return response
        except Exception as e:
            return HttpResponse('Failed')

class StudentAllCourse(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessCourses == True:
            all_courses = Course.objects.filter(institute=me.profile.institute).order_by('-id')
            boughtPackages = set(i.package.id for i in StudentPackage.objects.filter(student=me.profile) if i.package is not None)
            courses_list = []
            for course in all_courses:
                totalPackages = Package.objects.filter(course=course, publish=True).exclude(id__in=boughtPackages).count()
                course_dict = {
                    'id': course.id, 
                    'name': course.name,
                    'totalPackages': totalPackages
                    }
                courses_list.append(course_dict)
            context = {'courses': courses_list}
            return Response(context)

class StudentGetPackagesCourseWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            packages_list = []
            teachers = Teacher.objects.filter(institute=me.profile.institute).prefetch_related('package_teacher')
            packages_list = []
            for teacher in teachers:
                packages = Package.objects.prefetch_related('students','tests','videos','notes').filter(
                    course = course_id, teacher=teacher, publish=True).order_by('-id')
                
                for pack in packages:
                    student_list = set(student.id for student in pack.students.all())
                    if me.profile.id in student_list:
                        bought = True
                    else:
                        bought = False

                    if bought == False:
                        packages_list.append(pack)

            final_list = []
            for package in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()
                package_dict = {
                    'id': package.id, 
                    'title': package.title, 
                    'marketLevelPackage': package.marketLevelPackage, 
                    'numberTests': numberTests, 
                    'numberVideos': numberVideos, 
                    'numberNotes': numberNotes,
                    'price': package.price, 
                    'duration': package.duration, 
                    'bought': False, 
                    'details': package.details, 
                    'thumbnail': package.thumbnail}
                final_list.append(package_dict)

            context = {'status':True,'packages': final_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)
    
class StudentGetPackagesCourseCategoryWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course_category_id = data['course_category_id']
            packages_list = []
            teachers = Teacher.objects.filter(institute=me.profile.institute).prefetch_related('package_teacher')
            packages_list = []
            for teacher in teachers:
                packages = Package.objects.prefetch_related('students','tests','videos','notes').filter(
                    course = course_id, course_category = course_category_id, teacher = teacher, publish = True).order_by('-id')
                
                for pack in packages:
                    student_list = set(student.id for student in pack.students.all())
                    if me.profile.id in student_list:
                        bought = True
                    else:
                        bought = False

                    if bought == False:
                        packages_list.append(pack)

            final_list = []
            for package in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()
                package_dict = {
                    'id': package.id, 
                    'title': package.title, 
                    'marketLevelPackage': package.marketLevelPackage, 
                    'numberTests': numberTests, 
                    'numberVideos': numberVideos, 
                    'numberNotes': numberNotes,
                    'price': package.price, 
                    'duration': package.duration, 
                    'bought': False, 
                    'details': package.details, 
                    'thumbnail': package.thumbnail
                    }
                final_list.append(package_dict)

            context = {'status':True,'packages': final_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)

class VidyaMandirTeacherAllPackages(APIView):
    def get(self, request):
        teacher = Teacher.objects.get(
            teacheruser__username='vidyamandir_teacher')
        packages = Package.objects.filter(teacher=teacher)
        teacher_package = []
        for package in packages:
            students = package.students.all().count()
            coupon_list = []
            coupons = CouponCode.objects.filter(package=package)
            for coupon in coupons:
                coupon_dict = {'id': coupon.id, 'amount': coupon.amount,
                               'created': coupon.created, 'code': coupon.code}
                coupon_list.append(coupon_dict)
            packages_dict = {'id': package.id, 'title': package.title, 'duration': package.duration, 'details': package.details,
                             'price': package.price, 'thumbnail': package.thumbnail, 'coupons': coupon_list, 'publish': package.publish}
            teacher_package.append(packages_dict)
        context = {'packages': teacher_package}
        return Response(context)

class RemoveUnUsedLiveVideoLinks(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teach in teachers:
                nativeLiveVideos = NativeLiveVideo.objects.filter(teacher=teach, live=True).order_by('-id')
                for i in nativeLiveVideos:
                    naive = i.time.replace(tzinfo=None)
                    if (datetime.utcnow() - naive) >= timedelta(1):
                        i.live = False
                        i.save()
                g_meet = GoogleMeetLive.objects.filter(teacher=teach, live=True).order_by('-id')
                for i in g_meet:
                    naive = i.time.replace(tzinfo=None)
                    if (datetime.utcnow() - naive) >= timedelta(1):
                        i.live = False
                        i.save()
            context = {'status': 'Success', 'message': 'Successfully Remove'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetBoughtPackagesAllVideos(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)

        final_videos_list = []
        student_brought_packages = StudentBroughtPackagesHelper(me.profile)
        student_brought_videos = student_brought_packages.get_all_brought_videos()
        for video in student_brought_videos:
            try:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {
                        'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                try:
                    subject_dict = {
                        'id': video.subject.id, 'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict =\
                        {'id': video.chapter.id, 'name': video.chapter.name,
                            'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None,
                                    'name': 'General', 'code': None}
                if video.publish == True:
                    video_dict =\
                        {'id': video.id, 'teacher': teachers_list, 'subject': subject_dict, 'chapter': chapter_dict, 'link': video.urlLink, 'generalVideo': video.generalVideo,
                            'publishDate': video.publishDate, 'title': video.title, 'lowLink': video.lowlink, 'highLink': video.highlink, 'thumbnail': video.thumbnail}
                    final_videos_list.append(video_dict)
            except Exception as e:
                print('student all videos {}'.format(str(e)))
        final_video_list = list(unique_everseen(final_videos_list))
        context = {'videos': final_video_list}
        return Response(context)

class StudentGetBoughtPackagesAllNotes(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        notes_list = []
        student_brought_packages = StudentBroughtPackagesHelper(me.profile)
        student_brought_videos = student_brought_packages.get_all_brought_videos()
        
        for note in student_brought_videos:
            subject = note.subject
            chapter = note.chapter
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
            note_dict =\
                {'id': note.id, 'title': note.title, 'teacher': 'teacher', 'publishDate': note.publishDate,
                    'subject': subject.name, 'chapter_object': chapter.name, 'url': note_link}
            notes_list.append(note_dict)
        notes_list = list(unique_everseen(notes_list))
        context = {'notes': notes_list}
        return Response(context)

class StudentGetBoughtPackagesAllTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        taken_tests_ids = set(student_marks.test.id for student_marks in StudentMarks.objects.select_related(
            'test').filter(student=me.profile))
        content_helper = StudentPackageHelper(me.profile)
        boughtPackages = content_helper.brought_packages()
       
        final_tests_list = []
        for package in boughtPackages:
            if package:
                for test in package.tests.all():
                    if test.publish == True:
                        subjects_list = []
                        chapters_list = []
                        batches_list = []
                        try:
                            subjects = test.subjects.all()
                            for sub in subjects:
                                subject_dict = {'id': sub.id, 'name': sub.name}
                                subjects_list.append(subject_dict)
                        except:
                            subject_dict = {'id': None, 'name': 'General'}
                            subjects_list.append(subject_dict)
                        try:
                            chapters = test.chapters.all()
                            for chap in chapters:
                                chapter_dict = {
                                    'id': chap.id, 'name': chap.name, 'code': chap.code}
                                chapters_list.append(chapter_dict)
                        except:
                            chapter_dict = {'id': None,
                                            'name': 'General', 'code': None}
                            chapters_list.append(chapter_dict)

                        batches = test.batches.all()
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                        numberQuestions = test.questions.all().count()

                        if test.id in taken_tests_ids:
                            first_attempt = False
                        else:
                            first_attempt = True

                        if first_attempt == False and test.repeatTest == True:
                            tests_dict = {'id': test.id, 'title': test.name, 'totalMarks': test.totalMarks, 'createdBy': test.createdBy.name, 'published': test.published, 'time': test.time, 'publish': test.publish, 'locked': test.locked, 'numberQuestions': numberQuestions,
                                          'passing_marks': test.passing_marks, 'subject': subjects_list, 'chapter': chapters_list, 'batches': batches_list, 'first_attempt': first_attempt, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                            final_tests_list.append(tests_dict)
                        elif first_attempt == False and test.repeatTest == False:
                            pass
                        else:
                            tests_dict = {'id': test.id, 'title': test.name, 'totalMarks': test.totalMarks, 'createdBy': test.createdBy.name, 'published': test.published, 'time': test.time, 'publish': test.publish, 'locked': test.locked, 'numberQuestions': numberQuestions,
                                          'passing_marks': test.passing_marks, 'subject': subjects_list, 'chapter': chapters_list, 'batches': batches_list, 'first_attempt': first_attempt, 'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                            final_tests_list.append(tests_dict)

        final_tests_list = list(unique_everseen(final_tests_list))
        context = {'tests': final_tests_list}
        return Response(context)

class TeacherGetBatchWiseNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        try:
            batch = Batch.objects.get(id=batch_id)
            notes = Note.objects.filter(batches=batch)
            notes_list = []
            for note in notes:
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                if note.chapter == None:
                    chapter_name = 'none'
                else:
                    chapter_name = note.chapter.name

                if note.subject == None:
                    subject_name = 'none'
                else:
                    subject_name = note.subject.name

                batches = note.batches.all()
                topics = note.topic.all()
                subTopics = note.subTopic.all()
                teachers = note.teacher.all()

                batch_list = []
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)

                topics_list = []
                for top in topics:
                    top_dict = {'id': top.id, 'name': top.topic}
                    topics_list.append(top_dict)

                subTopics_list = []
                for sTop in subTopics:
                    sTop_dict = {'id': sTop.id, 'name': sTop.name}
                    subTopics_list.append(sTop_dict)

                teachers_list = []
                for t in teachers:
                    teach_dict = {'id': t.id, 'name': t.name}
                    teachers_list.append(teach_dict)

                note_dict =\
                    {'note_id': note.id, 'title': note.title, 'subject': subject_name, 'chapter': chapter_name, 'publishDate': note.publishDate, 'url': note_link,
                        'locked': note.locked, 'teachers': teachers_list, 'batches': batch_list, 'topics': topics_list, 'subTopics': subTopics_list}
                notes_list.append(note_dict)
            context = {'notes': notes_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetPackageWiseCoupons(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            coupon_code = CouponCode.objects.filter(package=package).count()
            context = {'totalCoupon': coupon_code}
        except Exception as e:
            context = {'error': str(e)}
            
        return Response(context)

class TeacherCreateGoogleFormTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batches = data['batches']
        title = data['title']
        publishStatus = data['publishStatus']
        totalMark = data['totalMark']
        chapter_id = data['chapter_id']
        formLink = data['formLink']
        try:
            batches_list = batches.strip('][').split(',')
            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            gft = GoogleFormTest()
            gft.name = title
            gft.published = timezone.now()
            gft.createdBy = me.profile
            gft.totalMarks = totalMark
            gft.subject = subject
            gft.chapter = chapter
            gft.formLink = formLink
            if publishStatus == 'false':
                gft.publish = False
            gft.save()
            
            
            
            for batch_id in batches_list:
                batch = Batch.objects.get(id=batch_id)
                students = Student.objects.filter(batches=batch)
                gft.batches.add(batch)
                for student in students:
                    gft.students.add(student)
                    
            context = {'status': 'Success','message': 'Google Form Test Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetAllGoogleFormTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        my_batches = me.profile.batches.all()
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        test_ids = []
        all_test_objects = []
        for bat in my_batches:
            if me.institute.listReversed:
                tests_objects = GoogleFormTest.objects.filter(batches=bat, publish=True).order_by('-id')
            else:
                tests_objects = GoogleFormTest.objects.filter(batches=bat, publish=True).order_by('id')
            for to in tests_objects:
                if to.id in test_ids:
                    pass
                else:
                    test_ids.append(to.id)
                    all_test_objects.append(to)

        taken_tests_ids = StudentGoogleFormTest.objects.filter(
            student=me.profile, googleFormTest__createdBy__institute=me.profile.institute).values_list('googleFormTest__id', flat=True)
        tests_list = []
        for test in all_test_objects:
            try:
                subject = test.subject.name
                chapter = test.chapter.name
                teacher = test.createdBy
                teacher_dict = {'id': teacher.id, 'name': teacher.name}
                batches = test.batches.all()
                batches_list = []
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)

                if test.id not in taken_tests_ids:
                    test_dict =\
                        {'id': test.id, 'name': test.name, 'formLink': test.formLink, 'published': test.published, 'subjects': subject,
                            'chapters': chapter, 'createdBy': teacher_dict, 'locked': test.locked, 'batches': batches_list}
                    tests_list.append(test_dict)
            except Exception as e:
                print(str(e))
        context = {'tests': tests_list}
        return Response(context)

class EvaluateGoogleFormTest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        googleFormTest_id = data['googleFormTest_id']
        gft = GoogleFormTest.objects.get(id=googleFormTest_id)
        try:
            StudentGoogleFormTest.objects.get(student=me.profile, googleFormTest=gft)
            context = {'status': 'Failed','message': 'Google Form Test already taken'}
        except Exception as e:
            sgft = StudentGoogleFormTest()
            sgft.student = me.profile
            sgft.googleFormTest = gft
            sgft.date = timezone.now()
            sgft.save()
            context = {'status': 'success', 'test_id': sgft.id}
        return Response(context)

class TeacherGetSubjectWiseGoogleFormTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        before_tests_list = []
        subject = Subject.objects.get(id=subject_id)

        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                tests = GoogleFormTest.objects.filter(
                    createdBy=teacher, subject=subject).order_by('-id')
                for test in tests:
                    before_tests_list.append(test)
        else:
            before_tests_list =\
                Test.objects.filter(createdBy=me.profile,
                                    subject=subject).order_by('-id')

        tests_list = []
        for test in before_tests_list:
            subject = test.subject.name
            chapter = test.chapter.name
            batches = test.batches.all()
            batch_list = []
            for bat in batches:
                batch_dict = {'id': bat.id, 'name': bat.name}
                batch_list.append(batch_dict)
            test_dict =\
                {'id': test.id, 'name': test.name, 'subject': subject, 'chapter': chapter, 'published': test.published,
                    'publish': test.publish, 'totalMarks': test.totalMarks, 'formLink': test.formLink, 'batches': batch_list}
            tests_list.append(test_dict)
        context = {'tests': tests_list}
        return Response(context)

class TeacherEditGoogleFormTest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        googleformTest_id = data['googleformTest_id']
        title = data['title']
        publish = data['publish']
        batch_ids = data['batch_ids']
        batch_list = batch_ids.strip('][').split(',')

        try:
            gft = GoogleFormTest.objects.get(id=googleformTest_id)
            gft.name = title
            if publish == 'true':
                gft.publish = True
            else:
                gft.publish = False
            gft.save()
            gft.batches.clear()
            gft.students.clear()
            for bat in batch_list:
                batch = Batch.objects.get(id=bat)
                gft.batches.add(batch)
                students = Student.objects.filter(batches=batch)
                for stud in students:
                    gft.students.add(stud)
                    gft.save()
            context = {'status': 'success', 'message': 'successfully updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteGoogleFormTest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        googleformTest_id = data['googleformTest_id']
        try:
            GoogleFormTest.objects.get(id=googleformTest_id).delete()
            context = {'status': 'success', 'message': 'successfully deleted'}
        except GoogleFormTest.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'GoogleForm Test not found'}
        return Response(context)

class TeacherGetStudentsGoogleFormTestWise(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        googleformTest_id = data['googleformTest_id']
        try:
            gft = GoogleFormTest.objects.get(id=googleformTest_id)
            students = StudentGoogleFormTest.objects.filter(googleFormTest=gft)
            stud_list = []
            for stud in students:
                stud_dict = {'id': stud.id, 'student_name': stud.student.name,
                             'date': stud.date, 'marks': stud.marks, 'remark': stud.remark}
                stud_list.append(stud_dict)
            context = {'status': 'success', 'students': stud_list}
        except Exception as e:
            context = {'status': 'success', 'message': str(e)}
        return Response(context)

class TeacherGoogleFormTestGiveMarks(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_gft_id = data['student_gft_id']
        marks = data['marks']
        try:
            sgft = StudentGoogleFormTest.objects.get(id=student_gft_id)
            sgft.marks = marks
            sgft.save()
            context = {'status': 'success', 'message': 'marks updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGoogleFormTestGiveRemarks(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_gft_id = data['student_gft_id']
        remark = data['remark']
        try:
            sgft = StudentGoogleFormTest.objects.get(id=student_gft_id)
            sgft.remark = remark
            sgft.save()
            context = {'status': 'success', 'message': 'remark updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentSeeGoogleFormTestsPerformance(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        sgfts = StudentGoogleFormTest.objects.filter(
            student=me.profile, googleFormTest__createdBy__institute=me.profile.institute).order_by('-id')
        sgft_list = []
        for sgft in sgfts:
            sgft_dict = {'id': sgft.id, 'googleFormTest': sgft.googleFormTest.name,
                         'date': sgft.date, 'marks': sgft.marks, 'remark': sgft.remark}
            sgft_list.append(sgft_dict)
        context = {'status': 'success', 'allPerformence': sgft_list}
        return Response(context)

class TeacherRemoveThumbnailPackage(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            package.thumbnail = None
            package.save()
            context = {'status': 'success', 'message': 'thambnail removed'}
        except Package.DoesNotExist:
            context = {'status': 'Failed', 'message': 'package id incorrect'}
        return Response(context)

class TeacherGetOwnCourseList(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        courses = me.profile.teacher.course.all()
        courses_list = []
        for course in courses:
            course_dict = {'id': course.id, 'name': course.name}
            courses_list.append(course_dict)
        context = {'courses': courses_list}
        return Response(context)

class StudentGetBoughtPackagesCourseWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            packages_list = []
            today = timezone.now()
            for teacher in teachers:
                packages = Package.objects.filter(teacher=teacher, course=course)
                for pack in packages:
                    student_id_list = []
                    students = pack.students.all()
                    for student in students:
                        student_id_list.append(student.id)
                    if me.profile.id in student_id_list:
                        try:
                            studentPackage = StudentPackage.objects.get(
                                package=pack, student=me.profile)
                            if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                                pack.students.remove(me.profile)
                                pack.save()
                                pasp = PaidAmountStudentPackage.objects.get(
                                    studentPackage=studentPackage)
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = pasp.paidAmount
                                sbph.startDate = studentPackage.startDate
                                sbph.endDate = studentPackage.endDate
                                sbph.save()
                                studentPackage.delete()
                                pasp.delete()
                                bought = False
                            else:
                                bought = True
                        except Exception as e:
                            context = {'status': 'Failed', 'message': str(e)}
                            return Response(context)
                    else:
                        bought = False
                    if bought == True:
                        packages_list.append(pack)
            final_list = []
            for package in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()
                package_dict = {'id': package.id, 'title': package.title, 'marketLevelPackage': package.marketLevelPackage, 'numberTests': numberTests, 'numberVideos': numberVideos, 'numberNotes': numberNotes,
                                'price': package.price, 'duration': package.duration, 'bought': True, 'details': package.details, 'thumbnail': package.thumbnail}
                final_list.append(package_dict)

            studentAllPackageLenght = me.profile.package_student.count() + me.profile.boughtPackage_student.count()
            context = {
                'packages': final_list, 
                'teachers': len(teachers), 
                'allpackages': len(packages_list), 
                'studentAllPackageLenght': studentAllPackageLenght
                }
        except Exception as e:
            context = {'message': str(e)}
        return Response(context)
    
class StudentGetBoughtPackagesCourseCategoryWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course_id = data['course_id']
            course_category_id = data['course_category_id']
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            packages_list = []
            today = timezone.now()
            for teacher in teachers:
                packages = Package.objects.filter(teacher=teacher, course=course_id, course_category = course_category_id)
                for pack in packages:
                    student_id_list = []
                    students = pack.students.all()
                    for student in students:
                        student_id_list.append(student.id)
                        
                    if me.profile.id in student_id_list:
                        try:
                            studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                            if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                                pack.students.remove(me.profile)
                                pack.save()
                                pasp = PaidAmountStudentPackage.objects.get(studentPackage=studentPackage)
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = pasp.paidAmount
                                sbph.startDate = studentPackage.startDate
                                sbph.endDate = studentPackage.endDate
                                sbph.save()
                                studentPackage.delete()
                                pasp.delete()
                                bought = False
                            else:
                                bought = True
                                
                        except Exception as e:
                            context = {'status': 'Failed', 'message': str(e)}
                            
                    else:
                        bought = False
                        
                    if bought == True:
                        packages_list.append(pack)
                        
            final_list = []
            for package in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()
                package_dict = {
                    'id': package.id, 
                    'title': package.title, 
                    'marketLevelPackage': package.marketLevelPackage, 
                    'numberTests': numberTests, 
                    'numberVideos': numberVideos, 
                    'numberNotes': numberNotes,
                    'price': package.price, 
                    'duration': package.duration, 
                    'bought': True, 
                    'details': package.details, 
                    'thumbnail': package.thumbnail
                    }
                final_list.append(package_dict)

            studentAllPackageLenght = me.profile.package_student.count() + me.profile.boughtPackage_student.count()
            
            context = {
                'packages': final_list, 
                'teachers': len(teachers), 
                'allpackages': len(packages_list), 
                'studentAllPackageLenght': studentAllPackageLenght
                }
        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)

class EvaluateTestTesting(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        test_id = data['test_id']
        answers = data['answers']
        totalTime = data['totalTime']
        answers = answers.replace('\"', '')
        answers = answers.split(',')
        test = Test.objects.get(id=test_id)
        try:
            testMarks = StudentMarks.objects.get(student=me.profile, test=test)
            if test.repeatTest == True:
                testMarks.delete()
                raise Exception
            else:
                context = {'status': 'Failed', 'message': 'Test already taken'}
        except:
            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.save()

            inner = []
            outer = []
            for ind, ans in enumerate(answers):
                try:
                    val = ans.replace('[', '')
                    val = val.replace(']', '')
                    val = val.replace(' ', '')
                    inner.append(val)
                    if (ind+1) % 3 == 0:
                        outer.append(inner)
                        inner = []
                except Exception as e:
                    print(str(e))
            for out in outer:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile
                for ind, inn in enumerate(out):
                    if ind == 0:
                        question_id = inn
                        question = Question.objects.get(id=question_id)
                        attemptedQuestion.question = question
                    elif ind == 1:
                        if inn == '-1':
                            attemptedQuestion.attempted = False
                            attemptedQuestion.right = None
                        else:
                            attemptedQuestion.attempted = True

                            if 'text-' in inn:
                                answer = inn.replace('text-', '')
                                oneWordAnswer = question.oneWordAnswer
                                oneWordAnswer = oneWordAnswer.replace(' ', '')

                                if answer.isdigit():
                                    if answer == oneWordAnswer:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                                else:
                                    if answer.lower() == oneWordAnswer.lower():
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False

                                attemptedQuestion.studentOneWordAnswer = answer

                            else:
                                if '-' not in inn:
                                    option = Option.objects.get(id=inn)
                                    attemptedQuestion.save()
                                    attemptedQuestion.optionAttempted.add(
                                        option)
                                    if option.correct == True:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                                else:
                                    inn = inn.split('-')
                                    flag = False
                                    for i in inn:
                                        option = Option.objects.get(id=i)
                                        attemptedQuestion.save()
                                        attemptedQuestion.optionAttempted.add(
                                            option)
                                        if option.correct == True:
                                            pass
                                        else:
                                            flag = True

                                    if flag == False:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                    elif ind == 2:
                        attemptedQuestion.time = inn
                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)
            context = {'status': 'Success', 'message': testMarks.id}
        return Response(context)

class TeacherGetAllYoutubeLiveVideos2(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        liveVideos = LiveVideoLink.objects.filter(teacher=me.profile).order_by('-id')
        liveVideos_list = []
        deletedVideos_list = []
        for lv in liveVideos:
            if lv.deleted == True:
                lv_dict = {'id': lv.id, 'time': lv.time, 'link': lv.link,'title': lv.title, 'deleted': lv.deleted}
                deletedVideos_list.append(lv_dict)
            else:
                lv_dict = {'id': lv.id, 'time': lv.time, 'link': lv.link,'title': lv.title, 'deleted': lv.deleted}
                liveVideos_list.append(lv_dict)

        context = {'liveVideos': liveVideos_list,'deletedVideos': deletedVideos_list}
        return Response(context)

class UploadImageFirebase(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        file = data['file']
        file_save = default_storage.save(file.name, file)
        storage.child(file.name).put(file.name)
        try:
            delete = default_storage.delete(file.name)
        except:
            pass
        url = storage.child(file.name).get_url(None)
        return Response(url)

class TeacherGetCouponPackageWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        coupons = CouponCode.objects.filter(package=package_id)
        coupon_list = []
        for coupon in coupons:
            couponstudents = coupon.couponUsedStudents.all()
            couponStudents_list = []
            for cs in couponstudents:
                student_details = StudentDetails.objects.get(student = cs)
                couponStudent_dict = {
                    'id': cs.id, 
                    'name': cs.name, 
                    'phone': student_details.phone
                    }
                couponStudents_list.append(couponStudent_dict)
                
            coupon_dict = {
                'id': coupon.id, 
                'amount': coupon.amount, 
                'created': coupon.created,
                'code': coupon.code, 
                'totalStudents': len(couponstudents), 
                'couponUsedStudents': couponStudents_list
                }
            coupon_list.append(coupon_dict)
        context = {'status': 'success', 'coupons': coupon_list}
        return Response(context)

class StudentGetFreeVideosLionsCareer(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            print('access ttrue')
            context = {'videos': []}
            return Response(context)
        pdc = PackageDemoContent.objects.filter(package__teacher__institute=me.profile.institute)
        final_videos_list = []
        for pdcv in pdc:
            for video in pdcv.videos.all():
                try:
                    teachers_list = []
                    try:
                        subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                    except:
                        subject_dict = {'id': None, 'name': 'General'}

                    try:
                        chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                    except:
                        chapter_dict = {'id': None, 'name': 'General', 'code': None}

                    video_dict = {
                        'id': video.id, 
                        'teacher': teachers_list, 
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'link': video.urlLink, 
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate, 
                        'title': video.title, 
                        'bought': True, 
                        'lowLink': video.lowlink, 
                        'highLink': video.highlink, 
                        'thumbnail': video.thumbnail
                        }
                    final_videos_list.append(video_dict)
                    context = {'videos': final_videos_list}
                except Exception as e:
                    context = {'message': str(e)}
                    
        return Response(context)

class StudentGetOwnCourseList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        courses = me.profile.courses.all()
        courses_list = []
        for course in courses:
            course_dict = {'id': course.id, 'name': course.name}
            courses_list.append(course_dict)
        context = {'courses': courses_list}
        return Response(context)

class StudentCreateChallengeTest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        number_questions = 6
        title = 'selfTestTestwin_{}'.format(me.profile.name)
        try:
            try:
                serverKey = me.profile.institute.serverKey
            except Exception as e:
                serverKey = None
                
            chapter = Chapter.objects.get(id=chapter_id)
            questions_chapter = Question.objects.filter(chapter=chapter)
            if len(questions_chapter) == 0:
                context = {'status': 'Failed', 'message': 'No questions in chapter'}
                return Response(context)
            
            test = Test()
            test.published = timezone.now()
            test.time = 2
            test.totalMarks = 0
            test.name = title
            test.save()
            test.subjects.add(chapter.subject)
            test.chapters.add(chapter)
            total_marks = 0
            all_previous_questions = []
            student_marks = StudentMarks.objects.filter(student=me.profile)

            for sm in student_marks:
                attemptedquestions = sm.questions.all()
                for quest in attemptedquestions:
                    print('al taken {}'.format(quest.id))
                    all_previous_questions.append(quest.question)

            for question_obj in questions_chapter:
                if question_obj not in all_previous_questions:
                    if test.questions.count() < number_questions:
                        test.questions.add(question_obj)
                        total_marks += question_obj.marks

            if test.questions.count() < 4:
                test.delete()
                context = {'status': 'Failed', 'message': 'Please select some other subject category.'}
            else:
                if test.questions.count() < number_questions:
                    import random
                    questions_chapter = questions_chapter.values('id')
                    for i in questions_chapter:
                        random_id = random.choice(questions_chapter)["id"]
                        if test.questions.count() < number_questions:
                            question_obj = Question.objects.get(id=random_id)
                            if question_obj not in test.questions.all():
                                test.questions.add(question_obj)
                                total_marks += question_obj.marks
                        else:
                            break

                test.totalMarks = total_marks
                test.save()
                test.students.add(me.profile)
                context = {'status': 'Success', 'testID': test.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetBoughtPackageDetails(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        studentPackages = StudentPackage.objects.select_related('student','package').prefetch_related('paid_studentpackage','student__batches').filter(
            student__institute=me.profile.institute).order_by('-startDate')
        boughtPackageDetail_list = []
        for sp in studentPackages:
            if sp.package:
                studentBatches = sp.student.batches.all()
                batches_list = []
                for batch in studentBatches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                    
                studentDetail_dict = {'id': sp.student.id, 'name': sp.student.name, 'batches': batches_list}
                paidAmount =None
                for paid in sp.paid_studentpackage.all():
                    paidAmount =paid.paidAmount

                boughtPackageDetail = {'id': sp.package.id, 'title': sp.package.title, 'duration': sp.package.duration,
                                       'startDate': sp.startDate, 'endDate': sp.endDate, 'paidAmount': paidAmount, 'studentDetail': studentDetail_dict}
                boughtPackageDetail_list.append(boughtPackageDetail)
            else:
                pass
            
        context = {'status': 'success', 'boughtPackagesDetails': boughtPackageDetail_list}
        return Response(context)

class TeacherGetStudentExpiredPackageDetails(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        sbphs = StudentBoughtPackageHistory.objects.filter(student__institute=me.profile.institute).order_by('-endDate')
        expiredStudentPackages_list = []
        for sbph in sbphs:
            if sbph.student:
                student = sbph.student.name
            else:
                student = None
                
            detail_dict = {'id': sbph.id, 'student': student, 'package': sbph.package, 'packagePrice': sbph.packagePrice, 'duration': sbph.duration,
                           'paidAmount': sbph.paidAmount, 'startDate': sbph.startDate, 'endDate': sbph.endDate}
            expiredStudentPackages_list.append(detail_dict)

        context = {'status': 'success', 'expiredStudentPackages_detail': expiredStudentPackages_list}
        return Response(context)

class ExportCsvFileWebapp(APIView):
    def post(self, request):
        data = request.data
        date = data['date']
        df = pd.DataFrame()

        try:
            institutes = Institute.objects.filter(typeInstitute='webapp', teacherinstitute__mainTeacher=True, teacherinstitute__jdate__date__gt=date).order_by('-id')
            teachers_list = []
            date_list = []
            usernames_list = []
            teachername_list = []
            institutename_list = []
            subjects_lists = []
            dateOfBirth_list = []

            for institute in institutes:
                try:
                    main_teeacher = Teacher.objects.get(mainTeacher=True, institute=institute)
                    appDevelopedDate = main_teeacher.jdate.date()
                    username = main_teeacher.teacheruser.username
                    name = main_teeacher.name
                    dateOfBirth = main_teeacher.teacher.dateOfBirth

                    subjects = main_teeacher.subjects.all()
                    subjects_list = []
                    for sub in subjects:
                        subject_dict = {'id': sub.id, 'name': sub.name}
                        subjects_list.append(subject_dict)

                except:
                    subjects_list = []
                    appDevelopedDate = None
                    username = None
                    name = None
                    dateOfBirth = None

                date_list.append(appDevelopedDate)
                usernames_list.append(username)
                teachername_list.append(name)
                institutename_list.append(institute.name)
                subjects_lists.append(subjects_list)
                dateOfBirth_list.append(dateOfBirth)

            teach_dict = {'Created date': date_list, 'Username/Contact': usernames_list, 'Teacher name': teachername_list,
                          'Institute name': institutename_list, 'Subjects': subjects_lists, 'DOB': dateOfBirth_list}
            df1 = pd.DataFrame(teach_dict, columns=['Created date', 'Username/Contact', 'Teacher name', 'Institute name', 'Subjects', 'DOB'])
            pd2 = df1.to_excel('WebappsDetail_after_'+date+'.xls', index=False)
            context = {'status': 'success', 'message': 'successfully created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class ExportCsvFileDoubts(APIView):
    def get(self, request):
        df = pd.DataFrame()
        try:
            studentDoubts = StudentDoubt.objects.all().order_by('-id')
            name_list = []
            contact_list = []
            course_list = []
            time_list = []

            for sd in studentDoubts:
                name = sd.doubtFrom.name
                contact = sd.doubtFrom.studentuser.username.split('@')[0]
                course = sd.course
                time = sd.time

                name_list.append(name)
                contact_list.append(contact)
                course_list.append(course)
                time_list.append(time)

            doubts_dict = {'Student Name': name_list, 'Username/Contact': contact_list, 'Course': course_list, 'Time': time_list}
            df1 = pd.DataFrame(doubts_dict, columns=['Student Name', 'Username/Contact', 'Course', 'Time'])

            pd2 = df1.to_csv('alldoubts_details_before_1-28-2022.xls', index=False)

            context = {'status': 'success', 'message': 'Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject= data['subject']
        chapter = data['chapter']
        batches = data['batches']
        title = data['title']
        testTime = data['testTime']
        totalQuestion = data['totalQuestion']
        questionFile = data['questionFile']
        solutionsFile = data['solutionsFile']
        passing_marks = data['passing_marks']
        negativeMarks = data.get('negativeMarks')
        if not negativeMarks:
            negativeMarks = 0

        publish = data['publish']
        repeatTest = data['repeatTest']
        answers = data['answers']

        try:
            topic_id = data['topic_id']
        except:
            topic_id = None
        try:
            subtopic_id = data['subtopic_id']
        except:
            subtopic_id = None

        try:
            test_count = int(data['test_count'])
        except:
            test_count = None
            
        try:
            question_marks = data['question_marks']
            question_marks = json.loads(question_marks)
        except:
            question_marks = None
            
        try:
            totalMarks = data['totalMarks']
        except:
            totalMarks = sum(question_marks.values())
            
        try:
            fileTestStartDateTime = data['fileTestStartDateTime']
        except:
            fileTestStartDateTime = None

        try:
            fileTestEndDateTime = data['fileTestEndDateTime']
        except:
            fileTestEndDateTime = None

        try:
            topic = QuestionTopic.objects.get(id=topic_id)
        except:
            topic = None

        try:
            sub_topic = QuestionSubTopic.objects.get(id=subtopic_id)
        except:
            sub_topic = None

        try:
            negativeMarks = data['negativeMarks']
        except:
            negativeMarks = None

        batch_list = batches.strip('][').split(',')
        context = {'status': True, 'data': type(data['subject'])}

        try:
            answers = json.loads(answers)
            chapter = Chapter.objects.get(id=chapter)
            try:
                subject = chapter.subject
            except:
                subject = None

            batches = Batch.objects.filter(id__in=batch_list)

            fileTest = FileTest()
            fileTest.createdBy = me.profile
            fileTest.title = title
            fileTest.testTime = testTime
            fileTest.totalQuestion = totalQuestion
            fileTest.questionFile = questionFile
            fileTest.solutionsFile = solutionsFile
            fileTest.totalMarks = totalMarks
            fileTest.passing_marks = passing_marks
            fileTest.negativeMarks = negativeMarks
            fileTest.subject = subject
            fileTest.chapter = chapter
            fileTest.topic = topic
            fileTest.sub_topic = sub_topic
            fileTest.answers = answers
            fileTest.question_marks = question_marks
            fileTest.test_count = test_count
            if test_count != None and test_count > 1:
                fileTest.repeatTest = True

            if fileTestStartDateTime:
                fileTest.fileTestStartDateTime = fileTestStartDateTime
                fileTest.schedule =True
            else:
                fileTest.fileTestStartDateTime = timezone.now()

            if fileTestEndDateTime:
                fileTest.fileTestEndDateTime = fileTestEndDateTime

            fileTest.save()
            fileTest.batches.add(*batches)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            data = {"id":str(fileTest.id),"type": "fileTest","title":str(fileTest.title),"link":None}
            notification = {"title": f"NEW TEST","body": f'A New Test {title} has been Created for you by {me.profile.name}',}
            
            for batch_id in batch_list:
                institute_code= me.profile.institute.code
                institute_code_list = ["wisdombrains","mbca"]
                if institute_code not in institute_code_list:
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id), data = data)
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id), data = data)
                            
            context = {'status': 'Success', 'message': 'Successfully Created', 'test': fileTest.id}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherCreateFileTestNew(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
       
        subject= data['subject']
        chapter = data['chapter']
        batches = data['batches']
        title = data['title']
        testTime = data['testTime']
        totalQuestion = data['totalQuestion']
        questionFile = data['questionFile']
        solutionsFile = data['solutionsFile']
        totalMarks = data['totalMarks']
        passing_marks = data['passing_marks']
        negativeMarks = data.get('negativeMarks')
        if not negativeMarks:
            negativeMarks = 0

        publish = data['publish']
        repeatTest = data['repeatTest']
        answers = data['answers']

        try:
            topic_id = data['topic_id']
        except:
            topic_id = None
        try:
            subtopic_id = data['subtopic_id']
        except:
            subtopic_id = None
        
        try:
            test_count = int(data['test_count'])
        except:
            test_count = None

        try:
            topic = QuestionTopic.objects.get(id=topic_id)
        except:
            topic = None

        try:
            sub_topic = QuestionSubTopic.objects.get(id=subtopic_id)
        except:
            sub_topic = None

        try:
            negativeMarks = data['negativeMarks']
        except:
            negativeMarks = None
        try:
            fileTestStartDateTime = data['fileTestStartDateTime']
        except:
            fileTestStartDateTime = None

        try:
            fileTestEndDateTime = data['fileTestEndDateTime']
        except:
            fileTestEndDateTime = None

        batch_list = batches.strip('][').split(',')
        context = {'status': True, 'data': type(data['subject'])}

        try:
            answers = json.loads(answers)
            chapter = Chapter.objects.get(id=chapter)
            try:
                subject = chapter.subject
            except:
                subject = None

            batches = Batch.objects.filter(id__in=batch_list)

            fileTest = FileTest()
            fileTest.createdBy = me.profile
            fileTest.title = title
            fileTest.testTime = testTime
            fileTest.totalQuestion = totalQuestion
            fileTest.questionFile = questionFile
            fileTest.solutionsFile = solutionsFile
            fileTest.totalMarks = totalMarks
            fileTest.passing_marks = passing_marks
            fileTest.negativeMarks = negativeMarks
            fileTest.subject = subject
            fileTest.chapter = chapter
            fileTest.topic = topic
            fileTest.sub_topic = sub_topic
            fileTest.answers = answers
            fileTest.test_count = test_count
            if test_count != None and test_count > 1:
                fileTest.repeatTest = True

            if fileTestStartDateTime:
                fileTest.fileTestStartDateTime = fileTestStartDateTime
            else:
                fileTest.fileTestStartDateTime = timezone.now()

            if fileTestEndDateTime:
                fileTest.fileTestEndDateTime = fileTestEndDateTime

            fileTest.save()
            fileTest.batches.add(*batches)
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"NEW TEST","body": f'A New Test {title} has been Created for you by {me.profile.name}',}
            
            for batch_id in batch_list:
                institute_code= me.profile.institute.code
                institute_code_list = ["wisdombrains","mbca"]
                if institute_code not in institute_code_list:
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))
                    
            context = {'status': 'success','message': 'Successfully Created', 'test': fileTest.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubjectwiseFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            subject_id = data['subject']
            subject = Subject.objects.get(id=subject_id)
            subjects = me.profile.subjects.all()

            if me.profile.mainTeacher:
                fileTest = FileTest.objects.filter(subject = subject).order_by('-id')
            else:
                fileTest = FileTest.objects.filter(Q(createdBy__subjects__in=subjects) | Q(createdBy=me.profile),subject = subject).order_by('-id').distinct()
                
            allFileTest_list = []
            for ft in fileTest:
                batches = ft.batches.all().values('id', 'name')
                try:
                    chapter = ft.chapter.name
                except:
                    chapter = ''
                
                try:
                    schedule = ft.schedule
                except:
                    schedule = False
                
                try:
                    testStartDateTime = ft.fileTestStartDateTime.strftime("%Y-%m-%d %H:%M:%S")
                except:
                    testStartDateTime = ""

                try:
                    fileTestEndDateTime = ft.fileTestEndDateTime.strftime("%Y-%m-%d %H:%M:%S")
                except:
                    fileTestEndDateTime = ""

                test_dict = {
                    'id': ft.id, 
                    'test_count': ft.test_count,
                    'subject': ft.subject.name, 
                    'chapter': chapter, 
                    'batches': batches, 
                    'title': ft.title, 
                    'testTime': ft.testTime, 
                    'totalQuestion': ft.totalQuestion, 
                    'totalMarks': ft.totalMarks, 
                    'questionFile': ft.questionFile,
                    'solutionsFile': ft.solutionsFile, 
                    'passing_marks': ft.passing_marks, 
                    'published': ft.published, 
                    'publish': ft.publish, 
                    'repeatTest': ft.repeatTest, 
                    'answers': ft.answers, 
                    'negativeMarks': ft.negativeMarks,
                    'testStartDateTime':testStartDateTime,
                    'testEndDateTime':fileTestEndDateTime,
                    'schedule': schedule
                    }
                
                allFileTest_list.append(test_dict)
            context = {'status': 'success', 'allFileTest': allFileTest_list}
        except Exception as e:
            context = {'status': 'failed', 'message':str(e)}
        return Response(context)

class TeacherGetChapterwiseFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter = data['chapter']
        allFileTest_list = []

        chapter = Chapter.objects.get(id=chapter)
        subject = chapter.subject

        if me.profile.mainTeacher:
            fileTest = FileTest.objects.filter(subject=subject, chapter=chapter, createdBy__institute=me.profile.institute).order_by('-id')
        else:
            fileTest = FileTest.objects.filter(subject=subject, chapter=chapter, createdBy=me.profile).order_by('-id')

        for ft in fileTest:
            batches = ft.batches.all().values('id', 'name')
            test_dict = {'id': ft.id, 'subject': subject.name, 'chapter': chapter.name, 'batches': batches, 'title': ft.title, 'testTime': ft.testTime, 'totalQuestion': ft.totalQuestion, 'totalMarks': ft.totalMarks, 'questionFile': ft.questionFile,
                         'solutionsFile': ft.solutionsFile, 'passing_marks': ft.passing_marks, 'published': ft.published, 'publish': ft.publish, 'repeatTest': ft.repeatTest, 'answers': ft.answers, 'negativeMarks': ft.negativeMarks}
            allFileTest_list.append(test_dict)
        context = {'status': 'success', 'allFileTest': allFileTest_list}
        return Response(context)

class TeacherDeleteFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        fileTest_id = data['fileTest_id']

        try:
            FileTest.objects.get(id=fileTest_id).delete()
            context = {'status': 'success', 'message': 'Successfully Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        fileTest_id = data['fileTest_id']
        title = data['title']
        testTime = data['testTime']
        questionFile = data['questionFile']
        solutionsFile = data['solutionsFile']
        passing_marks = data['passing_marks']
        publish = data['publish']
        negativeMarks = data.get('negativeMarks')
        fileTestStartDateTime = data.get('fileTestStartDateTime')
        fileTestEndDateTime = data.get('fileTestEndDateTime')
        repeatTest = data['repeatTest']
        batches = data['batches']
        batch_list = batches.strip('][').split(',')
        
        try:
            question_marks = data['question_marks']
            question_marks = json.loads(question_marks)
            totalMarks = sum(question_marks.values())
        except:
            question_marks = None

        try:
            fileTest = FileTest.objects.get(id=fileTest_id)
            fileTest.title = title
            fileTest.testTime = testTime
            fileTest.questionFile = questionFile
            fileTest.solutionsFile = solutionsFile
            fileTest.passing_marks = passing_marks
            if question_marks != None:
                fileTest.question_marks = question_marks
                fileTest.totalMarks = totalMarks

            test_count = data.get('test_count', None)  
            if test_count is not None:
                test_count = int(test_count)  
                fileTest.test_count = test_count

                if test_count > 1:
                    fileTest.repeatTest = True
                else:
                    if repeatTest.lower() == 'true':
                        fileTest.repeatTest = True
                    elif repeatTest.lower() == 'false':
                        fileTest.repeatTest = False
            else:
                if repeatTest.lower() == 'true':
                    fileTest.repeatTest = True
                elif repeatTest.lower() == 'false':
                    fileTest.repeatTest = False

            if publish == 'true':
                fileTest.publish = True
            else:
                fileTest.publish = False

            if negativeMarks == None or negativeMarks == '' or negativeMarks == 0:
                fileTest.negativeMarks = None
            else:
                fileTest.negativeMarks = negativeMarks

            if fileTestStartDateTime:
                fileTest.fileTestStartDateTime = fileTestStartDateTime
            else:
                fileTest.fileTestStartDateTime = timezone.now()

            if fileTestEndDateTime:
                fileTest.fileTestEndDateTime = fileTestEndDateTime

            fileTest.save()
            fileTest.batches.clear()
            batches = Batch.objects.filter(id__in=batch_list)
            fileTest.batches.add(*batches)

            context = {'status': 'success', 'message': 'Successfully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherEditCorrectAnswersFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        fileTest_id = data['fileTest_id']
        answers = data['answers']
        try:
            answers = json.loads(answers)
            fileTest = FileTest.objects.get(id=fileTest_id)
            fileTest.answers = answers
            fileTest.save()
            context = {'status': 'success', 'message': 'Correct Answerd Successfully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherEditMarksFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        fileTest_id = data['fileTest_id']
        marks = data['passing_marks']
        try:
            question_marks = json.loads(marks)
            totalmarks = sum(question_marks.values())
            fileTest = FileTest.objects.get(id=fileTest_id)
            fileTest.question_marks = question_marks
            fileTest.totalMarks = totalmarks
            fileTest.save()
            context = {'status': 'success', 'message': 'Correct Marks Successfully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetSubjectWiseFileTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        if me.institute.listReversed:
            order_id = '-id'
        else:
            order_id = 'id'
         
        try:   
            data = request.data
            subject_id = data['subject_id']
            my_batches = me.profile.batches.all()
            fileTests = FileTest.objects.filter(Q(publish=True) & Q(subject__id=subject_id) & Q(batches__in=my_batches) & (Q(fileTestStartDateTime__isnull=True) |Q(fileTestStartDateTime__lte=timezone.now()))).select_related('subject', 'chapter').distinct().order_by(order_id)
            student_helper = StudentPackageHelper(me.profile)
            taken_file_tests = student_helper.taken_file_test()
            
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_tests = bought_packages.get_all_brought_fileTests()

            tests_list = []
            for test in fileTests:
                bought = False
                if test in bought_tests:
                    bought = True
                    
                if test.locked == False:
                    bought = True
                    
                if test.fileTestEndDateTime:
                    if test.fileTestEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                if test in taken_file_tests:
                    first_attempt = False
                else:
                    first_attempt = True
                    
                if first_attempt == False and test.repeatTest == True:
                    test_dict = {
                        'id': test.id, 
                        'name': test.title, 
                        'locked': test.locked, 
                        'bought': bought,
                        'totalMarks': test.totalMarks, 
                        'questionFile': test.questionFile, 
                        'solutionsFile': test.solutionsFile, 
                        'subjects': test.subject.name,
                        'chapters': test.chapter.name, 
                        'testTime': test.testTime, 
                        'numberQuestions': test.totalQuestion, 
                        'first_attempt': first_attempt, 
                        'negativeMarks': test.negativeMarks, 
                        'testTimeOver': testTimeOver}
                    tests_list.append(test_dict)
                elif first_attempt == False and test.repeatTest == False:
                    pass
                else:
                    test_dict = {
                        'id': test.id, 
                        'name': test.title, 
                        'locked': test.locked, 
                        'bought': bought,
                        'totalMarks': test.totalMarks, 
                        'questionFile': test.questionFile, 
                        'solutionsFile': test.solutionsFile, 
                        'subjects': test.subject.name,
                        'chapters': test.chapter.name, 
                        'testTime': test.testTime, 
                        'numberQuestions': test.totalQuestion, 
                        'first_attempt': first_attempt, 
                        'negativeMarks': test.negativeMarks, 
                        'testTimeOver': testTimeOver}
                    tests_list.append(test_dict)
                
            context = {'tests': tests_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        
        return Response(context)

class StudentTakenFileTestList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        marks = StudentFileTestMarks.objects.filter(student=me.profile).order_by('-id')
        test_list = []
        for mark in marks:
            test = mark.fileTest
            test_dict = {
                'id': mark.id,
                'test_id': test.id,
                'name': test.title,
                'published': test.published,
                'testTime': test.testTime,
                'locked': test.locked,
                'subjects': 'None',
                'chapters': 'None',
                'questionFile': test.questionFile,
                'solutionsFile': test.solutionsFile,
                'negativeMarks': test.negativeMarks
            }
            test_list.append(test_dict)
        context = {'status': 'success', 'test': test_list}
        return Response(context)
    
class StudentTakenFileTestListChapterWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        marks = StudentFileTestMarks.objects.filter(fileTest__chapter__id=chapter_id, student=me.profile).order_by('-id')
        test_list = []
        for mark in marks:
            test = mark.fileTest
            
            test_dict = {
                'id': mark.id,
                'test_id': test.id,
                'name': test.title,
                'published': test.published,
                'testTime': test.testTime,
                'locked': test.locked,
                'subjects': 'None',
                'chapters': 'None',
                'questionFile': test.questionFile,
                'solutionsFile': test.solutionsFile,
                'negativeMarks': test.negativeMarks,
            }
            test_list.append(test_dict)
        context = {'status': 'success', 'test': test_list}
        return Response(context)

class StudentSeeFileTestPerformance(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        performance_id = data['performance_id']
        try:
            performance = StudentFileTestMarks.objects.filter(student=me.profile, id=performance_id)
            performance_list = []
            for p in performance:
                dict = {
                    'id': p.id, 
                    'fileTest': p.fileTest.id, 
                    'time': p.time, 
                    'marks': p.marks, 
                    'totalMarks': p.fileTest.totalMarks,
                    'passing_marks': p.fileTest.passing_marks, 
                    'answers': p.answers, 
                    'negativeMarks': p.fileTest.negativeMarks
                    }
                performance_list.append(dict)
            context = {'status': 'success', 'performance': performance_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentSeeFileTestRank(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        fileTest_id = data['fileTest_id']
        try:
            all_student_list = []

            all_student_marks = StudentFileTestMarks.objects.filter(fileTest__id=fileTest_id).order_by('-marks', 'time')
            if all_student_marks:
                totalMarks = all_student_marks[0].fileTest.totalMarks
                for sm in all_student_marks:
                    photo = sm.student.student.photo
                    student_dict = {'name': sm.student.name, 'photo': photo,'marks': sm.marks, 'totalMarks': totalMarks}
                    all_student_list.append(student_dict)

            context = {'status': 'success', 'students_list': all_student_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherSeeStudentFileTestPerformance(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        performance_id = data['performance_id']
        try:
            performance = StudentFileTestMarks.objects.filter(id=performance_id)
            performance_list = []
            for p in performance:
                dict = {'id': p.id, 'fileTest': p.fileTest.id, 'time': p.time, 'marks': p.marks, 'totalMarks': p.fileTest.totalMarks,
                        'passing_marks': p.fileTest.passing_marks, 'answers': p.answers, 'negativeMarks': p.fileTest.negativeMarks}
                performance_list.append(dict)
            context = {'status': 'success', 'performance': performance_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GuestGetAllCourses(APIView):
    def get(self, request):
        courses = TeacherCourse.objects.all().values()
        context = {'status': 'success', 'courses': courses}
        return Response(context)

class NewStudentGetCourseWiseBatches(APIView):
    def post(self, request):
        data = request.data
        course_id = data['course_id']
        batches = Batch.objects.filter(course__id=course_id).order_by('-id').values('id', 'name')
        context = {'batches': batches}
        return Response(context)

class StudentGetBatchWiseNotBoughtPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        batches = me.profile.batches.all().values_list('id', flat=True)
        packages_list = []
        today = timezone.now()
        packages = Package.objects.filter(batches__id__in=batches, publish=True).distinct().order_by('-id')
        for pack in packages:
            student_id_list = pack.students.all().values_list('id', flat=True)
            if me.profile.id in student_id_list:
                try:
                    studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                    if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                        pack.students.remove(me.profile)
                        pack.save()
                        pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                        totalPaidAmount = 0
                        for i in pasp:
                            totalPaidAmount += i.paidAmount
                        sbph = StudentBoughtPackageHistory()
                        sbph.student = me.profile
                        sbph.package = pack.title
                        sbph.packagePrice = pack.price
                        sbph.duration = pack.duration
                        sbph.paidAmount = totalPaidAmount
                        sbph.startDate = studentPackage.startDate
                        sbph.endDate = studentPackage.endDate
                        sbph.save()
                        studentPackage.delete()
                        for i in pasp:
                            i.delete()
                        bought = False
                    else:
                        bought = True

                except StudentPackage.MultipleObjectsReturned:
                    studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                    for sp in studentPackage:
                        if sp.endDate.replace(tzinfo=None) <= today.now():
                            totalStudentPackagesCount = StudentPackage.objects.filter(package=pack, student=me.profile).count()
                            if totalStudentPackagesCount == 1:
                                pack.students.remove(me.profile)
                                pack.save()
                            else:
                                pass
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = sp.startDate
                            sbph.endDate = sp.endDate
                            sbph.save()
                            sp.delete()
                            for i in pasp:
                                i.delete()
                            if totalStudentPackagesCount == 1:
                                bought = False
                            else:
                                bought = True
                        else:
                            bought = True

                except Exception as e:
                    context = {'status': 'Failed', 'message': str(e)}
                    return Response(context)
            else:
                bought = False
            if bought == False:
                packages_list.append(pack)
                
        final_list = []
        for package in packages_list:
            if package.course:
                course_name = package.course.name
                course_id = package.course.id
            else:
                course_name = None
                course_id = None
                
            package_dict = {
                'id': package.id, 
                'title': package.title, 
                'price': package.price, 
                'duration': package.duration, 
                'bought': False,
                'details': package.details, 
                'thumbnail': package.thumbnail, 
                'course_name': course_name, 
                'course_id': course_id
                }
            final_list.append(package_dict)
        context = {'packages': final_list}
        return Response(context)

class StudentGetSubjectWiseChaptersData(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        suject_id = data['subject_id']
        try:
            chapters = Chapter.objects.filter(subject__id=suject_id)
            batches = me.profile.batches.all().values_list('id', flat=True)
            chaptersData_list = []
            for chapter in chapters:
                videos_list = []
                if me.profile.accessVideo == True:
                    videos = Video.objects.filter(chapter=chapter, teacher__institute=me.institute, batches__id__in=batches, publish=True).distinct().order_by('-id')
                    bought_videos = StudentPackage.objects.filter(student=me.profile).values_list('package__videos__id', flat=True)
                    for video in videos:
                        vision = True
                        if video.viewsLimite:
                            vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)

                        bought = False
                        demoVideo = PackageDemoContent.objects.filter(videos=video)
                        if len(demoVideo) != 0:
                            bought = True

                        if video.id in bought_videos:
                            bought = True
                        if video.locked == False:
                            bought = True
                        video_dict = {'id': video.id, 'link': video.urlLink, 'generalVideo': video.generalVideo, 'publishDate': video.publishDate,
                                      'title': video.title, 'bought': bought, 'thumbnail': video.thumbnail, 'vision': vision}
                        videos_list.append(video_dict)

                chapter = {'id': chapter.id, 'chapterName': chapter.name, 'chapterWiseVideo': videos_list}
                chaptersData_list.append(chapter)

            context = {'status': 'success', 'chaptersData_list': chaptersData_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentGetSubjectWiseChaptersProgress(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        suject_id = data['subject_id']
        try:
            chapters = Chapter.objects.filter(subject__id=suject_id)
            batches = me.profile.batches.all().values_list('id', flat=True)

            chaptersProgress_list = []
            for chapter in chapters:
                videos = Video.objects.filter(chapter=chapter, teacher__institute=me.institute,
                                              batches__id__in=batches).distinct().values_list('id', flat=True)
                videosViews = StudentVideoView.objects.filter(student=me.profile, videoview__video__id__in=videos).count()
                
                if videosViews != 0 and len(videos) != 0:
                    videoProgress = str((videosViews / len(videos)) * 100) + ' %'
                else:
                    videoProgress = '0.0 %'

                notes = Note.objects.filter(chapter=chapter, teacher__institute=me.institute,
                                            batches__id__in=batches).distinct().values_list('id', flat=True)
                notesViews = StudentNoteView.objects.filter(student=me.profile, noteview__note__id__in=notes).count()
                
                if notesViews != 0 and len(notes) != 0:
                    notesProgress = str((notesViews / len(notes)) * 100) + ' %'
                else:
                    notesProgress = '0.0 %'

                tests = Test.objects.filter(chapters=chapter, createdBy__institute=me.profile.institute,
                                            batches__id__in=batches).distinct().values_list('id', flat=True)
                testsViews = StudentTestView.objects.filter(student=me.profile, testview__test__id__in=tests).count()
                if testsViews != 0 and len(tests) != 0:
                    testsProgress = str((testsViews / len(tests)) * 100) + ' %'
                else:
                    testsProgress = '0.0 %'

                allNotesVideosTests = len(videos) + len(notes) + len(tests)
                allViews = videosViews + notesViews + testsViews

                if allNotesVideosTests != 0 and allViews != 0:
                    overallChapterWiseProgress = str((allViews / allNotesVideosTests) * 100) + ' %'
                else:
                    overallChapterWiseProgress = '0.0 %'

                chapter = {'id': chapter.id, 'chapterName': chapter.name, 'overallChapterWiseProgress': overallChapterWiseProgress,
                           'videoProgress': videoProgress, 'notesProgress': notesProgress, 'testsProgress': testsProgress}
                chaptersProgress_list.append(chapter)

            context = {'status': 'success', 'chaptersProgress_list': chaptersProgress_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherSeeStudentChaptersProgress(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        suject_id = data['subject_id']
        try:
            chapters = Chapter.objects.filter(subject__id=suject_id)
            subjectWiseStudents = Student.objects.filter(institute=me.profile.institute, subjects__id=suject_id)

            chaptersProgress_list = []
            for chapter in chapters:
                studentChapterWiseProgress_list = []
                for student in subjectWiseStudents:

                    batches = student.batches.all().values_list('id', flat=True)
                    videos = Video.objects.filter(chapter=chapter, teacher__institute=me.profile.institute,
                                                  batches__id__in=batches).distinct().values_list('id', flat=True)
                    videosViews = StudentVideoView.objects.filter(student=student, videoview__video__id__in=videos).count()

                    if videosViews != 0 and len(videos) != 0:
                        videoProgress = str((videosViews / len(videos)) * 100) + ' %'
                    else:
                        videoProgress = '0.0 %'

                    notes = Note.objects.filter(chapter=chapter, teacher__institute=me.profile.institute,
                                                batches__id__in=batches).distinct().values_list('id', flat=True)
                    notesViews = StudentNoteView.objects.filter(student=student, noteview__note__id__in=notes).count()
                    
                    if notesViews != 0 and len(notes) != 0:
                        notesProgress = str((notesViews / len(notes)) * 100) + ' %'
                    else:
                        notesProgress = '0.0 %'

                    tests = Test.objects.filter(chapters=chapter, createdBy__institute=me.profile.institute,
                                                batches__id__in=batches).distinct().values_list('id', flat=True)
                    testsViews = StudentTestView.objects.filter(student=student, testview__test__id__in=tests).count()
                    
                    if testsViews != 0 and len(tests) != 0:
                        testsProgress = str((testsViews / len(tests)) * 100) + ' %'
                    else:
                        testsProgress = '0.0 %'

                    allNotesVideosTests = len(videos) + len(notes) + len(tests)
                    allViews = videosViews + notesViews + testsViews

                    if allNotesVideosTests != 0 and allViews != 0:
                        overallChapterWiseProgress = str((allViews / allNotesVideosTests) * 100) + ' %'
                    else:
                        overallChapterWiseProgress = '0.0 %'

                    studentChapterWiseProgress_dict = {'id': student.id, 'student': student.name, 'overallChapterWiseProgress': overallChapterWiseProgress,
                                                       'videoProgress': videoProgress, 'notesProgress': notesProgress, 'testsProgress': testsProgress}

                    studentChapterWiseProgress_list.append(studentChapterWiseProgress_dict)

                chapter = {'id': chapter.id, 'chapterName': chapter.name, 'studentChapterWiseProgress_list': studentChapterWiseProgress_list}
                chaptersProgress_list.append(chapter)

            context = {'status': 'success', 'chaptersProgress_list': chaptersProgress_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAddExplanationVideo(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        question_id = data['question_id']
        video_url = data['video_url']
        options = Option.objects.filter(question__id=question_id, correct=True).update(explanationVideo=video_url)
        context = {'status': 'Failed', 'message': 'Successfully Uploaded Explanation Video'}
        return Response(context)

class GetChaptersPackageWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        content_type = data['content_type']

        package = Package.objects.get(id=package_id)
        if content_type == 'notes':
            chapters = package.notes.all().values('chapter__id', 'chapter__name').order_by('chapter__id')
        elif content_type == 'videos':
            chapters = package.videos.all().values('chapter__id', 'chapter__name').order_by('chapter__id')
        else:
            chapters = package.tests.all().values('chapters__id', 'chapters__name').order_by('chapters__id')

        chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
        context = {'chapters': chapters}
        return Response(context)

class TeacherGetChapterWiseNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)

            if me.profile.teacheruser.username == 'eduprep_teacher':
                notes = Note.objects.filter(teacher=me.profile, chapter=chapter).order_by('-id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
                    notes = Note.objects.filter(teacher__id__in=teachers, chapter=chapter).distinct().order_by('-id')
                else:
                    notes = Note.objects.filter(teacher=me.profile, chapter=chapter).order_by('-id')

            notes_list = []
            chapter_name = notes[0].chapter.name
            for note in notes:
                title = note.title
                publishDate = note.publishDate
                batches = note.batches.all().values()
                
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                    
                url_list = [note_link]
                
                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'

                note_dict = {
                    'id': note.id,
                    'title': title,
                    'subject_id': note.subject.id,
                    'subject_name': subject_name,
                    'chapter_id': chapter_id,
                    'chapter_name': chapter_name,
                    'publishDate': publishDate,
                    'note_url': url_list,
                    'batches': batches,
                    'noteViewsLimite': note.noteViewsLimite,
                    'image': note.image,
                }
                notes_list.append(note_dict)
                
            context = {'notes': notes_list}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}            
        
        return Response(context)

class TeacherGetChapterWiseVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            chapter = Chapter.objects.get(id=chapter_id)

            if me.profile.teacheruser.username == 'eduprep_teacher':
                videos = Video.objects.filter(teacher=me.profile, chapter=chapter).order_by('id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
                    videos = Video.objects.filter(teacher__id__in=teachers, chapter=chapter).distinct().order_by('-id')
                else:
                    videos = Video.objects.filter(teacher=me.profile, subject=subject).order_by('id')

            videos_list = []
            chapter = videos[0].chapter.name
            subject = videos[0].subject.name
            for video in videos:
                batches = video.batches.all().values()
                video_dict =\
                    {'id': video.id, 'title': video.title, 'url': video.urlLink, 'publishDate': video.publishDate, 'generalVideo': video.generalVideo, 'subject': subject,
                        'chapter': chapter, 'batches': batches, 'publish': video.publish, 'thumbnail': video.thumbnail, 'viewsLimite': video.viewsLimite}
                videos_list.append(video_dict)
                
            context = {'videos': videos_list}
        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)

class TeacherGetChaptersVideosWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        subject = Subject.objects.get(id=subject_id)
        
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
            chapters = Video.objects.filter(teacher__in=teachers, chapter__subject=subject).values(
                'chapter__id', 'chapter__name').order_by('-chapter__id')
        else:
            chapters = Video.objects.filter(teacher=me.profile, chapter__subject=subject).values(
                'chapter__id', 'chapter__name').order_by('-chapter__id')
        chapters = pd.DataFrame(chapters).drop_duplicates().to_dict('records')
        context = {'all_chapters': chapters}
        return Response(context)

class TeacherGetChaptersNotesWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            subject_id = data['subject_id']
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                notes = Note.objects.filter(teacher__in=teachers, subject=subject_id).select_related('chapter')
            else:
                notes = Note.objects.filter(teacher=me.profile, subject=subject_id).select_related('chapter')

            chapters = []
            chapter_ids = set()
            for note in notes:
                if note.chapter:
                    chapter_dict = {'chapter__id': note.chapter.id,'chapter__name': note.chapter.name}
                    if chapter_dict['chapter__id'] not in chapter_ids:
                        chapters.append(chapter_dict)
                        chapter_ids.add(chapter_dict['chapter__id'])
                
            context = {'all_chapters': chapters}
            
        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)

class TeacherCreateBookCategory(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        thumbnail = data['thumbnail']
        BookCategory.objects.create(createdBy=me.profile, name=name, thumbnail=thumbnail)
        context = {'status': 'success', 'message': 'Successfully Created'}
        return Response(context)

class TeacherGetBookCategory(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        bc = BookCategory.objects.filter(createdBy=me.profile).values()
        context = {'status': 'success', 'BookCategories': bc}
        return Response(context)

class TeacherEditBookCategory(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        bookCategory_id = data['bookCategory_id']
        name = data['name']
        thumbnail = data['thumbnail']

        bc = BookCategory.objects.get(id=bookCategory_id)
        bc.name = name
        bc.thumbnail = thumbnail
        bc.save()
        context = {'status': 'success', 'message': 'Successfully Updated'}
        return Response(context)

class TeacherDeleteBookCategory(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        bookCategory_id = data['bookCategory_id']
        try:
            bc = BookCategory.objects.get(id=bookCategory_id)
            bc.delete()
            context = {'status': 'success', 'message': 'BookCategory deleted'}
        except:
            context = {'status': 'Failed', 'message': 'BookCategory not found'}
        return Response(context)

class StudentGetBookCategory(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        bc = BookCategory.objects.filter(createdBy__institute=me.profile.institute).values()
        context = {'status': 'success', 'BookCategories': bc}
        return Response(context)

class StudentGetCategoryWiseBook(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        bookCategory_id = data['bookCategory_id']

        teachers = Teacher.objects.filter(institute=me.profile.institute).values_list('id', flat=True)
        books = Book.objects.filter(categories__id=bookCategory_id, teacher__id__in=teachers)
        book_list = []
        for book in books:
            students_ids = book.students.all().values_list('id', flat=True)
            if me.profile.id in students_ids:
                bought = True
            else:
                bought = False
                
            book_dict = {'id': book.id, 'name': book.name, 'maxPrice': book.maxPrice, 'actualPrice': book.actualPrice, 'bought': bought,
                         'discount': book.discount, 'cover_photo': book.coverPhoto, 'publisher': book.publisher, 'descriiption': book.description}
            book_list.append(book_dict)
        context = {'books': book_list}
        return Response(context)

class TeacherCreateChapterWiseAssignment(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            pdfLink = data['pdfLink']
            title = data['title']
            description = data['description']
            dueDate = data['dueDate']
            batches_ids = data['batch_ids']
            batch_list = batches_ids.strip('][').split(',')
            chapter_id = data['chapter_id']

            chapter = Chapter.objects.get(id=chapter_id)
            subject = chapter.subject
            date = str(dueDate.split('.')[0])
            date = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
            assignment = Assignment()
            assignment.teacher = me.profile
            assignment.link = pdfLink
            assignment.link = pdfLink
            assignment.published = timezone.now()
            assignment.dueDate = date
            assignment.title = title
            assignment.description = description
            assignment.subject = subject
            assignment.chapter = chapter
            assignment.save()

            for bat in batch_list:
                assignment.batches.add(bat)
                assignment.save()
                
            context = {'status': 'success', 'message': 'Assignmnet Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetChapterWiseAssignment(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            batches = me.profile.batches.all().values_list('id', flat=True)
            assignment_list = []
            chapter = Chapter.objects.get(id=chapter_id)
            assignments = Assignment.objects.filter(batches__id__in=batches, chapter=chapter, subjecttiveTest=False)
            for assignment in assignments:
                batch_dict = assignment.batches.all().values()
                student_assignments = assignment.student_assignment.filter(student=me.profile)
                studAssignments_list = []
                for studAssi in student_assignments:
                    studAssignments_dict = {'marks': studAssi.marks, 'remarks': studAssi.remark}
                    studAssignments_list.append(studAssignments_dict)
                    
                assign_dict = {
                    'id': assignment.id, 
                    'link': assignment.link, 
                    'published': assignment.published, 
                    'dueDate': assignment.dueDate,
                    'title': assignment.title, 
                    'description': assignment.description, 
                    'batches': batch_dict, 
                    'studentAssignments': studAssignments_list
                    }
                assignment_list.append(assign_dict)
            
            context = {'assignments': assignment_list}
        except Exception as e:
            context = {'message': str(e)}
            
        return Response(context)

class StudentRequestBuyBook(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        book_id = data['book_id']
        phone = data['phone']
        try:
            quantity = data['quantity']
        except:
            quantity = None
            
        if len(phone) != 10:
            context = {'status': 'Failed', 'message': 'Wrong Number'}
            return Response(context)
        try:
            book = Book.objects.get(id=book_id)
            try:
                bookRequest = BuyBookRequest.objects.get(book=book, student=me.profile, inProcess=True)
                context = {'status': 'Failed', 'message': 'Buy Request Already Sent'}
                
            except Exception as e:
                bookRequest = BuyBookRequest()
                bookRequest.student = me.profile
                bookRequest.book = book
                bookRequest.phone = phone
                if quantity:
                    bookRequest.quantity = quantity
                bookRequest.save()
                
                try:
                    json_file = teacher.institute.json_file
                except:
                    json_file = None

                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    deviceId = book.teacher.firebaseToken
                    teacher_id = book.teacher.id
                    to_text = f'{me.profile.name} sent a buy book request'
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                    
                except Exception as f:
                    print(str(f))

                context = {'status': 'success', 'message': 'Buy Book request sent to teacher successfully, Teacher will be contact soon!!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetAllBuyBookRequests(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        bookRequests = BuyBookRequest.objects.filter(book__teacher=me.profile, inProcess=True).order_by('-id')
        book_requests_list = []
        for br in bookRequests:
            book = br.book
            book_dict = {'id': book.id, 'name': book.name, 'coverPhoto': book.coverPhoto,
                         'actualPrice': book.actualPrice, 'maxPrice': book.maxPrice, 'discount': book.discount}
            try:
                studentDetails = StudentDetails.objects.get(student=br.student)
                student = br.student
                student_dict = {'id': student.id, 'name': student.name, 'username': student.studentuser.username,
                                'photo': studentDetails.photo, 'address': studentDetails.address, 'city': studentDetails.city, 'state': studentDetails.state}
            except:
                student_dict = {}

            br_dict = {'id': br.id, 'student': student_dict, 'time': br.time,
                       'phone': br.phone, 'quantity': br.quantity, 'book_details': book_dict}
            book_requests_list.append(br_dict)
        context = {'bookRequests': book_requests_list}
        return Response(context)

class TeacherAcceptStudentBuyBookRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        request_id = data['book_request_id']
        paidAmount = data['paidAmount']

        try:
            buyRequest = BuyBookRequest.objects.get(id=request_id, inProcess=True)
            student = buyRequest.student
            book = buyRequest.book

            actualPrice = buyRequest.quantity * book.actualPrice

            if float(paidAmount) > actualPrice:
                context = {'status': 'Failed', 'message': 'Paid amount can\'t be greater than price of book'}
            else:
                dueAmount = actualPrice - float(paidAmount)
                buyRequest.inProcess = False
                buyRequest.accepted = True
                buyRequest.acceptTime = timezone.now()
                buyRequest.paidAmount = int(float(paidAmount))
                buyRequest.dueAmount = int(dueAmount)
                buyRequest.save()

                book.students.add(student)
                book.save()
                details = StudentBook()
                details.book = book
                details.student = student
                details.quantity = buyRequest.quantity
                details.save()

                paid_detail = PaidAmountStudentBook()
                paid_detail.studentBook = details
                paid_detail.paidAmount = int(float(paidAmount))
                paid_detail.date = timezone.now().date()
                paid_detail.save()

                try:
                    json_file = me.profile.institute.json_file
                except Exception as e:
                    json_file = None
                
                try:
                    app_token = me.profile.institute.serverKey
                    deviceId = student.firebaseToken
                    to_text = 'Congrats!! The Teacher has accepted your book request, Your Book On the Way'
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                        
                except Exception as f:
                    print(str(f))

                context = {'status': 'success', 'message': 'Student added to book'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRejectBuyBookRequest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        book_request_id = data['book_request_id']
        try:
            buy_book_request = BuyBookRequest.objects.get(id=book_request_id, inProcess=True)
            buy_book_request.inProcess = False
            buy_book_request.accepted = False
            buy_book_request.save()
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None

            try:
                app_token = me.profile.institute.serverKey
                deviceId = buy_book_request.student.firebaseToken
                to_text = 'The Teacher has rejected your book request..'
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as f:
                print(str(f))

            context = {'status': 'success', 'message': 'Request Rejected'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PackageAddFileTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        tests = data['fileTests_id']
        tests_list = tests.strip('][').split(',')
        try:
            package = Package.objects.get(id=package_id)

            fileTests = FileTest.objects.filter(id__in=tests_list)
            for test in fileTests:
                packages = test.package_filetest.all()
                if packages:
                    isInDemo = False
                    for pack in packages:
                        try:
                            PackageDemoContent.objects.get(package=pack, fileTests=test)
                            isInDemo = True
                            break
                        except:
                            pass
                    if isInDemo == False:
                        test.locked = True
                        test.save()
                    else:
                        test.locked = False
                        test.save()
                else:
                    test.locked = True
                    test.save()
                package.fileTests.add(test)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW TEST","body": f"A new ORM test uploaded for you in {package.title} package"}
            
            institute_code= me.profile.institute.code
            institute_code_list = ["wisdombrains","mbca"]
            if institute_code not in institute_code_list:
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id)
                
            context = {'status': 'success', 'message': 'Tests Added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PackageRemoveFileTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        test_id = data['fileTest_id']
        package_id = data['package_id']

        package = Package.objects.get(id=package_id)
        test = FileTest.objects.get(id=test_id)

        package.fileTests.remove(test)

        packages = test.package_filetest.all()
        if packages:
            isInDemo = False
            for pack in packages:
                try:
                    PackageDemoContent.objects.get(package=pack, fileTests=test)
                    isInDemo = True
                    break
                except:
                    pass

            if isInDemo == False:
                test.locked = True
                test.save()
            else:
                test.locked = False
                test.save()
        else:
            test.locked = False
            test.save()

        try:
            demoContent = PackageDemoContent.objects.get(package=package, fileTests=test)
            demoContent.fileTests.remove(test)
        except:
            pass
        
        context = {'status': 'success','message': '{} test has been removed from  package'.format(test.name)}
        return Response(context)

class TeacherAddDemoFileTestPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        test_id = data['fileTest_id']
        try:
            test = FileTest.objects.get(id=test_id)
            test.locked = False
            test.save()
            package = Package.objects.get(id=package_id)
            try:
                demoContent = PackageDemoContent.objects.get(package=package)
                demoContent.fileTests.add(test)
                context = {'status': 'success', 'message': 'Demo test added'}
            except PackageDemoContent.DoesNotExist:
                demoContent = PackageDemoContent()
                demoContent.package = package
                demoContent.save()
                demoContent.fileTests.add(test)
                demoContent.save()
                context = {'status': 'success', 'message': 'Demo test added'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherRemoveDemoFileTestPackage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['fileTest_id']
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        test = FileTest.objects.get(id=test_id)
        test.locked = True
        test.save()
        demoContent = PackageDemoContent.objects.get(package=package, fileTests=test)
        demoContent.fileTests.remove(test)
        context = {'status': 'success','message': '{} test has been removed from package'.format(test.name)}
        return Response(context)

class GetAllCategories(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        categories = TeacherCourseCategory.objects.all()
        list_ = []
        for cat in categories:
            dict_ = {
                "id": cat.id,
                "name": cat.name,
                "colour": cat.colour,
                "thumbnail": cat.thumbnail,
            }
            list_.append(dict_)
        context = {'status': "success", 'list': list_}
        return Response(context)

class GetCategoryWiseCourses(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        category_id = data['category_id']
        category = TeacherCourseCategory.objects.get(id=category_id)
        courses = category.teacher_courses.filter(teachercourses_package__marketParentPackage=None, teachercourses_package__marketLevelPackage=True,
                                                  teachercourses_package__publish=True).distinct().values('id', 'name', 'package_thumbnail', 'reward_thumbnail')
        context = {'courses': courses}
        return Response(context)

class GetAllCourses(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        courses = TeacherCourse.objects.filter(teachercourses_package__marketParentPackage=None, teachercourses_package__marketLevelPackage=True,
                                               teachercourses_package__publish=True).distinct().values('id', 'name', 'package_thumbnail', 'reward_thumbnail')
        context = {'courses': courses}
        return Response(context)

class TeacherGetPackagesFromMarketShop(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        course_id = data['course_id']
        packages = Package.objects.filter(teacherCourses__id=course_id, marketParentPackage=None, marketLevelPackage=True, publish=True).order_by('-id')

        final_list = []
        for package in packages:
            numberOfTests = package.tests.all().count()
            numberOfVideos = package.videos.all().count()
            numberOfNotes = package.notes.all().count()
            numberOfYoutubeVideos = package.youtubeLiveVideos.all().count()
            numberOfFileTests = package.fileTests.all().count()
            package_dict = {'id': package.id, 'title': package.title, 'price': package.price, 'basePrice': package.basePrice, 'duration': package.duration, 'details': package.details, 'thumbnail': package.thumbnail,
                            'numberOfTests': numberOfTests, 'numberOfVideos': numberOfVideos, 'numberOfNotes': numberOfNotes, 'numberOfYoutubeVideos': numberOfYoutubeVideos, 'numberOfFileTests': numberOfFileTests}
            final_list.append(package_dict)
        context = {'packages': final_list}
        return Response(context)

class TeacherGetSubjectWisePackagesFromMarketShop(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        subject_id = data['subject_id']
        packages = Package.objects.filter(teacherCourses__subject_course__id=subject_id,
                                          marketParentPackage=None, marketLevelPackage=True, publish=True).order_by('-id')

        final_list = []
        for package in packages:
            numberOfTests = package.tests.all().count()
            numberOfVideos = package.videos.all().count()
            numberOfNotes = package.notes.all().count()
            numberOfYoutubeVideos = package.youtubeLiveVideos.all().count()
            numberOfFileTests = package.fileTests.all().count()
            package_dict = {'id': package.id, 'title': package.title, 'price': package.price, 'basePrice': package.basePrice, 'duration': package.duration, 'details': package.details, 'thumbnail': package.thumbnail,
                            'numberOfTests': numberOfTests, 'numberOfVideos': numberOfVideos, 'numberOfNotes': numberOfNotes, 'numberOfYoutubeVideos': numberOfYoutubeVideos, 'numberOfFileTests': numberOfFileTests}
            final_list.append(package_dict)
        context = {'packages': final_list}
        return Response(context)






class TeacherSeeMarketShopPackageDetails(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            pdc = PackageDemoContent.objects.filter(package=package).values_list('tests__id', flat=True).distinct()
            subjects = package.tests.all().values_list('subjects__id', 'subjects__name').distinct()
            totalTests = package.tests.all().count()
            subjectWiseTests_list = []
            for subject in subjects:
                subjectWise_tests = package.tests.filter(subjects__id=subject[0]).values('id', 'name')

                for i in subjectWise_tests:
                    if i['id'] in pdc:
                        i['demoTest'] = True
                    else:
                        i['demoTest'] = False

                subjectWiseTests_dict = {'subject': subject[1], 'tests': subjectWise_tests}
                subjectWiseTests_list.append(subjectWiseTests_dict)

            details = {'id': package_id, 'title': package.title, 'price': package.price, 'basePrice': package.basePrice,
                       'duration': package.duration, 'details': package.details, 'subjectWiseTests_list': subjectWiseTests_list, 'totalTests': totalTests}
            context = {'status': 'success', 'details': details}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherSeeMarketShopPackageTestDeatils(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        test_id = data['test_id']
        try:
            test = Test.objects.get(id=test_id)
            questions = test.questions.all().count()
            test_dict = {'id': test.id, 'name': test.name, 'totalMarks': test.totalMarks,
                         'published': test.published, 'time': test.time, 'totalQuestions': questions, "testInstructions": test.testInstructions}
            context = {'status': 'success', 'test_details': test_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherSeeMarketShopPackageTestQuestions(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        test_id = data['test_id']

        questions_list = []
        test = Test.objects.get(id=test_id)

        try:
            questions = test.questions.all()
            for question in questions:

                direction = question.direction
                if direction != None:
                    direction_dict = {
                        'id': direction.id, 'text': direction.text, 'picture': direction.picture}
                else:
                    direction_dict = {'id': None,
                                      'text': None, 'picture': None}

                subject = question.subject
                if subject == None:
                    subject_dict = {'id': 0, 'name': 'extra'}
                else:
                    subject_dict = {'id': subject.id, 'name': subject.name}

                chapter = question.chapter
                if chapter == None:
                    chapter_dict = {'id': 0, 'name': 'extra', 'code': '1.1'}
                else:
                    chapter_dict = {'id': chapter.id,
                                    'name': chapter.name, 'code': chapter.code}

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    option_dict = {'id': option.id, 'text': option.text, 'picture': option.picture, 'explanationText':
                                   option.explanationText, 'explanationPicture': option.explanationPicture, 'correct': option.correct}
                    options_list.append(option_dict)

                question_dict = {'id': question.id, 'text': question.text, 'dynamicText': question.dynamicText, 'picture': question.picture, 'direction': direction_dict, 'subject': subject_dict, 'chapter': chapter_dict,
                                 'marks': question.marks, 'negativeMarks': question.negativeMarks, 'language': question.language, 'source': question.source, 'options': options_list, 'oneWordQuestion': question.oneWordQuestion}
                questions_list.append(question_dict)

            context = {'status': 'success', 'totalQuestions': len(questions_list), 'questions': questions_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherAddPackageFromMarketShop(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        price = data['price']

        try:
            parentPackage = Package.objects.get(id=package_id)
            teacherCourses = parentPackage.teacherCourses
            price = parentPackage.price + float(price)
            package = Package.objects.filter(teacher=me.profile, marketParentPackage=parentPackage, marketLevelPackage=True)
            if package:
                context = {'status': 'Failed', 'message': 'Sorry!! This package already added in your institute'}
                return Response(context)

            package = Package.objects.create(title=parentPackage.title, teacher=me.profile, price=price, duration=parentPackage.duration, details=parentPackage.details,
                                             teacherCourses=parentPackage.teacherCourses, thumbnail=teacherCourses.package_thumbnail, basePrice=parentPackage.price)
            package.save()

            order_package = PackageOrderWise()
            order_package.package = package
            order_package.order = 0
            if parentPackage.fixDuration:
                package.fixDuration = True
            order_package.save()

            notes = parentPackage.notes.all()
            videos = parentPackage.videos.all()
            tests = parentPackage.tests.all()
            fileTests = parentPackage.fileTests.all()
            youtubeLiveVideos = parentPackage.youtubeLiveVideos.all()

            package.notes.add(*notes)
            package.videos.add(*videos)
            package.tests.add(*tests)
            package.fileTests.add(*fileTests)
            package.youtubeLiveVideos.add(*youtubeLiveVideos)

            package.marketParentPackage = parentPackage
            package.marketLevelPackage = True
            package.save()

            batches = me.profile.batches.all()

            total_packages = Package.objects.filter(
                Q(teacher=me.profile, marketLevelPackage=True) & ~Q(marketParentPackage=None)).count()

            if total_packages == 1:
                try:
                    coin = TeacherCoin.objects.get(teacher=me.profile)
                    coin.coins += float(100)
                    coin.save()
                except TeacherCoin.DoesNotExist:
                    coin = TeacherCoin()
                    coin.teacher = me.profile
                    coin.coins += float(100)
                    coin.save()
                except Exception as e:
                    pass

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"NEW PACKAGE","body": f'{package.title}, New package has been created for you'}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"

            for bat in batches:
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=bat.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=bat.id)
                
            try:
                app_token = list(AppServerKey.objects.all())[0]
                deviceId = parentPackage.teacher.firebaseToken
                to_text = f'Congrats 😍😍. The package of {parentPackage.title} you have in the market has been added by {me.profile.institute.name} institute..'
                notification = {'title':'New Notification', 'body': to_text}
                if json_file_url == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file_url, notification=notification, deviceId=deviceId)
                    
            except Exception as f:
                print(str(f))

            context = {'status': 'success', 'message': 'Package Sccussfully Added, To see package details go to my courses tab', 'package_id': package.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetTotalEarningAndTotalBuyers(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            studentPackages = StudentPackage.objects.select_related('package').filter(package__teacher=me.profile)
            packages_ids = studentPackages.values_list('package__id', flat=True)

            details = []
            Totalearning = 0
            total_base_price = 0
            total_sold = 0

            for stpack in studentPackages:
                price = PaidAmountStudentPackage.objects.get(studentPackage=stpack).paidAmount
                Totalearning += price
                total_base_price += stpack.package.basePrice
                package_dict = {'title': stpack.package.title, 'price': stpack.package.price,'basePrice': stpack.package.basePrice, 'paid price': price}
                student_dict = {'name': stpack.student.name, 'institute': stpack.student.institute.name,'studentuser': stpack.student.studentuser.username}

                st_dict = {'student': student_dict, 'package': package_dict, 'startDate': stpack.startDate, 
                           'endDate': stpack.endDate, 'packageDurationWhileAddPackage': stpack.packageDurationWhileAddPackage, 
                           'packageFixDurationWhileAddPackage': stpack.packageFixDurationWhileAddPackage}

                details.append(st_dict)
                total_sold += 1

            context = {'details': details}

            if Totalearning != 0 and total_base_price != 0:
                context = {'status': 'success', 'totalStudents': total_sold,'totalEarnedFromMarketPackages': Totalearning - total_base_price}
            else:
                context = {'status': 'success', 'message': "Don't have any packages",'totalEarnedFromMarketPackages': 0.0, 'totalMarketPackages': 0.0, 'totalStudents': 0}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetTotalEarningAndTotalBuyersNew(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            packages = Package.objects.filter(teacher=me.profile)

            Totalearning = 0
            total_base_price = 0
            total_sold = 0

            correct_caulclated = True
            for pack in packages:
                try:
                    pack_earning = PackageEarning.objects.get(package=pack)
                    Totalearning += pack_earning.total_price
                    total_base_price += pack_earning.base_price_total
                    total_sold += pack_earning.units_sold
                except:
                    correct_caulclated = False
                    
            if correct_caulclated:
                context = {
                    'status': 'Success',
                    "message": [{
                        "Totalearning": Totalearning-total_base_price,
                        "total_sold": total_sold
                    }]
                }
            else:
                context = {'status': 'Failed',}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetTotalEarningAndTotalBuyersNewAPI(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            packages = Package.objects.filter(teacher=me.profile)
            details = []
            error = []
            Totalearning = 0
            total_base_price = 0
            total_sold = 0
            for package in packages:
                try:
                    total_earning = PackageEarning.objects.filter(package=package).first()
                    if total_earning:
                        Totalearning += total_earning.total_price
                        total_sold += total_earning.units_sold
                    else:
                        transaction = PaidAmountStudentPackage.objects.filter(studentPackage__package=package)
                        total_earning = PackageEarning.objects.create(
                            package=package,
                            units_sold=0,
                            total_price=0,
                            base_price=0
                        )
                        for tran in transaction:
                            total_earning.base_price_total += package.basePrice
                            total_earning.total_price += package.price
                            total_earning.all_transactions.add(tran)
                            total_earning.units_sold += 1
                        total_earning.save()
                        Totalearning += total_earning.total_price
                        total_sold += total_earning.units_sold
                except Exception as e:
                    error.append(str(e))
            context = {
                "status": "success",
                "response": {
                    'Totalearning': Totalearning - total_base_price,
                    'total_sold': total_sold
                }
            }

            if Totalearning != 0 and total_base_price != 0:
                context = {'status': 'success', 'totalStudents': total_sold,'totalEarnedFromMarketPackages': Totalearning - total_base_price}
            else:
                context = {'status': 'success', 'message': "Don't have any packages",'totalEarnedFromMarketPackages': 0.0, 'totalMarketPackages': 0.0, 'totalStudents': 0}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetInformationAddedMarketShopPackages(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        packages = Package.objects.filter(Q(teacher=me.profile, marketLevelPackage=True) & ~Q(marketParentPackage=None))
        packages_list = []
        try:
            for package in packages:
                try:
                    pack_earning = PackageEarning.objects.get(package=package)
                except:
                    create_or_update_record_of_package_earning(package.id)
                    pack_earning = PackageEarning.objects.get(package=package)

                context = {
                    "status": "success",
                    "units_sold": pack_earning.units_sold,
                    "total_earning": pack_earning.total_price - pack_earning.base_price_total
                }

                if package.course:
                    course = package.course.name
                else:
                    course = None

                if package.teacherCourses:
                    teacherCourses = package.teacherCourses.id
                else:
                    teacherCourses = None

                dict = {
                    'id': package.id,
                    'title': package.title,
                    'publish': package.publish,
                    'thumbnail': package.thumbnail,
                    'course': course,
                    'totalEarning': pack_earning.total_price - pack_earning.base_price_total,
                    'totalStudents': pack_earning.units_sold,
                    'teacherCourses': teacherCourses}
                packages_list.append(dict)

            context = {'status': 'success', 'packages': packages_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherGetBuyersDetailsPackageWise(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data

        package_id = data['package_id']
        try:
            studentPackages = StudentPackage.objects.filter(
                package__id=package_id).order_by('-startDate')
            buyersDetail_list = []
            for sp in studentPackages:
                if sp.package:
                    batches_list = sp.student.batches.all().values()

                    student = sp.student
                    studentDetail_dict = {
                        'id': student.id, 'name': student.name, 'batches': batches_list}
                    paidAmount = sp.paid_studentpackage.paidAmount

                    buyersDetail_dict = {'duration': sp.package.duration, 'startDate': sp.startDate,
                                         'endDate': sp.endDate, 'paidAmount': paidAmount, 'studentDetail': studentDetail_dict}
                    buyersDetail_list.append(buyersDetail_dict)
                else:
                    pass
            context = {'status': 'success',
                       'buyersDetail_list': buyersDetail_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetWalletBalance(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        context = {'status': 'Failed', 'message': 'Please update app to continue'}
        return Response(context)

        try:
            studentPackages = StudentPackage.objects.filter(package__teacher=me.profile)
            packages_ids = studentPackages.values_list('package__id', flat=True)

            if packages_ids:
                studentPackages_ids = studentPackages.values_list('id', flat=True)
                packages = Package.objects.filter(id__in=packages_ids)
                totalMarketPackagesBasePrice = packages.aggregate(totalBasePrice=Sum('basePrice'))

                totalEarning = PaidAmountStudentPackage.objects.filter(
                    studentPackage__id__in=studentPackages_ids).aggregate(totalAmount=Sum('paidAmount'))

                totalEarning = totalEarning['totalAmount']
                totalMarketPackagesBasePrice = totalMarketPackagesBasePrice['totalBasePrice']

                if totalEarning != None and totalMarketPackagesBasePrice != None:
                    totalEarningAmount = totalEarning - totalMarketPackagesBasePrice
                    totalPaidwithdrawMoney = TeacherWithdrawMoneyRequest.objects.filter(
                        Q(teacher=me.profile, requestType='withdraw-money') & ~Q(status='rejected-request')).aggregate(totalPaidwithdrawMoney=Sum('withdrawMoney'))

                    if totalPaidwithdrawMoney['totalPaidwithdrawMoney'] != None:
                        walletBalance = totalEarningAmount - totalPaidwithdrawMoney['totalPaidwithdrawMoney']
                    else:
                        walletBalance = totalEarningAmount

                else:
                    walletBalance = 0.0

                context = {'status': 'success', 'walletBalance': walletBalance}
            else:
                context = {
                    'status': 'success', 'message': "Don't have any packages", 'walletBalance': 0.0}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDoRequestWithdrawMoney(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        withdrawMoney = data['withdrawMoney']
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)

class TeacherGetOwnWithdrawMoneyHistory(APIView):
    def get(self, request):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)
        me = Teach(self.request.user)
        historys_list = TeacherWithdrawMoneyRequest.objects.filter(teacher=me.profile, requestType='withdraw-money').order_by('-id').values()
        context = {'status': 'success', 'history': historys_list}
        return Response(context)

class TeacherDoRequestWithdrawCoins(APIView):
    def post(self, request, *args, **kwargs):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)
        me = Teach(self.request.user)
        data = request.data
        coins = data['coins']

        try:
            packages = Package.objects.filter(Q(teacher=me.profile, marketLevelPackage=True) & ~Q(marketParentPackage=None))

            if packages:
                coins = float(coins)
                packages_ids = packages.values_list('id', flat=True)
                packagesStudents = StudentPackage.objects.filter(package__id__in=packages_ids).count()

                if packagesStudents > 0:
                    twmr = TeacherWithdrawMoneyRequest.objects.create(teacher=me.profile, coin=coins, requestType='withdraw-coins')
                    teacherCoins = TeacherCoin.objects.get(teacher=me.profile)
                    teacherCoins.coins -= coins
                    teacherCoins.save()

                    try:
                        app_token = list(AppServerKey.objects.all())[0]
                        to_text = f'New withdraw coins request has been recieved from {me.profile.institute.name} institute, Please check the request as soon as possible'
                        teacher = Teacher.objects.get(teacheruser__username='teacherdemo')
                        deviceId = teacher.firebaseToken
                        send_notification_individual(app_token, deviceId, to_text)
                    except Exception as f:
                        print(str(f))

                    context = {'status': 'success', 'message': 'successfully sent withdraw coins request','withdrawRequestStatus': twmr.status}

                else:
                    context = {'status': 'Failed', 'message': 'Please sell atleast one package which is addded by store'}

            else:
                context = {'status': 'Failed', 'message': 'Please sell atleast one package which is addded by store'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetOwnWithdrawCoinsHistory(APIView):
    def get(self, request):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)
        me = Teach(self.request.user)
        historys_list = TeacherWithdrawMoneyRequest.objects.filter(teacher=me.profile, requestType='withdraw-coins').order_by('-id').values()
        context = {'status': 'success', 'history': historys_list}
        return Response(context)

class StaffGetAllWithdrawMoneyRequests(APIView):
    def get(self, request):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)

class StaffAcceptWithdrawMoneyRequest(APIView):
    def post(self, request, *args, **kwargs):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)

class StaffRejectWithdrawMoneyRequest(APIView):
    def post(self, request, *args, **kwargs):
        context = {'status': 'Failed','message': 'please update app to continue'}
        return Response(context)

class StaffAddPackageForMarketShop(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        price = data['price']
        course_id = data['course_id']

        try:
            parentPackage = Package.objects.get(id=package_id)
            price = float(price)

            package = Package.objects.create(title=parentPackage.title, teacher=me.profile, price=price,
                                             basePrice=price, duration=parentPackage.duration, details=parentPackage.details)

            if parentPackage.thumbnail:
                package.thumbnail = parentPackage.thumbnail
            package.save()

            order_package = PackageOrderWise()
            order_package.package = package
            order_package.order = 0
            if parentPackage.fixDuration:
                package.fixDuration = True
            order_package.save()

            if course_id:
                course = TeacherCourse.objects.get(id=course_id)
                package.teacherCourses = course
                package.save()

            notes = parentPackage.notes.all()
            videos = parentPackage.videos.all()
            tests = parentPackage.tests.all()
            fileTests = parentPackage.fileTests.all()
            youtubeLiveVideos = parentPackage.youtubeLiveVideos.all()

            package.notes.add(*notes)
            package.videos.add(*videos)
            package.tests.add(*tests)
            package.fileTests.add(*fileTests)
            package.youtubeLiveVideos.add(*youtubeLiveVideos)

            package.marketLevelPackage = True
            package.save()

            context = {'status': 'success', 'message': 'Package Sccussfully added, To see package details go to my courses tab', 'package_id': package.id}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StaffConvertNormalPackageToMarketPlacePackage(APIView):
    def post(self, request):
        data = request.data
        package_id = data['package_id']
        course_id = data['course_id']

        package = Package.objects.get(id=package_id)
        course = TeacherCourse.objects.get(id=course_id)

        package.teacherCourses = course
        package.marketLevelPackage = True
        package.save()

        context = {'status': 'success', 'message': 'Added!'}
        return Response(context)

class IsContentBought(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        content_id = data['content_id']
        contentType = data['contentType']

        bought = False
        try:
            if contentType == 'note':
                note = Note.objects.get(id=content_id)
                if note.locked == True:
                    packageStudents_ids = Package.objects.filter(notes=note).values_list('students__id', flat=True)
                    if me.profile.id in packageStudents_ids:
                        bought = True
                    else:
                        bought = False
                else:
                    bought = True

            elif contentType == 'test':
                test = Test.objects.get(id=content_id)
                if test.locked == True:
                    packageStudents_ids = Package.objects.filter(tests=test).values_list('students__id', flat=True)
                    if me.profile.id in packageStudents_ids:
                        bought = True
                    else:
                        bought = False
                else:
                    bought = True
            else:
                video = Video.objects.get(id=content_id)
                if video.locked == True:
                    packageStudents_ids = Package.objects.filter(videos=video).values_list('students__id', flat=True)
                    if me.profile.id in packageStudents_ids:
                        bought = True
                    else:
                        bought = False
                else:
                    bought = True
            context = {'status': 'success', 'bought': bought}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentSeeOwnBookOrders(APIView):
    def get(self, request):
        me = Studs(self.request.user)

        try:
            studentbook = StudentBook.objects.filter(student=me.profile).order_by('-id')
            student_book_orders = []
            for sb in studentbook:
                book = sb.book
                book_dict = {'id': book.id, 'name': book.name, 'coverPhoto': book.coverPhoto, 'maxPrice': book.maxPrice,
                             'discount': book.discount, 'actualPrice': book.actualPrice, 'description': book.description}
                paidbook = PaidAmountStudentBook.objects.filter(studentBook=sb)
                paid_list = []
                for pp in paidbook:
                    pp_dict = {'id': pp.id, 'paid': pp.paidAmount, 'date': pp.date}
                    paid_list.append(pp_dict)
                    
                studentBook_dict = {'id': sb.id, 'date': sb.date, 'isComplete': sb.isComplete, 'quantity': sb.quantity,
                                    'dispatche': sb.dispatche, 'delivered': sb.delivered, 'bookDeatil': book_dict, 'paid_details': paid_list}
                student_book_orders.append(studentBook_dict)
            context = {'status': 'success', 'bookOrders': student_book_orders}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherDispatcheBook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        studentBook_id = data['studentBook_id']
        try:
            studentbook = StudentBook.objects.get(id=studentBook_id)
            studentbook.dispatche = True
            studentbook.save()
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None
    
            try:
                student = studentbook.student
                app_token = student.institute.serverKey
                deviceId = student.firebaseToken
                to_text = f'{student.name} your {studentbook.book.name} book has been dispatched'
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as f:
                print(str(f))
                
            context = {'status': 'success', 'message': 'Student Book Successfully Dispatched'}
        except StudentBook.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Student Book not found'}
        return Response(context)

class TeacherDeliveredBook(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data

        studentBook_id = data['studentBook_id']
        try:
            studentbook = StudentBook.objects.get(id=studentBook_id)
            studentbook.delivered = True
            studentbook.save()
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None
    
            try:
                student = studentbook.student
                app_token = student.institute.serverKey
                deviceId = student.firebaseToken
                to_text = f'{student.name} your {studentbook.book.name} book has been delivered'
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as f:
                print(str(f))
            context = {'status': 'success', 'message': 'Student Book Successfully Delivered'}
        except StudentBook.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Student Book not found'}
        return Response(context)

class StudentSeeMessageNativeVideo(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            video_id = data['video_id']
            videoObject = NativeLiveVideo.objects.get(id=video_id)
            messages = MessageLiveVideo.objects.filter(video=videoObject).order_by('-id')
            message_list = []
            count = 0

            for message in messages:
                if count == 30:
                    break
                else:
                    message_dict = {
                        'id': message.id, 
                        'student': message.student.name,
                        'message': message.message, 
                        'time': message.time
                        }
                    message_list.append(message_dict)
                count += 1
            context = {'messages': message_list}
        except Exception as e:
            context = {'messages': []}
        return Response(context)

class SuggestionQuestionToStudent(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        course_id = data['course_id']

        try:
            suggestedQuestions = SuggestionQuestion.objects.filter(course__id=course_id).order_by('-id')[:6].values()
            context = {'status': 'success', 'suggestedQuestions': suggestedQuestions}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDawnloadStudentsAttendanceCSV(APIView):
    def get(self, request, batch_id, date):
        response = HttpResponse(content_type='text/csv')
        writer = csv.writer(response)
        writer.writerow(['Student Name', 'Contact', 'Attendance'])

        batch = Batch.objects.get(id=batch_id)
        students = Student.objects.filter(batches=batch)

        for student in students:
            contact = student.studentuser.username.split('@')[0]
            try:
                attendance = Attendance.objects.filter(date=date, student=student)
                if len(attendance) > 0:
                    attendance = attendance[0]
                    attendance_type = attendance.attendanceType
                    writer.writerow([student.name, contact, attendance_type])

                elif len(attendance) == 0:
                    writer.writerow([student.name, contact, 'not marked'])

            except Exception as e:
                writer.writerow([student.name, contact, None])

        response['Content-Disposition'] = f'attachment; filename="{batch.name}_{date}.csv"'
        return response





class TeacherGetStudentFileTestPerformanceDataCSV(APIView):
    def get(self, request, batch_id, test_id):

        test = FileTest.objects.get(id=test_id)
        batch = Batch.objects.get(id=batch_id)

        response = HttpResponse(content_type='text/csv')
        writer = csv.writer(response)
        writer.writerow(['id', 'Name Of Student', 'Total Questions', 'Posstive Marks',
                        'Negative Marks', 'Marks Scored', 'Total Marks', 'Total Percentage', 'Time', 'Result','Total Time Taken Min'])

        student_marks = StudentFileTestMarks.objects.filter(
            fileTest=test, student__batches=batch)
        marks = []
        for sm in student_marks:

            student = sm.student

            total_questions = test.totalQuestion

            positive_marks = test.totalMarks / total_questions

            if test.negativeMarks:
                negative_marks = test.negativeMarks
            else:
                negative_marks = 0

            testTotalMarks = test.totalMarks

            pass_marks = test.passing_marks
            total_marks = sm.marks

            if pass_marks:
                if total_marks > pass_marks or total_marks == pass_marks:
                    result = 'pass'
                else:
                    result = 'failed'
            else:
                result = 'undefined'

            try:
                total_percentage = (total_marks * 100)/testTotalMarks
            except:
                total_percentage = None

            writer.writerow([sm.id, student.name, total_questions, positive_marks, negative_marks,
                            total_marks, testTotalMarks, str(total_percentage)+' %', sm.attemptTime, result,sm.time])
        response['Content-Disposition'] = 'attachment; filename=" ' + \
            test.title+' studentPerformance_report.csv"'
        return response

class TeacherGetPostUpiId(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        context = {'status': 'success', 'upi_id': me.profile.upi_id}
        return Response(context)

    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            upi_id = data['upi_id']
            me.profile.upi_id = upi_id
            me.profile.save()
            context = {'status': 'success','message': 'Successfully Updated!', 'upi_id': upi_id}
            return Response(context)
        except Exception as e:
            return Response(str(e))

class TeacherGetStudentTestPerformanceDataCSV(APIView):
    def get(self, request, batch_id, test_id):
        test = Test.objects.get(id=test_id)
        batch = Batch.objects.get(id=batch_id)

        response = HttpResponse(content_type='text/csv')
        writer = csv.writer(response)
        writer.writerow(['id', 'Name Of Student', 'Total Questions', 'Questions Attempted', 'Questions Not Attempted', 'Right Answers',
                        'Wrong Answers', 'Posstive Marks', 'Negative Marks', 'Marks Scored', 'Total Marks', 'Total Percentage', 'Time', 'Result','Total Taken Time Min'])

        try:
            student_marks = StudentMarks.objects.filter(test=test, student__batches=batch).select_related('student')
            marks = []
            for sm in student_marks:
                student = sm.student
                test_taken_time_in_sec = sm.time
                taken_time = round((test_taken_time_in_sec/60),2)
                writer.writerow([sm.id, student.name, sm.totalQuestions, sm.totalAttemptedQuestions, sm.totalNotAttemptedQuestions, sm.totalRightQuestions,
                                sm.totalWrongQuestions, sm.totalPositiveMarks, sm.totalNegativeMarks, sm.marks, sm.totalTestMarks, str(sm.percentage)+' %', sm.attemptTime, sm.result,taken_time])
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)
        
        response['Content-Disposition'] = f'attachment; filename="{test.name}_{test_id}_student_performance_report.csv"'
        return response


class SubInstituteFAQAPI(APIView):
    def get(self, request):
        try:
            faqs = SubInstituteFAQ.objects.all().order_by('-id')
            faqs_list = []
            for faq in faqs:
                faq_dict = {
                    'id': faq.id,
                    'question': faq.question,
                    'answer':  faq.answer
                }
                faqs_list.append(faq_dict)

            return Response({'status': True, 'response': faqs_list})
        
        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def post(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            question = data['question']
            answer = data['answer']

            SubInstituteFAQ.objects.create(question=question, answer=answer)
            return Response({'status': True, 'response': 'FAQ Created Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def put(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            faq_id = data['faq_id']
            faq = SubInstituteFAQ.objects.get(id=faq_id)

            question = data.get('question')
            if question:
                faq.question = question

            answer = data.get('answer')
            if answer:
                faq.answer = answer

            faq.save()

            return Response({'status': True, 'response': 'FAQ Updated Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def delete(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            faq_id = data['faq_id']

            SubInstituteFAQ.objects.get(id=faq_id).delete()
            return Response({'status': True, 'response': 'FAQ Deleted Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

class GetAllTradesList(APIView):
    def get(self, request):
        trades = Trade.objects.all().order_by('-id').values()
        context = {'status': 'success', 'trades': trades}
        return Response(context)

class CheckSubInstituteUsernameExistance(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        username = username + '_' + 'subInstitute'
        try:
            user = User.objects.get(username=username)
            context = {'exist': True, 'message': 'Username is exist.'}
        except:
            context = {'exist': False, 'message': 'Username Does not exist.'}
        return Response(context)

class SubInstituteDetailsAPI(APIView):
    def get(self, request):
        sub_institute_user = self.request.user
        try:
            sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            sub_institute_datails = {
                'id': sub_institute.id,
                'name': sub_institute.name,
                'registration_number': sub_institute.registration_number,
                'about_institute': sub_institute.about_institute,
                'phone_number': sub_institute.phone_number,
                'email': sub_institute.email,
                'pincode': sub_institute.pincode,
                'city': sub_institute.city,
                'latitude': sub_institute.latitude,
                'longitude': sub_institute.longitude,
                'googleMap_link': sub_institute.googleMap_link,
                'state': sub_institute.state,
                'address': sub_institute.address,
                'total_rating': sub_institute.total_rating,
                'approved_by_main_institute': sub_institute.approved_by_main_institute,
            }

            context = {'status': 'success', 'sub_institute_datails': sub_institute_datails}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

    def post(self, request):
        data = request.data
        try:
            username = data['username']
            password = data['password']
            name = data['name']
            institute_code = data['institute_code']
            
            if institute_code == '':
                context = {'status': 'Failed', 'message': 'Institute Code not found.'}
                return Response(context)
            else:
                parent_institute = Institute.objects.get(code = institute_code)

            institute_name = data['institute_name']
            registration_number = data['registration_number']
            about_institute = data['about_institute']
            phone_number = data['phone_number'].strip()
            email = data['email']
            city = data['city']
            state = data['state']
            address = data['address']
            pincode = data['pincode']
            latitude = data['latitude']
            longitude = data['longitude']
            google_map_link = data['google_map_link']

            teachers = data['teachers']
            teachers_json = json.loads(teachers)

            videos = data['videos']
            videos_json = json.loads(videos)

            pictures = data['pictures']
            pictures_json = json.loads(pictures)

            trades_ids_list = data['trades']
            if len(trades_ids_list) != 2:
                trades_ids = trades_ids_list.strip('][').split(',')
            else:
                trades_ids = []
                
            username = username + '@' + institute_code + '_' + 'subInstitute'
            if User.objects.filter(username=username).exists():
                context = {'status': 'Failed', 'message': 'This Username is Already Exist.'}
            else:
                user = User.objects.create_user(username=username, password=password, email=None, first_name=name)

                sub_institute = SubInstitute.objects.create(sub_institute_user=user, parent_institute=parent_institute,
                                                            name=institute_name, registration_number=registration_number, about_institute=about_institute,
                                                            phone_number=phone_number, email=email, city=city, state=state, address=address, pincode=pincode,
                                                            latitude=latitude, longitude=longitude, googleMap_link=google_map_link)

                trades = Trade.objects.filter(id__in=trades_ids)
                sub_institute.trades.add(*trades)

                for teacher_data in teachers_json:
                    teacher_name = teacher_data['name']
                    profile_picture = teacher_data['profile_picture']
                    designation = teacher_data['designation']
                    sub_institute_teachers = SubInstituteTeacher.objects.create(
                        sub_institute=sub_institute, name=teacher_name, profile_picture=profile_picture, designation=designation)

                for video_json in videos_json:
                    title = video_json['title']
                    url = video_json['url']
                    sub_institute_videos = SubInstituteVideo.objects.create(
                        sub_institute=sub_institute, title=title, url=url)

                for picture_json in pictures_json:
                    title = picture_json['title']
                    url = picture_json['url']
                    sub_institute_pictures = SubInstitutePicture.objects.create(sub_institute=sub_institute, title=title, url=url)

                token, created = Token.objects.get_or_create(user=user)

                context = {'status': 'success', 'key': token.key, 'name': name, 'username': username}
        except Institute.DoesNotExist:
            context = {'status': 'Failed','message': 'Institute Code not found'}
        except Exception as e:
            user.delete()
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def put(self, request):
        sub_institute_user = self.request.user
        data = request.data
        institute_name = data.get('institute_name')
        registration_number = data.get('registration_number')
        about_institute = data.get('about_institute')
        phone_number = data.get('phone_number')
        email = data.get('email')
        pincode = data.get('pincode')
        city = data.get('city')
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        googleMap_link = data.get('googleMap_link')
        state = data.get('state')
        address = data.get('address')

        try:
            sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            sub_institute.name = institute_name
            sub_institute.registration_number = registration_number
            sub_institute.about_institute = about_institute
            sub_institute.phone_number = phone_number
            sub_institute.email = email
            sub_institute.pincode = pincode
            sub_institute.city = city
            sub_institute.latitude = latitude
            sub_institute.longitude = longitude
            sub_institute.googleMap_link = googleMap_link
            sub_institute.state = state
            sub_institute.address = address
            sub_institute.save()

            context = {'status': 'success', 'message': 'Successfully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class SubInstituteUserLoginAPI(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']

        if len(username) > 2 and len(password) > 2:
            username = username + '_' + 'subInstitute'
            user = authenticate(username=username, password=password)
            if user:
                token, created = Token.objects.get_or_create(user=user)
                context = {
                    'status': 'success',
                    'key': token.key,
                    'name': user.first_name,
                    'username': user.username,
                }
            else:
                context = {'status': 'Failed','message': 'Either Username or Password is Incorrect'}
        else:
            context = {'status': 'Failed', 'message': 'length of Username or Password are too short'}
            
        return Response(context)

class SubInstituteOwnTradeAPI(APIView):
    def post(self, request):
        user = self.request.user
        data = request.data
        sub_institute_id = data.get('sub_institute_id')
        trade_ids = data.get('trade_id')

        if len(trade_ids) != 2:
            trade_ids = trade_ids.strip('][').split(',')
        else:
            trade_ids = []

        trades = Trade.objects.filter(id__in=trade_ids)

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {"status": "failed", "message": "User does not have sub institute."}
                return Response(context)

        sub_institute.trades.add(*trades)
        context = {'status': 'success', 'message': 'Trade Added Successfully.'}

        return Response(context)

class SubInstituteAddTradebyBothAPI(APIView):
    def post(self, request):
        user = self.request.user
        data = request.data
        sub_institute_id = data.get('sub_institute_id')
        trade_ids = data.get('trade_id')

        if len(trade_ids) != 2:
            trade_ids = trade_ids.strip('][').split(',')
        else:
            trade_ids = []

        trades = Trade.objects.filter(id__in=trade_ids)

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {"status": "failed", "message": "User does not have sub institute."}
                return Response(context)

        sub_institute.trades.add(*trades)
        context = {'status': 'success', 'message': 'Trade Added Successfully.'}
        return Response(context)

class InstituteGetSubInstituteTrades(APIView):
    def post(self, request):
        data = request.data
        try:
            sub_institute_user = self.request.user
            sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            trades = sub_institute.trades.all()

            trade_details_ids = TradeDetails.objects.filter(
                sub_institute=sub_institute).values_list('trade__id', flat=True)

            trades_list = []
            for trade in trades:
                if trade.id in trade_details_ids:
                    is_trade_details_available = True
                else:
                    is_trade_details_available = False
                    
                trade_dict = {
                    'id': trade.id,
                    'name': trade.name,
                    'is_trade_details_available': is_trade_details_available
                }
                trades_list.append(trade_dict)

            context = {'status': 'success', 'trades': trades_list}

        except SubInstitute.DoesNotExist:
            subinstitute_id = data['subinstitute_id']
            me = Teach(self.request.user)
            sub_institute = SubInstitute.objects.get(id=subinstitute_id)
            sub_institute_datails = {
                'id': sub_institute.id,
                'name': sub_institute.name,
                'registration_number': sub_institute.registration_number,
                'about_institute': sub_institute.about_institute,
                'phone_number': sub_institute.phone_number,
                'email': sub_institute.email,
                'city': sub_institute.city,
                'state': sub_institute.state,
                'address': sub_institute.address,
                'approved_by_main_institute': sub_institute.approved_by_main_institute
            }
            trades = sub_institute.trades.all()

            trades_list = []
            for trade in trades:
                trade_details = TradeDetails.objects.select_related('trade').filter(
                    sub_institute=sub_institute, trade=trade, deleted=False)
                if trade_details:
                    is_trade_details_available = True
                    trade_details_list = []
                    for trade_detail in trade_details:
                        details = {
                            "id": trade_detail.id,
                            "session_start": trade_detail.session_start,
                            "session_end": trade_detail.session_end,
                            "price": trade_detail.price,
                            "discount": trade_detail.discount,
                            "actual_price": trade_detail.actual_price,
                            "about_trade": trade_detail.about_trade,
                            "introduction": trade_detail.introduction,
                            "date": trade_detail.date,
                        }
                        trade_details_list.append(details)
                else:
                    is_trade_details_available = False
                    trade_details_list = []

                trade_dict = {
                    'id': trade.id,
                    'name': trade.name,
                    'is_trade_details_available': is_trade_details_available,
                    'trade_details_list': trade_details_list
                }
                trades_list.append(trade_dict)
            sub_institute_datails['trades_list'] = trades_list

            context = {'status': 'success', 'trades': trades_list}
        except:
            context = {'status': 'Failed','message': 'User has no Sub Institute.'}
        return Response(context)

class SubInstituteTradesByBothAPI(APIView):
    def get(self, request):
        try:
            sub_institute_user = self.request.user
            sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            trades = sub_institute.trades.all()

            trade_details_ids = TradeDetails.objects.filter(
                sub_institute=sub_institute).values_list('trade__id', flat=True)

            trades_list = []
            for trade in trades:
                if trade.id in trade_details_ids:
                    is_trade_details_available = True
                    trade_details = TradeDetails.objects.filter(
                        trade=trade, sub_institute=sub_institute, deleted=False)

                    trade_details_list = []
                    for trades in trade_details:

                        trade_teachers = trades.sub_institute_teachers.all().values()
                        trade_datails = {'id': trades.id, 'session_start': trades.session_start, 'session_end': trades.session_end,
                                         'price': trades.price, 'discount': trades.discount, 'actual_price': trades.actual_price, 'about_trade': trades.about_trade,
                                         'introduction': trades.introduction, 'date': trades.date, 'trade_teachers': trade_teachers, "admission_open": trades.admission_open}
                        trade_details_list.append(trade_datails)
                else:
                    is_trade_details_available = False
                    trade_details_list = []

                trade_dict = {
                    'id': trade.id,
                    'name': trade.name,
                    'is_trade_details_available': is_trade_details_available,
                    'trade_details': trade_details_list
                }

                trades_list.append(trade_dict)

            context = {'status': 'success', 'trades': trades_list}

        except SubInstitute.DoesNotExist:
            me = Teach(self.request.user)
            sub_institutes = SubInstitute.objects.filter(parent_institute=me.profile.institute)
            sub_institutes_trade_list = []
            for sub_institute in sub_institutes:
                sub_institute_datails = {
                    'id': sub_institute.id,
                    'name': sub_institute.name,
                    'registration_number': sub_institute.registration_number,
                    'about_institute': sub_institute.about_institute,
                    'phone_number': sub_institute.phone_number,
                    'email': sub_institute.email,
                    'city': sub_institute.city,
                    'state': sub_institute.state,
                    'address': sub_institute.address,
                    'approved_by_main_institute': sub_institute.approved_by_main_institute
                }
                trades = sub_institute.trades.all()

                trade_details_ids = TradeDetails.objects.filter(
                    sub_institute=sub_institute, deleted=False).values_list('trade__id', flat=True)

                trades_list = []
                for trade in trades:
                    if trade.id in trade_details_ids:
                        is_trade_details_available = True
                    else:
                        is_trade_details_available = False
                    trade_dict = {
                        'id': trade.id,
                        'name': trade.name,
                        'is_trade_details_available': is_trade_details_available
                    }
                    trades_list.append(trade_dict)
                sub_institute_datails['trades_list'] = trades_list
                sub_institutes_trade_list.append(sub_institute_datails)

            context = {'status': 'success', 'sub_institutes_trade': sub_institutes_trade_list}

        except:
            context = {'status': 'Failed','message': 'User has no Sub Institute.'}
            
        return Response(context)


    def post(self, request):
        user = self.request.user
        data = request.data
        sub_institute_id = data.get('sub_institute_id')
        trade_id_list = json.loads(data['trade_id'])

        trade = Trade.objects.filter(id__in=trade_id_list)

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {"status": "failed", "message": "User does not have sub institute."}
                return Response(context)

        sub_institute.trades.add(*trade)
        context = {'status': 'success', 'message': 'Trade Added Successfully.'}

        return Response(context)

    def delete(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        trade_id = data['trade_id']
        sub_institute_id = data.get('sub_institute_id')

        try:
            trade = Trade.objects.get(id=trade_id)

            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

            except:
                sub_institute_user = user
                try:
                    sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
                except:
                    context = {"status": "failed", "message": "User does not have sub institute."}
                    return Response(context)

            sub_institute.trades.remove(trade)

            try:
                trade_datails = TradeDetails.objects.filter(
                    trade=trade, sub_institute__sub_institute_user=sub_institute_user).first()
                for tradedetail in TradeDetails:
                    tradedetail.delete = True
                    tradedetail.save()
            except:
                pass

            context = {'status': 'success', 'message': 'Trade Removed Successfully.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class GetTradeDetailsSubInstituteByBoth(APIView):
    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        trade_details_id = data['trade_details_id']
        sub_institute_id = data.get('sub_institute_id')

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {"status": "failed", "message": "user does not have sub institute."}
                return Response(context)

        try:
            trade = TradeDetails.objects.get(
                id=trade_details_id, sub_institute=sub_institute,  deleted=False)

            trade_teachers = trade.sub_institute_teachers.all().values()
            trade_datails = {'id': trade.id, 'session_start': trade.session_start, 'session_end': trade.session_end,
                             'price': trade.price, 'discount': trade.discount, 'actual_price': trade.actual_price, 'about_trade': trade.about_trade,
                             'introduction': trade.introduction, 'date': trade.date, 'trade_teachers': trade_teachers, "admission_open": trade.admission_open}

            context = {'status': 'success', 'trade_details': trade_datails}

        except TradeDetails.DoesNotExist:
            context = {'status': 'Failed','message': 'Trade Details not found.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class AddUpdateTradeDatailsSubInstituteByBothAPI(APIView):
    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        trade_id = data.get('trade_id')
        sub_institute_id = data.get('sub_institute_id')
        session_start = data.get('session_start')
        session_end = data.get('session_end')

        price = data.get('price')
        discount = data.get('discount')
        about_trade = data.get('about_trade')
        introduction = data.get('introduction')
        trade_teachers_ids = data.get('trade_teachers_ids')

        if len(trade_teachers_ids) != 2:
            trade_teachers_ids = trade_teachers_ids.strip('][').split(',')
        else:
            trade_teachers_ids = []

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {"status": "failed","message": "user does not have sub institute."}
                return Response(context)

        try:
            trade = Trade.objects.get(id=trade_id)
            price = float(price)

            if discount:
                discount = float(discount)
                less_price = (price * discount) / 100
                actual_price = price - less_price
            else:
                actual_price = price
                discount = None

            trade_datails = TradeDetails.objects.create(sub_institute=sub_institute, trade=trade, session_start=session_start, session_end=session_end,
                                                        price=price, discount=discount, actual_price=actual_price, about_trade=about_trade, introduction=introduction)

            if trade_teachers_ids:
                trade_teachers = SubInstituteTeacher.objects.filter(id__in=trade_teachers_ids)
                trade_datails.sub_institute_teachers.add(*trade_teachers)
            trade_details_dict = {'id': trade_datails.id, 'session_start': trade_datails.session_start, 'session_end': trade_datails.session_end,
                                  'price': trade_datails.price, 'discount': trade_datails.discount, 'actual_price': trade_datails.actual_price, 'about_trade': trade_datails.about_trade,
                                  'introduction': trade_datails.introduction, 'date': trade_datails.date, 'admission_open': trade_datails.admission_open}
            context = {'status': 'success', 'message': 'Successfully Added.', 'data': trade_details_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

    def put(self, request):
        user = self.request.user
        data = request.data
        sub_institute_id = data.get('sub_institute_id')
        trade_datails_id = data.get('trade_datails_id')

        try:
            teacher = Teach(user)
            sub_institute = SubInstitute.objects.filter(id=sub_institute_id).first()

        except:
            sub_institute_user = user
            try:
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)
            except:
                context = {'status': 'failed','message': 'User does not have sub-institute'}
                return Response(context)

        try:
            trade_datails = TradeDetails.objects.get(id=trade_datails_id)

            session_start = data.get('session_start')
            if session_start:
                trade_datails.session_start = session_start

            session_end = data.get('session_end')
            if session_end:
                trade_datails.session_end = session_end

            if StudentTradePurchase.objects.filter(trade_details=trade_datails).first() == None:
                discount = data.get('discount')
                if discount:
                    trade_datails.discount = discount

                price = data.get('price')
                if price:
                    trade_datails.price = price

                if price or discount:
                    price = float(price)
                    if discount:
                        discount = float(discount)
                        less_price = (price * discount) / 100
                        actual_price = price - less_price
                    else:
                        actual_price = price
                    if actual_price:
                        trade_datails.actual_price = actual_price

            about_trade = data.get('about_trade')
            if about_trade:
                trade_datails.about_trade = about_trade

            introduction = data.get('introduction')
            if introduction:
                trade_datails.introduction = introduction

            admission_open = json.loads(data.get('admission_open', "null"))
            if isinstance(admission_open,  bool):
                trade_datails.admission_open = admission_open

            trade_teachers_ids = json.loads(data.get('trade_teachers_ids', '[]'))
            if trade_teachers_ids:
                trade_teachers = SubInstituteTeacher.objects.filter(id__in=trade_teachers_ids)
                trade_datails.sub_institute_teachers.clear()
                trade_datails.sub_institute_teachers.add(*trade_teachers)

            trade_datails.save()
            trade_details_dict = {
                'id': trade_datails.id, 
                'session_start': trade_datails.session_start, 
                'session_end': trade_datails.session_end,
                'price': trade_datails.price, 
                'discount': trade_datails.discount, 
                'actual_price': trade_datails.actual_price, 
                'about_trade': trade_datails.about_trade,
                'introduction': trade_datails.introduction, 
                'date': trade_datails.date, 
                'admission_open': trade_datails.admission_open
                }

            context = {'status': 'success','message': 'Successfully Updated.', 'data': trade_details_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class SubInstituteStudentListDownloadOld(APIView):
    def get(self, request):
        query_params = request.query_params
        trade_detail_id = query_params.get('trade_detail_id')
        
        if trade_detail_id:
            try:
                institute = Institute.objects.get(id=46428)
                trade_detail = TradeDetails.objects.get(id=trade_detail_id)

                output = []
                response = HttpResponse(content_type='text/csv')
                writer = csv.writer(response)
                queryset = StudentTradePurchase.objects.filter(
                    trade_details=trade_detail, approved=True).select_related('student', 'student__studentuser')

                writer.writerow(['Name', 'Phone Number', 'mode', 'amount'])

                for student_purchase in queryset:
                    temp_list = [student_purchase.student.name, student_purchase.student.studentuser.username.split(
                        '@')[0], student_purchase.mode, student_purchase.paidAmount]
                    output.append(temp_list)

                writer.writerows(output)
                response['Content-Disposition'] = f'attachment; filename="{trade_detail.sub_institute.name} {str(trade_detail.session_start)[-3:]}-{str(trade_detail.session_end)[-3:]}.csv"'
                return response

            except Exception as e:
                context = {'issues': f"{e}"}
                return Response(context)
        else:
            try:
                institute = Institute.objects.get(id=46428)

                output = []
                response = HttpResponse(content_type='text/csv')
                writer = csv.writer(response)

                queryset = Student.objects.filter(institute=institute).select_related(
                    'student_subinstitute').order_by('-id')

                writer.writerow(['Name', 'Phone Number', 'Category', 'Aadhar Card',
                                'Institute',  'Trade', 'Session Start', 'Session End', ])

                for student in queryset:
                    st_details, created = SubInstituteStudent.objects.get_or_create(
                        student=student)
                    if created:
                        st_trade = StudentTradePurchase.objects.filter(
                            student=student).select_related('trade_details')
                        
                        for trade in st_trade:
                            try:
                                st_details.trades_details.add(trade.trade_details)
                                st_details.sub_institute.add(trade.trade_details.sub_institute)
                            except:
                                pass

                    temp_list = [student.name, student.studentuser.username.split(
                        '@')[0], st_details.category, st_details.aadhar_card_number]
                    for record in st_details.trades_details.all():
                        temp_list = [student.name, student.studentuser.username.split(
                            '@')[0], st_details.category, st_details.aadhar_card_number]
                        try:
                            temp_list += [record.sub_institute, record.trade,
                                          record.session_start, record.session_end,]
                            output.append(temp_list)
                        except:
                            pass
                    if len(temp_list) == 4:
                        temp_list += [None, None, None, None,]
                        output.append(temp_list)

                writer.writerows(output)
                response['Content-Disposition'] = f'attachment; filename="Student list {datetime.now().date()}.csv"'
                return response

            except Exception as e:
                context = {'issues': f"{e}"}
                return Response(context)

class SubInstituteStudentListDownload(APIView):
    def get(self, request):
        query_params = request.query_params
        trade_detail_id = query_params.get('trade_detail_id')
        
        if trade_detail_id:
            try:
                institute = Institute.objects.get(id=46428)
                trade_details = TradeDetails.objects.get(id=trade_detail_id)

                output = []
                response = HttpResponse(content_type='text/csv')
                writer = csv.writer(response)
                queryset = StudentTradePurchase.objects.filter(
                    trade_details = trade_details, approved=True).select_related('student', 'student__studentuser')

                writer.writerow(['Name', 'Phone Number', 'Mode', 'Amount', 'ITI Institute', 
                                 'Trade Name', 'Session Start', 'Session End', 'Category', 
                                 'Aadhar Number', 'Register Number', 'Email', 'Dob', 'Address',
                                 'Father Name', 'Mother Name'])

                for student_purchase in queryset:
                    student_data1 = SubInstituteStudent.objects.filter(student = student_purchase.student).first()
                    student_data2 = StudentDetails.objects.filter(student = student_purchase.student).first()
                    temp_list = [student_purchase.student.name, 
                                 student_purchase.student.studentuser.username.split('@')[0], 
                                 student_purchase.mode, student_purchase.paidAmount,trade_details.sub_institute.name,
                                 trade_details.trade.name,trade_details.session_start,trade_details.session_end,
                                 student_data1.category,
                                 student_data1.aadhar_card_number,
                                 student_data1.student_registration_number,
                                 student_data2.email,
                                 student_data2.dob,
                                 student_data2.address,
                                 student_data2.parentName,
                                 student_data2.mother_name]
                    output.append(temp_list)

                writer.writerows(output)
                response['Content-Disposition'] = f'attachment; filename="{trade_details.sub_institute.name} {str(trade_details.session_start)[-3:]}-{str(trade_details.session_end)[-3:]}.csv"'
                return response

            except Exception as e:
                context = {'issues': f"{e}"}
                return Response(context)
            
        else:
            try:
                institute = Institute.objects.get(id=46428)

                output = []
                response = HttpResponse(content_type='text/csv')
                writer = csv.writer(response)

                queryset = Student.objects.filter(institute=institute).select_related(
                    'student_subinstitute').order_by('-id')

                writer.writerow(['Name', 'Phone Number', 'Category', 'Aadhar Card',
                                'Institute',  'Trade', 'Session Start', 'Session End'])

                for student in queryset:
                    st_details, created = SubInstituteStudent.objects.get_or_create(
                        student=student)
                    if created:
                        st_trade = StudentTradePurchase.objects.filter(
                            student=student).select_related('trade_details')
                        
                        for trade in st_trade:
                            try:
                                st_details.trades_details.add(trade.trade_details)
                                st_details.sub_institute.add(trade.trade_details.sub_institute)
                            except:
                                pass

                    temp_list = [student.name, student.studentuser.username.split(
                        '@')[0], st_details.category, st_details.aadhar_card_number]
                    for record in st_details.trades_details.all():
                        temp_list = [student.name, student.studentuser.username.split(
                            '@')[0], st_details.category, st_details.aadhar_card_number]
                        try:
                            temp_list += [record.sub_institute, record.trade,
                                          record.session_start, record.session_end,]
                            output.append(temp_list)
                        except:
                            pass
                    if len(temp_list) == 4:
                        temp_list += [None, None, None, None,]
                        output.append(temp_list)

                writer.writerows(output)
                response['Content-Disposition'] = f'attachment; filename="Student list {datetime.now().date()}.csv"'
                return response

            except Exception as e:
                context = {'issues': f"{e}"}
                return Response(context)
            
class SubInstituteGetTradeDetailsCoupon(APIView):
    def post(self, request):
        user = self.request.user
        data = request.data
        trade_detail_id = data['trade_detail_id']

        trade_details = TradeDetails.objects.get(id=trade_detail_id)
        coupon = TradeDetailsCouponCode.objects.filter(trade_details=trade_details)
        coupon_list = []
        for cpn in coupon:
            coupon_list.append({
                "id": cpn.id,
                "Code": cpn.Code,
                "amount": cpn.amount,
                "date_of_creation": cpn.date_of_creation,
                "date_of_expire": cpn.date_of_expire,
                "total_coupon_count": cpn.total_coupon_count,
            })
        return Response({"status": "success", "message": "coupon list", "data": coupon_list})

class SubInstituteCreateTradeDetailsCoupon(APIView):

    def post(self, request):
        user = self.request.user
        data = request.data
        code = data['code']
        trade_detail_id = data['trade_detail_id']
        total_coupon_count = data.get('total_coupon_count')
        date_of_expire = data.get('date_of_expire')
        amount = data['amount']

        try:
            trade_details = TradeDetails.objects.get(id=trade_detail_id)
            try:
                coupon = TradeDetailsCouponCode.objects.get(Code=code, trade_details=trade_details)
                return Response({"status": False, "message": "Coupon Already Exist"})
            except:
                coupon = TradeDetailsCouponCode.objects.create(Code=code, trade_details=trade_details, amount=amount)
                try:
                    sub_institute = SubInstitute.objects.get(sub_institute_user=user)
                    coupon.creater = sub_institute
                    coupon.save()
                except Exception as e:
                    pass

                if date_of_expire:
                    coupon.date_of_expire = date_of_expire
                if total_coupon_count:
                    coupon.total_coupon_count = total_coupon_count
                coupon.save()

            return Response({"status": True, "message": "Coupon has Created Successfuly"})
        except Exception as e:
            return Response({"status": False, "message": str(e)})

    def put(self, request):
        user = self.request.user
        data = request.data

        try:
            coupon_id = data['coupon_id']
            total_coupon_count = data.get('total_coupon_count')
            date_of_expire = data.get('date_of_expire')

            coupon = TradeDetailsCouponCode.objects.get(id=coupon_id)
            if date_of_expire:
                coupon.date_of_expire = date_of_expire

            if total_coupon_count:
                coupon.total_coupon_count = total_coupon_count
            coupon.save()

            return Response({"status": True, "message": "Coupon Updated Successfuly"})

        except Exception as e:
            return Response({"status": False, "message": str(e)})

    def delete(self, request):
        user = self.request.user
        data = request.data

        try:
            coupon_id = data['coupon_id']
            TradeDetailsCouponCode.objects.get(id=coupon_id).delete()

            return Response({"status": True, "message": "Coupon Deleted Successfuly"})
        except Exception as e:
            return Response({"status": False, "message": str(e)})

class InstituteGetSubInstitutesRequestsAPI(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        sub_institutes = SubInstitute.objects.filter(
            parent_institute = me.profile.institute, approved_by_main_institute=None).order_by('-id')

        sub_institutes_list = []
        for si in sub_institutes:
            sub_institute_dict = {
                'id': si.id, 
                'name': si.name, 
                'registration_number': si.registration_number,
                'phone_number': si.phone_number, 
                'email': si.email, 
                'city': si.city, 
                'state': si.state, 
                'address': si.address, 
                'main_institute_response': si.approved_by_main_institute
                }
            sub_institutes_list.append(sub_institute_dict)

        context = {'status': 'success', 'sub_institutes': sub_institutes_list}
        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        filter = json.loads(data['filter'])
        sub_institutes = SubInstitute.objects.filter(
            parent_institute=me.profile.institute, approved_by_main_institute=filter).order_by('-id')

        sub_institutes_list = []
        for si in sub_institutes:
            sub_institute_dict = {
                'id': si.id, 
                'name': si.name, 
                'registration_number': si.registration_number,
                'phone_number': si.phone_number, 
                'email': si.email, 
                'city': si.city, 
                'state': si.state, 
                'address': si.address, 
                'main_institute_response': si.approved_by_main_institute
                }
            sub_institutes_list.append(sub_institute_dict)

        context = {'status': 'success', 'sub_institutes': sub_institutes_list}
        return Response(context)

    def put(self, request):
        me = Teach(self.request.user)
        data = request.data
        approval = json.loads(data['approval'])
        sub_institutes_id = data['sub_institutes_id']
        sub_institutes = SubInstitute.objects.get(id=sub_institutes_id)
        sub_institutes.approved_by_main_institute = approval
        sub_institutes.save()
        si = sub_institutes
        sub_institute_dict = {
            'id': si.id, 
            'name': si.name, 
            'registration_number': si.registration_number,
            'phone_number': si.phone_number, 
            'email': si.email, 
            'city': si.city, 
            'state': si.state, 
            'address': si.address, 
            'main_institute_response': si.approved_by_main_institute
            }
        context = {'status': True, 'message': "subinstitute request accepted","data": sub_institute_dict}
        return Response(context)

class InstituteGetSubInstituteVideosAPI(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        sub_institute_id = data['sub_institute_id']
        videos = SubInstituteVideo.objects.filter(
            sub_institute__id=sub_institute_id).order_by('-id').values()
        context = {'status': 'success', 'videos': videos}
        return Response(context)

class SubInstituteVideosAPI(APIView):
    def get(self, request, *args, **kwargs):
        sub_institute_user = self.request.user
        videos = SubInstituteVideo.objects.filter(
            sub_institute__sub_institute_user=sub_institute_user).order_by('-id').values()
        context = {'status': 'success', 'videos': videos}
        return Response(context)

    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        url = data['url']
        title = data['title']
        sub_institute_id = data.get('sub_institute_id')
        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(
                    sub_institute_user=sub_institute_user)
            video = SubInstituteVideo.objects.create(
                sub_institute=sub_institute, title=title, url=url)
            context = {'status': 'success','message': 'Successfully uploaded!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def delete(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        video_id = data['video_id']
        sub_institute_id = data.get('sub_institute_id')
        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(
                    sub_institute_user=sub_institute_user)
            video = SubInstituteVideo.objects.get(
                id=video_id, sub_institute=sub_institute)
            video.delete()
            context = {'status': 'success', 'message': 'Successfully deleted!'}
        except SubInstituteVideo.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Video not found!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': f'{e}'}

        return Response(context)

class InstituteGetSubInstitutePictureAPI(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        sub_institute_id = data['sub_institute_id']
        videos = SubInstitutePicture.objects.filter(
            sub_institute__id=sub_institute_id).order_by('-id').values()
        context = {'status': 'success', 'videos': videos}
        return Response(context)

class SubInstitutePictureAPI(APIView):
    def get(self, request, *args, **kwargs):
        sub_institute_user = self.request.user
        pictures = SubInstitutePicture.objects.filter(
            sub_institute__sub_institute_user=sub_institute_user).order_by('-id').values()
        context = {'status': 'success', 'pictures': pictures}
        return Response(context)

    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        url = data['url']
        title = data['title']
        sub_institute_id = data.get('sub_institute_id')

        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)

            picture = SubInstitutePicture.objects.create(
                sub_institute=sub_institute, title=title, url=url)
            context = {'status': 'success','message': 'Successfully uploaded!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def delete(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        picture_id = data['picture_id']
        sub_institute_id = data.get('sub_institute_id')
        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)

            picture = SubInstitutePicture.objects.get(id=picture_id, sub_institute=sub_institute)
            picture.delete()
            context = {'status': 'success', 'message': 'Successfully Deleted!'}
        except SubInstitutePicture.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Picture not found!'}
        return Response(context)

class InstituteGetSubInstituteTeacher(APIView):
    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data

        try:
            me = Teach(user)
            sub_institute_id = data['sub_institute_id']
            sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            teachers = SubInstituteTeacher.objects.select_related(
                'sub_institute').filter(sub_institute=sub_institute).order_by('-id')

        except:
            context = {"status": "failed","message": "sub institute does not exist"}
            return Response(context)

        teachers_list = []
        for teacher in teachers:
            teacher_dict = {
                "id": teacher.id,
                "name": teacher.name,
                "designation": teacher.designation,
                "profile_picture": teacher.profile_picture,
            }
            teachers_list.append(teacher_dict)
        subinstitute_dict = {
            "id": sub_institute.id,
            "name": sub_institute.name,
            "approved_by_main_institute": sub_institute.approved_by_main_institute,
            "teachers": teachers_list,
        }

        context = {'status': True, 'subinstitue': subinstitute_dict, }
        return Response(context)

class SubInstituteTeacherbyBothAPI(APIView):
    def get(self, request, *args, **kwargs):
        user = self.request.user

        try:
            me = Teach(user)
            sub_institutes = SubInstitute.objects.filter(parent_institute=me.profile.institute)
            teachers = SubInstituteTeacher.objects.select_related(
                'sub_institute').filter(sub_institute__in=sub_institutes).order_by('-id')

        except SubInstitute.DoesNotExist:
            context = {"status": "failed",
                       "message": "sub institute does not exist"}
            return Response(context)
        except:
            try:
                sub_institutes = SubInstitute.objects.filter(
                    sub_institute_user=user)
                teachers = SubInstituteTeacher.objects.select_related(
                    'sub_institute').filter(sub_institute=sub_institutes.first()).order_by('-id')
            except:
                context = {"status": "failed",
                           "message": "user does not have sub institute."}
                return Response(context)

        subinstitute_list = []
        for subinstitute in sub_institutes:
            subinstitute_teachers = teachers.filter(sub_institute=subinstitute)
            teachers_list = []
            for teacher in teachers:
                teacher_dict = {
                    "id": teacher.id,
                    "name": teacher.name,
                    "designation": teacher.designation,
                    "profile_picture": teacher.profile_picture,
                }
                teachers_list.append(teacher_dict)
            subinstitute_dict = {
                "id": subinstitute.id,
                "name": subinstitute.name,
                "approved_by_main_institute": subinstitute.approved_by_main_institute,
                "teachers": teachers_list,
            }
            subinstitute_list.append(subinstitute_dict)

        context = {'status': True, 'subinstitue': subinstitute_list, }
        return Response(context)

    def post(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data

        teacher_name = data['teacher_name']
        designation = data['designation']
        profile_picture = data['profile_picture']
        sub_institute_id = data.get('sub_institute_id')

        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(
                    sub_institute_user=sub_institute_user)

            sub_institute_teachers = SubInstituteTeacher.objects.create(
                sub_institute=sub_institute, name=teacher_name, profile_picture=profile_picture, designation=designation)
            context = {'status': 'success', 'message': 'Successfully created!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def delete(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data
        teacher_id = data['teacher_id']
        sub_institute_id = data.get('sub_institute_id')

        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(sub_institute_user=sub_institute_user)

            teacher = SubInstituteTeacher.objects.get(id=teacher_id, sub_institute=sub_institute)
            teacher.delete()
            context = {'status': 'success', 'message': 'Successfully deleted!'}
        except SubInstituteTeacher.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Teacher not found!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

    def put(self, request, *args, **kwargs):
        user = self.request.user
        data = request.data

        teacher_id = data['teacher_id']
        teacher_name = data['teacher_name']
        designation = data['designation']
        profile_picture = data['profile_picture']
        sub_institute_id = data.get('sub_institute_id')

        try:
            try:
                teacher = Teach(user)
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            except:
                sub_institute_user = user
                sub_institute = SubInstitute.objects.get(
                    sub_institute_user=sub_institute_user)

            sub_institute_teacher = SubInstituteTeacher.objects.get(
                id=teacher_id, sub_institute=sub_institute)
            sub_institute_teacher.name = teacher_name
            sub_institute_teacher.profile_picture = profile_picture
            sub_institute_teacher.designation = designation

            sub_institute_teacher.save()

            context = {'status': 'success', 'message': 'Successfully Updated!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteGetSubInstituteDetailsAPI(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            subinstitutes = SubInstitute.objects.all()
            subinstitute_list = []
            for subinstitute in subinstitutes:
                sub_dict = {
                    'id': subinstitute.id,
                    'name': subinstitute.name,
                    'registration_number': subinstitute.registration_number,
                    'phone_number': subinstitute.phone_number,
                    'email': subinstitute.email}
                subinstitute_list.append(sub_dict)

            context = {'status': True, 'subinstitute_list': subinstitute_list}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        sub_institute_id = data['sub_institute_id']

        try:
            sub_institute = SubInstitute.objects.get(id=sub_institute_id)

            videos = SubInstituteVideo.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()
            pictures = SubInstitutePicture.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()
            teachers = SubInstituteTeacher.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()

            trades = sub_institute.trades.all()
            trade_details_list = []

            for trade in trades:
                trade_details = TradeDetails.objects.filter(
                    trade=trade, sub_institute=sub_institute)
                trade_details = trade_details.first()

                if trade_details:
                    trade_teachers_details = trade_details.sub_institute_teachers.all().values()
                    trade_datails_dict = {'id': trade_details.id, 'session_start': trade_details.session_start, 'session_end': trade_details.session_end,
                                          'price': trade_details.price, 'discount': trade_details.discount, 'actual_price': trade_details.actual_price, 'about_trade': trade_details.about_trade,
                                          'introduction': trade_details.introduction, 'date': trade_details.date, 'trade_teachers': trade_teachers_details}
                else:
                    trade_datails_dict = {}

                trade_dict = {'trade': trade.name,
                              'trade_details': trade_datails_dict}
                trade_details_list.append(trade_dict)

            sub_institute_details = {
                'id': sub_institute.id,
                'name': sub_institute.name,
                'registration_number': sub_institute.registration_number,
                'about_institute': sub_institute.about_institute,
                'phone_number': sub_institute.phone_number,
                'email': sub_institute.email,
                'pincode': sub_institute.pincode,
                'city': sub_institute.city,
                'latitude': sub_institute.latitude,
                'longitude': sub_institute.longitude,
                'googleMap_link': sub_institute.googleMap_link,
                'state': sub_institute.state,
                'address': sub_institute.address,
                'total_rating': sub_institute.total_rating,
                'approved_by_main_institute': sub_institute.approved_by_main_institute,
                'trades': trade_details_list,
                'videos': videos,
                'pictures': pictures,
                'teachers': teachers,
            }

            context = {'status': 'success','sub_institute_details': sub_institute_details}
        except SubInstitute.DoesNotExist:
            context = {'status': 'Failed','message': 'Sub institute not found!'}
        return Response(context)

    def put(self, request, *args, **kwargs):
        try:
            me = Teach(self.request.user)
            data = request.data
            sub_institute_id = data.get('sub_institute_id')
            name = data.get('name')
            registration_number = data.get('registration_number')
            about_institute = data.get('about_institute')
            phone_number = data.get('phone_number')
            email = data.get('email')
            pincode = data.get('pincode')
            city = data.get('city')
            latitude = data.get('latitude')
            longitude = data.get('longitude')
            googleMap_link = data.get('googleMap_link')
            state = data.get('state')
            address = data.get('address')

            try:
                sub_institute = SubInstitute.objects.get(id=sub_institute_id)
                if name:
                    sub_institute.name = name
                if registration_number:
                    sub_institute.registration_number = registration_number
                if about_institute:
                    sub_institute.about_institute = about_institute
                if phone_number:
                    sub_institute.phone_number = phone_number
                if email:
                    sub_institute.email = email
                if pincode:
                    sub_institute.pincode = pincode
                if city:
                    sub_institute.city = city
                if latitude:
                    sub_institute.latitude = latitude
                if longitude:
                    sub_institute.longitude = longitude
                if googleMap_link:
                    sub_institute.googleMap_link = googleMap_link
                if state:
                    sub_institute.state = state
                if address:
                    sub_institute.address = address
                sub_institute.save()

                sub_institute_details = {
                    'id': sub_institute.id,
                    'name': sub_institute.name,
                    'registration_number': sub_institute.registration_number,
                    'about_institute': sub_institute.about_institute,
                    'phone_number': sub_institute.phone_number,
                    'email': sub_institute.email,
                    'pincode': sub_institute.pincode,
                    'city': sub_institute.city,
                    'latitude': sub_institute.latitude,
                    'longitude': sub_institute.longitude,
                    'googleMap_link': sub_institute.googleMap_link,
                    'state': sub_institute.state,
                    'address': sub_institute.address}

                context = {'status': 'success', 'message': 'Update successfully',
                           'sub_institute_details': sub_institute_details}
            except SubInstitute.DoesNotExist:
                context = {'status': 'Failed',
                           'message': 'Sub institute not found!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        sub_institutes_id = data['sub_institutes_id']
        sub_institutes = SubInstitute.objects.get(id=sub_institutes_id)
        sub_institutes.delete()

        context = {'status': True, 'message': "Subinstitute Deleted"}
        return Response(context)

class StudentStudyMaterialSettings(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
            ins_dict = {
                'video_download': institute.video_download,
                'notes_download': institute.notes_download,
                'downloadIn_gallery': institute.downloadIn_gallery,
            }

            context = {'Status': 'Success', 'Message': 'All Institute Video or Notes Settings',
                       'Institute_Settings': ins_dict}

        except Exception as e:
            context = {'status': 'failed',
                       'message': str(e)}

        return Response(context)

class TeacherStudyMaterialSettings(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        if me.profile.mainTeacher:
            institute_id = me.profile.institute.id
            try:
                institute = Institute.objects.get(id=institute_id)
                ins_dict = {
                    'video_download': institute.video_download,
                    'notes_download': institute.notes_download,
                    'downloadIn_gallery': institute.downloadIn_gallery,
                }

                context = {'Status': 'Success', 'Message': 'All Institute Video or Notes Settings',
                           'Institute_Settings': ins_dict}

            except Exception as e:
                context = {'status': 'failed',
                           'message': 'Institute Not Found'}

        return Response(context)

    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        video_download = data['video_download']
        notes_download = data['notes_download']
        downloadIn_gallery = data['downloadIn_gallery']

        if me.profile.mainTeacher:
            institute_id = me.profile.institute.id
            try:
                institute = Institute.objects.get(id=institute_id)
                if video_download:
                    institute.video_download = video_download
                    institute.save()
                if notes_download:
                    institute.notes_download = notes_download
                    institute.save()
                if downloadIn_gallery:
                    institute.downloadIn_gallery = downloadIn_gallery
                    institute.save()

                ins_dict = {
                    'video_download': institute.video_download,
                    'notes_download': institute.notes_download,
                    'downloadIn_gallery': institute.downloadIn_gallery,
                }

                context = {'Status': 'Success', 'Message': 'All Institute Video or Notes Settings Updated',
                           'Institute_Settings': ins_dict}

            except Exception as e:
                context = {'status': 'failed','message': 'Institute Not Found'}

        return Response(context)

class StudentGetSubInstitutes(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        sub_institutes = SubInstitute.objects.filter(approved_by_main_institute=True).order_by('-id')
        sub_institutes_list = []
        my_profile = me.profile
        for si in sub_institutes:
            if my_profile in si.wishlist_students.all():
                wishlist = True
            else:
                wishlist = False

            picture = SubInstitutePicture.objects.filter(
                sub_institute=si).first()
            if picture:
                picture = picture.url
            else:
                picture = None

            trades = si.trades.all().values()

            sub_institute_dict = {
                'id': si.id,
                'name': si.name,
                'phone_number': si.phone_number,
                'email': si.email,
                'city': si.city,
                'state': si.state,
                'address': si.address,
                'pincode': si.pincode,
                'google_map_link': si.googleMap_link,
                'picture': picture,
                'total_rating': si.total_rating,
                'wishlist': wishlist,
                'trades': trades,

            }
            sub_institutes_list.append(sub_institute_dict)

        context = {'status': 'success', 'sub_institutes': sub_institutes_list}
        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        my_profile = me.profile
        data = request.data
        search = data.get('search')
        sub_institutes = SubInstitute.objects.prefetch_related(
            'trades').filter(approved_by_main_institute=True).order_by('-id')

        if search:
            sub_institutes = sub_institutes.filter(Q(name__icontains=search) | Q(
                city__icontains=search) | Q(trades__name__icontains=search)).distinct('id')

        sub_institutes_list = []

        for si in sub_institutes:

            if my_profile in si.wishlist_students.all():
                wishlist = True
            else:
                wishlist = False

            picture = SubInstitutePicture.objects.filter(
                sub_institute=si).first()
            if picture:
                picture = picture.url
            else:
                picture = None

            trades = si.trades.all().values()

            sub_institute_dict = {
                'id': si.id,
                'name': si.name,
                'phone_number': si.phone_number,
                'email': si.email,
                'city': si.city,
                'state': si.state,
                'address': si.address,
                'pincode': si.pincode,
                'picture': picture,
                'total_rating': si.total_rating,
                'wishlist': wishlist,
                'trades': trades
            }
            sub_institutes_list.append(sub_institute_dict)

        context = {'status': 'success', 'sub_institutes': sub_institutes_list}
        return Response(context)

class StudentSeeSubInstituteTrade(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)

        data = request.data
        sub_institute_id = data['sub_institute_id']

        try:
            sub_institute = SubInstitute.objects.get(id=sub_institute_id)

            videos = SubInstituteVideo.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()
            pictures = SubInstitutePicture.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()
            teachers = SubInstituteTeacher.objects.filter(
                sub_institute=sub_institute).order_by('-id').values()

            reviews = SubInstituteReview.objects.filter(sub_institute=sub_institute).order_by(
                '-id').values('student__name', 'rating', 'message', 'date')

            trades = sub_institute.trades.all()
            trade_list = []

            for trade in trades:
                trade_details = TradeDetails.objects.filter(
                    trade=trade, sub_institute=sub_institute, admission_open=True)

                trade_details = []
                for trade_detail in trade_details:
                    trade_datails_dict = {'id': trade_detail.id, 'price': trade_detail.price,
                                          'discount': trade_detail.discount, 'actual_price': trade_detail.actual_price}
                    trade_details.append(trade_datails_dict)

                trade_dict = {'id': trade.id, 'trade': trade.name,
                              'trade_details': trade_details}
                trade_list.append(trade_dict)

            sub_institute_details = {
                'id': sub_institute.id,
                'name': sub_institute.name,
                'registration_number': sub_institute.registration_number,
                'phone_number': sub_institute.phone_number,
                'email': sub_institute.email,
                'city': sub_institute.city,
                'state': sub_institute.state,
                'address': sub_institute.address,
                'total_rating': sub_institute.total_rating,
                'google_map_link': sub_institute.googleMap_link,
                'reviews': reviews,
                'trades': trade_list,
                'videos': videos,
                'pictures': pictures,
                'teachers': teachers}

            context = {'status': 'success',
                       'sub_institute_details': sub_institute_details}
        except SubInstitute.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Sub institute not found!'}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': f'{e}'}

        return Response(context)

class StudentSeeSubInstituteAllTradeDetails(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)

        data = request.data
        sub_institute_id = data['sub_institute_id']
        trade_id = data['trade_id']

        try:
            sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            trades = Trade.objects.get(id=trade_id)
            trades_details = TradeDetails.objects.filter(
                sub_institute=sub_institute, trade=trades)
            trade_details_list = []

            for trades_detail in trades_details:
                teachers = trades_detail.sub_institute_teachers.all().values()
                trade_datails_dict = {'id': trades_detail.id, 'session_start': trades_detail.session_start, 'session_end': trades_detail.session_end,
                                      'price': trades_detail.price, 'discount': trades_detail.discount, 'actual_price': trades_detail.actual_price, 'about_trade': trades_detail.about_trade,
                                      'introduction': trades_detail.introduction, 'date': trades_detail.date, "teachers": teachers}
                trade_details_list.append(trade_datails_dict)

            context = {'status': 'success',
                       'trade_details_list': trade_details_list}
        except SubInstitute.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Sub institute not found!'}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': f'{e}'}

        return Response(context)

class StudentSeeSubInstituteTradeDetails(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)

        data = request.data
        trade_details_id = data['trade_details_id']

        try:
            trade_details = TradeDetails.objects.get(id=trade_details_id)
            trade_teachers = trade_details.sub_institute_teachers.all().values()

            trade_datails = {'id': trade_details.id, 'session_start': trade_details.session_start, 'session_end': trade_details.session_end,
                             'price': trade_details.price, 'discount': trade_details.discount, 'actual_price': trade_details.actual_price, 'about_trade': trade_details.about_trade,
                             'introduction': trade_details.introduction, 'date': trade_details.date, 'trade_teachers': trade_teachers}

            student_trade = StudentTradePurchase.objects.filter(
                student=me.profile, trade_details=trade_details).order_by('-id')
            payment_report = []
            for st in student_trade:
                paid_details = {
                    "paidAmount": st.paidAmount,
                    "date": st.date,
                    "mode": st.mode,
                    "approved": st.approved,
                }
                payment_report.append(paid_details)
            if payment_report:
                purchaced = True
            else:
                purchaced = False

            context = {'status': 'success', 'trade_details': trade_datails,
                       'purchaced': purchaced, 'payment_report': payment_report}

        except TradeDetails.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'TradeDetails not found!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentWishListSubInstitute(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        my_profile = me.profile
        data = request.data
        sub_institute_id = data['sub_institute_id']
        try:
            si = SubInstitute.objects.get(id=sub_institute_id)

            if my_profile in si.wishlist_students.all():
                si.wishlist_students.remove(my_profile)
                context = {'status': 'success','message': 'sub institute removed', 'WishList': False}
                
            else:  
                si.wishlist_students.add(my_profile)
                context = {'status': 'success','message': 'sub institute added', 'Bookmarks': True}

        except StudentBookmark.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
        return Response(context)

class StudentGetSubInstituteReviews(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        sub_institute_id = data['sub_institute_id']

        try:
            sub_institute = SubInstitute.objects.get(id=sub_institute_id)
            sub_institute_reviews = SubInstituteReview.objects.select_related(
                'student').filter(sub_institute=sub_institute).order_by('-id')[:50]
            avg_rating = SubInstituteReview.objects.filter(
                sub_institute=sub_institute).aggregate(Avg('rating'))["rating__avg"]

            review_list = []
            for sub_institute_review in sub_institute_reviews:
                review_dict = {
                    "student_name": sub_institute_review.student.name,
                    "message": sub_institute_review.message,
                    "rating": sub_institute_review.rating,
                    "date": sub_institute_review.date
                }
                review_list.append(review_dict)

            context = {'status': 'success','review_list': review_list, "avg_rating": avg_rating}
            
        except SubInstitute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
            
        except Exception as e:
            context = {"Status": "Failed","message": str(e)}
            
        return Response(context)

class StudentReviewSubInstitute(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        sub_institute_id = data['sub_institute_id']
        rating = data['rating']
        message = data['message']

        try:
            si = SubInstitute.objects.get(id=sub_institute_id)
            try:
                sir = SubInstituteReview.objects.get(
                    sub_institute=si, student=me.profile)
                sir.rating = rating
                sir.message = message
                sir.save()
            except:
                sir = SubInstituteReview.objects.create(
                    sub_institute=si, student=me.profile, message=message, rating=rating)

            total_rating = SubInstituteReview.objects.filter(
                sub_institute=si).aggregate(Avg('rating'))['rating__avg']
            si.total_rating = total_rating
            si.save()

            context = {'status': 'success', 'message': 'Review successfully submitted!', 'rating': rating,
                       'message': message, 'student': me.profile.name, 'total_rating': total_rating}
        except SubInstitute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}
        return Response(context)

class InstituteGetStudentsContactAPI(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        contacts_list = Contact.objects.filter(
            student__institute=me.profile.institute).order_by('-id').values()
        context = {'status': 'success', 'message': 'Successfully fetched!',
                   'contacts_list': contacts_list}
        return Response(context)

class StudentContactToInstituteAPI(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        name = data['name']
        email = data['email']
        message = data['message']
        number = data['number']

        try:
            contact = Contact.objects.create(
                student=me.profile, name=name, message=message, email=email, number=number)
            context = {'status': 'success',
                       'message': 'Successfully submitted!'}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': 'Something went wrong. Please try again'}
        return Response(context)

class StudentBuyOfflineTrade(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        trade_details_id = data['trade_details_id']
        paidAmount = data['paidAmount']

        try:
            trade_details = TradeDetails.objects.get(id=trade_details_id)
            trade = trade_details.trade
            sub_institute = trade_details.sub_institute
            paidAmount = float(paidAmount)

            student_trade = StudentTradePurchase.objects.create(
                student=me.profile,
                trade_details=trade_details,
                paidAmount=paidAmount,
                mode="offline",
            )
            context = {'status': 'success',
                       'message': 'purchased Request send successfully!'}
        except TradeDetails.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Trade Details not found'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentBuyOnlineTradeRazorpay(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        amount = data['amount']
        trade_detail_id = data['trade_detail_id']
        try:

            student_trade_dict = {}
            student_trade_dict['student'] = me.profile
            student_trade_dict['trade_details'] = TradeDetails.objects.get(
                id=trade_detail_id)
            student_trade_dict['paidAmount'] = amount
            student_trade_dict['mode'] = "online"
            student_trade_dict['approved'] = True

            student_trade = StudentTradePurchase(**student_trade_dict)
            student_trade.save()
            try:
                st_details, created = SubInstituteStudent.objects.get_or_create(
                    student=me.profile)
                st_details.trades_details.add(
                    student_trade_dict['trade_details'])
                st_details.sub_institute.add(
                    student_trade_dict['trade_details'].sub_institute)
            except:
                pass

            context = {
                "status": "success",
                'message': "Trade Payment Successful",
            }
        except Exception as e:
            context = {
                "status": "failed",
                'message': str(e),
            }

        return Response(context)

class CheckTradeDetailsCouponValidations(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        coupon_code = data['coupon_code']
        trade_details_id = data['trade_details_id']

        try:
            coupon = TradeDetailsCouponCode.objects.filter(
                Code=coupon_code, trade_details=trade_details_id).first()
            if not coupon:
                context = {
                    "status": "failed",
                    "message": "not valid for given trade details"
                }
                return Response(context)

            if coupon.date_of_expire:
                today = datetime.now().date()
                if coupon.date_of_expire < today:
                    context = {
                        "status": "failed",
                        "message": "coupon expire",
                    }
                    return Response(context)

            if coupon.total_coupon_count:
                if coupon.total_coupon_count < 5:
                    context = {
                        "status": "failed",
                        "message": "coupon expire"
                    }
                    return Response(context)

            context = {'status': 'success',
                       'message': 'coupon is valid!',
                       "amount": coupon.amount,
                       "date_of_expire": coupon.date_of_expire,
                       "remmaining_coupon": coupon.total_coupon_count,
                       }
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentApplyTradeDetailsCoupon(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        coupon_code = data['coupon_code']
        trade_details_id = data['trade_details_id']

        try:
            coupon = TradeDetailsCouponCode.objects.filter(Code=coupon_code, trade_details=trade_details_id).first()
            if not coupon:
                context = {"status": "failed","message": "Coupon not valid for given trade details"}
                return Response(context)

            if coupon.date_of_expire:
                today = datetime.now().date()
                if coupon.date_of_expire < today:
                    context = {"status": "failed", "message": "coupon expire"}
                    return Response(context)

            if coupon.total_coupon_count:
                if coupon.total_coupon_count < 1:
                    context = {"status": "failed", "message": "coupon expire"}
                    return Response(context)

                else:
                    coupon.total_coupon_count -= 1
                    coupon.save()

            student = me.profile

            purchase_history = StudentTradePurchase.objects.filter(
                student=student, trade_details=coupon.trade_details, approved=True)

            if purchase_history.first() == None:
                context = {"status": "failed",
                           "message": "to apply coupon please do first payment"}
                return Response(context)

            if purchase_history.filter(mode="coupon"):
                context = {"status": "failed",
                           "message": "coupon already applied"}
                return Response(context)

            StudentTradePurchase_dict = {
                "student": me.profile,
                "trade_details": coupon.trade_details,
                "paidAmount": coupon.amount,
                "mode": "coupon",
                "approved": True,
            }

            sttp = StudentTradePurchase.objects.create(
                **StudentTradePurchase_dict)
            sttp.coupon.add(coupon)

            context = {'status': 'success',
                       'message': 'coupon applied successfully!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetBoughtTrade(APIView):
    def get(self, request):
        me = Studs(self.request.user)

        trade_details = TradeDetails.objects.filter(
            student_trade_details__student=me.profile,
            student_trade_details__approved=True,).prefetch_related("student_trade_details").select_related("sub_institute").distinct()

        bought_trades_list = []
        try:
            for bt in trade_details:
                trade_details_dict = {
                    'id': bt.id,
                    'trade': {
                        'id': bt.trade.id,
                        'name': bt.trade.name,
                    },
                    'session_start': bt.session_start,
                    'session_end': bt.session_end,
                    'price': bt.price,
                    'discount': bt.discount,
                    'actual_price': bt.actual_price,
                    'date': bt.date,
                }

                sub_institute_dict = {'id': bt.sub_institute.id,
                                      'sub_institute_name': bt.sub_institute.name}

                student_trade = StudentTradePurchase.objects.filter(
                    trade_details=bt).order_by('-id')
                payment_report = []
                total_pay = 0
                for st in student_trade:
                    paid_details = {
                        "paidAmount": st.paidAmount,
                        "date": st.date,
                        "mode": st.mode,
                        "approved": st.approved,
                    }
                    payment_report.append(paid_details)
                    if st.approved == True:
                        total_pay += st.paidAmount

                dict = {
                    'trade_details': trade_details_dict,
                    'sub_institute': sub_institute_dict,
                    'payment_report': payment_report,
                    'total_pay': total_pay,
                    "remmaining_pay": bt.actual_price - total_pay
                }
                bought_trades_list.append(dict)

            context = {'status': 'success', 'message': 'Successfully fetched.',
                       'bought_trades_list': bought_trades_list}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': 'Something went wrong!', 'error': str(e)}
        return Response(context)

class ApprovalStudentBuyOfflineTradeNew(APIView):
    def get(self, request):

        student_trades = StudentTradePurchase.objects.filter(approved=None).select_related(
            "student", "trade_details")
        student_trades_list = []
        for st in student_trades:
            student_trade_dict = {
                "id": st.id,
                "student": {
                    "id": st.student.id,
                    "name": st.student.name,
                },
                "trade_details": {
                    'id': st.trade_details.id,
                    'trade': {
                        'id': st.trade_details.trade.id,
                        'name': st.trade_details.trade.name,
                    },
                    'session_start': st.trade_details.session_start,
                    'session_end': st.trade_details.session_end,
                    'price': st.trade_details.price,
                    'discount': st.trade_details.discount,
                    'actual_price': st.trade_details.actual_price,
                    'date': st.trade_details.date,
                },
                "sub_institute": {'id': st.trade_details.sub_institute.id,
                                  'sub_institute_name': st.trade_details.sub_institute.name
                                  },
                "paidAmount": st.paidAmount,
                "mode": st.mode,
                "approved": st.approved,
            }
            student_trades_list.append(student_trade_dict)

        return Response({"status": "success", "ReviewList": student_trades_list})

    def post(self, request):
        data = request.data
        user = self.request.user
        student_trade_id = data['student_trade_id']
        sub_institute_id = data.get('sub_institute_id')
        approval = json.loads(data['approval'])

        sub_institute = SubInstitute.objects.filter(
            sub_institute_user=user).first()
        if sub_institute == None:
            sub_institute = SubInstitute.objects.filter(
                id=sub_institute_id).first()
        if sub_institute == None:
            context = {
                "status": "failed",
                "message": "sub institute doesn't exist."
            }
            return Response(context)

        student_trade = StudentTradePurchase.objects.get(id=student_trade_id)
        student_trade.approved = approval
        student_trade.save()
        try:
            st_details, created = SubInstituteStudent.objects.get_or_create(
                student=student_trade.student)
            st_details.trades_details.add(student_trade.trade_details)
            st_details.sub_institute.add(sub_institute)
        except:
            pass

        context = {
            "status": "success",
            "message": "payment updated successfully"
        }
        return Response(context)

class StudentBuyOfflineTradeAddByInstitute(APIView):
    def post(self, request):
        data = request.data
        user = self.request.user
        if user.username != 'mobileiti_teacher':
            context = {
                "status": "failed",
                "message": "permission not allowed"
            }
        trade_details_id = data['trade_details_id']
        student_id = data.get('student_id')
        amount = data.get('amount')

        try:
            trade_detail = TradeDetails.objects.get(id=trade_details_id)
        except:
            context = {
                "status": "failed",
                "message": "trade_details_id doesn't exist."
            }
            return Response(context)
        
        try:
            student = Student.objects.get(id=student_id)
        except:
            context = {
                "status": "failed",
                "message": "student_id doesn't exist."
            }
            return Response(context)
        try:
            student_trade_dict = {}
            student_trade_dict['student'] = student
            student_trade_dict['trade_details'] = trade_detail
            student_trade_dict['paidAmount'] = amount
            student_trade_dict['mode'] = "offline"
            student_trade_dict['approved'] = True

            student_trade = StudentTradePurchase(**student_trade_dict)
            student_trade.save()
            try:
                st_details, created = SubInstituteStudent.objects.get_or_create(
                    student=student)
                st_details.trades_details.add(trade_detail)
                st_details.sub_institute.add(trade_detail.sub_institute)
            except:
                pass
            context = {
                "status": "success",
                "message": "payment updated successfully"
            }
        except Exception as e:
            context = {
                "status": "failed",
                "message": f"{e}"
            }

        return Response(context)

class TeacherGetBoughtTradeStudents(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        bought_trade_students = StudentTradePurchase.objects.filter(student__institute=me.profile.institute).select_related(
            'student', 'trade', 'trade_details', 'sub_institute').order_by('-id')

        bought_trade_students_list = []
        try:

            for bts in bought_trade_students:

                trade = bts.trade
                trade_dict = {'id': trade.id, 'name': trade.name}

                sub_institute = bts.sub_institute
                sub_institute_dict = {'id': sub_institute.id,
                                      'sub_institute_name': sub_institute.name}

                trade_details = bts.trade_details
                trade_teachers_details = trade_details.sub_institute_teachers.all().values()
                trade_datails_dict = {'id': trade_details.id, 'session_start': trade_details.session_start, 'session_end': trade_details.session_end,
                                      'price': trade_details.price, 'discount': trade_details.discount, 'actual_price': trade_details.actual_price, 'about_trade': trade_details.about_trade,
                                      'introduction': trade_details.introduction, 'date': trade_details.date, 'trade_teachers': trade_teachers_details}

                dict = {'id': bts.id, 'student_id': bts.student.id, 'student_name': bts.student.name, 'paidAmount': bts.paidAmount,
                        'date': bts.date, 'trade': trade_dict, 'sub_institute': sub_institute_dict, 'trade_datails': trade_datails_dict}
                bought_trade_students_list.append(dict)

            context = {'status': 'success', 'message': 'Successfully fetched.',
                       'bought_trade_students': bought_trade_students_list}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': 'Something went wrong!', 'error': str(e)}
        return Response(context)

class SubInstituteTeacherGetOwnTradeBoughtStudents(APIView):
    def get(self, request):
        sub_institute_user = self.request.user

        bought_trade_students = StudentTradePurchase.objects.filter(sub_institute__sub_institute_user=sub_institute_user).select_related(
            'student', 'trade', 'trade_details', 'sub_institute').order_by('-id')

        bought_trade_students_list = []
        try:
            for bts in bought_trade_students:

                trade = bts.trade
                trade_dict = {'id': trade.id, 'name': trade.name}

                sub_institute = bts.sub_institute
                sub_institute_dict = {'id': sub_institute.id,
                                      'sub_institute_name': sub_institute.name}

                dict = {'id': bts.id, 'student_id': bts.student.id, 'student_name': bts.student.name,
                        'paidAmount': bts.paidAmount, 'date': bts.date, 'trade': trade_dict, 'sub_institute': sub_institute_dict}
                bought_trade_students_list.append(dict)

            context = {'status': 'success', 'message': 'Successfully fetched.',
                       'bought_trade_students': bought_trade_students_list}
        except Exception as e:
            context = {'status': 'Failed',
                       'message': 'Something went wrong!', 'error': str(e)}
        return Response(context)

class TeacherGetStudentAllTradeDetails(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        student = Student.objects.get(id=student_id)

        tradedetails_ids = set(
            stp.trade_details.id for stp in StudentTradePurchase.objects.filter(student=student))
        subinstitute_ids = set(
            trade_detail.sub_institute.id for trade_detail in TradeDetails.objects.filter(id__in=tradedetails_ids))

        result = []
        for sub_inst_id in subinstitute_ids:
            sub_institute = SubInstitute.objects.get(id=sub_inst_id)
            sub_inst_dict = {'id': sub_institute.id,
                             'sub_institute_name': sub_institute.name}
            trade_details_list = []
            trade_detailss = TradeDetails.objects.filter(
                sub_institute=sub_institute, id__in=tradedetails_ids).select_related('trade')
            for trade_details in trade_detailss:
                trade_details_dict = {
                    'id': trade_details.id,
                    'trade': trade_details.trade.name,
                    'session_start': trade_details.session_start,
                    'session_end': trade_details.session_end,
                    'price': trade_details.price,
                    'discount': trade_details.discount,
                    'actual_price': trade_details.actual_price,
                    'about_trade': trade_details.about_trade,
                    'introduction': trade_details.introduction,
                    'date': trade_details.date, }

                stps = StudentTradePurchase.objects.filter(
                    student=student, trade_details=trade_details)
                payment_dict_list = []
                for stp in stps:
                    payment_dict = {'id': stp.id, 'paidAmount': stp.paidAmount, 'date': stp.date,
                                    'mode': stp.mode, 'approved': stp.approved, 'coupon': stp.coupon}
                    payment_dict_list.append(payment_dict)
                trade_details_dict['payment_history'] = payment_dict_list
                trade_details_list.append(trade_details_dict)

            sub_inst_dict['trade_details'] = trade_details_list
            result.append(sub_inst_dict)

        return Response(result)

class PurchaseTradeStudentsList(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        trade_details_id = data['trade_details_id']
        try:
            trade_students = StudentTradePurchase.objects.filter(
                trade_details=trade_details_id).select_related('student').order_by('-id')
            trade_student_list = []
            set_id = set()
            for tstudent in trade_students:
                if tstudent.student.id not in set_id:
                    student_dict = {
                        'id': tstudent.student.id,
                        'name': tstudent.student.name, }
                    trade_student_list.append(student_dict)
                    set_id.add(tstudent.student.id)

            context = {'status': True, 'message': 'success',
                       'data': trade_student_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class PurchaseTradeStudentPaymentDetails(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        trade_details_id = data['trade_details_id']
        student_id = data['student_id']
        try:
            payments = StudentTradePurchase.objects.filter(
                student=student_id, trade_details=trade_details_id).order_by('-id')
            payment_report = []
            total_pay = 0
            for st in payments:
                paid_details = {
                    "paidAmount": st.paidAmount,
                    "date": st.date,
                    "mode": st.mode,
                    "approved": st.approved,
                }
                payment_report.append(paid_details)
                if st.approved == True:
                    total_pay += st.paidAmount

            actual_price = TradeDetails.objects.get(
                id=trade_details_id).actual_price

            dict = {
                'payment_report': payment_report,
                'total_pay': total_pay,
                'remmaining_pay': actual_price - total_pay,
            }
            context = {'status': True, 'message': 'success', 'data': dict}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)


class PackageWiseLiveVideoAPI(APIView):
    def post(self, request):
        try:
            package_id = request.data['package_id']
            video_collection = []

            nv_list = []
            nativeLiveVideos = NativeLiveVideo.objects.select_related(
                'teacher').filter(packages=package_id).order_by('-id')
            for nlv in nativeLiveVideos:
                if nlv in nv_list:
                    continue
                else:
                    nv_list.append(nlv)
            for live in nv_list:
                teacher = live.teacher
                if teacher:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name,
                                    'username': teacher.teacheruser.username, 'photo': teacher.photo}
                else:
                    teacher_dict = None
                live_dict = {'type': 'NativeLiveVideo', 'id': live.id, 'title': live.title, 'teacher': teacher_dict, 'time': live.time, 'live': live.live,
                             'jitsivideo': live.jitsiVideo, 'jitsiLink': live.jitsiLink, 'antVideo': live.antVideo, 'streamId': live.streamId, 'multipeer': live.multipeer, }
                video_collection.append(live_dict)

            g_meet_list = []
            g_meet = GoogleMeetLive.objects.select_related(
                'teacher').filter(packages=package_id).order_by('-id')
            for gm in g_meet:
                if gm in g_meet_list:
                    continue
                else:
                    g_meet_list.append(gm)

            for gm in g_meet_list:
                teacher = gm.teacher
                if teacher:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name,
                                    'username': teacher.teacheruser.username, 'photo': teacher.photo}
                else:
                    teacher_dict = None
                live_dict = {'type': 'GoogleMeetLive', 'id': gm.id, 'title': gm.title, 'teacher': teacher_dict, 'time': gm.time,
                             'live': gm.live, 'jitsivideo': False, 'jitsiLink': None, 'antVideo': False, 'streamId': gm.link, 'multipeer': False, }
                video_collection.append(live_dict)

            video_list = []
            live_video_videos = LiveVideoLink.objects.filter(
                packages=package_id).select_related('teacher').order_by('-id')
            for lv in live_video_videos:
                if lv in video_list:
                    continue
                else:
                    video_list.append(lv)

            for lv in video_list:
                teacher = lv.teacher
                print(teacher)
                if teacher:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name,
                                    'username': teacher.teacheruser.username, 'photo': teacher.photo}
                else:
                    teacher_dict = None
                lv_dict = {'type': 'LiveVideoLink', 'id': lv.id, 'title': lv.title, 'teacher': teacher_dict, 'time': lv.time,
                           'live': None, 'jitsivideo': False, 'jitsiLink': None, 'antVideo': False, 'streamId': lv.link, 'multipeer': False, }
                video_collection.append(lv_dict)

            video_collection = sorted(
                video_collection, key=lambda video: video['time'], reverse=True)
            context = {'videos': video_collection}

        except Exception as e:
            context = {
                'status': 'Failed',
                'message': str(e)
            }

        return Response(context)

class MultipleStudentsAddToPackageAPI(APIView):
    authentication_classes = [authentication.SessionAuthentication,
                              authentication.BasicAuthentication, authentication.TokenAuthentication]
    permission_classes = [permissions.IsAdminUser]

    def post(self, request):
        data = request.data

        try:
            csv_file = request.FILES['file']
            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                return Response(
                    {
                        'error': 'This is not csv or xlsx file'
                    }
                )
            elif csv_file.name.endswith('.csv'):
                df = pd.read_csv(csv_file)
            else:
                df = pd.read_excel(csv_file)

            package_id = df['package_id']
            user_id = df['user_id']

            final_list = list(zip(package_id, user_id))
        except:
            package_id = data['package_id']
            user_id = data['user_id']

            final_list = [(package_id, user_id),]

        institute_code = data['institute_code']
        student_added_to_package = []
        import datetime
        if data.get('endDate'):
            date = data.get('endDate')
        elif data.get('days'):
            date = timezone.now().date() + timedelta(days=int(data.get('days')))
        else:
            date = data.get('endDate')

        for package, student in final_list:

            pack = Package.objects.filter(id=package).first()
            student_username = str(student) + '@' + str(institute_code)
            student = Student.objects.filter(studentuser=User.objects.filter(
                username=student_username).first()).first()
            if not student:
                context = {'status': 'Faield',
                           'message': 'Student not registered'}
                continue


            today = timezone.now()
            try:
                studentPackage = StudentPackage.objects.get(
                    student=student, package=pack)
                if studentPackage.endDate.replace(tzinfo=None) <= today.now():
                    pack.students.remove(student)
                    pack.save()
                    pasp = PaidAmountStudentPackage.objects.filter(
                        studentPackage=studentPackage)
                    totalPaidAmount = 0
                    for i in pasp:
                        totalPaidAmount += i.paidAmount
                    sbph = StudentBoughtPackageHistory()
                    sbph.student = student
                    sbph.package = pack.title
                    sbph.packagePrice = pack.price
                    sbph.duration = pack.duration
                    sbph.paidAmount = totalPaidAmount
                    sbph.startDate = studentPackage.startDate
                    sbph.endDate = studentPackage.endDate
                    sbph.save()
                    studentPackage.delete()
                    for i in pasp:
                        i.delete()
                    raise StudentPackage.DoesNotExist
                else:
                    context = {'status': 'Faield',
                               'message':  {
                                   'student_id': student.id,
                                   'student': student.name,
                                   'package': pack.id,
                                   'message': "Already added",
                               }
                               }
            except StudentPackage.MultipleObjectsReturned:
                context = {'status': 'Faield',
                           'message':  {
                               'student_id': student.id,
                               'student': student.name,
                               'package': pack.id,
                               'message': "Already added",
                           }
                           }

            except StudentPackage.DoesNotExist:
                endDate = timezone.now().date() + timezone.timedelta(days=pack.duration)
                studentPackage = StudentPackage()
                startDate = timezone.now().date()
                studentPackage.student = student
                studentPackage.package = pack
                studentPackage.startDate = startDate
                studentPackage.endDate = endDate
                studentPackage.save()
                pack.students.add(student)
                pack.save()

                try:
                    student_batches = student.batches.all().values_list('id', flat=True)
                    batches = pack.batches.all()
                    for i in batches:
                        if i.id not in student_batches:
                            batch = Batch.objects.get(id=i.id)
                            student.batches.add(batch)
                            student.save()
                except:
                    pass

                youtubelive = LiveVideoLink.objects.filter(
                    packages=pack, locked=False, deleted=False)
                for lv in youtubelive:
                    lv.students.add(student)
                    lv.save()

                context = {
                    'student_id': student.id,
                    'student': student.name,
                    'package': pack.id,
                }

            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}

            try:
                purchased = data['purchase']
                paidamount = PaidAmountStudentPackage.objects.filter(
                    studentPackage=studentPackage)
                if not paidamount:
                    paidamount = PaidAmountStudentPackage()
                    paidamount.studentPackage = studentPackage
                    paidamount.paidAmount = int(studentPackage.package.price)
                    paidamount.save()
            except:
                pass

            student_added_to_package.append(context)

        context = {
            'status': 'success',
            'student_added_to_package': student_added_to_package
        }

        return Response(context)

class StudentIndividualPackageSubjectList(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data.get('package_id')
        subject_set = set()

        package = Package.objects.prefetch_related(
            'notes', 'notes__subject',
            'tests', 'tests__subject',
            'videos', 'videos__subject',
            'fileTests', 'fileTests__subject').filter(id=package_id).all()

        subject_set = set()
        for i in package:
            for vid in i.videos.all():
                subject_set.add(vid.subject)
            for note in i.notes.all():
                subject_set.add(vid.subject)
            for test in i.tests.all():
                for sub in test.subjects.all():
                    subject_set.add(sub)
            for ftest in i.fileTests.all():
                subject_set.add(ftest.subject)

        subjects_list = list(subject_set)
        sub_list = []

        for subject in subjects_list:

            subject_details = {
                'id': subject.id,
                'name': subject.name,
            }

            sub_list.append(subject_details)

        context = {'subject_list': sub_list}
        return Response(context)

class InstituteUsedMessageCount(APIView):
    def get(self, request, *args, **kwargs):
        teacher = Teach(self.request.user)
        if teacher:
            institute = Institute.objects.filter(
                id=teacher.profile.institute.id).first()

            if institute:
                try:
                    totalSMS = SMSCount.objects.filter(
                        institute=institute).first()
                    sentSMS = totalSMS.sent
                    context = {'status': 'Success', 'sentSMS': sentSMS}

                except Exception as e:
                    context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed', 'message': 'User is not a Teacher'}

        return Response(context)

class InstituteSentSms(APIView):
    def get(self, request, *args, **kwargs):
        teacher = Teach(self.request.user)
        if teacher:
            institute = Institute.objects.filter(
                id=teacher.profile.institute.id).first()

            if institute:
                try:
                    institute_code = institute.code
                    sms_list = []

                    all_sms = IndividualSMS.objects.all()
                    for sms in all_sms:
                        sms_text = sms.smsText
                        if institute_code in sms_text.split():
                            sms_details = {
                                'smsText': sms.smsText, 'date': sms.date}
                            sms_list.append(sms_details)

                    context = {'status': 'Success',
                               'institute_sms_list': sms_list}

                except Exception as e:
                    context = {'status': 'Failed', 'message': str(e)}
        else:
            context = {'status': 'Failed', 'message': 'User is not a Teacher'}

        return Response(context)

class StudentInPackageList(APIView):
    def post(self, request):
        data = request.data
        me = Teach(self.request.user)
        package_id = data.get('package_id')

        queryset = StudentPackage.objects.filter(id=package_id).all()
        buy_list = []
        for std in queryset:
            student_dict = {}
            if std.student:
                student_dict['id'] = std.student.id
                student_dict['name'] = std.student.name
                student_dict['photo'] = std.student.student.photo
            student_dict['startdate'] = std.startDate
            student_dict['enddate'] = std.endDate

            buy_list.append(student_dict)

        return Response({'status': "success", 'response': buy_list})

class AllStudentBuyPackageList(APIView):
    def get(self, request):
        data = request.data
        me = Teach(self.request.user)
        package_list = Package.objects.filter(teacher=me.profile).all()

        queryset = StudentPackage.objects.filter(
            package__in=package_list).all()
        buy_list = []
        for std in queryset:
            student_dict = {}
            package_dict = {}
            if std.student:
                student_dict['id'] = std.student.id
                student_dict['name'] = std.student.name
                student_dict['photo'] = std.student.student.photo
                student_dict['price_purchase'] = std.paid_studentpackage.first(
                ).paidAmount

            if std.package:
                package_dict['id'] = std.package.id
                package_dict['title'] = std.package.title
                package_dict['thumbnail'] = std.package.thumbnail
                package_dict['baseprice'] = std.package.basePrice
                package_dict['price'] = std.package.price
            else:
                student_dict['id'] = None
                student_dict['name'] = None
                student_dict['photo'] = None
            student_dict['startdate'] = std.startDate
            student_dict['enddate'] = std.endDate

            buy_list.append({'student': student_dict, 'package': package_dict})

        return Response({'status': "success", 'response': buy_list})

class DownloadSentSMSFile(APIView):
    def get(self, request, institute_code):
        response = HttpResponse(content_type='text/csv')

        writer = csv.writer(response)
        writer.writerow(['sms', 'to', 'datetime'])
        institute_code = ' ' + institute_code + ' '
        all_sms = IndividualSMS.objects.filter(smsText__icontains=institute_code)
        for sms in all_sms:
            try:
                if sms.smsTo:
                    msgTo = 'Login'
                else:
                    msgTo = 'Register'
            except:
                msgTo = 'Register'
            writer.writerow([sms.smsText, msgTo, sms.date])

        response['Content-Disposition'] = 'attachment; filename="InstituteAllSms.csv"'
        return response

class TeacherGetTotalEarningAndTotalBuyersCompleteDetails(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)

        try:
            studentPackages = StudentPackage.objects.filter(
                package__teacher=me.profile)
            packages_ids = studentPackages.values_list(
                'package__id', flat=True)

            details = []
            Totalearning = 0
            for stpack in studentPackages:
                price = PaidAmountStudentPackage.objects.get(
                    studentPackage=stpack).paidAmount

                Totalearning += price
                package_dict = {'title': stpack.package.title, 'price': stpack.package.price,
                                'basePrice': stpack.package.basePrice, 'paid price': price}
                student_dict = {'name': stpack.student.name, 'institute': stpack.student.institute.name,
                                'studentuser': stpack.student.studentuser.username}

                st_dict = {'student': student_dict, 'package': package_dict, 'startDate': stpack.startDate, 'endDate': stpack.endDate,
                           'packageDurationWhileAddPackage': stpack.packageDurationWhileAddPackage, 'packageFixDurationWhileAddPackage': stpack.packageFixDurationWhileAddPackage}

                details.append(st_dict)

            context = {'details': details}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherTotalEarningNew(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            update_TeacherWebAppMoney(me.profile.id)
        except:
            pass
        package = Package.objects.filter(teacher=me.profile)
        package_earning = PackageEarning.objects.select_related(
            'package').filter(package__in=package)

        detail_list = []
        total_solds = 0
        total_earning = 0
        for pack_earn in package_earning:
            package_dict = {
                'id': pack_earn.package.id,
                'title': pack_earn.package.title
            }
            dict_ = {
                "package": package_dict,
                "units_sold": pack_earn.units_sold,
                "total_price": pack_earn.total_price,
                "base_price_total": pack_earn.base_price_total,
                "total_earning": pack_earn.total_price - pack_earn.base_price_total
            }

            detail_list.append(dict_)
            total_solds += pack_earn.units_sold
            total_earning += (pack_earn.total_price -
                              pack_earn.base_price_total)

        context = {
            "status": "success",
            "response_list": detail_list,
            "total_solds": total_solds,
            "total_earning": total_earning,
        }

        return Response(context)

class TeacherGetWalletBalanceNew(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            update_TeacherWebAppMoney(me.profile.id)
        except:
            pass
        web_app_money, created = TeacherWebAppMoney.objects.get_or_create(
            teacher=me.profile)

        context = {
            "status": "success",
            "teacher_id": web_app_money.teacher.id,
            "total_sales": web_app_money.total_sales,
            "my_own_earning": web_app_money.total_earning,
            "total_withdrawal": web_app_money.withdrawal_money,
            "remmaning": web_app_money.total_earning - web_app_money.withdrawal_money,
        }

        return Response(context)

class TeacherEditPackageNew(APIView):
    def post(self, request):
        data = request.data
        package_id = data['package_id']
        create_or_update_record_of_package_earning.delay(package_id)

        margin = data['margin']
        package = Package.objects.get(id=package_id)
        package.price = package.basePrice + float(margin)
        package.save()

        pack_earning = PackageEarning.objects.get(package__id=package_id)

        context = {
            "status": "success",
            "message": "margin succefully updated"
        }
        return Response(context)

class TeacherGetOwnWithdrawHistory(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        moneyRequests = TeacherWithdrawMoneyRequest.objects.filter(
            teacher=me.profile).order_by('-id')
        historys_list = []
        for mr in moneyRequests:
            if mr.coin == None:
                coin = 0
            else:
                coin = mr.coin
            if mr.withdrawMoney == None:
                money = 0
            else:
                money = mr.withdrawMoney
            history_dict = {
                'id': mr.id,
                'teacher': mr.teacher.name,
                'time': mr.time,
                'status': mr.request_status,
                "money": money,
                "coin": coin,
                "amount": float(money + coin/mr.coin_conversion_rate)
            }
            historys_list.append(history_dict)
        context = {'status': 'success', 'history': historys_list}
        return Response(context)

class CoinConversionRate(APIView):
    def get(self, request):
        return Response({"status": "success", "rate": 10})

def coin_convert_to_amount(value, equvilanent: int = 10):
    return {'amount': float(value/equvilanent), 'equvilanent': equvilanent}

def daily_withdrawal_limit_validation(teacher_id):
    limit = 1
    today = datetime.today().strftime('%Y-%m-%d')
    if limit <= TeacherWithdrawMoneyRequest.objects.filter(time__date=today, teacher=teacher_id).count():
        return limit
    return True

def teacher_withdrawal_validation(teacher):
    min_withdrawal_amount = 50    # below it all request rejected
    max_withdrawal_amount = 500        # onward here all went for appproval
    teacher_coin = TeacherCoin.objects.get(teacher=teacher)
    teacher_money = TeacherWebAppMoney.objects.get(teacher=teacher)

    amount = coin_convert_to_amount(teacher_coin.coins)['amount'] + \
        float(teacher_money.total_earning - teacher_money.withdrawal_money)

    if amount >= min_withdrawal_amount:
        coin = teacher_coin.coins
        money = teacher_money.total_earning - teacher_money.withdrawal_money
        return (float(amount), float(coin), float(money), min_withdrawal_amount, max_withdrawal_amount)
    return (None, None, None, min_withdrawal_amount, max_withdrawal_amount)

def package_sell_validation(teacher):
    packages = Package.objects.filter(
        Q(teacher=teacher, marketLevelPackage=True) & ~Q(marketParentPackage=None))
    if not packages:
        return 'Please sell atleast one package which is addded by store'

    packages_ids = packages.values_list('id', flat=True)
    packagesStudents = StudentPackage.objects.filter(
        package__id__in=packages_ids).count()
    if packagesStudents == 0:
        return 'Please sell atleast one package which is addded by store'

    return True

class TeacherDoRequestWithdrawNew(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        if me.profile.institute.code in ["ou"]:
            context = {
                "status": "Failed",
                "message": "Not Allowed",
            }
            return Response(context)

        teacher_coin = TeacherCoin.objects.get(teacher=me.profile)
        teacher_money, created = TeacherWebAppMoney.objects.get_or_create(
            teacher=me.profile)
        try:
            update_TeacherWebAppMoney(me.profile.id)
        except:
            pass

        context = {
            "status": "success",
            "coin": teacher_coin.coins,
            "coin_equivalent": coin_convert_to_amount(teacher_coin.coins)['equvilanent'],
            "money": teacher_money.total_earning - teacher_money.withdrawal_money,
            "total_amount": coin_convert_to_amount(teacher_coin.coins)['amount'] + float(teacher_money.total_earning - teacher_money.withdrawal_money)
        }

        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        if me.profile.institute.code in ["ou"]:
            context = {
                "status": "Failed",
                "message": "Not Allowed",
            }
            return Response(context)
        data = request.data
        beneficiary = data['beneficiary']
        teacher_coin = TeacherCoin.objects.get(teacher=me.profile)
        teacher_money = TeacherWebAppMoney.objects.get(teacher=me.profile)

        try:
            res = package_sell_validation(me.profile)
            if res != True:
                context = {'status': 'Failed', 'message': res}
                return Response(context)

            res = daily_withdrawal_limit_validation(me.profile.id)
            if res != True:
                context = {
                    "status": "failed",
                    "message": f"one user can't request withdrawal more than {res} times a day"
                }
                return Response(context)

            result = teacher_withdrawal_validation(me.profile)

            amount = result[0]
            coin = result[1]
            conversion = coin_convert_to_amount(coin)['equvilanent']
            money = result[2]
            min_withdrawal_amount = result[3]
            max_withdrawal_amount = result[4]

            if amount == None:
                context = {
                    "status": "failed",
                    "message": f"minimum withdrawal amount is {min_withdrawal_amount}"
                }
                return Response(context)

            if amount < max_withdrawal_amount:
                url = "https://bodhiai.live/api/management/easebuzz_payout_solution/"
                Header = {
                    "Authorization": "token snkedr7toes87thruew95t7orhgun4p59se8he78"
                }
                body = {
                    'payout_from': 'bodhiai_account',
                    "ACTION": "initiate_transfer",
                    "beneficiary_code": beneficiary,
                    "payment_mode": "UPI",
                    "amount": amount,
                    "scheduled_for": "",
                    "narration": "",
                    "virtual_account_number": "",
                    "udf1": "WebappWithdrawal",
                    "udf2": f"coin{int(coin)}",
                    "udf3": f"money{int(money)}",
                    "udf4": "",
                    "udf5": "",
                }
                r = requests.post(url, body, headers=Header)
                response = json.loads(r.content)
                if not response['success']:
                    context = {
                        "status": "failed",
                        "message": "try again later",
                    }
                    return Response(context)

                if response['data']["transfer_request"]["status"] == "success":
                    twmr = TeacherWithdrawMoneyRequest.objects.create(
                        beneficiary_id=beneficiary, teacher=me.profile, coin=coin, coin_conversion_rate=conversion, withdrawMoney=money, request_status="accepted", status=None)
                    teacher_coin.coins = 0
                    teacher_coin.save()
                    teacher_money.withdrawal_money = teacher_money.total_earning
                    teacher_money.save()
                    context = {
                        "status": "success",
                        "message": response,
                        "withdrawRequestStatus": twmr.request_status,
                    }
                else:
                    twmr = TeacherWithdrawMoneyRequest.objects.create(
                        beneficiary_id=beneficiary, teacher=me.profile, coin=coin, coin_conversion_rate=conversion, withdrawMoney=money, request_status="failed", status=None)
                    context = {
                        "status": "failed",
                        "message": response,
                        "withdrawRequestStatus": twmr.request_status,
                    }

            else:
                twmr = TeacherWithdrawMoneyRequest.objects.create(
                    beneficiary_id=beneficiary, teacher=me.profile, coin=coin, coin_conversion_rate=conversion, withdrawMoney=money, request_status="in-review", status=None)
                teacher_coin.coins = 0
                teacher_coin.save()
                teacher_money.withdrawal_money = teacher_money.total_earning
                teacher_money.save()
                context = {
                    'status': 'success',
                    'message': 'withdrawal request is in Review',
                    'withdrawRequestStatus': twmr.request_status
                }
                
                try:
                    json_file = me.profile.institute.json_file
                except Exception as e:
                    json_file = None
                    
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    to_text = f'New withdraw request has been recieved from {me.profile.institute.name} institute, Please check the request as soon as possible'
                    teacher = Teacher.objects.get(teacheruser__username='teacherdemo')
                    deviceId = teacher.firebaseToken
                    teacher_id = teacher.id
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                    
                except Exception as f:
                    print(str(f))

            update_TeacherWebAppMoney.delay(me.profile.id)

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class BodhiaiWithdrawalApprovalAPI(APIView):
    permission_classes = [permissions.IsAdminUser]

    def get(self, request):
        twmr = TeacherWithdrawMoneyRequest.objects.filter(
            request_status="in-review")
        list_twmr = []
        for request in twmr:
            try:
                teacher_dict = {
                    'id': request.teacher.id,
                    'name': request.teacher.name,
                    'institute': request.teacher.institute.name,
                }
            except:
                teacher_dict = {}

            dict_ = {
                "id": request.id,
                "beneficiary_id": request.beneficiary_id,
                "teacher": teacher_dict,
                "withdrawMoney": request.withdrawMoney,
                "coin": request.coin,
                "amount": request.withdrawMoney + coin_convert_to_amount(request.coin)['amount'],
                "time": request.time,
                "request_status": request.request_status,
            }
            list_twmr.append(dict_)
        return Response(list_twmr)

    def post(self, request):
        data = request.data
        from decimal import Decimal
        try:
            id = data['id']
            request_status = data['request_status']
            twmr = TeacherWithdrawMoneyRequest.objects.get(id=id)
            teacher = twmr.teacher
            if twmr.request_status == 'in-review':
                if request_status == 'accepted':

                    amount = coin_convert_to_amount(
                        twmr.coin)['amount'] + float(twmr.withdrawMoney)
                    beneficiary = twmr.beneficiary_id
                    url = "https://bodhiai.live/api/management/easebuzz_payout_solution/"
                    Header = {
                        "Authorization": "token snkedr7toes87thruew95t7orhgun4p59se8he78"
                    }
                    body = {
                        'payout_from': 'bodhiai_account',
                        "ACTION": "initiate_transfer",
                        "beneficiary_code": beneficiary,
                        "payment_mode": "UPI",
                        "amount": amount,
                        "scheduled_for": "",
                        "narration": "",
                        "virtual_account_number": "",
                        "udf1": "WebappWithdrawal",
                        "udf2": f"coin{int(twmr.coin)}",
                        "udf3": f"money{int(twmr.withdrawMoney)}",
                        "udf4": "",
                        "udf5": "",
                    }
                    r = requests.post(url, body, headers=Header)
                    response = json.loads(r.content)
                    try:
                        if response['data']["transfer_request"]["status"] == "success":
                            twmr.request_status = 'accepted'
                            twmr.coin_conversion_rate = coin_convert_to_amount(twmr.coin)[
                                'equvilanent']
                            twmr.save()
                            context = {
                                "status": "success",
                                "message": response,
                                "withdrawRequestStatus": twmr.request_status,
                            }
                        else:
                            twmr.request_status = 'failed'
                            twmr.coin_conversion_rate = coin_convert_to_amount(twmr.coin)[
                                'equvilanent']
                            twmr.save()
                            teacher_coin = TeacherCoin.objects.get(
                                teacher=teacher)
                            teacher_money = TeacherWebAppMoney.objects.get(
                                teacher=teacher)
                            teacher_coin.coins += float(twmr.coin)
                            teacher_coin.save()
                            teacher_money.withdrawal_money -= Decimal(
                                twmr.withdrawMoney)
                            teacher_money.save()
                            context = {
                                "status": "failed",
                                "message": response,
                                "withdrawRequestStatus": twmr.request_status,
                            }

                    except:
                        twmr.request_status = 'failed'
                        twmr.coin_conversion_rate = coin_convert_to_amount(twmr.coin)[
                            'equvilanent']
                        twmr.save()
                        teacher_coin = TeacherCoin.objects.get(teacher=teacher)
                        teacher_money = TeacherWebAppMoney.objects.get(
                            teacher=teacher)
                        teacher_coin.coins += float(twmr.coin)
                        teacher_coin.save()
                        teacher_money.withdrawal_money -= Decimal(
                            twmr.withdrawMoney)
                        teacher_money.save()
                        context = {
                            "status": "failed",
                            "message": response,
                            "withdrawRequestStatus": twmr.request_status,
                        }

                elif request_status == 'rejected':
                    twmr.request_status = 'rejected'
                    twmr.coin_conversion_rate = coin_convert_to_amount(twmr.coin)[
                        'equvilanent']
                    twmr.save()
                    teacher_coin = TeacherCoin.objects.get(teacher=teacher)
                    teacher_money = TeacherWebAppMoney.objects.get(
                        teacher=teacher)
                    teacher_coin.coins += float(twmr.coin)
                    teacher_coin.save()
                    teacher_money.withdrawal_money -= Decimal(
                        twmr.withdrawMoney)
                    teacher_money.save()
                    context = {
                        "status": "success",
                        "message": "Request Rejected successfully",
                        "withdrawRequestStatus": twmr.request_status,
                    }

                else:
                    context = {
                        "status": "failed",
                        "message": "Invalid request_status"
                    }
            else:
                context = {
                    "status": "failed",
                    "message": "Invalid request attempted"
                }

        except Exception as e:
            context = {
                "status": "failed",
                "message": f"{e}"
            }

        return Response(context)

class StudentBuyPackagePermission(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        try:
            RequestForm = PackageBuyRequestOnline.objects.filter(
                package=package, student=me.profile)
            for pack_req in RequestForm:
                if pack_req.accepted == True:
                    context = {
                        'status': 'success', 'message': 'request accepted you can by this package', 'response': 'accepted'}
                    return Response(context)
                if pack_req.accepted == None:
                    context = {
                        'status': 'success', 'message': 'your request is in_review', 'response': 'inReview'}
                    return Response(context)
            else:
                context = {
                    'status': 'success', 'message': 'your request has been rejected. you can request again', 'response': 'new_request'}
        except Exception as e:
            context = {'status': 'failed',
                       'message': 'no request found for package buy', 'response': 'new_request'}
        return Response(context)

class StudentBuyPackageRequest(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        try:
            RequestForm = PackageBuyRequestOnline.objects.filter(
                package=package, student=me.profile)
            for pack_req in RequestForm:
                if pack_req.accepted == True:
                    break
                if pack_req.accepted == None:
                    break
            else:
                raise Exception
            context = {'status': 'failed',
                       'message': 'Your request is either pending or accepted'}
            return Response(context)
        except:
            parent = data['parent']
            present_address = data['present_address']
            permanent_address = data['permanent_address']
            mobile = data['mobile']
            email = data['email']
            ID_proof = data['ID_proof']
            recent_photo = data['recent_photo']
            qualification_field = data['qualification_field']
            passing_year = data['passing_year']
            percentage = data['percentage']
            signature = data['signature']
            exam = data['exam']

            packageRequest = PackageBuyRequestOnline.objects.create(
                package=package,
                student=me.profile,
                parent=parent,
                present_address=present_address,
                permanent_address=permanent_address,
                mobile=mobile,
                email=email,
                ID_proof=ID_proof,
                recent_photo=recent_photo,
                qualification_field=qualification_field,
                passing_year=passing_year,
                percentage=percentage,
                signature=signature,
                exam=exam,
            )
        context = {'status': 'success', 'message': 'requested'}
        return Response(context)



class TeacherAcceptOnPackageRequest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        package_request_id = data['package_request_id']
        action = data['action']
        try:
            buyRequest = PackageBuyRequestOnline.objects.get(
                id=package_request_id)
            if int(action) == 1:
                buyRequest.accepted = True
                buyRequest.save()
                context = {'status': 'success', 'message': 'request accepted'}
            else:
                buyRequest.accepted = False
                buyRequest.save()
                context = {'status': 'failed', 'message': 'request rejected'}

        except Exception as e:
            context = {'status': 'failed', 'message': 'something went wrong'}

        return Response(context)



class TeacherPackageAllRequests(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        packageAllRequests = PackageBuyRequestOnline.objects.filter(
            package=package, accepted=None).order_by('-id')
        package_requests_list = []
        for pack_request in packageAllRequests:
            pack_request_dict = {
                'id': pack_request.id,
                'package_name': pack_request.package.title,
                'student_name': pack_request.student.name,
                'student_username': pack_request.student.studentuser.username,
                'parent': pack_request.parent,
                'present_address': pack_request.present_address,
                'permanent_address': pack_request.permanent_address,
                'mobile': pack_request.mobile,
                'email': pack_request.email,
                'ID_proof': pack_request.ID_proof,
                'recent_photo': pack_request.recent_photo,
                'qualification_field': pack_request.qualification_field,
                'passing_year': pack_request.passing_year,
                'percentage': pack_request.percentage,
                'signature': pack_request.signature,
                'exam': pack_request.exam,
                'time': pack_request.time,
            }
            package_requests_list.append(pack_request_dict)
        context = {'package_all_requests': package_requests_list}
        return Response(context)


class AdminDyteAPIFunction(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        institute_id = me.profile.institute.id


        context = create_dyte_meeting_v1(institute_id, me.profile.id, 'hello')


        return Response(context)

class TeacherCreateDyteMeetingAPI(APIView):
    def post(self, request, *args, **kwargs):
        try:
            me = Teach(self.request.user)
            data = request.data

            institute_id = me.profile.institute.id
            title = data['title']
            preset = data.get('preset')
            waitingRoom = data.get('waitingRoom', False)
            closed = data.get('closed', False)
            recordOnStart = data.get('recordOnStart', False)
            liveStreamOnStart = data.get('liveStreamOnStart', False)

            dyte_meeting = DyteMeeting.objects.filter(teacher=me.profile)
            if dyte_meeting:
                dyte_meeting.delete()

            create_dyte_meeting_v1(
                institute_id=institute_id,
                teacher_id=me.profile.id,
                title=title,
                preset=preset,
                waitingRoom=waitingRoom,
                closed=closed,
                recordOnStart=recordOnStart,
                liveStreamOnStart=liveStreamOnStart,
            )
            dyte_meeting = DyteMeeting.objects.get(teacher=me.profile)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"LIVE CLASS","body": '{} has started a live class'.format(me.profile.name),}
            
            if me.profile.photo:
                notification["image"] = f"{me.profile.photo}"

            clientSpecificId = f"Teacher#{me.profile.id}"
            add_participant_v1(dyte_meeting.meetingId,teacher_id=me.profile.id)
            participant = DyteMeetingParticipant.objects.get(meetingId=dyte_meeting, clientSpecificId=clientSpecificId)

            batches = data.get('batch_ids')
            if batches:
                batch_ids_list = batches.strip('][').split(',')
                for batch_id in batch_ids_list:
                    if batch_id:
                        dyte_meeting.batches.add(Batch.objects.get(id=batch_id))
                        if json_file_url == None:
                            send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                        else:
                            send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))
                
            packages = data.get('package_ids')
            if packages:
                package_ids_list = packages.strip('][').split(',')
                for package_id in package_ids_list:
                    if package_id:
                        dyte_meeting.packages.add(Package.objects.get(id=package_id))
                        if json_file_url == None:
                            send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=int(package_id))
                        else:
                            send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=int(package_id))
                
            context = {
                "status": True,
                "message": "Metting Created Successfully",
                "meeting": {'title': dyte_meeting.title,'roomName': dyte_meeting.roomName,'meeting_id': dyte_meeting.meetingId,},
                "user_credentials": {
                    'preset': f'teacher_{dyte_meeting.preset}' if dyte_meeting.preset else "teacher",
                    "clientSpecificId": participant.clientSpecificId,
                    "name": participant.name,
                    "picture": participant.picture,
                    "participantId": participant.participantId,
                    "authToken": participant.authToken,
                }
            }
        except Exception as e:
            context = {"status": False,"message": f"{e}"}

        return Response(context)

class TeacherEndDyteMeetingAPI(APIView):
    def post(self, request):
        try:
            me = Teach(self.request.user)
            data = request.data
            meeting_id = data['meeting_id']
            dyte_meeting = DyteMeeting.objects.get(
                meetingId=meeting_id).delete()

            context = {
                "status": True,
                "message": f"metting ended successfully"
            }
        except Exception as e:
            context = {
                "status": False,
                "message": f"{e}"
            }
        return Response(context)


class TeacherGetDyteMeetingAPI(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
            dyte_meeting = DyteMeeting.objects.select_related(
                'teacher').filter(teacher=me.profile).first()

            if dyte_meeting:
                clientSpecificId = f"Teacher#{me.profile.id}"
                add_participant_v1(dyte_meeting.meetingId,
                                   teacher_id=me.profile.id)
                participant = DyteMeetingParticipant.objects.get(
                    meetingId=dyte_meeting, clientSpecificId=clientSpecificId)

                context = {
                    'status': True,
                    'message': 'live meeting',
                    "meeting": {
                        'title': dyte_meeting.title,
                        'roomName': dyte_meeting.roomName,
                        'meeting_id': dyte_meeting.meetingId,
                    },
                    "user_credentials": {
                        'preset': f'teacher_{dyte_meeting.preset}' if dyte_meeting.preset else "teacher",
                        "clientSpecificId": participant.clientSpecificId,
                        "name": participant.name,
                        "picture": participant.picture,
                        "participantId": participant.participantId,
                        "authToken": participant.authToken,
                    }
                }
            else:
                context = {
                    'status': True,
                    'message': 'no live meeting',
                }

        except Exception as e:
            context = {
                "status": False,
                "message": f"{e}"
            }
        return Response(context)


class StudentGetMeetingsAPI(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            student_packages = me.profile.package_set.all()
            student_batches = me.profile.batches.all()
            institute = me.profile.institute
            meetings = DyteMeeting.objects.select_related('organisation').prefetch_related('batches').prefetch_related(
                'packages').select_related('teacher').filter(organisation__institute=institute)

            meeting_list = []
            for studentmeeting in meetings:
                meeting_batches = studentmeeting.batches.all()
                meeting_packages = studentmeeting.packages.all()

                for meet_batch in meeting_batches:
                    if meet_batch in student_batches:
                        meeting_list.append(studentmeeting)
                        break
                else:
                    for meet_pack in meeting_packages:
                        if meet_pack in student_packages:
                            meeting_list.append(studentmeeting)
                            break

            meeting_list_response = []
            for meeting in meeting_list:
                meet_dict = {
                    'meetingId': meeting.meetingId,
                    'title': meeting.title,
                    'teacher': {
                        'id': meeting.teacher.id,
                        'name': meeting.teacher.name,
                        'photo': meeting.teacher.photo,
                    },
                }
                meeting_list_response.append(meet_dict)

            context = {
                "status": True,
                "message": "all student's meeting list",
                "data": meeting_list_response
            }
        except Exception as e:
            context = {
                "status": False,
                "message": f'{e}'
            }
        return Response(context)


class JoinDyteMeetingAPI(APIView):
    def post(self, request):
        data = request.data
        meetingId = data['meeting_id']
        try:
            category = None
            dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
            try:
                me = Teach(self.request.user)
                clientSpecificId = f"Teacher#{me.profile.id}"
                category = 'Teacher'
                preset = f'teacher_{dyte_meeting.preset}' if dyte_meeting.preset else "teacher"
            except:
                me = Studs(self.request.user)
                clientSpecificId = f"Student#{me.profile.id}"
                category = 'Student'
                preset = f'student_{dyte_meeting.preset}' if dyte_meeting.preset else "student"

            institute_id = me.profile.institute.id
            try:
                participant = DyteMeetingParticipant.objects.get(
                    meetingId=meetingId, clientSpecificId=clientSpecificId)
            except:
                if category == "Student":
                    add_participant_v1(meetingId, student_id=me.profile.id)

                elif category == "Teacher":
                    add_participant_v1(meetingId, teacher_id=me.profile.id)

                participant = DyteMeetingParticipant.objects.get(
                    meetingId=meetingId, clientSpecificId=clientSpecificId)

            context = {
                "status": True,
                "message": "participant add to meeting successfully",
                "meeting": {
                    'title': participant.meetingId.title,
                    'roomName': participant.meetingId.roomName,
                    'meeting_id': participant.meetingId.meetingId,
                },
                "user_credentials": {
                    'preset': preset,
                    "clientSpecificId": participant.clientSpecificId,
                    "name": participant.name,
                    "picture": participant.picture,
                    "participantId": participant.participantId,
                    "authToken": participant.authToken,
                }
            }
        except Exception as e:
            context = {
                "status": False,
                "message": f'{e}'
            }
        return Response(context)


class UnlockAllContentWithNoPackageAPI(APIView):
    def get(self, request):
        unlock_all_content_with_no_package()
        return Response("task started to be done in a while")





class StudentGetPackageCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        me = Studs(self.request.user)
        data = request.data
        IsBuy = data.get('IsBuy')
        IsBuy = int(IsBuy)

        package_report = PackageReport(me.profile.id)
        context = package_report.all_packages_completion_report(IsBuy)
        return Response(context)


class ParentGetPackageCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        data = request.data
        student_id = data['student_id']

        package_report = PackageReport(student_id)
        context = package_report.all_packages_completion_report(True)
        return Response(context)


class StudentGetPackageSubjectCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']

        package_report = PackageReport(me.profile.id)
        context = package_report.all_package_subjects_completion_report(
            package_id)
        return Response(context)

class ParentGetPackageSubjectCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        data = request.data
        student_id = data['student_id']
        package_id = data['package_id']

        package_report = PackageReport(student_id)
        context = package_report.all_package_subjects_completion_report(
            package_id)
        return Response(context)

class StudentGetPackageSubjectChapterCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data['subject_id']

        package_report = PackageReport(me.profile.id)
        context = package_report.all_package_subject_chapters_completion_report(
            package_id, subject_id)
        return Response(context)

class ParentGetPackageSubjectChapterCompletionReportAPI(APIView):
    def post(self, request):
        from content.api.content_completed_tracker.package_progress_report import PackageReport
        data = request.data
        student_id = data['student_id']
        package_id = data['package_id']
        subject_id = data['subject_id']

        package_report = PackageReport(student_id)
        context = package_report.all_package_subject_chapters_completion_report(package_id, subject_id)
        return Response(context)

class StudentUploadCVSubInstitute(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        cv_url = data['cv_url']
        studentDetails = SubInstituteStudent.objects.get(student=me.profile.id)
        studentDetails.cv = cv_url
        studentDetails.save()
        details_dict = {
            'cv_url': studentDetails.cv,
            'student_name': me.profile.student.fullName,
            'phone': me.profile.student.phone,
        }

        context = {'status': 'success', 'details_dict': details_dict}
        return Response(context)

class InstituteSeeUploadCVSubInstitute(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        student_details = SubInstituteStudent.objects.select_related(
            'student', 'student__student').filter(cv__isnull=False)
        student_list = []
        for sd in student_details:
            details_dict = {
                'cv_url': sd.cv,
                'student_name': sd.student.student.fullName,
                'phone': sd.student.student.phone}
            student_list.append(details_dict)

        context = {'status': 'success', 'student_list': student_list}
        return Response(context)

class AllReviewsList(APIView):
    def get(self, request, *args, **kwargs):
        reviews = Reviews.objects.all()
        review_list = []
        for review in reviews:
            reviews_dict = {
                'id': review.id,
                'text': review.review_text}
            review_list.append(reviews_dict)

        context = {'status': 'success',
                   'message': 'All Reviews List', 'review_list': review_list}
        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        review_text = data['review_text']
        try:
            review = Reviews.objects.create(review_text=review_text)
            context = {'status': 'success',
                       'message': 'Review Created Successfully.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

    def put(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        review_id = data['review_id']
        review_text = data['review_text']

        try:
            review = Reviews.objects.get(id=review_id)
            review.review_text = review_text
            review.save()
            context = {'status': 'Success', 'message': 'Successfully Updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def delete(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        review_id = data['review_id']

        try:
            Reviews.objects.get(id=review_id).delete()
            context = {'status': 'Success', 'message': 'Successfully Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentQuestionReviewsAdd(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        test_id = data['test_id']
        question_id = data['question_id']
        review_id = data['review_id']
        try:
            test = Test.objects.get(id=test_id)
            question = test.questions.get(id=question_id)
            review = Reviews.objects.get(id=review_id)
            add_review = StudentReviews.objects.create(test=test, question=question, review=review)
            context = {'status': 'success', 'message': 'Review Added Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentQuestionReviewsTestList(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)

        try:
            test_ids = StudentReviews.objects.values_list('test', flat=True)
            tests = Test.objects.filter(id__in=test_ids)
            test_list = []
            for test in tests:
                test_dict = {
                    'test_id': test.id,
                    'test_name': test.name,
                }
                test_list.append(test_dict)

            context = {'status': 'success', 'test_list': test_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentQuestionReviewsList(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        test_id = data['test_id']
        try:
            test = Test.objects.get(id=test_id)
            question_ids = StudentReviews.objects.values_list('question', flat=True).filter(test=test)
            question_list = []
            for q_id in question_ids:
                review_list = []
                reviews = StudentReviews.objects.select_related('review').filter(question=q_id)
                for rev in reviews:
                    rev_dict = {'review_id': rev.review.id,'review_text': rev.review.review_text,}
                    review_list.append(rev_dict)

                question = Question.objects.get(id=q_id)
                question_dict = {
                    'question_text': question.text,
                    'question_picture': question.picture,
                    'question_dynamic_text': question.dynamicText,
                    'question_oneWordQuestion': question.oneWordQuestion,
                    'review_list': review_list,
                }
                question_list.append(question_dict)

            context = {'status': True, 'message': 'List of Questions with Reviews', 'data': question_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class GetAllSubjectOfPackageAPI(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']

        try:
            subjects = set()
            videos = Video.objects.select_related(
                'subject').filter(package=package_id)
            for video in videos:
                subjects.add(video.subject)

            notes = Note.objects.select_related(
                'subject').filter(package=package_id)
            for note in notes:
                subjects.add(note.subject)

            tests = Test.objects.filter(package=package_id)
            for test in tests:

                for subject in test.subjects.all():
                    subjects.add(subject)

            subject_list = []
            for subject in subjects:
                subject_dict = {
                    'id': subject.id,
                    'title': subject.name
                }
                subject_list.append(subject_dict)

            context = {
                'status': True,
                'message': 'package subject list',
                'data': subject_list
            }

        except Exception as e:
            context = {
                "status": False,
                "message": str(e)
            }
        return Response(context)

class GetAllSubjectChaptersProgressAPI(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        subject_id = data['subject_id']
        try:
            subject = Subject.objects.get(id=subject_id)
            chapters = Chapter.objects.filter(subject=subject).order_by('code')
            chapter_list = []

            try:
                student_progress = SubjectProgressReport.objects.get(student=me.profile,subject=subject,)
            except:
                student_progress = SubjectProgressReport.objects.create(
                    student=me.profile,
                    subject=subject,
                    chapter_in_progress=chapters.first()
                )
            locked = False
            for chapter in chapters:
                chapter_dict = {
                    'id': chapter.id,
                    'name': chapter.name,
                    'code': chapter.code,
                    'locked': locked
                }
                if not locked and student_progress.chapter_in_progress.code < chapter.code:
                    tests = Test.objects.filter(subjects=subject,chapters=chapter)
                    if tests:
                        for test in tests:
                            results = StudentMarks.objects.filter(student=me.profile,test=test)
                            for result in results:
                                if result.totalTestMarks / test.totalMarks >= 0.8:
                                    break
                            else:
                                locked = True
                                break

                        chapter_list.append(chapter_dict)
                        continue

                    else:
                        student_progress.chapter_in_progress = chapter
                        student_progress.save()
                chapter_dict['locked'] = locked
                chapter_list.append(chapter_dict)

            context = {
                "status": True,
                "message": "All chapter list in given subject",
                "data": chapter_list
                }

        except Exception as e:
            context = {'status': False,'message': str(e)}

        return Response(context)

class GetAllContentOfSubjectChapterAPI(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        try:
            subject = Subject.objects.get(id=data['subject_id'])
            chapter = Chapter.objects.get(id=data['chapter_id'])
            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_videos = stud_pack_helper.get_all_brought_videos()
            bought_notes = stud_pack_helper.get_all_brought_notes()
            bought_tests = stud_pack_helper.get_all_brought_tests()

            videos_list = []
            videos = Video.objects.filter(subject=subject, chapter=chapter)
            for video in videos:
                bought = video in bought_videos

                video_dict = {
                    'id': video.id,
                    'title': video.title,
                    'urlLink': video.urlLink,
                    'lowlink': video.lowlink,
                    'highlink': video.highlink,
                    'generalVideo': video.generalVideo,
                    'publishDate': video.publishDate,
                    'publish': video.publish,
                    'bought': bought,
                    'topic': video.topics.topic if video.topics else None,
                    'subTopics': video.subTopics.name if video.subTopics else None
                }
                videos_list.append(video_dict)

            notes_list = []
            notes = Note.objects.filter(subject=subject, chapter=chapter)
            for note in notes:
                bought = note in bought_notes
                note_link = getattr(note.noteurl_note, 'link', "")
                notes_list.append({
                    'id': note.id,
                    'title': note.title,
                    'thumbnail': note.thumbnail,
                    'publishDate': note.publishDate,
                    'bought': bought,
                    'link': note_link
                })

            tests_list = []
            tests = Test.objects.select_related('createdBy').filter(subjects=subject, chapters=chapter)
            for test in tests:
                bought = test in bought_tests
                tests_list.append({
                    'id': test.id,
                    'name': test.name,
                    'published': test.published,
                    'passing_marks': test.passing_marks or 0,
                    'repeatTest': test.repeatTest,
                    'testInstructions': test.testInstructions,
                    'testStartDateTime': test.testStartDateTime,
                    'testEndDateTime': test.testEndDateTime,
                    'bought': bought,
                    'createdBy': test.createdBy.name if test.createdBy else None
                })

            return Response({
                'status': True,
                'message': "Content of subject's chapter",
                'data': {'videos': videos_list, 'notes': notes_list, 'tests': tests_list}
            })

        except (Subject.DoesNotExist, Chapter.DoesNotExist):
            return Response({'status': False, 'message': 'Subject or chapter not found'})
        except Exception as e:
            return Response({'status': False, 'message': str(e)})



class MeetHoursTokenRefreshAPI(APIView):
    def post(self, request, subscription, *args, **kwargs):
        data = request.data
        
        try:
            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                from .liveVideos.meethour.meethourEnterprise import BodhiAIUserAccount
                if data.get('access_token'):
                    account = BodhiAIUserAccount()
                    response = account.get_access_token()
                    context = response
                else:
                    account = BodhiAIUserAccount()
                    response = account.get_refresh_token()
                    context = response

            elif subscription == "developer":
                from .liveVideos.meethour.meethourDeveloperAccount import InstituteUserAccount
                institute_id = data.get('institute_id')
                if institute_id:
                    account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                        institute=Institute.objects.get(id=institute_id)).order_by('-date')
                else:
                    account_credentials = MeetHourDeveloperAccountClientCredentials.objects.all().order_by('-id')

                token_refresh_accounts = []
                token_not_refresh_accounts = []

                for account_credential in account_credentials:
                    meethour_credentials = {
                        "username": account_credential.username,
                        "password": account_credential.password,
                        "client_id": account_credential.client_id,
                        "client_secret": account_credential.client_secret,
                        "access_token": account_credential.access_token,
                        "refresh_token": account_credential.refresh_token,
                    }

                    account = InstituteUserAccount(meethour_credentials)

                    if data.get('by') == "access_token":
                        response = account.get_access_token()
                        if response["status"]:
                            account_credential.access_token = response['data']['access_token']
                            account_credential.refresh_token = response['data']['refresh_token']
                            account_credential.save()
                            token_refresh_accounts.append(
                                account_credential.username)
                        else:
                            token_not_refresh_accounts.append(
                                account_credential.username)

                    elif data.get('by') == "refresh_token":
                        response = account.get_refresh_token()
                        if response["status"]:
                            account_credential.access_token = response['data']['access_token']
                            account_credential.refresh_token = response['data']['refresh_token']
                            account_credential.save()
                            token_refresh_accounts.append(
                                account_credential.username)
                        else:
                            token_not_refresh_accounts.append(account_credential.username)

                    else:
                        context = {
                            "status": False,
                            "message": "'by' not define properly"
                        }
                        return Response(context)
                context = {
                    "status": True,
                    "token_refresh_accounts": token_refresh_accounts,
                    "token_not_refresh_accounts": token_not_refresh_accounts,
                }
            
            else:
                context = {
                    "status": False,
                    "message": "'Subscription' not define properly"
                }
          
        except Exception as e:
            context = {'message':str(e)}   
             
        return Response(context)

class MeetHoursSubscriptionAPI(APIView):
    def post(self, request, subscription, *args, **kwargs):
        request_user = self.request.user
        data = request.data
        if subscription == "enterprise":
            context = {
                "status": False,
                "meassage": "Enterprise Package Not Active"
            }
            return Response(context)
            from .liveVideos.meethour.meethourEnterprise import Subscription
            licence_subcription = Subscription()

        elif subscription == "developer":
            from .liveVideos.meethour.meethourDeveloperAccount import Subscription
            institute_code = data.get('institute_code')
            if institute_code == None:
                try:
                    try:
                        me = Teach(request_user)
                    except:
                        me = Studs(request_user)
                    institute_code = me.profile.institute.code
                except:
                    context = {
                        "status": False,
                        "message": 'anonymous user and institute id also not provided '
                    }
                    return Response(context)

            account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                institute=Institute.objects.get(code=institute_code)).order_by('-date').first()
            if account_credentials == None:
                context = {
                    "status": False,
                    "message": 'not access to meethour'
                }
                return Response(context)
            meethour_credentials = {
                "username": account_credentials.username,
                "password": account_credentials.password,
                "client_id": account_credentials.client_id,
                "client_secret": account_credentials.client_secret,
                "access_token": account_credentials.access_token,
                "refresh_token": account_credentials.refresh_token,
            }
            licence_subcription = Subscription(meethour_credentials)

        else:
            context = {
                "status": False,
                "message": "'Subscription' not define properly"
            }
            return Response(context)

        if data['request'] == "update_licence_qty":
            quantity = int(data['quantity'])
            context = licence_subcription.update_licence_qty(quantity)
        elif data['request'] == "mysubscription":
            context = licence_subcription.my_subscription()
        else:
            context = {
                "success": False,
                "message": "'request' not define properly"
            }

        return Response(context)

class MeetHourRecordingAPI(APIView):
    def post(self, request, subscription):
        data = request.data
        contact_list = []
        if subscription == "enterprise":
            context = {
                "status": False,
                "meassage": "Enterprise Package Not Active"
            }
            return Response(context)
            from content.api.liveVideos.meethour.meethourEnterprise import Contact, Recurrent
            recurrent = Recurrent()
            contact = Contact()
            contact_list.append((contact, recurrent))
        elif subscription == "developer":
            from content.api.liveVideos.meethour.meethourDeveloperAccount import Contact, Recurrent
            institute_id = data.get('institute_id')
            if institute_id:
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                    institute=Institute.objects.get(id=institute_id)).order_by('-date')
            else:
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.all()

            for account_credential in account_credentials:
                meethour_credentials = {
                    "username": account_credential.username,
                    "password": account_credential.password,
                    "client_id": account_credential.client_id,
                    "client_secret": account_credential.client_secret,
                    "access_token": account_credential.access_token,
                    "refresh_token": account_credential.refresh_token,
                }
                contact = Contact(meethour_credentials)
                recurrent = Recurrent(meethour_credentials)
                contact_list.append((contact, recurrent))

        else:
            context = {
                "status": False,
                "message": "'Subscription' not define Properly"
            }
            return Response(context)

        accounts_refresh_list = []
        for contact, recurrent in contact_list:
            accounts_refresh_list.append(contact.username)

            if data.get("type_refresh") == "normal":
                page = 1
                res = contact.recording_list(limit=50, page=page)
                while res["status"] and res["data"]["s3"]:
                    recording_list = res["data"]["s3"]
                    for recording in recording_list:
                        id = recording["id"]
                        id_meeting = recording["id_meeting"]
                        recording_type = recording["recording_type"]
                        recording_name = recording["recording_name"]
                        recording_datetime = recurrent.time_conversion_timeZone(
                            input_time=recording["recording_date"], input_timezone="Europe/London", output_timezone='Asia/Kolkata')
                        recording_date = recording["recording_date"][:10]
                        status = recording["status"]
                        duration = recording["duration"]
                        recording_size = recording["recording_size"]
                        topic = recording["topic"]
                        meeting_id = recording["meeting_id"]

                        rec_path = recording["recording_path"]
                        recording_path = rec_path.split("?")[0]

                        try:
                            RecordedVideo.objects.get(meethour_MeetingRecording_id=recording_name)
                            break
                        except:
                            rec_video = RecordedVideo()
                            try:
                                teacher = MeetHourDeveloperAccountMeeting.objects.get(meeting_id=meeting_id).teacher
                                rec_video.teacher = teacher
                            except:
                                rec_video.teacher = Teacher.objects.get(id=1)

                            rec_video.title = f'{topic} ({rec_video.teacher.name}) - {recording_datetime}'
                            rec_video.link = recording_path
                            rec_video.recordDate = recording_date
                            rec_video.meethour_MeetingRecording_id = recording_name
                            rec_video.meethour_Meeting_id = meeting_id
                            rec_video.save()
                            if "cloudfront.net/" in recording_path or "s3.amazonaws.com/" in recording_path:
                                upload_s3_recorded_video_to_gcloud.delay(rec_video.id)
                    else:
                        page += 1
                        res = contact.recording_list(limit=50, page=page)
                        continue
                    break
            elif data.get("type_refresh") == "all":
                page = 1
                res = contact.recording_list(limit=50, page=page)
                while res["status"] and res["data"]["s3"]:
                    recording_list = res["data"]["s3"]
                    for recording in recording_list:
                        id = recording["id"]
                        id_meeting = recording["id_meeting"]
                        recording_type = recording["recording_type"]
                        recording_name = recording["recording_name"]
                        recording_datetime = recurrent.time_conversion_timeZone(
                            input_time=recording["recording_date"], input_timezone="Europe/London", output_timezone='Asia/Kolkata')
                        recording_date = recording["recording_date"][:10]
                        status = recording["status"]
                        duration = recording["duration"]
                        recording_size = recording["recording_size"]
                        topic = recording["topic"]
                        meeting_id = recording["meeting_id"]

                        rec_path = recording["recording_path"]
                        recording_path = rec_path.split("?")[0]

                        try:
                            rec_video = RecordedVideo.objects.get(
                                meethour_MeetingRecording_id=recording_name)
                            if "cloudfront.net/" in recording_path or "s3.amazonaws.com/" in recording_path:
                                upload_s3_recorded_video_to_gcloud(rec_video.id)

                        except:
                            rec_video = RecordedVideo()
                            try:
                                teacher = MeetHourDeveloperAccountMeeting.objects.get(
                                    meeting_id=meeting_id).teacher
                                rec_video.teacher = teacher
                            except:
                                rec_video.teacher = Teacher.objects.get(id=1)

                            rec_video.title = f'{topic} ({rec_video.teacher.name}) - {recording_datetime}'
                            rec_video.link = recording_path
                            rec_video.recordDate = recording_date
                            rec_video.meethour_MeetingRecording_id = recording_name
                            rec_video.meethour_Meeting_id = meeting_id
                            rec_video.save()
                            if "cloudfront.net/" in recording_path or "s3.amazonaws.com/" in recording_path:
                                upload_s3_recorded_video_to_gcloud.delay(rec_video.id)

                    page += 1
                    res = contact.recording_list(limit=50, page=page)
                    continue
            else:
                context = {
                    "status": False,
                    "message": "'type_refresh' not define properly"
                }
                return Response(context)

        return Response({"status": True, "accounts_refresh_list": accounts_refresh_list})

class MeetHourParallelMettings(APIView):
    def post(self, request, subscription):
        data = request.data
        if subscription == "enterprise":
            context = {
                "status": False,
                "meassage": "Enterprise Package Not Active"
            }
            return Response(context)
            from content.api.liveVideos.meethour.meethourEnterprise import Contact, Recurrent
            contact_obj = Contact()
            context = contact_obj.parallel_meeting_on_account()
            return Response(context)
        elif subscription == "developer":
            from content.api.liveVideos.meethour.meethourDeveloperAccount import Contact, Recurrent
            institute_id = data['institute_id']
            account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                institute=Institute.objects.get(id=institute_id)).order_by('-date').first()
            meethour_credentials = {
                "username": account_credentials.username,
                "password": account_credentials.password,
                "client_id": account_credentials.client_id,
                "client_secret": account_credentials.client_secret,
                "access_token": account_credentials.access_token,
                "refresh_token": account_credentials.refresh_token,
            }
            contact_obj = Contact(meethour_credentials)
            context = contact_obj.parallel_meeting_on_account()
            return Response(context)
        else:
            context = {
                "status": False,
                "message": "'Subscription' not define Properly"
            }
            return Response(context)

class MeetHourAccountTypeAPI(APIView):
    def get(self, request):
        user = self.request.user
        try:
            me = Studs(user)
        except:
            me = Teach(user)
        institute_meethour_account = me.profile.institute.meethour_account_type
        if institute_meethour_account == "enterprise":
            context = {
                "status": True,
                "message": institute_meethour_account,
                "recharge_account": "enterprise"
            }
        elif institute_meethour_account == "developer":
            context = {
                "status": True,
                "message": institute_meethour_account,
                "recharge_account": "developer"
            }
        else:
            try:
                meethour_account = MeetHourDeveloperAccountClientCredentials.objects.get(
                    institute=me.profile.institute)
                context = {
                    "status": True,
                    "message": institute_meethour_account,
                    "recharge_account": "developer"
                }
            except:
                context = {
                    "status": False,
                    "message": institute_meethour_account,
                }

        return Response(context)

class CreateOrGetMeetHourContactAPI(APIView):
    def get(self, request, subscription):
        data = request.data
        request_user = self.request.user
        found = False

        if subscription == "enterprise":
            context = {
                "status": False,
                "meassage": "Enterprise Package Not Active"
            }
            return Response(context)
            if MeetHourContact.objects.filter(user=request_user):
                found = True

        elif subscription == "developer":
            try:
                institute = Teach(request_user).profile.institute
            except:
                institute = Studs(request_user).profile.institute

            account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(institute=institute).order_by('-date').first()
            if MeetHourDeveloperAccountContact.objects.filter(developer_account=account_credentials, user=request_user):
                found = True
        else:
            context = {
                "status": False,
                "message": "'subscription' not define properly"
            }
            return Response(context)

        context = {
            "status": found,
            "message": f"contact exist {found}"
        }
        return Response(context)

    def post(self, request, subscription, *args, **kwargs):
        request_user = self.request.user
        data = request.data
        
        try:
            firstname = data['firstname']
            email = data['email']
            try:
                me = Studs(self.request.user)
                student = me.profile
                student_details = StudentDetails.objects.filter(student=student).first()
                if student_details:
                    picture = student_details.photo
                else:
                    picture = None

            except: 
                me = Teach(self.request.user)
                teacher = Teacher.objects.get(id=me.profile.id)
                picture = teacher.photo

            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                from .liveVideos.meethour.meethourEnterprise import Contact

                try:
                    contact = MeetHourContact.objects.get(email=email)
                    contact.user.add(request_user)
                    meet_contact = Contact(contact_id=contact.contact_id)
                    response = meet_contact.edit_contact(
                        contact_id=contact.contact_id,
                        firstname=firstname,
                        email=email,
                        image=picture
                    )
                    context = {
                        "status": True, "messsage": "Contact Created successfully", "data": response}

                except:
                    meet_contact = Contact()
                    response = meet_contact.add_contact(
                        firstname, email, image=picture)
                    if response["status"]:
                        meethour_contact = MeetHourContact(
                            contact_id=response["data"]["id"],
                            firstname=response["data"]["first_name"],
                            email=response["data"]["email"],
                        )
                        meethour_contact.save()
                        meethour_contact.user.add(request_user)
                        context = {"status": True,
                                "messsage": "Contact Created successfully"}
                    else:
                        context = {"status": False, "message": response["message"]}

            elif subscription == "developer":
                from .liveVideos.meethour.meethourDeveloperAccount import Contact
                institute = me.profile.institute
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(institute=institute).order_by('-date').first()
                
                meethour_credentials = {
                    "username": account_credentials.username,
                    "password": account_credentials.password,
                    "client_id": account_credentials.client_id,
                    "client_secret": account_credentials.client_secret,
                    "access_token": account_credentials.access_token,
                    "refresh_token": account_credentials.refresh_token,
                }

                try:
                    contact = MeetHourDeveloperAccountContact.objects.get(developer_account=account_credentials, email=email,)
                    contact.user.add(request_user)
                    meet_contact = Contact(meethour_credentials, contact_id=contact.contact_id)
                    response = meet_contact.edit_contact(
                        contact_id=contact.contact_id,
                        firstname=firstname,
                        email=email,
                        image=picture
                    )
                    context = {"status": True, "messsage": "Contact Created Successfully", "data": response}

                except:
                    meet_contact = Contact(meethour_credentials)
                    response = meet_contact.add_contact(firstname, email, image=picture)
                    if response["status"]:
                        meethour_contact = MeetHourDeveloperAccountContact(
                            developer_account=account_credentials,
                            contact_id=response["data"]["id"],
                            firstname=response["data"]["first_name"],
                            email=response["data"]["email"],
                        )
                        meethour_contact.save()
                        meethour_contact.user.add(request_user)
                        context = {"status": True, "messsage": "Contact Created Successfully"}
                    else:
                        context = {"status": False, "message": response["message"]}
                        
            else:
                context = {"status": False,"message": "'subscription' not define properly"}
        
        except Exception as e:
            context = {"status": False, "message": str(e)}
            
        return Response(context)

class TeacherCreateOrGetMeetHourMeetingAPI(APIView):
    def get(self, request, subscription):
        me = Teach(self.request.user)
        try:
            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                meeting = MeetHourMeeting.objects.get(teacher=me.profile)
                
            elif subscription == "developer":
                institute = me.profile.institute
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                    institute=institute).order_by('-date').first()
                meethour_credentials = {
                    "username": account_credentials.username,
                    "password": account_credentials.password,
                    "client_id": account_credentials.client_id,
                    "client_secret": account_credentials.client_secret,
                    "access_token": account_credentials.access_token,
                    "refresh_token": account_credentials.refresh_token,
                }
                meeting = MeetHourDeveloperAccountMeeting.objects.get(
                    developer_account=account_credentials,
                    teacher=me.profile
                )
            else:
                context = {
                    "status": False,
                    "message": "'subscription' not define properly"
                }
                return Response(context)
        except Exception as e:
            context = {
                "status": False,
                "message": str(e)
            }
            return Response(context)
        meeting_dict = {
            "meeting_id": meeting.meeting_id,
            "live_status": meeting.live_status,
            "meeting_name": meeting.meeting_name,
            "passcode": meeting.passcode,
            "pcode": meeting.pCode
        }
        context = {
            "status": True,
            "data": meeting_dict
        }
        return Response(context)

    def post(self, request, subscription, *args, **kwargs):
        try:
            me = Teach(self.request.user)
            data = request.data

            batch_ids_list = json.loads(data.get('batch_ids', '[]'))
            package_ids_list = json.loads(data.get('package_ids', '[]'))
            student_user = set(student.studentuser.id for student in Student.objects.select_related('studentuser').filter(Q(batches__in=batch_ids_list) | Q(
                package__in=package_ids_list)))
            student_user = list(student_user)

            limit = 4000
            total_students = len(student_user)
            if total_students > limit:
                context = {
                    "status": False,
                    "message": f"total student in meeting exceed {limit} limit. total students count is {total_students}."
                }
                return Response(context)

            configurations, created = MeetHourMeetingUiConfig.objects.get_or_create(
                institute=me.profile.institute, host=True)
            if created:
                default_toolbar = MeetHourMeetingUiConfigToolbarButton.objects.filter(
                    title__in=['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen', 'fodeviceselection', 'hangup', 'profile', 'chat', 'recording', 'livestreaming', 'livepad', 'whiteboard', 'sharedvideo', 'settings', 'raisehand', 'videoquality', 'filmstrip', 'invite',
                               'feedback', 'stats', 'shortcuts', 'tileview', 'select-background', 'download', 'help', 'mute-everyone', 'removedonorbox', 'zoomin', 'zoomout', 'embedmeeting', 'adddonorbox', 'localrecording', 'addclickNpledge', 'removeclickNpledge', 'participants-pane',]
                )
                configurations.toolbar_buttons.add(*default_toolbar)
                default_meeting_feature = MeetHourMeetingAccessFeatures.objects.filter(
                    title__in=["ALLOW_GUEST", "JOIN_ANYTIME", "WHITE_BOARD", "LIVEPAD", "MUTE_PARTICIPANTS", "VIDEO_MUTE_PARTICIPANTS", "FORCE_MUTE_PARTICIPANTS",
                               "ENABLE_RECORDING", "DISABLE_SCREEN_SHARING_FOR_GUEST",])
                configurations.meeting_feature.add(*default_meeting_feature)

            meeting_conf = [
                i.title for i in configurations.meeting_feature.all()]
            new_created = False
            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                from .liveVideos.meethour.meethourEnterprise import Meetings, Recurrent

                host_user_id_list = list(MeetHourContact.objects.filter(
                    user=request.user).values_list("contact_id", flat=True))

                contact_id_list = host_user_id_list
                contact_id_list = MeetHourContact.objects.filter(
                    user__in=student_user).values_list("contact_id", flat=True)

                try:
                    teacher_meeting = MeetHourMeeting.objects.get(
                        teacher=me.profile)
                    meeting_object = Meetings(
                        meeting_conf=meeting_conf, meeting_id=teacher_meeting.meeting_id)
                except:
                    new_created = True
                    teacher_meeting = MeetHourMeeting()
                    meeting_object = Meetings(meeting_conf=meeting_conf)

                basic_fields = Recurrent()

            elif subscription == "developer":
                from .liveVideos.meethour.meethourDeveloperAccount import Meetings, Recurrent
                institute = me.profile.institute

                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                    institute=institute).order_by('-date').first()
                meethour_credentials = {
                    "username": account_credentials.username,
                    "password": account_credentials.password,
                    "client_id": account_credentials.client_id,
                    "client_secret": account_credentials.client_secret,
                    "access_token": account_credentials.access_token,
                    "refresh_token": account_credentials.refresh_token,
                }

                host_user_id_list = list(MeetHourDeveloperAccountContact.objects.filter(
                    developer_account=account_credentials, user=request.user).values_list("contact_id", flat=True))
                contact_id_list = list(MeetHourDeveloperAccountContact.objects.filter(
                    developer_account=account_credentials, user__in=student_user).values_list("contact_id", flat=True))

                try:
                    teacher_meeting = MeetHourDeveloperAccountMeeting.objects.get(developer_account=account_credentials,
                                                                                  teacher=me.profile)
                    meeting_object = Meetings(
                        meethour_credentials, meeting_conf=meeting_conf,  meeting_id=teacher_meeting.meeting_id)
                except:
                    new_created = True
                    teacher_meeting = MeetHourDeveloperAccountMeeting()
                    meeting_object = Meetings(
                        meethour_credentials, meeting_conf=meeting_conf)

                basic_fields = Recurrent(meethour_credentials)

            else:
                context = {
                    "status": False,
                    "message": "'subscription' not define properly"
                }
                return Response(context)

            meeting_name = data["meeting_name"]
            passcode = data.get("passcode", "MadMaxSecure")
            duration_hr = int(data.get("duration_hr", 1))
            duration_min = int(data.get("duration_min", 30))

            date = basic_fields.date_now()
            time, meridiem = basic_fields.time_now()
            if new_created == False:
                teacher_meeting.batches.remove(*teacher_meeting.batches.all())
                teacher_meeting.packages.remove(
                    *teacher_meeting.packages.all())

                response = meeting_object.edit_meeting(
                    meeting_id=teacher_meeting.meeting_id,
                    meeting_name=meeting_name,
                    passcode=passcode,
                    meeting_date=date,
                    meeting_time=time,
                    meeting_meridiem=meridiem,
                    duration_hr=duration_hr,
                    duration_min=duration_min,
                    contact_id_list=contact_id_list,
                    host_user_id_list=host_user_id_list,
                )
                if response["status"]:
                    context = {
                        "status": True,
                        "message": "Meeting Sheadule Successfully",
                        "response": response["message"],
                    }

                    teacher_meeting.meeting_id = teacher_meeting.meeting_id
                    teacher_meeting.meeting_name = meeting_name
                    teacher_meeting.passcode = passcode
                    teacher_meeting.pCode = response["data"]["pcode"]
                    teacher_meeting.live_status = True
                    teacher_meeting.save()

                else:
                    context = {
                        "status": False,
                        "message": "request Failed",
                        "response": response["message"]
                    }
                    return Response(context)

            else:

                response = meeting_object.sheadule_meeting(
                    meeting_name=meeting_name,
                    passcode=passcode,
                    meeting_date=date,
                    meeting_time=time,
                    meeting_meridiem=meridiem,
                    duration_hr=duration_hr,
                    duration_min=duration_min,
                    contact_id_list=contact_id_list,
                    host_user_id_list=host_user_id_list,
                )

                if response["status"]:
                    if subscription == "enterprise":
                        teacher_meeting = MeetHourMeeting(
                            teacher=me.profile,
                            meeting_id=response["data"]["meeting_id"],
                            pCode=response["data"]["pcode"],
                            meeting_name=meeting_name,
                            passcode=passcode,
                            live_status=True,
                        )
                        teacher_meeting.save()
                    else:
                        teacher_meeting = MeetHourDeveloperAccountMeeting(
                            developer_account=account_credentials,
                            teacher=me.profile,
                            meeting_id=response["data"]["meeting_id"],
                            pCode=response["data"]["pcode"],
                            meeting_name=meeting_name,
                            passcode=passcode,
                            live_status=True,
                        )
                        teacher_meeting.save()

                    context = {
                        "status": True,
                        "message": "Meeting Schedule Successfully",
                        "response": response["message"],
                    }

                else:
                    context = {
                        "status": False,
                        "message": "request Failed",
                        "response": response["message"]
                    }
                    return Response(context)

            if response['status']:
                try:
                    server_key = me.profile.institute.serverKey
                except Exception as e:
                    server_key = None
                    
                try:
                    json_file_url = me.profile.institute.json_file
                except Exception as e:
                    json_file_url = None
                    
                notification = {"title": f"LIVE CLASS","body": '{} has started a live class'.format(me.profile.name),}
                
                if me.profile.photo:
                    notification["image"] = f"{me.profile.photo}"

                for batch_id in batch_ids_list:
                    teacher_meeting.batches.add(Batch.objects.get(id=batch_id))
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))
                
                for package_id in package_ids_list:
                    teacher_meeting.packages.add(Package.objects.get(id=package_id))
                    if json_file_url == None:
                        send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=int(package_id))
                    else:
                        send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=int(package_id))
                
            return Response(context)
        except Exception as e:
            return Response({"status": "failed", "message": str(e)})

class TeacherEndMeetHourMeetingAPI(APIView):
    def post(self, request, subscription):
        me = Teach(self.request.user)
        data = request.data
        if subscription == "enterprise":
            context = {"status": False, "meassage": "Enterprise Package Not Active"}
            return Response(context)
        
            try:
                meeting = MeetHourMeeting.objects.get(teacher=me.profile)
                meeting.live_status = False
                meeting.batches.remove(*meeting.batches.all())
                meeting.packages.remove(*meeting.packages.all())
                meeting.save()

                context = {
                    "status": True,
                    "message": "Meeting Ended Successfully"
                }
            except Exception as e:
                context = {
                    "status": False,
                    "message": str(e)
                }

            return Response(context)

        elif subscription == "developer":
            institute = me.profile.institute
            account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                institute=institute).order_by('-date').first()
            meethour_credentials = {
                "username": account_credentials.username,
                "password": account_credentials.password,
                "client_id": account_credentials.client_id,
                "client_secret": account_credentials.client_secret,
                "access_token": account_credentials.access_token,
                "refresh_token": account_credentials.refresh_token,
            }
            try:
                meeting = MeetHourDeveloperAccountMeeting.objects.get(
                    developer_account=account_credentials,teacher=me.profile)
                meeting.live_status = False
                meeting.batches.remove(*meeting.batches.all())
                meeting.packages.remove(*meeting.packages.all())
                meeting.save()

                context = {
                    "status": True,
                    "message": "Meeting Ended Successfully"
                }
            except Exception as e:
                context = {
                    "status": False,
                    "message": str(e)
                }

            return Response(context)

        else:
            context = {
                "status": False,
                "message": "'subscription' not define properly"
            }
            return Response(context)

class StudentGetMeetHourMeetingAPI(APIView):
    def get(self, request, subscription):
        me = Studs(self.request.user)
        student_packages = me.profile.package_set.all()
        student_batches = me.profile.batches.all()
        try:
            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                meetings = MeetHourMeeting.objects.prefetch_related('batches').prefetch_related(
                    'packages').select_related('teacher').order_by("-time")
                
            elif subscription == "developer":
                institute = me.profile.institute
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                    institute=institute).order_by('-date').first()
                meethour_credentials = {
                    "username": account_credentials.username,
                    "password": account_credentials.password,
                    "client_id": account_credentials.client_id,
                    "client_secret": account_credentials.client_secret,
                    "access_token": account_credentials.access_token,
                    "refresh_token": account_credentials.refresh_token,
                }
                meetings = MeetHourDeveloperAccountMeeting.objects.filter(developer_account=account_credentials).prefetch_related('batches').prefetch_related(
                    'packages').select_related('teacher').order_by("-time")
                print(meetings)
                
            else:
                context = {
                    "status": False,
                    "message": "'subscription' not define properly"
                }
                return Response(context)

            meeting_list = []
            for studentmeeting in meetings:
                print(studentmeeting)
                meeting_batches = studentmeeting.batches.all()
                meeting_packages = studentmeeting.packages.all()
                print(meeting_batches)

                for meet_batch in meeting_batches:
                    if meet_batch in student_batches:
                        meeting_list.append(studentmeeting)
                        break
                else:
                    for meet_pack in meeting_packages:
                        if meet_pack in student_packages:
                            meeting_list.append(studentmeeting)
                            break

            meeting_list_response = []
            for meeting in meeting_list:
                print(meeting)
                meet_dict = {
                    'meeting_id': meeting.meeting_id,
                    'meeting_name': meeting.meeting_name,
                    'teacher': {
                        'id': meeting.teacher.id,
                        'name': meeting.teacher.name,
                        'photo': meeting.teacher.photo,
                    },
                    'time': meeting.time,
                    'live_status': meeting.live_status
                }
                meeting_list_response.append(meet_dict)

            context = {
                "status": True,
                "message": "all student's meeting list",
                "data": meeting_list_response
            }
        except Exception as e:
            context = {"status": False,"message": f'{e}'}
        return Response(context)

class JoinMeetHourMeetingAPI(APIView):
    def post(self, request, subscription, *args, **kwargs):
        user = self.request.user
        data = request.data
        token = Token.objects.get(user=user)
        meeting_id = data.get('meeting_id')

        try:
            me = Teach(user)
            configurations, created = MeetHourMeetingUiConfig.objects.get_or_create(
                institute=me.profile.institute, host=True)
            if created:
                default_toolbar = MeetHourMeetingUiConfigToolbarButton.objects.filter(
                    title__in=['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen', 'fodeviceselection', 'hangup', 'profile', 'chat', 'recording', 'livestreaming', 'livepad', 'whiteboard', 'sharedvideo', 'settings', 'raisehand', 'videoquality', 'filmstrip', 'invite',
                               'feedback', 'stats', 'shortcuts', 'tileview', 'select-background', 'download', 'help', 'mute-everyone', 'removedonorbox', 'zoomin', 'zoomout', 'embedmeeting', 'adddonorbox', 'localrecording', 'addclickNpledge', 'removeclickNpledge', 'participants-pane',]
                )
                configurations.toolbar_buttons.add(*default_toolbar)
            host = True
        except:
            me = Studs(user)
            configurations, created = MeetHourMeetingUiConfig.objects.get_or_create(
                institute=me.profile.institute, host=False)
            if created:
                default_toolbar = MeetHourMeetingUiConfigToolbarButton.objects.filter(
                    title__in=['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen', 'fodeviceselection', 'hangup', 'profile', 'chat', 'settings',
                               'raisehand', 'videoquality', 'stats', 'shortcuts', 'tileview', 'select-background', 'help', 'zoomin', 'zoomout', 'participants-pane',]
                )
                configurations.toolbar_buttons.add(*default_toolbar)
            host = False

        meeting_conf = [i.title for i in configurations.meeting_feature.all()]

        ui_config = {
            "APP_NAME": configurations.APP_NAME,
            "DEFAULT_LOGO_URL": configurations.DEFAULT_LOGO_URL,
            "BRAND_WATERMARK_BACKGROUND": configurations.BRAND_WATERMARK_BACKGROUND,
            "SHOW_MEET_HOUR_WATERMARK": configurations.SHOW_MEET_HOUR_WATERMARK,
            "MEET_HOUR_WATERMARK_LINK": configurations.MEET_HOUR_WATERMARK_LINK,
            "MOBILE_APP_PROMO": configurations.MOBILE_APP_PROMO,
            "MOBILE_DOWNLOAD_LINK_ANDROID": configurations.MOBILE_DOWNLOAD_LINK_ANDROID,
            "MOBILE_DOWNLOAD_LINK_IOS": configurations.MOBILE_DOWNLOAD_LINK_IOS,
            "NATIVE_APP_NAME": configurations.NATIVE_APP_NAME,
            "PROVIDER_NAME": configurations.PROVIDER_NAME,
            "ENABLE_MOBILE_BROWSER": configurations.ENABLE_MOBILE_BROWSER,
            "APP_SCHEME": configurations.APP_SCHEME,
            "ANDROID_APP_PACKAGE": configurations.ANDROID_APP_PACKAGE,
            "HIDE_DEEP_LINKING_LOGO": configurations.HIDE_DEEP_LINKING_LOGO,
            "disablePrejoinHeader": configurations.disablePrejoinHeader,
            "disablePrejoinFooter": configurations.disablePrejoinFooter,
            "toolbar_buttons": [i.title for i in configurations.toolbar_buttons.all()]
        }

        config = {
            "resolution": configurations.resolution,
            "videoheightideal": configurations.videoheightideal,
            "videoheightmax": configurations.videoheightmax,
            "videoheightmin": configurations.videoheightmin,
            "videowidthideal": configurations.videowidthideal,
            "videowidthmax": configurations.videowidthmax,
            "videowidthmin": configurations.videowidthmin,
            "startAudioMuted": configurations.startAudioMuted,
            "liveStreamingEnabled": configurations.liveStreamingEnabled,
            "enableWelcomePage": configurations.enableWelcomePage,
            "enableClosePage": configurations.enableClosePage,
            "requireDisplayName": configurations.requireDisplayName,
            "disableDeepLinking": configurations.disableDeepLinking
        }

        if subscription == "enterprise":
            context = {
                "status": False,
                "meassage": "Enterprise Package Not Active"
            }
            return Response(context)
            from .liveVideos.meethour.meethourEnterprise import Meetings, Recurrent
            if host:
                meeting = MeetHourMeeting.objects.get(teacher=me.profile)
            else:
                meeting = MeetHourMeeting.objects.get(meeting_id=meeting_id)

            meeting_object = Meetings(
                meeting_conf=meeting_conf, meeting_id=meeting.meeting_id)
            meet_contact = MeetHourContact.objects.filter(user=user).first()
            if not meet_contact and host:
                try:
                    teacher_details = TeacherDetails.objects.get(
                        teacher=me.profile)
                    if not teacher_details.email:
                        raise Exception
                except:
                    context = {
                        "status": "failed",
                        "message": "user not verifed to join class. please update your email in profile"
                    }
                    return Response(context)

                name = me.profile.name
                email = teacher_details.email
                url = "https://bodhiai.live/api/content/create_meet_hour_contact/enterprise/"
                headers = {
                    "Authorization": f"token {token}"
                }
                body = {
                    "firstname": name,
                    "email": email,
                }
                response = requests.post(url, json=body, headers=headers)
                meet_contact = MeetHourContact.objects.filter(
                    user=user).first()

            meet_contact = MeetHourContact.objects.filter(user=user).first()
            if not meet_contact:
                try:
                    student_details = StudentDetails.objects.get(
                        student=me.profile)
                    if not student_details.email:
                        raise Exception
                except:
                    context = {
                        "status": "failed",
                        "message": "user not verifed to join class. please update your email in profile"
                    }
                    return Response(context)

                name = me.profile.name
                email = student_details.email
                url = "https://bodhiai.live/api/content/create_meet_hour_contact/enterprise/"
                headers = {
                    "Authorization": f"token {token}"
                }
                body = {
                    "firstname": name,
                    "email": email,
                }
                requests.post(url, json=body, headers=headers)
                meet_contact = MeetHourContact.objects.filter(
                    user=user).first()

            context = meeting_object.generate_JWT(
                contact_id=meet_contact.contact_id, ui_config=ui_config, config=config)
            context['meeting_id'] = meeting.meeting_id
            context['meeting_name'] = meeting.meeting_name
            context['passcode'] = meeting.passcode
            context['live_status'] = meeting.live_status
            context['pcode'] = meeting.pCode

            return Response(context)

        elif subscription == "developer":
            from .liveVideos.meethour.meethourDeveloperAccount import Meetings, Recurrent
            institute = me.profile.institute
            account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                institute=institute).order_by('-date').first()
            meethour_credentials = {
                "username": account_credentials.username,
                "password": account_credentials.password,
                "client_id": account_credentials.client_id,
                "client_secret": account_credentials.client_secret,
                "access_token": account_credentials.access_token,
                "refresh_token": account_credentials.refresh_token,
            }

            if host:
                meeting = MeetHourDeveloperAccountMeeting.objects.get(
                    developer_account=account_credentials, teacher=me.profile)
            else:
                meeting = MeetHourDeveloperAccountMeeting.objects.get(developer_account=account_credentials, meeting_id=meeting_id)

            meeting_object = Meetings(meethour_credentials, meeting_conf=meeting_conf, meeting_id=meeting.meeting_id)

            meet_contact = MeetHourDeveloperAccountContact.objects.filter(
                developer_account=account_credentials,user=user).first()

            if not meet_contact and host:
                try:
                    teacher_details = TeacherDetails.objects.get(
                        teacher=me.profile)
                    if not teacher_details.email:
                        raise Exception
                except:
                    context = {
                        "status": "failed",
                        "message": "User not verifed to join class. Please update your email in profile"
                    }
                    return Response(context)

                name = me.profile.name
                email = teacher_details.email
                url = "https://bodhiai.live/api/content/create_meet_hour_contact/developer/"
                headers = {
                    "Authorization": f"token {token}"
                }
                body = {
                    "firstname": name,
                    "email": email,
                }
                response = requests.post(url, json=body, headers=headers)
                meet_contact = MeetHourDeveloperAccountContact.objects.filter(
                    developer_account=account_credentials,user=user).first()

            if not meet_contact and not host:
                try:
                    student_details = StudentDetails.objects.get(student=me.profile)
                    if not student_details.email:
                        raise Exception
                except:
                    context = {
                        "status": "failed",
                        "message": "User not verifed to join class. Please update your email in profile"
                    }
                    return Response(context)

                name = me.profile.name
                email = student_details.email
                url = "https://bodhiai.live/api/content/create_meet_hour_contact/developer/"
                headers = {
                    "Authorization": f"token {token}"
                }
                body = {
                    "firstname": name,
                    "email": email,
                }
                requests.post(url, json=body, headers=headers)
                meet_contact = MeetHourDeveloperAccountContact.objects.filter(
                    developer_account=account_credentials,user=user).first()

            context = meeting_object.generate_JWT(contact_id=meet_contact.contact_id, ui_config=ui_config, config=config)
            context['meeting_id'] = meeting.meeting_id
            context['meeting_name'] = meeting.meeting_name
            context['passcode'] = meeting.passcode
            context['live_status'] = meeting.live_status
            context['pcode'] = meeting.pCode

            return Response(context)

        else:
            context = {
                "status": False,
                "message": "'subscription' not define properly"
            }
            return Response(context)

class CrmTraningSheaduleMeethourAPI(APIView):
    def post(self, request):
        if subscription == "enterprise":
            data = request.data
            unique_id = data['unique_id']
            start_time = data['start_time']
            number = data['phone']
            try:
                executive = CrmExecutive.objects.get(unique_id=unique_id)
                secret_code = random.randint(1000, 9999)

                train_sh = TrainingSheaduleCode()
                train_sh.crm_executive = executive
                train_sh.traning_code = secret_code
                train_sh.start_time = start_time
                train_sh.save()

                send_textlocal_training_code({
                    "number": number,
                    "secret_code": secret_code
                })

                return Response({"status": True, "message": "login id send successfully"})
            except Exception as e:
                return Response({"status": False, "message": str(e)})

class JoinApplicationTraningMeethour(APIView):
    def post(self, request):
        if subscription == "enterprise":
            from .liveVideos.meethour.meethour import Meetings, Recurrent
            data = request.data
            name = data['name']
            email = data['email']
            training_user = User.objects.get(username='application_training')
            token, created = Token.objects.get_or_create(user=training_user)
            url = "https://bodhiai.live/api/content/create_meet_hour_contact/"
            headers = {
                "Authorization": f"token {token}"
            }
            body = {
                "firstname": name,
                "email": email,
            }
            response = requests.post(url, json=body, headers=headers)
            meet_contact = MeetHourContact.objects.get(email=email)
            meeting_code = data['meeting_code']

            if meeting_code == "aajad":
                teacher = Teacher.objects.get(teacheruser__username="")
                meeting = MeetHourMeeting.objects.get(teacher=teacher)

            else:
                context = {
                    "statuss": False,
                    "message": "meeting code is not valid"
                }

            meeting_object = Meetings(meeting_id=None)
            configurations, created = MeetHourMeetingUiConfig.objects.get_or_create(
                institute=teacher.institute, host=True)
            if created:
                default_toolbar = MeetHourMeetingUiConfigToolbarButton.objects.filter(
                    title__in=['microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen', 'fodeviceselection', 'hangup', 'profile', 'chat', 'recording', 'livestreaming', 'livepad', 'whiteboard', 'sharedvideo', 'settings', 'raisehand', 'videoquality', 'filmstrip', 'invite',
                               'feedback', 'stats', 'shortcuts', 'tileview', 'select-background', 'download', 'help', 'mute-everyone', 'removedonorbox', 'zoomin', 'zoomout', 'embedmeeting', 'adddonorbox', 'localrecording', 'addclickNpledge', 'removeclickNpledge', 'participants-pane',]
                )
                configurations.toolbar_buttons.add(*default_toolbar)

            ui_config = {
                "APP_NAME": configurations.APP_NAME,
                "DEFAULT_LOGO_URL": configurations.DEFAULT_LOGO_URL,
                "BRAND_WATERMARK_BACKGROUND": configurations.BRAND_WATERMARK_BACKGROUND,
                "SHOW_MEET_HOUR_WATERMARK": configurations.SHOW_MEET_HOUR_WATERMARK,
                "MEET_HOUR_WATERMARK_LINK": configurations.MEET_HOUR_WATERMARK_LINK,
                "MOBILE_APP_PROMO": configurations.MOBILE_APP_PROMO,
                "MOBILE_DOWNLOAD_LINK_ANDROID": configurations.MOBILE_DOWNLOAD_LINK_ANDROID,
                "MOBILE_DOWNLOAD_LINK_IOS": configurations.MOBILE_DOWNLOAD_LINK_IOS,
                "NATIVE_APP_NAME": configurations.NATIVE_APP_NAME,
                "PROVIDER_NAME": configurations.PROVIDER_NAME,
                "ENABLE_MOBILE_BROWSER": configurations.ENABLE_MOBILE_BROWSER,
                "APP_SCHEME": configurations.APP_SCHEME,
                "ANDROID_APP_PACKAGE": configurations.ANDROID_APP_PACKAGE,
                "HIDE_DEEP_LINKING_LOGO": configurations.HIDE_DEEP_LINKING_LOGO,
                "disablePrejoinHeader": configurations.disablePrejoinHeader,
                "disablePrejoinFooter": configurations.disablePrejoinFooter,
                "toolbar_buttons": [i.title for i in configurations.toolbar_buttons.all()]
            }

            config = {
                "resolution": configurations.resolution,
                "videoheightideal": configurations.videoheightideal,
                "videoheightmax": configurations.videoheightmax,
                "videoheightmin": configurations.videoheightmin,
                "videowidthideal": configurations.videowidthideal,
                "videowidthmax": configurations.videowidthmax,
                "videowidthmin": configurations.videowidthmin,
                "startAudioMuted": configurations.startAudioMuted,
                "liveStreamingEnabled": configurations.liveStreamingEnabled,
                "enableWelcomePage": configurations.enableWelcomePage,
                "enableClosePage": configurations.enableClosePage,
                "requireDisplayName": configurations.requireDisplayName,
                "disableDeepLinking": configurations.disableDeepLinking
            }

            context = meeting_object.generate_JWT(contact_id=meet_contact.contact_id, ui_config=ui_config, config=config)
            context['meeting_id'] = meeting.meeting_id
            context['meeting_name'] = meeting.meeting_name
            context['passcode'] = meeting.passcode
            context['live_status'] = meeting.live_status
            context['pcode'] = meeting.pCode

            return Response(context)

class CreateSubjectAllContentReplica(APIView):
    def post(self, request):
        data = request.data
        try:
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            create_subject_replica_new.delay(teacher_id, subject_id)
            return Response("Success")
        except Exception as e:
            return Response(str(e))















































































class QueryForCourses(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        course_id = data.get('course_id')
        try:
            teacher_course = TeacherCourse.objects.get(id=course_id)
            previous_query, created = CoursesQuery.objects.get_or_create(
                teacher_course=teacher_course, teacher=me.profile)
            previous_query.count += 1
            previous_query.previous_click_time = previous_query.current_click_time
            previous_query.save()
            context = {'status': True, 'message': 'Query Sent Successfully'}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class TeacherGetTopicsFromChapterNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                notes = Note.objects.prefetch_related('topic').filter(teacher__in=teachers, chapter=chapter_id)
            else:
                notes = Note.objects.prefetch_related('topic').filter(teacher=me.profile, chapter=chapter_id)

            topics_list = []
            for note in notes:
                topics = note.topic.values('id', 'topic')
                for t in topics:
                    if t not in topics_list:
                        topics_list.append(t)

            context = {'status': True, 'message': 'Success','topics_list': topics_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class TeacherGetSubTopicsFromTopicNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        topic_id = data['topic_id']
        try:
            topic = QuestionTopic.objects.get(id=topic_id)
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                notes = Note.objects.prefetch_related('subTopic').filter(teacher__in=teachers, topic=topic)
            else:
                notes = Note.objects.prefetch_related('subTopic').filter(teacher=me.profile, topic=topic)

            subtopics_list = []
            for note in notes:
                subtopics = note.subTopic.all().values('id', 'name')
                for st in subtopics:
                    if st not in subtopics_list:
                        subtopics_list.append(st)

            context = {'status': True, 'message': 'Success','subtopics_list': subtopics_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class TeacherGetNotesFromSubTopicNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subtopic_id = data['subtopic_id']
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                notes = Note.objects.filter(teacher__in=teachers, subTopic=subtopic_id)
            else:
                notes = Note.objects.filter(teacher=me.profile, subTopic=subtopic_id)

            notes_list = []
            for note in notes:
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                notes_dict = {
                    'note_id': note.id,
                    'title': note.title,
                    'publishDate': note.publishDate,
                    'thumbnail': note.thumbnail,
                    'subject': note.subject.name,
                    'chapter': note.chapter.name,
                    'locked': note.locked,
                    'noteViewsLimite': note.noteViewsLimite,
                    'link': note_link,
                }
                notes_list.append(notes_dict)

            context = {'status': True, 'notes_list': notes_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class TeacherGetAllBatches(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            assignments = Assignment.objects.filter(teacher=me.profile)
            assignment_batches = set()
            for assignment in assignments:
                batches = assignment.batches.all().values_list('id', 'name')
                for batch in batches:
                    assignment_batches.add(batch)

            context = {'status': True, 'message': 'Success','assignment_batch': assignment_batches}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class TeacherGetAllAssignmentsBatchWise(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        try:
            assignments = Assignment.objects.filter(teacher=me.profile, batches__in=batch_id)
            assignments_list = []
            for assign in assignments:
                assign_dict = {
                    'id': assign.id,
                    'link': assign.link,
                    'published': assign.published,
                    'dueDate': assign.dueDate,
                    'title': assign.title,
                    'description': assign.description,
                    'publish': assign.publish}
                assignments_list.append(assign_dict)

            context = {'status': True, 'message': 'Success','assignments_list': assignments_list}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class TransferInstituteYtVideosToServer(APIView):
    permission_classes = [IsAdminUser]

    def post(self, request):
        data = request.data
        code = data['code']
        institute = Institute.objects.get(code=code)
        teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
        videos = Video.objects.filter(teacher__institute=institute, download_link__isnull=True)

        for video in videos:
            upload_yt_video_to_azure_server.delay(video.id, teacher.id)

        return Response("success")

class GetInstitutePackageView(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            package_view = me.profile.institute.package_view
            context = {
                'status': True, 
                'message': 'Success',
                'package_view': package_view
                }
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class TeacherNotesFilter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')

        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(institute=me.profile.institute)
                notes = Note.objects.filter(teacher__in=teachers)
            else:
                notes = Note.objects.filter(teacher=me.profile)

            if subject_id:
                notes = notes.filter(subject=subject_id)

            if chapter_id:
                notes = notes.filter(chapter=chapter_id)

            if topic_id:
                notes = notes.filter(topic=topic_id)

            if subtopic_id:
                notes = notes.filter(subTopic=subtopic_id)

            notes_list = []
            for note in notes:
                notes_dict = {}
                notes_dict['note_id'] = note.id
                notes_dict['title'] = note.title
                notes_dict['publishDate'] = note.publishDate
                notes_dict['image'] = note.image
                notes_dict['locked'] = note.locked
                notes_dict['thumbnail'] = note.thumbnail
                notes_dict['noteViewsLimite'] = note.noteViewsLimite

                try:
                    batch_list = []
                    batches = note.batches.all().values('id', 'name')
                    for batch in batches:
                        batch_list.append(batch)

                    notes_dict['batches'] = batch_list
                except:
                    pass

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                notes_dict['link'] = note_link

                try:
                    subject = note.subject.name
                    notes_dict['subject'] = subject
                except:
                    notes_dict['subject'] = None

                try:
                    chapter = note.chapter.name
                    notes_dict['chapter'] = chapter
                except:
                    notes_dict['chapter'] = None

                try:
                    topics = note.topic.values('topic')
                    if topics:
                        notes_dict['topic'] = topics
                except:
                    pass

                try:
                    subtopics = note.subTopic.values('name')
                    if subtopics:
                        notes_dict['subtopic'] = subtopics
                except:
                    pass

                notes_list.append(notes_dict)

            context = {'status': True, 'notes_list': notes_list}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class TeacherOMRTestFilter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(
                    institute=me.profile.institute)
                file_tests = FileTest.objects.filter(
                    createdBy__in=teachers).prefetch_related('batches')
            else:
                file_tests = FileTest.objects.filter(
                    createdBy=me.profile).prefetch_related('batches')

            if subject_id:
                file_tests = file_tests.filter(subject=subject_id)

            if chapter_id:
                file_tests = file_tests.filter(chapter=chapter_id)

            if topic_id:
                file_tests = file_tests.filter(topic=topic_id)

            if subtopic_id:
                file_tests = file_tests.filter(sub_topic=subtopic_id)

            file_test_list = []
            for ftest in file_tests:
                file_test_dict = {}
                file_test_dict['id'] = ftest.id
                file_test_dict['title'] = ftest.title
                file_test_dict['createdBy'] = ftest.createdBy.name
                file_test_dict['testTime'] = ftest.testTime
                file_test_dict['totalQuestion'] = ftest.totalQuestion
                file_test_dict['totalMarks'] = ftest.totalMarks
                file_test_dict['negativeMarks'] = ftest.negativeMarks
                file_test_dict['passing_marks'] = ftest.passing_marks
                file_test_dict['questionFile'] = ftest.questionFile
                file_test_dict['solutionsFile'] = ftest.solutionsFile
                file_test_dict['answers'] = ftest.answers
                file_test_dict['locked'] = ftest.locked
                file_test_dict['publish'] = ftest.publish
                file_test_dict['published'] = ftest.published

                try:
                    batch_list = []
                    batches = ftest.batches.all().values('id', 'name')
                    for batch in batches:
                        batch_list.append(batch)

                    file_test_dict['batches'] = batch_list
                except:
                    pass

                try:
                    subject = ftest.subject.name
                    file_test_dict['subject'] = subject
                except:
                    file_test_dict['subject'] = None

                try:
                    chapter = ftest.chapter.name
                    file_test_dict['chapter'] = chapter
                except:
                    file_test_dict['chapter'] = None

                try:
                    topic = ftest.topic.topic
                    if topic:
                        file_test_dict['topic'] = topic
                except:
                    pass

                try:
                    subtopic = ftest.sub_topic.name
                    if subtopic:
                        file_test_dict['subtopic'] = subtopic
                except:
                    pass

                file_test_list.append(file_test_dict)

            context = {'status': True, 'message': 'Success',
                       'file_test_list': file_test_list}
        except Exception as e:
            context = {'status': False, 'message': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherMCQTestFilter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(
                    institute=me.profile.institute)
                mcq_tests = Test.objects.filter(createdBy__in=teachers).prefetch_related(
                    'batches', 'questions', 'students')
            else:
                mcq_tests = Test.objects.filter(createdBy=me.profile).prefetch_related(
                    'batches', 'questions', 'students')

            if subject_id:
                mcq_tests = mcq_tests.filter(subjects=subject_id)

            if chapter_id:
                mcq_tests = mcq_tests.filter(chapters=chapter_id)

            if topic_id:
                mcq_tests = mcq_tests.filter(topics=topic_id)

            if subtopic_id:
                mcq_tests = mcq_tests.filter(subTopics=subtopic_id)

            mcq_test_list = []
            for test in mcq_tests:
                number_questions = test.questions.all().count()

                mcq_test_dict = {}
                mcq_test_dict['id'] = test.id
                mcq_test_dict['name'] = test.name
                mcq_test_dict['numberQuestions'] = number_questions
                mcq_test_dict['totalMarks'] = test.totalMarks
                mcq_test_dict['time'] = test.time
                mcq_test_dict['published'] = test.published
                mcq_test_dict['repeatTest_status'] = test.repeatTest
                mcq_test_dict['is_answers_showing'] = test.is_answers_showing
                mcq_test_dict['passing_marks'] = test.passing_marks
                mcq_test_dict['testInstructions'] = test.testInstructions
                mcq_test_dict['testStartDateTime'] = test.testStartDateTime
                mcq_test_dict['testEndDateTime'] = test.testEndDateTime
                mcq_test_dict['studentWillAttemptQuestions'] = test.studentWillAttemptQuestions



                try:
                    batch_list = []
                    batches = test.batches.all().values('id', 'name')
                    for batch in batches:
                        batch_list.append(batch)

                    mcq_test_dict['batches'] = batch_list
                except:
                    pass

                try:
                    subject = test.subjects.values('name')
                    mcq_test_dict['subjects'] = subject
                except:
                    mcq_test_dict['subjects'] = None

                try:
                    chapter = test.chapters.values('name')
                    mcq_test_dict['chapters'] = chapter
                except:
                    mcq_test_dict['chapters'] = None

                try:
                    topics = test.topics.values('topic')
                    if topics:
                        mcq_test_dict['topic'] = topics
                except:
                    pass

                try:
                    subtopics = test.subTopics.values('name')
                    if subtopics:
                        mcq_test_dict['subtopic'] = subtopics
                except:
                    pass

                mcq_test_list.append(mcq_test_dict)

            context = {'status': True, 'message': 'Success',
                       'mcq_test_list': mcq_test_list}
        except Exception as e:
            context = {'status': False, 'message': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetTopicsFromChapterOMRTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(
                    institute=me.profile.institute)
                tests = FileTest.objects.filter(
                    createdBy__in=teachers, chapter=chapter_id)
            else:
                tests = FileTest.objects.filter(
                    createdBy=me.profile, chapter=chapter_id)

            topic_list = []
            for test in tests:
                try:
                    topic_dict = {'id': test.topic.id,
                                  'name': test.topic.topic}
                    if topic_dict != "" and topic_dict not in topic_list:
                        topic_list.append(topic_dict)
                except:
                    pass

            context = {'status': True, 'message': 'Success',
                       'topic_list': topic_list}
        except Exception as e:
            context = {'status': False, 'message': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetSubTopicsFromTopicOMRTests(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        topic_id = data['topic_id']
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(
                    institute=me.profile.institute)
                tests = FileTest.objects.filter(
                    createdBy__in=teachers, topic=topic_id)
            else:
                tests = FileTest.objects.filter(
                    createdBy=me.profile, topic=topic_id)

            subtopic_list = []
            for test in tests:
                try:
                    subtopic_dict = {
                        'id': test.sub_topic.id,
                        'name': test.sub_topic.name}

                    if subtopic_dict != "" and subtopic_dict not in subtopic_list:
                        subtopic_list.append(subtopic_dict)
                except:
                    pass

            context = {'status': True, 'message': 'Success',
                       'subtopic_list': subtopic_list}
        except Exception as e:
            context = {'status': False, 'message': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherVideosFilter(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            if me.profile.mainTeacher:
                teachers = Teacher.objects.filter(
                    institute=me.profile.institute)
                videos = Video.objects.filter(
                    teacher__in=teachers).prefetch_related('batches')
            else:
                videos = Video.objects.filter(
                    teacher=me.profile).prefetch_related('batches')

            if subject_id:
                videos = videos.filter(subject=subject_id)

            if chapter_id:
                videos = videos.filter(chapter=chapter_id)

            if topic_id:
                videos = videos.filter(topics=topic_id)

            if subtopic_id:
                videos = videos.filter(subTopics=subtopic_id)

            videos_list = []
            for video in videos:
                video_dict = {}
                video_dict['id'] = video.id
                video_dict['title'] = video.title
                video_dict['urlLink'] = video.urlLink
                video_dict['generalVideo'] = video.generalVideo
                video_dict['publishDate'] = video.publishDate
                video_dict['locked'] = video.locked
                video_dict['publish'] = video.publish
                video_dict['lowlink'] = video.lowlink
                video_dict['highlink'] = video.highlink
                video_dict['thumbnail'] = video.thumbnail
                video_dict['viewsLimite'] = video.viewsLimite

                try:
                    batch_list = []
                    batches = video.batches.all().values('id', 'name')
                    for batch in batches:
                        batch_list.append(batch)

                    video_dict['batches'] = batch_list
                except:
                    pass

                try:
                    subject = video.subject.name
                    video_dict['subject'] = subject
                except:
                    video_dict['subject'] = None

                try:
                    chapter = video.chapter.name
                    video_dict['chapter'] = chapter
                except:
                    video_dict['chapter'] = None

                try:
                    topic = video.topics.topic
                    if topic:
                        video_dict['topic'] = topic
                except:
                    pass

                try:
                    subtopic = video.subTopics.name
                    if subtopic:
                        video_dict['subtopic'] = subtopic
                except:
                    pass

                videos_list.append(video_dict)

            context = {'status': True, 'message': 'Success',
                       'videos_list': videos_list}
        except Exception as e:
            context = {'status': False, 'message': 'Failed', 'message': str(e)}
        return Response(context)

class StudentPackageWiseSubjects(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']

        try:
            package = Package.objects.get(id=package_id)
            notes = package.notes.all()
            videos = package.videos.all()
            mcq_tests = package.tests.all()
            omr_tests = package.fileTests.all()

            subjects_set = set()

            for video in videos:
                subjects_set.add(video.subject)
            for note in notes:
                subjects_set.add(note.subject)
            for test in mcq_tests:
                for subject in test.subjects.all():
                    subjects_set.add(subject)
            for ftest in omr_tests:
                subjects_set.add(ftest.subject)

            subjects_list = sorted(list(subjects_set), key=lambda x: x.id if x else 0)
            all_subjects = []

            for subject in subjects_list:
                if subject:
                    subject_details = {'id': subject.id, 'name': subject.name}
                    all_subjects.append(subject_details)

            context = {'status': True, 'message': 'Success',
                       'all_subjects': all_subjects}
            return Response(context)
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            return Response(context)

class StudentPackageAndSubjectWiseChapters(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data

        try:
            package_id = data['package_id']
            subject_id = data['subject_id']
            package = Package.objects.get(id=package_id)
            notes = package.notes.filter(subject=subject_id)
            videos = package.videos.filter(subject=subject_id)
            mcq_tests = package.tests.filter(subjects=subject_id)
            omr_tests = package.fileTests.filter(subject=subject_id)

            chapters_set = set()

            if notes:
                for note in notes:
                    chapters_set.add(note.chapter)

            if videos:
                for video in videos:
                    chapters_set.add(video.chapter)

            if mcq_tests:
                for test in mcq_tests:
                    chapters = test.chapters.all()
                    for chapter in chapters:
                        chapters_set.add(chapter)

            if omr_tests:
                for test in omr_tests:
                    chapters_set.add(test.chapter)

            chapters_list = sorted(list(chapters_set), key=lambda x: x.id if x else 0)
            all_chapters = []

            for chapter in chapters_list:
                if chapter:
                    chapter_dict = {'id': chapter.id, 'name': chapter.name}
                    all_chapters.append(chapter_dict)

            context = {'status': True, 'message': 'Success', 'all_chapters': all_chapters}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentPackageAndChapterWiseTopics(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data

        try:
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            package = Package.objects.get(id=package_id)
            videos = package.videos.filter(chapter=chapter_id)
            notes = package.notes.filter(chapter=chapter_id)
            mcq_tests = package.tests.filter(chapters=chapter_id)
            omr_tests = package.fileTests.filter(chapter=chapter_id)

            topics_list = []

            if notes:
                for note in notes:
                    topics = note.topic.all()
                    for topic in topics:
                        if topic not in topics_list:
                            topics_list.append(topic)

            if videos:
                for video in videos:
                    if video.topics not in topics_list:
                        topics_list.append(video.topics)

            if mcq_tests:
                for test in mcq_tests:
                    topics = test.topics.all()
                    for topic in topics:
                        if topic not in topics_list:
                            topics_list.append(topic)

            if omr_tests:
                for test in omr_tests:
                    if test.topic not in topics_list:
                        topics_list.append(test.topic)
            all_topics = []

            for topic in topics_list:
                if topic:
                    topic_dict = {'id': topic.id, 'name': topic.topic,'thumbnail':topic.thumbNail}
                    all_topics.append(topic_dict)
                    
            all_topics.sort(key=lambda topic: topic['id'])

            context = {'status': True, 'message': 'Success','all_topics': all_topics}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)









                    


class StudentPackageAndTopicWiseSubtopics(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data

        try:
            package_id = data['package_id']
            topic_id = data['topic_id']
            package = Package.objects.get(id=package_id)
            notes = package.notes.filter(topic=topic_id)
            videos = package.videos.filter(topics=topic_id)
            mcq_tests = package.tests.filter(topics=topic_id)
            omr_tests = package.fileTests.filter(topic=topic_id)
            
            subtopics_set = set()

            if notes:
                for note in notes:
                    subtopics = note.subTopic.all()
                    for subtopic in subtopics:
                        subtopics_set.add(subtopic)

            if videos:
                for video in videos:
                    subtopics_set.add(video.subTopics)

            if mcq_tests:
                for test in mcq_tests:
                    subtopics = test.subTopics.all()
                    for subtopic in subtopics:
                        subtopics_set.add(subtopic)

            if omr_tests:
                for test in omr_tests:
                    subtopics_set.add(test.sub_topic)

            subtopics_list = list(subtopics_set)
            all_subtopics = []

            for subtopic in subtopics_list:
                if subtopic:
                    subtopic_dict = {'id': subtopic.id, 'name': subtopic.name}
                    all_subtopics.append(subtopic_dict)

            context = {'status': True, 'message': 'Success','all_subtopics': all_subtopics}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentPackageDataFilter(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            package = Package.objects.get(id=package_id)
            package_demo_object = PackageDemoContentHelper(package)
            notes = package.notes.all().order_by('id')
            videos = package.videos.all().order_by('id')
            youtube_live_videos = package.youtubeLiveVideos.all().order_by('id')
            mcq_tests = package.tests.all().order_by('id')
            omr_tests = package.fileTests.all().order_by('id')

            if subject_id:
                notes = notes.filter(subject=subject_id)
                videos = videos.filter(subject=subject_id)
                mcq_tests = mcq_tests.filter(subjects=subject_id)
                omr_tests = omr_tests.filter(subject=subject_id)

            if chapter_id:
                notes = notes.filter(chapter=chapter_id)
                videos = videos.filter(chapter=chapter_id)
                mcq_tests = mcq_tests.filter(chapters=chapter_id)
                omr_tests = omr_tests.filter(chapter=chapter_id)

            if topic_id:
                notes = notes.filter(topic=topic_id)
                videos = videos.filter(topics=topic_id)
                mcq_tests = mcq_tests.filter(topics=topic_id)
                omr_tests = omr_tests.filter(topic=topic_id)

            if subtopic_id:
                notes = notes.filter(subTopic=subtopic_id)
                videos = videos.filter(subTopics=subtopic_id)
                mcq_tests = mcq_tests.filter(subTopics=subtopic_id)
                omr_tests = omr_tests.filter(sub_topic=subtopic_id)

            notes_list = []
            for note in notes:
                isDemo = package_demo_object.check_note_demo(note)
                try:
                    link = note.noteurl_note.link
                except:
                    link = ""

                subtopics = set(subtopic.name for subtopic in note.subTopic.all() if subtopic)
                topics = []
                for topic in note.topic.all():
                    if topic:
                        topic_dict = {'id':topic.id,'name':topic.topic}
                        topics.append(topic_dict)

                notes_dict = {}
                notes_dict['note_id']= note.id
                notes_dict['title']= note.title
                notes_dict['subject']= note.subject.name
                notes_dict['chapter']= note.chapter.name
                if topics:
                    notes_dict['topics']= topics
                if subtopics:
                    notes_dict['subtopics']= subtopics
                notes_dict['publishDate']= note.publishDate
                notes_dict['thumbnail']= note.thumbnail
                notes_dict['locked']= note.locked
                notes_dict['noteViewsLimite']= note.noteViewsLimite
                notes_dict['image']= note.image
                notes_dict['link']= link
                notes_dict['isDemo']=isDemo
                notes_list.append(notes_dict)

            videos_list = []
            for video in videos:
                isDemo = package_demo_object.check_video_demo(video)
                video_dict = {}
                video_dict['id'] = video.id
                video_dict['title'] = video.title
                video_dict['subject'] = video.subject.name
                video_dict['chapter'] = video.chapter.name
                if video.topics:
                    video_dict['topics'] = video.topics.topic
                if video.subTopics:
                    video_dict['subTopics'] = video.subTopics.name
                video_dict['urlLink'] = video.urlLink
                video_dict['generalVideo'] = video.generalVideo
                video_dict['publishDate'] = video.publishDate
                video_dict['locked'] = video.locked
                video_dict['publish'] = video.publish
                video_dict['lowlink'] = video.lowlink
                video_dict['highlink'] = video.highlink
                video_dict['thumbnail'] = video.thumbnail
                video_dict['viewsLimite'] = video.viewsLimite
                video_dict['isDemo'] = isDemo

                videos_list.append(video_dict)

            youtube_live_list = []
            for youtube in youtube_live_videos:
                isDemo = package_demo_object.check_youtubeLiveVideo_demo(youtube)
                if youtube:
                    youtube_dict = {
                        'id': youtube.id,
                        'title': youtube.title,
                        'link': youtube.link,
                        'publish_date': youtube.time
                        }
                    youtube_live_list.append(youtube_dict)
            
            file_test_list = []
            for ftest in omr_tests:
                isDemo = package_demo_object.check_fileTest_demo(ftest)
                file_test_dict = {}
                file_test_dict['id']= ftest.id
                file_test_dict['title']= ftest.title
                file_test_dict['subject']= ftest.subject.name
                file_test_dict['chapter']= ftest.chapter.name
                if ftest.topic:
                    file_test_dict['topic']= ftest.topic.topic
                if ftest.sub_topic:
                    file_test_dict['sub_topic']= ftest.sub_topic.name
                file_test_dict['createdBy']= ftest.createdBy.name
                file_test_dict['testTime']= ftest.testTime
                file_test_dict['repeatTest']= ftest.repeatTest
                file_test_dict['totalQuestion']= ftest.totalQuestion
                file_test_dict['totalMarks']= ftest.totalMarks
                file_test_dict['negativeMarks']= ftest.negativeMarks
                file_test_dict['passing_marks']= ftest.passing_marks
                file_test_dict['questionFile']= ftest.questionFile
                file_test_dict['solutionsFile']= ftest.solutionsFile
                file_test_dict['locked']= ftest.locked
                file_test_dict['publish']= ftest.publish
                file_test_dict['isDemo']= isDemo
                file_test_list.append(file_test_dict)

            mcq_test_list = []
            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests_ids = student_test_helper.taken_test()
            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_tests = stud_pack_helper.get_all_brought_tests()
            for test in mcq_tests:
                isDemo = package_demo_object.check_test_demo(test)
                numberQuestions = test.questions.all().count()
                subjects = set(subject.name for subject in test.subjects.all())
                chapters = set(chapter.name for chapter in test.chapters.all())
                topics = set(topic.topic for topic in test.topics.all() if topic)
                subtopics = set(subtopic.name for subtopic in test.subTopics.all() if subtopic)
                
                try:
                    student_mark = StudentMarks.objects.filter(test = test, student = me.profile).last()
                    student_mark_id = student_mark.id
                except:
                    student_mark_id = None
                    
                student_marks_list = []
                if me.profile.institute.code == 'pcbtnursing':
                    student_marks = StudentMarks.objects.filter(test = test, student = me.profile).order_by('id')
                    for sm in student_marks:
                        mark_dict = {'id': sm.id, 'attemptTime': sm.attemptTime}
                        student_marks_list.append(mark_dict)
                
                bought = False
                if test.id in bought_tests:
                    bought = True

                if test.locked == False:
                    bought = True
                    
                if test.testEndDateTime:
                    if test.testEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                first_attempt = True
                if test.id in taken_tests_ids:
                    first_attempt = False
                else:
                    first_attempt = True
                    
                if (first_attempt == False and test.repeatTest == True) or (first_attempt == True and test.repeatTest == True):
                    if test.test_count != None:
                        try:
                            student_last_report = test.marks_test.filter(student=me.profile).last()
                            test_attempted = student_last_report.attempt_count
                        except:
                            test_attempted = 0
                            
                        try:
                            remaining_attempt = test.test_count - test_attempted
                            if remaining_attempt == 0:
                                can_attempt = False
                            else:
                                can_attempt = True
                        except:
                            remaining_attempt = 0
                            can_attempt = False
                            
                        if test_attempted < test.test_count:
                            mcq_test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'subjects': subjects, 
                                'chapters': chapters,
                                'topics': topics,
                                'subtopics': subtopics, 
                                'createdBy': test.createdBy.name, 
                                'totalMarks': test.totalMarks, 
                                'numberQuestions': numberQuestions, 
                                'time': test.time, 
                                'locked': test.locked,
                                'publish': test.publish, 
                                'passing_marks': test.passing_marks,
                                'testInstructions': test.testInstructions,
                                'testStartDateTime': test.testStartDateTime,
                                'testEndDateTime': test.testEndDateTime,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'is_answers_showing': test.is_answers_showing,
                                'isDemo': isDemo,
                                'student_mark_id': student_mark_id,
                                'student_marks_list': student_marks_list,
                                'test_count': test.test_count,
                                'first_attempt': first_attempt,
                                'repeatTest': test.repeatTest, 
                                'remaining_attempt': remaining_attempt,
                                'can_attempt': can_attempt,
                                }
                            mcq_test_list.append(mcq_test_dict)
                        else:
                            mcq_test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'subjects': subjects, 
                                'chapters': chapters,
                                'topics': topics,
                                'subtopics': subtopics, 
                                'createdBy': test.createdBy.name, 
                                'totalMarks': test.totalMarks, 
                                'numberQuestions': numberQuestions, 
                                'time': test.time, 
                                'locked': test.locked,
                                'publish': test.publish, 
                                'passing_marks': test.passing_marks,
                                'testInstructions': test.testInstructions,
                                'testStartDateTime': test.testStartDateTime,
                                'testEndDateTime': test.testEndDateTime,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'is_answers_showing': test.is_answers_showing,
                                'isDemo': isDemo,
                                'student_mark_id': student_mark_id,
                                'student_marks_list': student_marks_list,
                                'test_count': test.test_count,
                                'first_attempt': first_attempt,
                                'repeatTest': test.repeatTest, 
                                'remaining_attempt': remaining_attempt,
                                'can_attempt': can_attempt,
                                }
                            mcq_test_list.append(mcq_test_dict)
                    else:
                        mcq_test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'subjects': subjects, 
                            'chapters': chapters,
                            'topics': topics,
                            'subtopics': subtopics, 
                            'createdBy': test.createdBy.name, 
                            'totalMarks': test.totalMarks, 
                            'numberQuestions': numberQuestions, 
                            'time': test.time, 
                            'locked': test.locked,
                            'publish': test.publish, 
                            'passing_marks': test.passing_marks,
                            'testInstructions': test.testInstructions,
                            'testStartDateTime': test.testStartDateTime,
                            'testEndDateTime': test.testEndDateTime,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'is_answers_showing': test.is_answers_showing,
                            'isDemo': isDemo,
                            'student_mark_id': student_mark_id,
                            'student_marks_list': student_marks_list,
                            'test_count': test.test_count,
                            'first_attempt': first_attempt,
                            'repeatTest': test.repeatTest, 
                            'remaining_attempt': None,
                            'can_attempt': None,
                            }
                        mcq_test_list.append(mcq_test_dict)
                        
                elif first_attempt == False and test.repeatTest == False:
                        pass
                else:
                    mcq_test_dict = {
                        'id': test.id, 
                        'name': test.name, 
                        'subjects': subjects, 
                        'chapters': chapters,
                        'topics': topics,
                        'subtopics': subtopics, 
                        'createdBy': test.createdBy.name, 
                        'totalMarks': test.totalMarks, 
                        'numberQuestions': numberQuestions, 
                        'time': test.time, 
                        'locked': test.locked,
                        'publish': test.publish, 
                        'passing_marks': test.passing_marks,
                        'testInstructions': test.testInstructions,
                        'testStartDateTime': test.testStartDateTime,
                        'testEndDateTime': test.testEndDateTime,
                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                        'is_answers_showing': test.is_answers_showing,
                        'isDemo': isDemo,
                        'student_mark_id': student_mark_id,
                        'student_marks_list': student_marks_list,
                        'test_count': test.test_count,
                        'first_attempt': first_attempt,
                        'repeatTest': test.repeatTest, 
                        'remaining_attempt': None,
                        'can_attempt': None,
                        }
                    mcq_test_list.append(mcq_test_dict)
                    
            context = {
                'status': True,
                'message': 'Success',
                'notes_list': notes_list,
                'videos_list': videos_list,
                'youtube_live_list': youtube_live_list,
                'mcq_test_list': mcq_test_list,
                'file_test_list': file_test_list,
            }
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentPackageDataFilterNew(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            package = Package.objects.get(id=package_id)
            package_helper = StudentBroughtPackagesHelper(me.profile)
            mcq_tests = package_helper.get_brought_package_tests(package)
            notes = package_helper.get_brought_package_notes(package)
            videos = package_helper.get_brought_package_videos(package)
            youtube_live_videos = package_helper.get_brought_package_youtubeLiveVideos(package)
            omr_tests = package_helper.get_brought_package_fileTests(package)

            if subject_id:
                notes = notes.filter(subject=subject_id)
                videos = videos.filter(subject=subject_id)
                mcq_tests = mcq_tests.filter(subjects=subject_id)
                omr_tests = omr_tests.filter(subject=subject_id)

            if chapter_id:
                notes = notes.filter(chapter=chapter_id)
                videos = videos.filter(chapter=chapter_id)
                mcq_tests = mcq_tests.filter(chapters=chapter_id)
                omr_tests = omr_tests.filter(chapter=chapter_id)

            if topic_id:
                notes = notes.filter(topic=topic_id)
                videos = videos.filter(topics=topic_id)
                mcq_tests = mcq_tests.filter(topics=topic_id)
                omr_tests = omr_tests.filter(topic=topic_id)

            if subtopic_id:
                notes = notes.filter(subTopic=subtopic_id)
                videos = videos.filter(subTopics=subtopic_id)
                mcq_tests = mcq_tests.filter(subTopics=subtopic_id)
                omr_tests = omr_tests.filter(sub_topic=subtopic_id)

            notes_list = []
            for note in notes:
                try:
                    link = note.noteurl_note.link
                except:
                    link = ""

                notes_dict = {
                    'note_id': note.id,
                    'title': note.title,
                    'publishDate': note.publishDate,
                    'thumbnail': note.thumbnail,
                    'locked': note.locked,
                    'noteViewsLimite': note.noteViewsLimite,
                    'image': note.image,
                    'link': link,
                }
                notes_list.append(notes_dict)

            file_test_list = []
            for ftest in omr_tests:
                file_test_dict = {
                    'id': ftest.id,
                    'title': ftest.title,
                    'createdBy': ftest.createdBy.name,
                    'testTime': ftest.testTime,
                    'totalQuestion': ftest.totalQuestion,
                    'totalMarks': ftest.totalMarks,
                    'negativeMarks': ftest.negativeMarks,
                    'passing_marks': ftest.passing_marks,
                    'questionFile': ftest.questionFile,
                    'solutionsFile': ftest.solutionsFile,
                    'locked': ftest.locked,
                    'publish': ftest.publish,
                }
                file_test_list.append(file_test_dict)

            mcq_test_list = []
            for test in mcq_tests:
                numberQuestions = test.questions.all().count()
                mcq_test_dict = {
                    'id': test.id,
                    'name': test.name,
                    'createdBy': test.createdBy.name,
                    'totalMarks': test.totalMarks,
                    'numberQuestions': numberQuestions,
                    'time': test.time,
                    'locked': test.locked,
                    'publish': test.publish,
                    'passing_marks': test.passing_marks,
                    'testInstructions': test.testInstructions,
                    'testStartDateTime': test.testStartDateTime,
                    'testEndDateTime': test.testEndDateTime,
                    'repeatTest': test.repeatTest,
                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                    'is_answers_showing': test.is_answers_showing,
                }
                mcq_test_list.append(mcq_test_dict)

            videos_list = []
            for video in videos:
                video_dict = {}
                video_dict['id'] = video.id
                video_dict['title'] = video.title
                video_dict['urlLink'] = video.urlLink
                video_dict['generalVideo'] = video.generalVideo
                video_dict['publishDate'] = video.publishDate
                video_dict['locked'] = video.locked
                video_dict['publish'] = video.publish
                video_dict['lowlink'] = video.lowlink
                video_dict['highlink'] = video.highlink
                video_dict['thumbnail'] = video.thumbnail
                video_dict['viewsLimite'] = video.viewsLimite

                videos_list.append(video_dict)

            youtube_live_list = []
            for youtube in youtube_live_videos:
                if youtube:
                    youtube_dict = {
                        'id': youtube.id,
                        'title': youtube.title,
                        'link': youtube.link,
                        'publish_date': youtube.time}
                    youtube_live_list.append(youtube_dict)

            context = {
                'status': True,
                'message': 'Success',
                'notes_list': notes_list,
                'videos_list': videos_list,
                'youtube_live_list': youtube_live_list,
                'mcq_test_list': mcq_test_list,
                'file_test_list': file_test_list,
            }
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)
    
class StudentCourseDataFilter(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        batches = me.batchIds()
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')

        if me.institute.listReversed:
            order = '-id'
        else:
            order = 'id'

        student_brought_packages = StudentBroughtPackagesHelper(me.profile)
        student_brought_tests = student_brought_packages.get_all_brought_tests()
        student_brought_filetest = student_brought_packages.get_all_brought_fileTests()
        student_brought_notes = student_brought_packages.get_all_brought_notes()
        student_brought_videos = student_brought_packages.get_all_brought_videos()

        student_test_helper = StudentPackageHelper(me.profile)
        taken_test_ids = student_test_helper.taken_test()
        taken_file_test_ids = student_test_helper.taken_file_test()

        try:
            notes = Note.objects.filter(batches__in=batches).order_by(order).distinct()
            videos = Video.objects.filter(batches__in=batches).order_by(order).distinct()
            mcq_tests = Test.objects.filter(batches__in=batches).prefetch_related('questions').order_by(order).distinct()
            omr_tests = FileTest.objects.filter(batches__in=batches).order_by(order).distinct()

            if subject_id:
                notes = notes.filter(subject=subject_id)
                videos = videos.filter(subject=subject_id)
                mcq_tests = mcq_tests.filter(subjects=subject_id)
                omr_tests = omr_tests.filter(subject=subject_id)

            if chapter_id:
                notes = notes.filter(chapter=chapter_id)
                videos = videos.filter(chapter=chapter_id)
                mcq_tests = mcq_tests.filter(chapters=chapter_id)
                omr_tests = omr_tests.filter(chapter=chapter_id)

            if topic_id:
                notes = notes.filter(topic=topic_id)
                videos = videos.filter(topics=topic_id)
                mcq_tests = mcq_tests.filter(topics=topic_id)
                omr_tests = omr_tests.filter(topic=topic_id)

            if subtopic_id:
                notes = notes.filter(subTopic=subtopic_id)
                videos = videos.filter(subTopics=subtopic_id)
                mcq_tests = mcq_tests.filter(subTopics=subtopic_id)
                omr_tests = omr_tests.filter(sub_topic=subtopic_id)

            notes_list = []
            if notes and me.profile.accessNotes == True:
                for note in notes:
                    try:
                        link = note.noteurl_note.link
                    except:
                        link = ""

                    if note in student_brought_notes:
                        bought = True
                    else:
                        bought = False

                    if note.locked == False:
                        bought = True

                    vision = True
                    if note.noteViewsLimite:
                        vision = CheckNoteViewLimite(me.profile, note.id, note.noteViewsLimite)

                    notes_dict = {
                        'id': note.id,
                        'title': note.title,
                        'image': note.image,
                        'thumbnail': note.thumbnail,
                        'publishDate': note.publishDate,
                        'vision': vision,
                        'bought': bought,
                        'url': link,
                    }
                    notes_list.append(notes_dict)

            file_test_list = []
            if omr_tests:
                for ftest in omr_tests:
                    if ftest.id in student_brought_filetest:
                        bought = True
                    else:
                        bought = False

                    if ftest.locked == False:
                        bought = True

                    if ftest.id in taken_file_test_ids:
                        first_attempt = True
                    else:
                        first_attempt = False

                    file_test_dict = {
                        'id': ftest.id,
                        'title': ftest.title,
                        'testTime': ftest.testTime,
                        'first_attempt':first_attempt,
                        'totalQuestion': ftest.totalQuestion,
                        'totalMarks': ftest.totalMarks,
                        'negativeMarks': ftest.negativeMarks,
                        'passing_marks': ftest.passing_marks,
                        'questionFile': ftest.questionFile,
                        'solutionsFile': ftest.solutionsFile,
                        'publish': ftest.publish,
                        'locked': ftest.locked,
                        'bought': bought,
                    }
                    file_test_list.append(file_test_dict)

            mcq_test_list = []
            if mcq_tests and me.profile.accessTests == True:
                for test in mcq_tests:
                    taken_tests = StudentMarks.objects.filter(
                        student=me.profile)
                    numberQuestions = test.questions.all().count()
                    if test.id in student_brought_tests:
                        bought = True
                    else:
                        bought = False

                    if test.locked == False:
                        bought = True

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test.id in taken_tests:
                        first_attempt = False
                    else:
                        first_attempt = True

                    mcq_test_dict = {
                        'id': test.id,
                        'name': test.name,
                        'totalMarks': test.totalMarks,
                        'published': test.published,
                        'time': test.time,
                        'locked': test.locked,
                        'numberQuestions': numberQuestions,
                        'bought': bought,
                        'first_attempt': first_attempt,
                        'testTimeOver': testTimeOver,
                        'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                    }
                    mcq_test_list.append(mcq_test_dict)

            videos_list = []
            if videos and me.profile.accessVideo == True:
                for video in videos:

                    if video.id in student_brought_videos:
                        bought = True
                    else:
                        bought = False

                    if video.locked == False:
                        bought = True

                    vision = True
                    if video.viewsLimite:
                        vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)

                    if video.publish == True:
                        video_dict = {}
                        video_dict['id'] = video.id
                        video_dict['title'] = video.title
                        video_dict['urlLink'] = video.urlLink
                        video_dict['lowlink'] = video.lowlink
                        video_dict['highlink'] = video.highlink
                        video_dict['generalVideo'] = video.generalVideo
                        video_dict['publishDate'] = video.publishDate
                        video_dict['locked'] = video.locked
                        video_dict['bought'] = bought
                        video_dict['vision'] = vision
                        video_dict['thumbnail'] = video.thumbnail

                        videos_list.append(video_dict)

            context = {
                'status': True,
                'message': 'Success',
                'notes_list': notes_list,
                'videos_list': videos_list,
                'mcq_test_list': mcq_test_list,
                'file_test_list': file_test_list,
            }
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class UploadS3ToAzureBlob(APIView):
    def get(self, request):
        videos = Video.objects.filter(urlLink__contains="s3.amazonaws.com/").order_by('-id')[:4]
        for video in videos:
            print(video.id)
            upload_s3_to_azure_server(video.id)
        return Response("success")

class TeacherAddChapterWiseWebsites(APIView):
    def get(self, request):
        me = Teach(self.request.user)

        try:
            websites = ContentWebsite.objects.all().order_by('-id')
            website_list = []
            for website in websites:
                batches = website.batches.all()
                batch_list = [] 
                for batch in batches:
                    batch_dict = {
                        'id': batch.id,
                        'name': batch.name,
                        'institute_id': batch.institute.id
                    } 
                    batch_list.append(batch_dict) 

                website_dict = {
                    'id': website.id,
                    'chapter': website.chapter.name,
                    'website_title':  website.website_title,
                    'website_url': website.website_url,
                    'batch_list': batch_list,
                }
                website_list.append(website_dict)
            context = {'status': True, 'response': website_list}

        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        try:
            data = request.data
            chapter_id = data['chapter_id']
            website_title = data.get('website_title')
            website_url = data.get('website_url')
            try:
                batches_ids = data['batches_ids'] 
                batch_list = batches_ids.strip('][').split(',') 
            except: 
                batch_list = None 

            chapter = Chapter.objects.get(id=chapter_id)
            content_website = ContentWebsite()
            content_website.teacher = me.profile
            content_website.chapter = chapter
            content_website.website_title = website_title
            content_website.website_url = website_url
            content_website.save()

            if batch_list!=None:
                for batch in batch_list:
                    batch_data = Batch.objects.get(id=int(batch))
                    content_website.batches.add(batch_data)

            context = {'status': True, 'response': 'Data Added Successfully'}

        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

    def put(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            web_id = data['web_id']
            chapter_id = data.get('chapter_id')
            website_title = data.get('website_title')
            website_url = data.get('website_url')
            batches_ids = data['batches_ids']
            batch_list = batches_ids.strip('][').split(',')

            web_data = ContentWebsite.objects.get(id=web_id)

            if chapter_id:
                chapter = Chapter.objects.get(id=chapter_id)
                web_data.chapter = chapter

            if website_title:
                web_data.website_title = website_title

            if website_url:
                web_data.website_url = website_url

            web_data.save()
            web_data.batches.clear()
            for batch in batch_list:
                batch_data = Batch.objects.get(id=batch)
                web_data.batches.add(batch_data)

            context = {"status": True, "response": "Data Updated Successfully"}

        except Exception as e:
            context = {"status": False, "response": str(e)}

        return Response(context)

    def delete(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            web_id = data['web_id']

            ContentWebsite.objects.get(id=web_id).delete()
            context = {"status": True, "response": "Data Deleted Successfully"}

        except Exception as e:
            context = {"status": False, "response": str(e)}

        return Response(context)

class TeacherSeeChapterWiseWebsites(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        try:
            websites = ContentWebsite.objects.filter(
                chapter=chapter_id).select_related('chapter').order_by('-id')
            website_list = []
            for website in websites:
                batches = website.batches.all()
                batch_list = [] 
                for batch in batches:
                    batch_dict = {
                        'id': batch.id,
                        'name': batch.name,
                        'institute_id': batch.institute.id
                    } 
                    batch_list.append(batch_dict) 

                website_dict = {
                    'id': website.id,
                    'website_title':  website.website_title,
                    'website_url': website.website_url,
                    'batch_list': batch_list,
                    }
                website_list.append(website_dict)

            context = {'status': True, 'response': website_list}
        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

class StudentSeeChapterWiseWebsites(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        batches = me.profile.batches.all()
        try:
            websites = ContentWebsite.objects.filter(
                chapter=chapter_id, batches__in = batches).select_related('chapter').order_by('date')
            website_list = []
            for website in websites:
                website_dict = {
                    'id': website.id,
                    'website_title':  website.website_title,
                    'website_url': website.website_url, }
                website_list.append(website_dict)

            context = {'status': True, 'response': website_list}
        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

class TestQuestionOrderView(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            test_id = data.get('test_id')
            question_list = (data.get('question_id')).strip("][").split(",")
            test = Test.objects.get(id=test_id)
            questions = test.questions.all()
            if len(question_list) == len(questions):
                if TestQuestionSequess.objects.filter(test=test).first():
                    for i, question_id in enumerate(question_list):
                        question = Question.objects.get(id=question_id)
                        test_question, created = TestQuestionSequess.objects.get_or_create(
                            question=question, test=test)
                        test_question.order = i
                        test_question.save()
                else:
                    for i, question_id in enumerate(question_list):
                        question = Question.objects.get(id=question_id)
                        test_question = TestQuestionSequess.objects.create(
                            question=question, test=test, order=i)
                        test_question.order = i
                        test_question.save()

                context = {'status': True, 'message': 'Success'}
            else:
                context = {'status': False, 'message': 'Failed'}

        except Exception as e:
            context = {'status': False, 'response': str(e)}

        return Response(context)

class TeacherTerminateLiveVideos(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            native_video_set = set()
            native_live_videos = set(nvideo for nvideo in NativeLiveVideo.objects.filter(
                teacher=me.profile, live=True))
            native_video_set.update(native_live_videos)

            if native_video_set:
                for nvl in native_video_set:
                    nvl.live = False
                    nvl.save()

            google_meet_set = set()
            google_meet = set(gvideo for gvideo in GoogleMeetLive.objects.filter(
                teacher=me.profile, live=True))
            google_meet_set.update(google_meet)

            if google_meet_set:
                for gml in google_meet_set:
                    gml.live = False
                    gml.save()

            context = {'status': True,
                       'message': 'Successfully off live videos', }
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class StudentUpcomingTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        my_batches = me.profile.batches.all()
        if me.profile.accessTests == False:
            context = {'tests': ['no test']}
            return Response(context)
        else:
            if me.institute.listReversed:
                tests = Test.objects.select_related('createdBy').prefetch_related('batches', 'subjects', 'chapters', 'questions').filter(Q(batches__in=my_batches) & Q(
                    Q(testStartDateTime=None) | Q(testStartDateTime__gt=timezone.now()))).distinct().order_by('-id')
            else:
                tests = Test.objects.select_related('createdBy').prefetch_related('batches', 'subjects', 'chapters', 'questions').filter(Q(batches__in=my_batches) & Q(
                    Q(testStartDateTime=None) | Q(testStartDateTime__gt=timezone.now()))).distinct().order_by('id')

            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_tests = stud_pack_helper.get_all_brought_tests()

            upcoming_tests = []
            for test in tests:
                if test.publish == True:
                    try:
                        subjects = test.subjects.all()
                        chapters = test.chapters.all()
                        subject_list = []
                        chapter_list = []
                        for subject in subjects:
                            subject_dict = {
                                'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                        for chapter in chapters:
                            chapter_dict = {
                                'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                            chapter_list.append(chapter_dict)
                        teacher = test.createdBy
                        bought = False
                        if test.id in bought_tests:
                            bought = True
                        if test.locked == False:
                            bought = True
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        batches = test.batches.all()
                        batches_list = []
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                        numberQuestions = test.questions.all().count()
                        test_dict = {
                            'id': test.id,
                            'name': test.name,
                            'totalMarks': test.totalMarks,
                            'published': test.published,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'createdBy': teacher_dict,
                            'time': test.time,
                            'testStartDateTime': test.testStartDateTime,
                            'testEndDateTime': test.testEndDateTime,
                            'locked': test.locked,
                            'batches': batches_list,
                            'numberQuestions': numberQuestions,
                            'bought': bought,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                        upcoming_tests.append(test_dict)
                    except Exception as e:
                        print(str(e))
            context = {'upcoming_tests': upcoming_tests}
            return Response(context)

class TeacherUploadVideoThroughExc(APIView):
    def post(self, request):
        try:
            me = Teach(self.request.user)
            data = request.data
            subject_id = data['subject_id']
            chapter_code = data['chapter_code']
            batches = data['batchList']
            batches_list = batches
            try:
                title = data['title']
                publish_status = data['publishStatus']
                url = data['url']
                try:
                    subject = Subject.objects.get(id=subject_id)
                    chapter = Chapter.objects.get(
                        subject=subject, code=chapter_code)
                    upload_video = Video()
                    upload_video.title = title
                    upload_video.subject = subject
                    upload_video.chapter = chapter
                    upload_video.urlLink = url
                    upload_video.publish = publish_status


                    upload_video.save()
                    upload_video.teacher.add(me.profile)
                    upload_video.save()

                    for bat in batches_list:
                        batch = Batch.objects.get(id=int(bat))
                        upload_video.batches.add(batch)
                        upload_video.save()
                        videoOrder = VideoOrderBatchWise()  # creating the orderbatchwise object
                        videoOrder.batch = batch
                        videoOrder.order = 0
                        videoOrder.video = upload_video
                        videoOrder.save()

                    context = {'status': 'success', 'message': 'Successfully Uploaded'}
                except Exception as e:
                    context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            except:
                try:
                    subject = Subject.objects.get(id=subject_id)
                    if me.profile not in subject.teachersubject.all():
                        context = {'status': 'Failed','message': 'Subject does not belongs to Teacher'}
                        return Response(context)

                    chapter = Chapter.objects.get(subject=subject, code=chapter_code)
                    
                    for bat in batches_list:
                        batch = Batch.objects.get(id=int(bat))
                        if me.profile not in batch.teacherbatch.all():
                            context = {'status': 'Failed', 'message': 'Batch does not belongs to teacher'}
                            return Response(context)

                    context = {'status': 'Success', 'message': 'All Details are Correct'}
                    return Response(context)

                except Exception as e:
                    context = {'status': 'Failed', 'message': str(e)}
                    return Response(context)

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class StudentAllTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        try:
            batches = me.profile.batches.all()
            if me.institute.listReversed:
                order_by = '-id'
            else:
                order_by = 'id'
                
            tests = Test.objects.select_related('createdBy','contest_category').prefetch_related('batches', 'subjects', 'chapters', 'questions', 'marks_test').filter(Q(batches__in=batches) & Q(
                Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now()))).distinct().order_by(order_by)

            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests = student_test_helper.taken_test()
            
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            student_brought_tests = student_brought_packages.get_all_brought_tests()

            tests_list = []
            for test in tests:
                if test.publish == True:
                    try:
                        max_participants = test.max_participants or 0  # Use default value of 0 if None
                        students_joined = StudentTestAttempt.objects.filter(test=test).count()
                        remaining_participants = max(0, max_participants - students_joined)  # Prevent negative participants
                    except StudentTestAttempt.DoesNotExist:
                        students_joined = 0
                        remaining_participants = test.max_participants or 0
                        
                    if test.max_participants == 0:
                        joined_progress = 0
                    else:
                        joined_progress = round(((students_joined / test.max_participants) * 100), 2)
                        
                    subject_list = []
                    try:
                        subjects = test.subjects.all()
                        for subject in subjects:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                    except:
                        pass
                    
                    chapter_list = []
                    try:
                        chapters = test.chapters.all()
                        for chapter in chapters:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                            chapter_list.append(chapter_dict)
                    except:
                        pass
                    
                    batches_list = []
                    try:
                        batches = test.batches.all()
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                    except:
                        pass
                        
                    try:
                        teacher = test.createdBy
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    except:
                        teacher_dict = {'id':None,'name':None}
                    
                    bought = False

                    if test in student_brought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    numberQuestions = test.questions.all().count()

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test.id in taken_tests:
                        first_attempt = False
                    else:
                        first_attempt = True
                        
                    now = timezone.now()
                    if test.testEndDateTime and test.testEndDateTime > now:
                        is_sechduled = True
                    else:
                        is_sechduled = False 
                        
                    max_prize_level = PrizeLevel.objects.filter(test=test).order_by('-prize_coins').first()
                    if max_prize_level:
                        max_prize_data = {
                            "min_rank": max_prize_level.min_rank,
                            "max_rank": max_prize_level.max_rank,
                            "prize_coins": max_prize_level.prize_coins,
                        }
                    else:
                        max_prize_data = {
                            "min_rank": 0,
                            "max_rank": 0,
                            "prize_coins": 0,
                        }
                        
                    prize_pool = test.total_prizes()
                        
                    try:
                        student_report = test.marks_test.filter(student=me.profile).last()
                        mark_id = student_report.id
                    except:
                        mark_id = None

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.filter(student=me.profile).last()
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'mark_id':mark_id,
                                    'total_Attempts': student_last_report.attempt_count,
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': bought, 
                                    'repeatTest': test.repeatTest, 
                                    'first_attempt': first_attempt, 
                                    'testTimeOver': testTimeOver, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'is_sechduled': is_sechduled,
                                    'entry_fee': test.entry_fee,
                                    'max_prize_data': max_prize_data,
                                    'max_participants': test.max_participants,
                                    'students_joined': students_joined,
                                    'remaining_participants': remaining_participants,
                                    'prize_pool': prize_pool,
                                    'joined_progress': joined_progress,
                                    }
                                tests_list.append(test_dict)

                        else:
                            test_dict = {
                                'id': test.id,
                                'mark_id':mark_id,
                                'total_Attempts': student_last_report.attempt_count,
                                'name': test.name, 
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'time': test.time, 
                                'locked': test.locked,
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': bought, 
                                'repeatTest': test.repeatTest, 
                                'first_attempt': first_attempt, 
                                'testTimeOver': testTimeOver, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'is_sechduled': is_sechduled,
                                'entry_fee': test.entry_fee,
                                'max_prize_data': max_prize_data,
                                'max_participants': test.max_participants,
                                'students_joined': students_joined,
                                'remaining_participants': remaining_participants,
                                'prize_pool': prize_pool,
                                'joined_progress': joined_progress,
                                }
                            tests_list.append(test_dict)
                            
                    elif first_attempt == False and test.repeatTest == False:
                        pass
                    else:
                        test_dict = {
                            'id': test.id, 
                            'mark_id':mark_id,
                            'total_Attempts': 0, 
                            'name': test.name, 
                            'totalMarks': test.totalMarks, 
                            'published': test.published, 
                            'subjects': subject_list, 
                            'chapters': chapter_list, 
                            'createdBy': teacher_dict, 
                            'time': test.time, 
                            'locked': test.locked,
                            'batches': batches_list, 
                            'numberQuestions': numberQuestions, 
                            'bought': bought, 
                            'repeatTest': test.repeatTest, 
                            'first_attempt': first_attempt, 
                            'testTimeOver': testTimeOver, 
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'is_sechduled': is_sechduled,
                            'entry_fee': test.entry_fee,
                            'max_prize_data': max_prize_data,
                            'max_participants': test.max_participants,
                            'students_joined': students_joined,
                            'remaining_participants': remaining_participants,
                            'prize_pool': prize_pool,
                            'joined_progress': joined_progress,
                            }
                        tests_list.append(test_dict)
                        
            context = {'status':True, 'tests': tests_list}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)

class StudentGetAllFreeFileTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        if me.institute.listReversed:
            order_id = '-id'
        else:
            order_id = 'id'

        try:
            outer_batch = Batch.objects.filter(institute = me.profile.institute).first()
            fileTests = FileTest.objects.filter( Q(publish=True) & Q(batches=outer_batch) & (Q(fileTestStartDateTime__isnull=True) | Q(fileTestStartDateTime__lte=timezone.now()))).select_related('subject', 'chapter').distinct().order_by(order_id)
            
            student_helper = StudentPackageHelper(me.profile)
            taken_tests = student_helper.taken_file_test()
                
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_tests = bought_packages.get_all_brought_fileTests()

            tests_list = []
            for test in fileTests:
                bought = False
                if test in bought_tests:
                    bought = True

                if test.locked == False:
                    bought = True
                    
                try:
                    subject = test.subject.name
                except:
                    subject = None

                try:
                    chapter = test.chapter.name
                except:
                    chapter = None

                if test.fileTestEndDateTime:
                    if test.fileTestEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                if test in taken_tests:
                    first_attempt = False
                else:
                    first_attempt = True

                if first_attempt == False and test.repeatTest == True:
                    student_last_report = test.marks_filetest.get(student=me.profile)
                    if test.test_count != None:
                        if student_last_report.attempt_count < test.test_count:
                            test_dict = {
                                'id': test.id, 
                                'name': test.title, 
                                'totalMarks': test.totalMarks, 
                                'questionFile': test.questionFile, 
                                'solutionsFile': test.solutionsFile, 
                                'subjects': subject, 
                                'chapters': chapter,
                                'testTime': test.testTime, 
                                'locked': test.locked, 
                                'numberQuestions': test.totalQuestion, 
                                'first_attempt': first_attempt, 
                                'negativeMarks': test.negativeMarks, 
                                'bought': bought,
                                'testTimeOver': testTimeOver
                                }
                            tests_list.append(test_dict)
                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.title, 
                            'totalMarks': test.totalMarks, 
                            'questionFile': test.questionFile, 
                            'solutionsFile': test.solutionsFile, 
                            'subjects': subject, 
                            'chapters': chapter,
                            'testTime': test.testTime, 
                            'locked': test.locked, 
                            'numberQuestions': test.totalQuestion, 
                            'first_attempt': first_attempt, 
                            'negativeMarks': test.negativeMarks, 
                            'bought': bought,
                            'testTimeOver': testTimeOver
                            }
                        tests_list.append(test_dict)

                elif first_attempt == False and test.repeatTest == False:
                    pass
                else:
                    test_dict = {
                        'id': test.id, 
                        'name': test.title, 
                        'totalMarks': test.totalMarks, 
                        'questionFile': test.questionFile, 
                        'solutionsFile': test.solutionsFile, 
                        'subjects': subject, 
                        'chapters': chapter,
                        'testTime': test.testTime, 
                        'locked': test.locked, 
                        'numberQuestions': test.totalQuestion, 
                        'first_attempt': first_attempt, 
                        'negativeMarks': test.negativeMarks, 
                        'bought': bought,
                        'testTimeOver': testTimeOver
                        }
                    tests_list.append(test_dict)

            context = {'tests': tests_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class StudentGetAllFileTests(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        if me.institute.listReversed:
            order_id = '-id'
        else:
            order_id = 'id'

        try:
            my_batches = me.profile.batches.all()
            fileTests = FileTest.objects.filter( Q(publish=True) & Q(batches__in=my_batches) & (Q(fileTestStartDateTime__isnull=True) | Q(fileTestStartDateTime__lte=timezone.now()))).select_related('subject', 'chapter').distinct().order_by(order_id)
            
            student_helper = StudentPackageHelper(me.profile)
            taken_tests = student_helper.taken_file_test()
                
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_tests = bought_packages.get_all_brought_fileTests()

            tests_list = []
            for test in fileTests:
                bought = False
                if test in bought_tests:
                    bought = True

                if test.locked == False:
                    bought = True
                    
                try:
                    subject = test.subject.name
                except:
                    subject = None

                try:
                    chapter = test.chapter.name
                except:
                    chapter = None

                if test.fileTestEndDateTime:
                    if test.fileTestEndDateTime >= timezone.now():
                        testTimeOver = False
                    else:
                        testTimeOver = True
                else:
                    testTimeOver = False

                if test in taken_tests:
                    first_attempt = False
                else:
                    first_attempt = True

                if first_attempt == False and test.repeatTest == True:
                    student_last_report = test.marks_filetest.get(student=me.profile)
                    if test.test_count != None:
                        if student_last_report.attempt_count < test.test_count:
                            test_dict = {
                                'id': test.id, 
                                'name': test.title, 
                                'totalMarks': test.totalMarks, 
                                'questionFile': test.questionFile, 
                                'solutionsFile': test.solutionsFile, 
                                'subjects': subject, 
                                'chapters': chapter,
                                'testTime': test.testTime, 
                                'locked': test.locked, 
                                'numberQuestions': test.totalQuestion, 
                                'first_attempt': first_attempt, 
                                'negativeMarks': test.negativeMarks, 
                                'bought': bought,
                                'testTimeOver': testTimeOver
                                }
                            tests_list.append(test_dict)
                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.title, 
                            'totalMarks': test.totalMarks, 
                            'questionFile': test.questionFile, 
                            'solutionsFile': test.solutionsFile, 
                            'subjects': subject, 
                            'chapters': chapter,
                            'testTime': test.testTime, 
                            'locked': test.locked, 
                            'numberQuestions': test.totalQuestion, 
                            'first_attempt': first_attempt, 
                            'negativeMarks': test.negativeMarks, 
                            'bought': bought,
                            'testTimeOver': testTimeOver
                            }
                        tests_list.append(test_dict)

                elif first_attempt == False and test.repeatTest == False:
                    pass
                else:
                    test_dict = {
                        'id': test.id, 
                        'name': test.title, 
                        'totalMarks': test.totalMarks, 
                        'questionFile': test.questionFile, 
                        'solutionsFile': test.solutionsFile, 
                        'subjects': subject, 
                        'chapters': chapter,
                        'testTime': test.testTime, 
                        'locked': test.locked, 
                        'numberQuestions': test.totalQuestion, 
                        'first_attempt': first_attempt, 
                        'negativeMarks': test.negativeMarks, 
                        'bought': bought,
                        'testTimeOver': testTimeOver
                        }
                    tests_list.append(test_dict)

            context = {'tests': tests_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class EvaluateFileTest(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
            data = request.data
            test_id = data['test_id']
            studentAnswers = data['answers']
            totalTime = data['totalTime']
            test = FileTest.objects.get(id=test_id)
            
            try:
                testMarks = StudentFileTestMarks.objects.get(student=me.profile, fileTest=test)
                attemptCount = testMarks.attempt_count+1
                testMarks.delete()
            except:
                attemptCount = 1

            testMarks = StudentFileTestMarks()
            testMarks.student = me.profile
            testMarks.fileTest = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount

            perQuestionMark = test.totalMarks / test.totalQuestion
            correctAnswers = test.answers
            question_marks = test.question_marks
            
            if test.negativeMarks:
                negativeMarks = test.negativeMarks
            else:
                negativeMarks = 0

            studentAnswers = json.loads(studentAnswers)
            answers_dict = []
            marks = 0
            for key, value in correctAnswers.items():
                studentQuestionWiseAnswer = studentAnswers[key]
                if studentQuestionWiseAnswer:
                    if value == studentQuestionWiseAnswer:
                        if question_marks is not None and key in question_marks:
                            questionMarks = question_marks[key]
                            marks += questionMarks
                        else:
                            marks += perQuestionMark
                            
                        dict = {'question': key, 'selectedAnswer': studentQuestionWiseAnswer,'result': 'Right', 'correctAnswer': value}
                        
                        answers_dict.append(dict)
                    else:
                        dict = {'question': key, 'selectedAnswer': studentQuestionWiseAnswer,'result': 'Wrong', 'correctAnswer': value}
                        answers_dict.append(dict)
                        marks -= negativeMarks

                else:
                    dict = {'question': key, 'result': 'Skipped', 'correctAnswer': value}
                    answers_dict.append(dict)

            testMarks.answers = answers_dict
            testMarks.marks = marks
            testMarks.save()
            context = {'status': 'success', 'performance': testMarks.id, 'solutionsFile': test.solutionsFile}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class DownloadStudentTestPerformance(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            marks_id = data['marks_id']
            studentMarks = StudentMarks.objects.get(id=marks_id)
            attemptedQuestions = AttemptedQuestion.objects.select_related("question").filter(marks_questions=studentMarks)
            attempted_questions_list = []

            for attepmt_question in attemptedQuestions:
                optionId_list = attepmt_question.optionAttempted.values_list('id', flat=True)
                question = attepmt_question.question

                options_list = []
                options = Option.objects.filter(question=question)
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True

                    optionPicture = option.picture

                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    if option.explanationText:
                        explanationText = option.explanationText
                    else:
                        explanationText = option.explanation

                    if not explanationText:
                        explanationText = None

                    if option.text:
                        option_text = option.text
                    else:
                        option_text = None

                    option_dict = {
                        'text': option_text,
                        'picture': optionPicture,
                        'explanationText': explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct,
                        'selected': selected,
                        'explanationVideo': option.explanationVideo}
                    options_list.append(option_dict)

                if question.text:
                    question_text = question.text
                else:
                    question_text = None

                if question.dynamicText:
                    question_dynamic_text = question.dynamicText
                else:
                    question_dynamic_text = None

                if question.picture:
                    question_picture = question.picture
                else:
                    question_picture = None

                question_dict = {
                    'text': question_text,
                    'dynamicText': question_dynamic_text,
                    'question_picture': question_picture,
                    'attempted': attepmt_question.attempted,
                    'right': attepmt_question.right,
                    'time_in_sec': attepmt_question.time,
                    'options': options_list,
                }

                attempted_questions_list.append(question_dict)

            test_marks_dict = {
                'id': studentMarks.id,
                'test_total_marks': studentMarks.test.totalMarks,
                'test_passing_marks': studentMarks.test.passing_marks,
                'time': studentMarks.time,
                'attemptedTime': studentMarks.attemptTime,
                'totalRightQuestions': studentMarks.totalRightQuestions,
                'totalWrongQuestions': studentMarks.totalWrongQuestions,
                'totalNotAttemptedQuestions': studentMarks.totalNotAttemptedQuestions,
                'percentage': studentMarks.percentage,
                'result': studentMarks.result,
                'attempted_questions_list': attempted_questions_list,
            }

            from content.api.pdf_generator.pdf_generator import PdfGenerate
            pdf = PdfGenerate(test_marks_dict)
            pdf = pdf.mcq_test_performance_pdf()
            response = HttpResponse(content_type='application/pdf')
            response['Content-Disposition'] = 'attachment; filename="test_marks.pdf"'
            response.write(pdf)
            return response
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class TeacherGetAllBuySubjectsList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        if me.profile.mainTeacher:
            subjects = Subject.objects.filter(teachersubject__institute=me.profile.institute).distinct()
        else:
            subjects = me.profile.subjects.all()

        subjects_list = []
        ids_list = []
        for subject in subjects:
            if subject.subject_brought:
                if subject.language:
                    language_dict = {
                        'id': subject.language.id,
                        'language': subject.language.language}
                else:
                    language_dict = {}

                subject_dict = {
                    'id': subject.id,
                    'name': subject.name, 
                    'icon': subject.icon, 
                    'language': language_dict,
                    'isbuy': subject.isbuy,
                    'price': subject.price
                    }

                subjects_list.append(subject_dict)
        context = {'subjects': subjects_list}
        return Response(context)

class ChangeChildPackageName(APIView):
    def post(self, request):
        data = request.data
        package_dict = {}
        if data.get('package_id'):
            package_dict['package_id']= data['package_id']
        if data.get('title'):
            package_dict['title']=data['title']
        if data.get('price'):
            package_dict['price'] = data['price']
        if data.get('details'):
            package_dict['details'] = data['details']
        if data.get('basePrice'):
            package_dict['basePrice'] = data['basePrice']
        if data.get('thumbnail'):
            package_dict['thumbnail'] = data['thumbnail']
        if data.get('duration'):
            package_dict['duration'] = data['duration']
        
        change_child_package_name.delay(package_dict)

        return Response("success")
    
class StudentChapterWiseFileTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        my_batches = me.profile.batches.all()
        data = request.data
        chapter_id = data['chapter_id']

        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)

        if me.institute.listReversed:
            fileTests = FileTest.objects.filter(batches__in=my_batches,chapter=chapter_id, publish=True).distinct().order_by('-id')
        else:
            fileTests = FileTest.objects.filter(batches__in=my_batches, chapter=chapter_id,publish=True).distinct().order_by('id')

        taken_tests = set(student_marks.fileTest for student_marks in StudentFileTestMarks.objects.select_related(
            'fileTest').filter(student=me.profile))

        stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
        bought_file_tests = stud_pack_helper.get_all_brought_fileTests()


        tests_list = []
        for test in fileTests:
            try:
                bought = False
                if test.id in bought_file_tests:
                    bought = True

                if test.locked == False:
                    bought = True

                try:
                    subject = test.subject.name
                except:
                    subject = None

                try:
                    chapter = test.chapter.name
                except:
                    chapter = None

                if test in taken_tests:
                    first_attempt = False
                else:
                    first_attempt = True
                
                try:
                    student_last_report = test.marks_filetest.filter(student=me.profile).last()
                    attempt_count = student_last_report.attempt_count if student_last_report else 0
                    test_count = test.test_count or 0 
                    remaining_attempt = max(test_count - attempt_count, 0)  
                except:
                    remaining_attempt = None

                if first_attempt == False and test.repeatTest == True:
                    student_last_report = test.marks_filetest.get(student=me.profile)
                    if test.test_count != None:
                        if student_last_report.attempt_count < test.test_count:
                            test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 
                                         'solutionsFile': test.solutionsFile, 'subjects': subject, 'chapters': chapter,
                                         'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 
                                         'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought,
                                         'test_count':test.test_count,'remaining_attempt':remaining_attempt}
                            tests_list.append(test_dict)
                    else:
                        test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 
                                     'solutionsFile': test.solutionsFile, 'subjects': subject, 'chapters': chapter,
                                     'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 
                                     'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought,
                                     'test_count':test.test_count,'remaining_attempt':remaining_attempt}
                        tests_list.append(test_dict)

                elif first_attempt == False and test.repeatTest == False:
                    pass
                else:
                    test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 
                                 'solutionsFile': test.solutionsFile, 'subjects': subject, 'chapters': chapter,
                                 'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 
                                 'first_attempt': first_attempt, 'negativeMarks': test.negativeMarks, 'bought': bought,
                                 'test_count':test.test_count,'remaining_attempt':remaining_attempt}
                    tests_list.append(test_dict)
                    
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)

        context = {'tests': tests_list}
        return Response(context)



                   

                    

    

class TeacherCreateQuizeTest(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        questions = data['questions']
        batches = data['batches']
        time = data['time']

        try:
            max_marks = data['max_marks']
        except:
            max_marks = None

        try:
            negative_marks = data['negative_marks']
        except:
            negative_marks = None

        try:
            title = data['title']
        except:
            title = None

        try:
            passing_marks = data['passing_marks']
        except:
            passing_marks = max_marks/3

        try:
            publishStatus = data['publishStatus']
        except:
            publishStatus = None

        try:
            quizStartDateTime = data['quizStartDateTime']
        except:
            quizStartDateTime = None

        try:
            quizEndDateTime = data['quizEndDateTime']
        except:
            quizEndDateTime = None

        try:
            studentWillAttemptQuestions = data['studentWillAttemptQuestions']
        except:
            studentWillAttemptQuestions = None

        try:
            quizInstructions = data['quizInstructions']
        except:
            quizInstructions = None

        try:
            is_answers_showing = data['is_answers_showing']
        except:
            is_answers_showing = None

        try:
            questions_list = questions.strip('][').split(',')
            batches_list = batches.strip('][').split(',')

            quiz = Quiz()
            if title != None:
                quiz.name = title
            else:
                quiz.name = me.profile.name + ' ' + str(timezone.now())

            if publishStatus == 'false':
                quiz.publish = False

            quiz.published = timezone.now()
            quiz.createdBy = me.profile
            quiz.time = time
            quiz.studentWillAttemptQuestions = studentWillAttemptQuestions
            quiz.totalMarks = 0
            quiz.quizInstructions = quizInstructions
            

            if quizStartDateTime:
                quiz.quizStartDateTime = quizStartDateTime
            else:
                quiz.quizStartDateTime = timezone.now()

            if quizEndDateTime:
                quiz.quizEndDateTime = quizEndDateTime

            if is_answers_showing == 'false':
                quiz.is_answers_showing = False
            quiz.save()

            total_marks = 0.0
            for question_id in questions_list:
                question = Question.objects.get(id=question_id)
                quiz.questions.add(question)

                if max_marks != '0.0':
                    question.marks = max_marks

                if negative_marks:
                    question.negativeMarks = negative_marks

                total_marks += float(question.marks)
                subject = question.subject
                chapter = question.chapter
                quiz.subjects.add(subject)
                quiz.chapters.add(chapter)
                question.save()

                topics = question.topic.all()
                subTopics = question.subTopic.all()
                quiz.topics.add(*topics)
                quiz.subTopics.add(*subTopics)
                for batch_id in batches_list:
                    batch = Batch.objects.get(id=batch_id)
                    try:
                        timesUsed = TimesUsed.objects.get(
                            institute=me.profile.institue, question=question, batch=batch)
                        timesUsed.used += 1
                        timesUsed.save()
                    except:
                        timesUsed = TimesUsed()
                        timesUsed.question = question
                        timesUsed.institute = me.profile.institute
                        timesUsed.batch = batch
                        timesUsed.used = 1
                        timesUsed.save()

            quiz.totalMarks = total_marks
            quiz.passing_marks = passing_marks
            quiz.save()
            for batch_id in batches_list:
                batch = Batch.objects.get(id=batch_id)
                students = Student.objects.filter(batches=batch)
                quiz.batches.add(batch)
                quiz.students.add(*students)
                quiz.save()
            context = {'status': 'Success','message': 'Quiz Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
    
class TeacherCreateQuiz(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        questions = data['questions']
        batches = data['batches']
        time = data['time']
        try:
            max_marks = data['max_marks']
        except:
            max_marks = None
        try:
            negative_marks = data['negative_marks']
        except:
            negative_marks = None
        try:
            title = data['title']
        except:
            title = None
        try:
            passing_marks = data['passing_marks']
        except:
            passing_marks = max_marks/3
        try:
            publishStatus = data['publishStatus']
        except:
            publishStatus = None
        try:
            quizStartDateTime = data['quizStartDateTime']
        except:
            quizStartDateTime = None

        try:
            quizEndDateTime = data['quizEndDateTime']
        except:
            quizEndDateTime = None

        try:
            studentWillAttemptQuestions = data['studentWillAttemptQuestions']
        except:
            studentWillAttemptQuestions = None
        try:
            quizInstructions = data['quizInstructions']
        except:
            quizInstructions = None

        try:
            is_answers_showing = data['is_answers_showing']
        except:
            is_answers_showing = None

        try:
            questions_list = questions.strip('][').split(',')
            batches_list = batches.strip('][').split(',')

            quiz = Quiz()
            if title != None:
                quiz.name = title
            else:
                quiz.name = me.profile.name + ' ' + str(timezone.now())

            if publishStatus == 'false':
                quiz.publish = False

            quiz.published = timezone.now()
            quiz.createdBy = me.profile
            quiz.time = time
            quiz.studentWillAttemptQuestions = studentWillAttemptQuestions
            quiz.totalMarks = 0
            quiz.quizInstructions = quizInstructions

            if quizStartDateTime:
                quiz.quizStartDateTime = quizStartDateTime
            else:
                quiz.quizStartDateTime = timezone.now()

            if quizEndDateTime:
                quiz.quizEndDateTime = quizEndDateTime

            if is_answers_showing == 'false':
                quiz.is_answers_showing = False

            quiz.save()

            total_marks = 0.0
            for question_id in questions_list:
                question = Question.objects.get(id=question_id)
                quiz.questions.add(question)

                if max_marks != '0.0':
                    question.marks = max_marks

                if negative_marks:
                    question.negativeMarks = negative_marks

                total_marks += float(question.marks)
                subject = question.subject
                chapter = question.chapter
                quiz.subjects.add(subject)
                quiz.chapters.add(chapter)
                question.save()

                topics = question.topic.all()
                subTopics = question.subTopic.all()
                quiz.topics.add(*topics)
                quiz.subTopics.add(*subTopics)

                for batch_id in batches_list:
                    batch = Batch.objects.get(id=batch_id)
                    try:
                        timesUsed = TimesUsed.objects.get(
                            institute=me.profile.institue, question=question, batch=batch)
                        timesUsed.used += 1
                        timesUsed.save()
                    except:
                        timesUsed = TimesUsed()
                        timesUsed.question = question
                        timesUsed.institute = me.profile.institute
                        timesUsed.batch = batch
                        timesUsed.used = 1
                        timesUsed.save()

            quiz.totalMarks = total_marks
            quiz.passing_marks = passing_marks
            quiz.save()
            for batch_id in batches_list:
                batch = Batch.objects.get(id=batch_id)
                students = Student.objects.filter(batches=batch)
                quiz.batches.add(batch)
                quiz.students.add(*students)
                quiz.save()
            context = {'status': 'Success','message': 'Quiz Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
    
class StudentGetQuiz(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        quiz_id = data.get('quiz_id')
        quiz = Quiz.objects.get(id=quiz_id)
        questions = quiz.questions.select_related('subject','chapter').all()
        total_marks = 0
        questions_list = []
        Bookmark_Object = CheckBookmark(me.profile)
        for question in questions:
            subject = question.subject
            if subject == None:
                subject_dict = {'id': 0, 'name': 'extra'}
            else:
                subject_dict = {'id': subject.id, 'name': subject.name}
            chapter = question.chapter

            if chapter == None:
                chapter_dict = {'id': 0, 'name': 'extra', 'code': '1.1'}
            else:
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
            try:
                Bookmark = Bookmark_Object.isQuestionBookmark(question.id)
            except:
                Bookmark = False

            options = Option.objects.filter(question=question)
            options_list = []
            for option in options:
                option_dict = {
                    'id': option.id,
                    'text': option.text,
                    'picture': option.picture,
                    'explanationText': option.explanationText,
                    'explanationPicture': option.explanationPicture,
                    'correct': option.correct}
                options_list.append(option_dict)

            question_dict = {
                'id': question.id,
                'text': question.text,
                'dynamicText': question.dynamicText,
                'picture': question.picture,
                'subject': subject_dict,
                'chapter': chapter_dict,
                'marks': question.marks,
                'negativeMarks': question.negativeMarks,
                'options': options_list,
                'oneWordQuestion': question.oneWordQuestion,
                'Bookmark': False}
            total_marks += question.marks
            questions_list.append(question_dict)

        subjects_list = []
        chapters_list = []
        try:
            subjects = quiz.subjects.all()
            for sub in subjects:
                subject_dict = {'id': sub.id, 'name': sub.name}
                subjects_list.append(subject_dict)

            chapters = quiz.chapters.all()
            for chapter in chapters:
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                chapters_list.append(chapter_dict)
        except:
            pass

        if total_marks != quiz.totalMarks:
            quiz.totalMarks = total_marks
            quiz.save()

        quiz_dict = {
            'id': quiz.id,
            'name': quiz.name,
            'questions': questions_list,
            'totalMarks': quiz.totalMarks,
            'published': quiz.published,
            'subjects': subjects_list,
            'chapters': chapters_list,
            'time': quiz.time,
            'studentWillAttemptQuestions': quiz.studentWillAttemptQuestions,
            'quizInstructions': quiz.quizInstructions,
            'is_answers_showing': quiz.is_answers_showing}

        context = {'quiz': quiz_dict}
        return Response(context)

class DeleteContentData(APIView):
    def get(self, request):
        institute_code = 'dthcomputer'
        try:
            teacher = Teacher.objects.get(institute__code=institute_code, mainTeacher = True)

            try:
                videos = Video.objects.filter(teacher=teacher).order_by('-id')
                for video in videos:
                    video.delete()
            except Exception  as e:
                print(str(e))

            try:
                notes = Note.objects.filter(teacher=teacher).order_by('-id')
                for  note in notes:
                    note.delete()
            except Exception as e:
                print(str(e))

            try:
                tests = Test.objects.filter(teacher=teacher).order_by('-id')
                for  test in tests:
                    test.delete()
            except Exception as e:
                pass

            context = {'status': True,"message":"Data Deleted"}

        except Exception as e:
            context = {'status': False,"message":str(e)}
        
        return Response(context)






                    


        
                    








                



            


class EvaluateQuiz(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
            data = request.data
            quiz_id = data['quiz_id']
            answers = data['answers']
            totalTime = data['totalTime']
            quiz = Quiz.objects.get(id=quiz_id)
            try:
                quizMarks = StudentQuizMarks.objects.get(student=me.profile, quiz=quiz)
                attemptCount = quizMarks.attempt_count+1
                quizMarks.delete()
            except:
                attemptCount = 1

            quizMarks = StudentQuizMarks()
            quizMarks.student = me.profile
            quizMarks.quiz = quiz
            quizMarks.time = totalTime
            quizMarks.attempt_count = attemptCount
            quizMarks.save()

            total_marks = 0
            totalPositiveMarks = 0.0
            totalNegativeMarks = 0.0
            totalRightQuestions = 0
            totalWrongQuestions = 0
            percentage = 0.0

            for question_data in answers:
                question_id = question_data[0]
                selected_option = question_data[1]

                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student =me.profile
                attemptedQuestion.question = Question.objects.get(id=question_id)
                attemptedQuestion.attempted = True

                if selected_option is not None and selected_option != -1:
                    option = Option.objects.get(id=selected_option)
                    attemptedQuestion.save()
                    attemptedQuestion.optionAttempted.add(option)
                    if option.correct:
                        attemptedQuestion.right = True
                        totalPositiveMarks += attemptedQuestion.question.marks
                        total_marks += attemptedQuestion.question.marks
                        totalRightQuestions += 1
                    else:
                        attemptedQuestion.right = False
                        total_marks -= attemptedQuestion.question.negativeMarks
                        totalNegativeMarks += attemptedQuestion.question.negativeMarks
                        totalWrongQuestions += 1
                else:
                    attemptedQuestion.attempted = False
                    attemptedQuestion.right = None

                attemptedQuestion.save()
                quizMarks.questions.add(attemptedQuestion)

            try:
                pass_marks = quizMarks.quiz.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = quizMarks.quiz.totalMarks
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = quizMarks.quiz.questions.all().count()
                totalAttemptedQuestions = quizMarks.questions.filter(
                    attempted=True).count()
                totalNotAttemptedQuestions = quizMarks.questions.filter(
                    attempted=False).count()

                quizMarks.totalQuestions = totalQuestions
                quizMarks.totalAttemptedQuestions = totalAttemptedQuestions
                quizMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                quizMarks.totalPositiveMarks = totalPositiveMarks
                quizMarks.totalNegativeMarks = totalNegativeMarks

                quizMarks.totalRightQuestions = totalRightQuestions
                quizMarks.totalWrongQuestions = totalWrongQuestions
                
                quizMarks.result = result
                quizMarks.percentage = percentage
                quizMarks.totalQuizMarks = total_test_marks

                quizMarks.marks = total_marks
                quizMarks.save()
            except:
                pass
           

            quizMarks.marks = total_marks
            quizMarks.save()

            context = {
                'status': 'Success',
                'message': quizMarks.id,
                'obtainedMarks': quizMarks.marks,
                'totalMarks': quiz.totalMarks,
                'attempCount': quizMarks.attempt_count}
            
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)

class StudetQuizPerformance(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentQuizMarks.objects.select_related('quiz').get(id=marks_id)
            total_marks = 0
            attemptedQuestions = studentMarks.questions.select_related('question__subject','question__chapter').prefetch_related('optionAttempted').all()
            attempted_questions_list = []
            right_number = 0
            wrong_number = 0
            skipped_number = 0
            bookmark = CheckBookmark(me.profile)
            for aq in attemptedQuestions:
                question = aq.question
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)

                attempted = aq.attempted
                right = aq.right
                if right == True:
                    total_marks += question.marks
                    right_number += 1

                elif right == False:
                    total_marks -= question.negativeMarks
                    wrong_number += 1

                if aq.attempted == False:
                    skipped_number += 1

                time = aq.time
                
                
                try:
                    subject = question.subject
                    subject_dict = {'id': subject.id, 'name': subject.name}
                    chapter = question.chapter
                    chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                except:
                    chapter_dict = {}
                    subject_dict = {}

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True

                    optionPicture = option.picture

                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    if option.explanationText:
                        explanationText = option.explanationText
                    else:
                        explanationText = option.explanation

                    if not explanationText:
                        explanationText = None

                    option_dict = {
                        'id': option.id,
                        'text': option.text,
                        'picture': optionPicture,
                        'explanationText': explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct,
                        'selected': selected,}
                    options_list.append(option_dict)

                try:
                    question_bookmark = bookmark.isQuestionBookmark(question.id)
                except:
                    question_bookmark = False

                question_dict = {
                    'id': question.id,
                    'text': question.text,
                    'question_bookmark':question_bookmark,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'language': question.language,
                    'source': question.source,
                    'oneWordQuestion': question.oneWordQuestion,
                    'oneWordAnswer': question.oneWordAnswer,
                    'oneWordExplanation': question.oneWordExplanation,
                    'studentOneWordAnswer': aq.studentOneWordAnswer,
                    'options': options_list}

                aq_dict = {
                    'id': aq.id,
                    'question': question_dict,
                    'attempted': attempted,
                    'right': right,
                    }
                attempted_questions_list.append(aq_dict)

            pass_marks = studentMarks.quiz.passing_marks

            if pass_marks:
                if total_marks > pass_marks or total_marks == pass_marks:
                    result = 'pass'
                else:
                    result = 'failed'
            else:
                result = 'undifined'

            test_marks_dict = {
                'id': studentMarks.id,
                'totalMarks': total_marks,
                'time': studentMarks.time,
                'attemptedQuestions': attempted_questions_list,
                'right': right_number,
                'wrong': wrong_number,
                'skipped': skipped_number,
                'result': result
                }

            context = {'status': 'Success', 'performance': test_marks_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

        studentMarks.marks = total_marks
        studentMarks.save()
        return Response(context)

class StudentSubjectwiseFreeVideosOld(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        my_batches = me.profile.batches.all()
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        
        institute = me.institute
        subject_id = data['subject_id']
        
        try:
            subject = Subject.objects.get(id=subject_id)
        except:
            context = {'status': 'Failed', 'message': 'No Subject Found'}
        
        teachers = Teacher.objects.filter(institute=institute)
        videos_list = []
        
        for teacher in teachers:
            for bat in my_batches:
                if me.institute.listReversed:
                    videos = Video.objects.filter(teacher=teacher, subject=subject,locked = False).order_by('-id')
                else:
                    videos = Video.objects.select.filter(teacher=teacher, subject=subject,locked = False).order_by('id')
                    
                for video in videos:
                    batches = video.batches.all()
                    if batches.count() == 0:
                        pass
                    else:
                        for bat in my_batches:
                            for video_bat in batches:
                                if bat.id == video_bat.id:
                                    if video not in videos_list:
                                        videos_list.append(video)

        videos_list = list(unique_everseen(videos_list))
        final_videos_list = []
        bought_videos = []
        bought_packages_list = []
        boughtPackages = StudentPackage.objects.filter(student=me.profile)
        allPackages = Package.objects.filter(teacher__institute=me.profile.institute)
        last_videos_list = []
        for ap in allPackages:
            try:
                videos = ap.videos.all()
                for video in videos:
                    last_videos_list.append(video)
            except Exception as e:
                print(str(e))
                
        for video in videos_list:
            if video not in last_videos_list:
                try:
                    teachers = video.teacher.all()
                    teachers_list = []
                    for teacher in teachers:
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                        teachers_list.append(teacher_dict)
                        
                    try:
                        subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                    except:
                        subject_dict = {'id': None, 'name': 'General'}

                    try:
                        chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                    except:
                        chapter_dict = {'id': None, 'name': 'General', 'code': None}
                        
                    bought = False
                    if video.id in bought_videos:
                        bought = True
                        
                    if video.locked == False:
                        bought = True
                        
                    if video.download_link:
                        download_link = video.download_link
                    else:
                        download_link = ""
                        
                    if video.publish == True:
                        video_dict = {
                            'id': video.id, 
                            'teacher': teachers_list, 
                            'subject': subject_dict, 
                            'chapter': chapter_dict, 
                            'link': video.urlLink, 
                            'download_link': download_link, 
                            'generalVideo': video.generalVideo,
                            'publishDate': video.publishDate, 
                            'title': video.title, 
                            'bought': True, 
                            'lowLink': video.lowlink, 
                            'highLink': video.highlink, 
                            'thumbnail': video.thumbnail
                            }
                        final_videos_list.append(video_dict)
                except Exception as e:
                    print('student all videos {}'.format(str(e)))
                    
        final_video_list = list(unique_everseen(final_videos_list))
        context = {'videos': final_videos_list}
        return Response(context)

class StudentFreeFileTestsPerformance(APIView):
    def get(self, request):
        me = Studs(request.user)
        
        try:
            if me.profile.accessTests == False:
                context = {'status': False, 'data': []}
            else:
                outer_batch = me.profile.batches.first()
                all_test_ids = set(test.id for test in FileTest.objects.filter(batches=outer_batch) if not test.package_filetest.all())
                performance_list = []
                for test_id in all_test_ids:
                    p = StudentFileTestMarks.objects.filter(student=me.profile,fileTest=test_id).order_by('-id').first()
                    if p:
                        dict = {
                            'id': p.id, 
                            'test_id': test_id, 
                            'time': p.time, 
                            'marks': p.marks, 
                            'title': p.fileTest.title,
                            'published': p.fileTest.published,
                            'subject': p.fileTest.subject.name,
                            'chapter': p.fileTest.chapter.name,
                            'totalMarks': p.fileTest.totalMarks,
                            'passing_marks': p.fileTest.passing_marks, 
                            'questionFile': p.fileTest.questionFile,
                            'solutionsFile': p.fileTest.solutionsFile,
                            'answers': p.answers, 
                            'negativeMarks': p.fileTest.negativeMarks
                            }
                        performance_list.append(dict)

            context = {'status':True, 'data':performance_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class TeacherUploadStudentReports(APIView):
    def get(self,request):
        me = Teach(self.request.user)
        data = TeacherUploadStudentReport.objects.all()
        data_list = []
        for i in data:
            data_dict = {
                'id':i.id,
                'title':i.title,
            }
            data_list.append(data_dict)
        return Response(data_list)

    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            title = data.get('title')
            report = data['report']
            student = Student.objects.get(id = student_id)

            sreport = TeacherUploadStudentReport()
            sreport.student = student
            sreport.title = title
            sreport.report = report
            sreport.save()
            context = {'status':True,'message':'Report added successfully'}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)

    def put(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            report_id = data['report_id']
            title = data.get('title')
            report = data['report']
            sreport = TeacherUploadStudentReport.objects.get(id = report_id)
            sreport.title = title
            sreport.report = report
            sreport.save()
            context = {'status':True,'message':'Report updated successfully'}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)

    def delete(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            report_id = data['report_id']
            sreport = TeacherUploadStudentReport.objects.get(id = report_id)
            sreport.delete()
            context = {'status':True,'message':'Report deleted successfully'}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)

class TeacherSeeStudentReports(APIView):
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            data = TeacherUploadStudentReport.objects.filter(student = student_id)
            data_list = []
            for i in data:
                data_dict = {
                    'id':i.id,
                    'title':i.title,
                    'report':i.report,
                }
                data_list.append(data_dict)
                
            context = {'status':True,'data':data_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)
    
class StudentGetReport(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            sreports = TeacherUploadStudentReport.objects.filter(student = me.profile)
            report_list = []
            for sreport in sreports:
                report_dict = {
                    'title':sreport.title,
                    'report': sreport.report,
                    'date': sreport.date
                }
                report_list.append(report_dict)
            context = {'status':True,'data':report_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)

class GetTopicsByChaptersAndPackage2(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            package = Package.objects.get(id = package_id)

            notes = package.notes.filter(chapter=chapter_id).exclude(topic=None)
            notes_list =[]
            for i in notes:
                note_dict = {'id':i.id,'title':i.title,'chapter_id':i.chapter.id,'chapter':i.chapter.name}
                notes_list.append(note_dict)
            
            context = {'notes_list': notes_list}
                
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class GetTopicsByChaptersAndPackagetest(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            topics = []
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            content_type = data.get('content_type')
            package = Package.objects.get(id=package_id)
            
            topic_ids = package.notes.filter(topic__id__isnull=False).values_list('topic__id', flat=True)
            topics = QuestionTopic.objects.filter(id__in=topic_ids, chapters__id=chapter_id).values('id', 'topic')
            topics = pd.DataFrame(topics).drop_duplicates().to_dict('records')

            context = {'topics': topics}
                
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentGetPreviousYearDataChapterWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            institute = me.profile.institute
            teachers = Teacher.objects.filter(institute=institute)
            previousYearsSubject = institute.previousYearsSubjectId
            if previousYearsSubject:
                subject_id = previousYearsSubject
            else:
                subject_id = 6629
        
            notes = Note.objects.filter(subject=subject_id,chapter=chapter_id,teacher__in=teachers).order_by('-id')

            notes_list = []
            for note in notes:
                subject_dict = {'id': note.subject.id, 'name': note.subject.name}
                chapter_dict = {'id': note.chapter.id, 'name': note.chapter.name, 'code': note.chapter.code}

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""

                note_dict = {
                        'id': note.id, 
                        'title': note.title, 
                        'image': note.image, 
                        'publishDate': note.publishDate,
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'url': note_link}
                notes_list.append(note_dict)

            context = {'status':True, 'notes': notes_list}
        
        except Exception as e:
            context = {'status':False, 'message': str(e)}

        return Response(context)

class StudentGetDailyVocabDataChapterWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            institute = me.institute
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=institute)
            electric_english = Institute.objects.get(id=170)
            subject_id2 = 4183

            dailyVocabSubject = institute.dailyVocabSubjectId

            if dailyVocabSubject:
                subject_id = dailyVocabSubject
            else:
                subject_id = 7178
            
            if institute == electric_english:
                notes = Note.objects.filter(subject=subject_id2, chapter=chapter_id, teacher__in=teachers).order_by('-id')
            else:
                notes = Note.objects.filter(subject=subject_id, chapter=chapter_id, teacher__in=teachers).order_by('-id')

            notes_list = []
            for note in notes:
                subject_dict = {'id': note.subject.id, 'name': note.subject.name}
                chapter_dict = {'id': note.chapter.id, 'name': note.chapter.name, 'code': note.chapter.code}

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""

                note_dict = {
                    'id': note.id, 
                    'title': note.title, 
                    'publishDate': note.publishDate,
                    'subject': subject_dict, 
                    'chapter': chapter_dict, 
                    'url': note_link,
                    }
                notes_list.append(note_dict)

            context = {'status':True, 'notes': notes_list}

        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentEbooksDataChapterWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            chapter_id = data['chapter_id']
            institute = me.profile.institute
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=institute)
            ebooksSubject = institute.ebooksSubjectId

            if ebooksSubject:
                subject_id = ebooksSubject
            else:
                subject_id = 1680

            notes = Note.objects.filter(subject=subject_id,chapter=chapter_id,batches__in=batches).order_by('-id')
                
            boughtPackages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = boughtPackages.get_all_brought_notes()
            
            notes_list = []
            for note in notes:
                subject = note.subject
                chapter = note.chapter
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""

                bought = False
                if note in bought_notes:
                    bought = True

                if note.locked == False:
                    bought = True

                if chapter == None:
                    chapter_name = 'none'
                else:
                    chapter_name = chapter.name

                note_dict = {'id': note.id, 'title': note.title, 'image': note.image, 'publishDate': note.publishDate, 
                                'subject': subject.name,'chapter_object': chapter_name, 'url': note_link, 'bought': bought}
                
                if note_dict not in notes_list:
                    notes_list.append(note_dict)

            context = {'status':True, 'notes': notes_list}

        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentChapterWiseNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        
        try:
            institute = me.profile.institute
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=institute)
            chapter_id = data['chapter_id']
            notes = Note.objects.select_related('noteurl_note', 'subject', 'chapter').filter(chapter=chapter_id, teacher__in=teachers, batches__in=batches).order_by('-id')
            boughtPackages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = boughtPackages.get_all_brought_notes()
            Bookmark_Object = CheckBookmark(me.profile)

            notes_list = []
            for note in notes:
                subject = note.subject
                chapter = note.chapter
                try:
                    chapter_name = chapter.name
                except:
                    chapter_name = ''

                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""

                bought = False
                if note.id in bought_notes:
                    bought = True
                    
                if note.locked == False:
                    bought = True

                vision = True
                if note.noteViewsLimite:
                    vision = CheckNoteViewLimite(me.profile, note.id, note.noteViewsLimite)
                
                try:
                    Bookmark = Bookmark_Object.isNoteBookmark(note.id)
                except:
                    Bookmark = False

                note_dict = {
                    'id': note.id, 
                    'title': note.title, 
                    'teacher': teacher.name, 
                    'publishDate': note.publishDate, 
                    'thumbnail': note.thumbnail, 
                    'subject': subject.name,
                    'chapter_object': chapter_name, 
                    'url': note_link, 
                    'bought': bought, 
                    'vision': vision, 
                    'Bookmark': Bookmark
                    }
                notes_list.append(note_dict)

            context = {'status':True, 'notes': notes_list}

        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentGetChapterwisePackageTestUnlock(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            package_id = data['package_id']
            chapter_id = data['chapter_id']
            package = Package.objects.get(id=package_id)
            chapter = Chapter.objects.get(id=chapter_id)
            package_demo_object = PackageDemoContentHelper(package)
            tests = package.tests.prefetch_related('subjects','chapters').filter(chapters = chapter_id).order_by('id')
            test_ids = [test.id for test in tests]
            cleared_tests = []  
            tests_list = []
            for test in tests:
                chapters = test.chapters.all().values_list('id', flat=True)
                if chapter.id in chapters and test.publish == True:
                    test_result = StudentMarks.objects.filter(test = test, student = me.profile).first()
                    
                    if test_result:
                        if test.id not in cleared_tests and test_result.result == 'pass':
                            cleared_tests.append(test.id)

                    if cleared_tests and cleared_tests[-1] == test.id:
                        test_status = "unlocked"
                    else:
                        test_status = "locked" 

                    if cleared_tests:
                        last_test_id = cleared_tests[-1]
                        index_value = test_ids.index(last_test_id)
                        if index_value < len(test_ids) - 1:
                            next_test_id = test_ids[index_value + 1]
                            if test.id == next_test_id:
                                test_status = "unlocked"
                
                    subjects_list = []
                    chapters_list = []
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    numberQuestions = test.questions.all().count()
                    for subject in subjects:
                        subjects_list.append(subject.name)
                    for chapter in chapters:
                        chapters_list.append(chapter.name)
                    isDemo = package_demo_object.check_test_demo(test)
                
                    test_dict = {
                        'test_status': test_status,
                        'id': test.id, 
                        'name': test.name, 
                        'subject': subjects_list, 
                        'chapter': chapters_list, 
                        'time': test.time,
                        'totalMarks': test.totalMarks, 
                        'publisehd': test.published, 
                        'numberQuestions': numberQuestions, 
                        'demo': isDemo
                        }
                    tests_list.append(test_dict)

            context = {'tests': tests_list}
        except Exception as e:
            context = {'message': str(e)}
        
        return Response(context)

class StudentGetBoughtPackagesAllVideos(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)

        final_videos_list = []
        student_brought_packages = StudentBroughtPackagesHelper(me.profile)
        student_brought_videos = student_brought_packages.get_all_brought_videos()
        for video in student_brought_videos:
            try:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                    
                try:
                    subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                except:
                    subject_dict = {'id': None, 'name': 'General'}

                try:
                    chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name,'code': video.chapter.code}
                except:
                    chapter_dict = {'id': None,'name': 'General', 'code': None}
                    
                if video.publish == True:
                    video_dict = {
                        'id': video.id, 
                        'teacher': teachers_list, 
                        'subject': subject_dict, 
                        'chapter': chapter_dict, 
                        'link': video.urlLink, 
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate, 
                        'title': video.title, 
                        'lowLink': video.lowlink, 
                        'highLink': video.highlink, 
                        'thumbnail': video.thumbnail
                        }
                    final_videos_list.append(video_dict)
                    
            except Exception as e:
                print('student all videos {}'.format(str(e)))
                
        final_video_list = list(unique_everseen(final_videos_list))
        context = {'videos': final_video_list}
        return Response(context)
    
class StudentSubjectWiseNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessNotes == False:
            context = {'notes': []}
            
        try:
            data = request.data
            institute = me.profile.institute
            batches = me.profile.batches.all()
            teachers = Teacher.objects.filter(institute=institute)
            subject_id = data['subject_id']
            
            notes = Note.objects.select_related('noteurl_note', 'subject', 'chapter').filter(
                    subject=subject_id, teacher__in=teachers, batches__in=batches).order_by('-id')
            
            notes_list = []
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = student_brought_packages.get_all_brought_notes()
            notes_view_object = NotesViewLimitCheck(me.profile)
            Bookmark_Object = CheckBookmark(me.profile)
            
            for note in notes:
                subject = note.subject
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = ''
                
                try:
                    note_link = note.noteurl_note.link
                    note_link=note_link.strip('"')
                except:
                    note_link = ""
                    
                bought = False
                if note in bought_notes:
                    bought = True
                    
                if note.locked == False:
                    bought = True

                try:
                    vision = notes_view_object.vision(note.id, note.noteViewsLimite)
                except:
                    vision = None
                
                try:
                    Bookmark = Bookmark_Object.isNoteBookmark(note.id)
                except:
                    Bookmark = False

                note_dict = {
                    'id': note.id, 
                    'title': note.title, 
                    'publishDate': note.publishDate, 
                    'thumbnail': note.thumbnail, 
                    'subject': subject.name,
                    'chapter_object': chapter_name, 
                    'url': note_link, 
                    'bought': bought, 
                    'vision': vision,
                    'Bookmark': Bookmark
                    }
                notes_list.append(note_dict)

            context = {'notes': notes_list}
            return Response(context)
        except Exception as e:
            return Response(str(e))

class SubjectWiseNotes(APIView):
    def post(self, request):
        data = request.data
        subject_id = data['subject_id']
        code = data['code']
        subject_object = Subject.objects.get(id=subject_id)
        institute_code = Institute.objects.get(code=code)
        teacher = Teacher.objects.filter(institute__code =code)
        notes =Note.objects.select_related('noteurl_note', 'subject').filter(subject=subject_object,teacher__in=teacher).order_by('-id')
        notes_objects_list = set()
        
        for note in notes:
            if not note.package_set.all():
                    notes_objects_list.add(note)

        notes_list = []
        for note in notes_objects_list:
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
           
            note_dict = {'id': note.id, 'title': note.title,'url': note_link}
            notes_list.append(note_dict)

        context = {'notes': notes_list}
        return Response(context)

class TeacherDownloadPaidCourseFees(APIView):
    def get(self, request, batch_id):
        me = Teach(self.request.user)
        try:
            institute = me.profile.institute
            batch = Batch.objects.get(id = batch_id, institute = institute)
            students = batch.studentbatch.all()
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['Student', 'student_number', 'Paid Amount', 'date of Pay', 'Remaining Amount','Next Due Payment', 'Type of Payment', 'Mode of Payment'])

            no_fees_student = []
            course_fees = CourseFees.objects.get(batch=batch)
            for student in students:
                studentpaidfees = StudentCourseFees.objects.filter(coursefees=course_fees, accepted='true', student=student)
                if studentpaidfees:
                    for spf in studentpaidfees:
                        writer.writerow([spf.student.name,spf.amountPaid, spf.datePaid.date(), spf.amountRemaining,spf.nextDuePayment,spf.typePayment,spf.modePayment])
                else:
                    no_fees_student.append(student)
            
            for student in no_fees_student:
                writer.writerow([student.name,'#', '#', course_fees.totalAmount, '#','#','#'])
                
            response['Content-Disposition'] = 'attachment; filename="fees_details.csv"'
            return response
        except Exception as e:
            return Response(str(e))

class CreateTestReplica(APIView):
    def post(self,request):
        data = request.data
       
        try:
            teacher_id = data['teacher_id']
            subject_id = data['subject_id']
            subject_brought = False
            price = None
            
            teacher = Teacher.objects.get(id=teacher_id)
            subject = Subject.objects.get(id=subject_id)
            subject_new = Subject()
            subject_new.name = subject.name
            subject_new.icon = subject.icon
            subject_new.language = subject.language
            subject_new.replica_parent_subject = subject

            if price is not None:
                subject_new.price = price

            if subject_brought:
                subject_new.subject_brought = subject_brought
                subject_new.save_brought_save()
            else:
                subject_new.save()

            print(f"{subject_new}")

            parent_chapters = Chapter.objects.filter(subject=subject)
            for chapter in parent_chapters:
                chapter_new = Chapter()
                chapter_new.name = chapter.name
                chapter_new.subject = subject_new
                chapter_new.code = chapter.code
                chapter_new.replica_parent_chapter = chapter
                chapter_new.save()
                print(f"  {chapter_new}")

                parent_topics = QuestionTopic.objects.filter(chapters=chapter)
                for topic in parent_topics:
                    topic_new = QuestionTopic()
                    topic_new.topic = topic.topic
                    topic_new.replica_parent_topic = topic
                    topic_new.save()
                    topic_new.chapters.add(chapter_new)
                    print(f"    {topic_new}")

                    parent_subtopics = QuestionSubTopic.objects.filter(topic=topic)
                    for sub_topic in parent_subtopics:
                        sub_topic_new = QuestionSubTopic()
                        sub_topic_new.name = sub_topic.name
                        sub_topic_new.replica_parent_subtopic = sub_topic
                        sub_topic_new.save()
                        sub_topic_new.topic.add(topic_new)
                        print(f"      {sub_topic_new}")

            questions = Question.objects.filter(subject=subject)
            for question in questions:
                question_new = Question()
                question_new.text = question.text
                question_new.picture = question.picture
                question_new.marks = question.marks
                question_new.negativeMarks = question.negativeMarks
                question_new.language = question.language
                question_new.source = question.source
                question_new.probability = question.probability
                question_new.questionType = question.questionType
                question_new.difficulty = question.difficulty
                question_new.dynamicText = question.dynamicText
                question_new.oneWordAnswer = question.oneWordAnswer
                question_new.oneWordExplanation = question.oneWordExplanation
                question_new.oneWordQuestion = question.oneWordQuestion
                question_new.subject = subject_new
                question_new.replica_parent_question = question

                try: 
                    question_chapter = Chapter.objects.get(subject=subject_new, replica_parent_chapter=question.chapter)
                    question_new.chapter = question_chapter
                except Exception as e:
                    question_chapter = None
                    print(str(e)) 

                question_new.save()

                try:
                    question_topic = QuestionTopic.objects.filter(chapters=question_chapter.id, replica_parent_topic__in=question.topic.all())
                    for topic_new in question_topic:
                        question_new.topic.add(topic_new)
                except Exception as e:
                    question_topic = None
                    print(str(e))

                try:
                    question_subtopic = QuestionSubTopic.objects.filter(topic__in = question_topic, replica_parent_subtopic__in=question.subTopic.all())
                    for subtopic_new in question_subtopic:
                        question_new.subTopic.add(subtopic_new)
                except Exception as e:
                    question_subtopic = None
                    print(str(e))

                options = Option.objects.filter(question=question)
                for option in options:
                    option_new = Option()
                    option_new.text = option.text
                    option_new.picture = option.picture
                    option_new.explanationText = option.explanationText
                    option_new.explanationPicture = option.explanationPicture
                    option_new.explanationVideo = option.explanationVideo
                    option_new.correct = option.correct
                    option_new.explanation = option.explanation
                    option_new.question = question_new
                    option_new.save()
            
            tests = Test.objects.filter(subjects=subject_id)
            for test in tests:
                test_new = Test()
                test_new.name = test.name
                test_new.totalMarks = test.totalMarks
                test_new.time = test.time
                test_new.locked = test.locked
                test_new.publish = test.publish
                test_new.passing_marks = test.passing_marks
                test_new.testInstructions = test.testInstructions
                test_new.studentWillAttemptQuestions = test.studentWillAttemptQuestions
                test_new.is_answers_showing = test.is_answers_showing
                test_new.repeatTest = test.repeatTest
                test_new.test_count = test.test_count
                test_new.createdBy = teacher
                test_new.save()
                test_new.subjects.add(subject_new)

                try: 
                    test_chapters = Chapter.objects.filter(subject=subject_new, replica_parent_chapter__in=test.chapters.all())
                    for chapter_new in test_chapters:
                        test_new.chapters.add(chapter_new)
                except Exception as e:
                    test_chapters = None
                    print(str(e)) 

                try:
                    test_topics = QuestionTopic.objects.filter(chapters__in=test_chapters, replica_parent_topic__in=test.topics.all())
                    for topic_new in test_topics:
                        test_new.topics.add(topic_new)
                except Exception as e:
                    test_topics = None
                    print(str(e))

                try:
                    test_subtopics = QuestionSubTopic.objects.filter(topic__in=test_topics, replica_parent_subtopic__in=test.subTopics.all())
                    for subtopic_new in test_subtopics:
                        test_new.subTopics.add(subtopic_new)
                except Exception as e:
                    test_subtopics = None
                    print(str(e))   

                try:
                    test_questions = Question.objects.filter(subject = subject_new, replica_parent_question__in=test.questions.all())
                    for question_new in test_questions:
                        test_new.questions.add(question_new)
                except Exception as e:
                    test_questions = None
                    print(str(e)) 

            teacher.subjects.add(subject_new)
            context = {'status':True,'message':f'Replica Created Successfully for subject {subject_new}'}

        except Exception as e:
            context = {'status':False,'message':str(e)}
        
        return Response(context)

class EvaluateTestExam(APIView):
    def post(self, request, *args, **kwargs):
        try:
            me = Studs(self.request.user)
            data = request.data
            test_id = data['test_id']
            answers = data['answers']
            totalTime = data['totalTime']
            answers = answers.replace('\"', '')
            answers = answers.split(',')
            student_selfie = data.get('student_selfie')
            test = Test.objects.get(id=test_id)
            try:
                testMarks = StudentMarks.objects.get(student=me.profile, test=test)
                attemptCount = testMarks.attempt_count+1
            except:
                attemptCount = 1


            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount
            testMarks.student_selfie = student_selfie
            testMarks.save()

            inner = []
            outer = []
            for ind, ans in enumerate(answers):
                try:
                    val = ans.replace('[', '')
                    val = val.replace(']', '')
                    val = val.replace(' ', '')
                    inner.append(int(val))
                    if (ind+1) % 3 == 0:
                        outer.append(inner)
                        inner = []
                except Exception as e:
                    print(str(e))

            for out in outer:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile

                for ind, inn in enumerate(out):
                    if ind == 0:
                        question_id = inn
                        question = Question.objects.get(id=question_id)
                        attemptedQuestion.question = question
                    elif ind == 1:
                        attemptedQuestion.attempted = True
                        if inn != -1:
                            option = Option.objects.get(id=inn)
                            attemptedQuestion.save()
                            attemptedQuestion.optionAttempted.add(option)
                            if option.correct == True:
                                attemptedQuestion.right = True
                            else:
                                attemptedQuestion.right = False
                        else:
                            attemptedQuestion.attempted = False
                            attemptedQuestion.right = None
                    elif ind == 2:
                        attemptedQuestion.time = inn
                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)

            try:
                total_marks = 0
                totalPositiveMarks = 0.0
                totalNegativeMarks = 0.0

                totalRightQuestions = 0
                totalWrongQuestions = 0
                percentage = 0.0

                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    attemptedOptions = aq.optionAttempted.all()
                    attempted = aq.attempted
                    right = aq.right

                    if right:
                        totalPositiveMarks += question.marks
                        total_marks += question.marks
                        totalRightQuestions += 1
                    elif right == False:
                        total_marks -= question.negativeMarks
                        totalNegativeMarks += question.negativeMarks
                        totalWrongQuestions += 1

                    if aq.attempted == False:
                        pass

                pass_marks = testMarks.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = testMarks.test.totalMarks
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = testMarks.test.questions.all().count()
                totalAttemptedQuestions = testMarks.questions.filter(attempted=True).count()
                totalNotAttemptedQuestions = testMarks.questions.filter(attempted=False).count()

                testMarks.totalQuestions = totalQuestions
                testMarks.totalAttemptedQuestions = totalAttemptedQuestions
                testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                testMarks.totalPositiveMarks = totalPositiveMarks
                testMarks.totalNegativeMarks = totalNegativeMarks

                testMarks.totalRightQuestions = totalRightQuestions
                testMarks.totalWrongQuestions = totalWrongQuestions

                testMarks.result = result
                testMarks.percentage = percentage
                testMarks.totalTestMarks = total_test_marks

                testMarks.marks = total_marks
                testMarks.save()
            except:
                pass

            testMarks.marks = total_marks
            testMarks.save()

            context = {
                'status': 'Success',
                'message': testMarks.id,
                'obtainedMarks': testMarks.marks,
                'totalMarks': test.totalMarks,
                'attempCount': testMarks.attempt_count,
                'student_selfie':testMarks.student_selfie,
                }
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)

class TeacherDeletePackageTest(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
            try:
                package_earning = PackageEarning.objects.get(package=package)
                if package_earning:
                    package_history = PackageEarningHis()
                    package_history.packages = package
                    package_history.units_sold = package_earning.units_sold
                    package_history.total_price = package_earning.total_price
                    package_history.base_price_total = package_earning.base_price_total
                    package_history.teacher = me.profile
                    package_history.save()
                    package.total_package_earning.delete()
            except:
                pass

            if package.marketLevelPackage:
                context = {
                    "status": 'failed',
                    "message": "Store Package Can't deleted. You can only Unpublish it."
                }
                
            videos = package.videos.all().update(locked=False)
            notes = package.notes.all().update(locked=False)
            tests = package.tests.all().update(locked=False)
            fileTests = package.fileTests.all().update(locked=False)
            youtubeLiveVideos = package.youtubeLiveVideos.all().update(locked=False)
            
            package.delete()
            context = {'status': 'Success', 'message': 'Pacakge Deleted !'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

import os
import vertexai
from google.cloud import translate_v2
from vertexai.language_models import CodeChatModel
credential_path = "google_cloud_details.json"
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path

class VertexAIChatApi(APIView):
    def post(self, request):
        try:
            data = request.data
            question = data['question']
            credential_path = "google_cloud_details.json"
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path
            translate_client = translate_v2.Client()
            target = "en"
            output = translate_client.translate(question,target_language=target)
            final_text = output['translatedText']
            parameters = {
                "temperature": 0.90,  # Temperature controls the degree of randomness in token selection.
                "max_output_tokens": 2048,  # Token limit determines the maximum amount of text output.
            }

            vertexai.init(project="rare-drummer-388505", location="us-central1")
            chat_model = CodeChatModel.from_pretrained("codechat-bison@001")
            parameters = {
                "temperature": 0.2,
                "max_output_tokens": 2048
            }
            chat = chat_model.start_chat()
            response = chat.send_message(final_text, **parameters)
            context = {'Answer': response.text}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class SubjectWiseNotesCopy(APIView):
    def get(self, request):
        data = request.data
        subject_id = 2
        code = 'ou'
        subject_object = Subject.objects.get(id=subject_id)
        institute_code = Institute.objects.get(code=code)
        teacher = Teacher.objects.filter(institute__code =code)
        notes =Note.objects.select_related('noteurl_note', 'subject').filter(subject=subject_object,teacher__in=teacher).order_by('-id')
        notes_objects_list = set()
        encryption_key = Fernet.generate_key()
        encryption_key_base64 = encryption_key.decode('utf-8')
        encryption_key_base64_urlsafe = encryption_key_base64.replace('+', '-').replace('/', '_')
        fernet = Fernet(encryption_key)
        for note in notes:
            if not note.package_set.all():
                    notes_objects_list.add(note)

        notes_list = []
        for note in notes_objects_list:
            try:
                note_link = note.noteurl_note.link
            except:
                note_link = ""
           
            note_dict = {'id': note.id, 'title': note.title,'url': note_link}
            notes_list.append(note_dict)

            nl = json.dumps(notes_list)
            nl2 = nl.encode()
            encrypted_data = fernet.encrypt(nl2)
            
        context = {
            'encryption_key':encryption_key,
            'encryption_key_base64_urlsafe':encryption_key_base64_urlsafe,
            'notes': encrypted_data
            }
        return Response(context)

class CreatePrincipleSubjectAllContentReplica(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        username = me.profile.teacheruser.id
        subject_ids = data['subject_id']
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        subject_id=subject_ids.strip('][').split(',')
        
        try:
            teacher = Teacher.objects.get(institute=institute,mainTeacher=True)
            teacher_id = teacher.id
            teacher_subject =set(subject.id for subject in teacher.subjects.all())
            for subject in subject_id:
                subjectreplica = Subject.objects.get(id = subject)
                if subjectreplica.id in teacher_subject:
                    context = {'status': False, 'message': 'Sorry!! This Subject already added in your institute'}
                    return Response(context)
                create_principle_subject_replica_new.delay(teacher_id, subject)
            context = {'status':True}
        
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class PackageShareReplica(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        username = me.profile.teacheruser.id
        package_id = data['package_id']
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        
        parentPackage = Package.objects.get(id=package_id)
        teacher = Teacher.objects.get(institute=institute,mainTeacher=True)
        teacher_id = teacher.id
        
        package = Package.objects.filter(teacher=teacher, replicaParentPackage=parentPackage,parentpackageReplica=True)
        if package:
            context = {'status': False, 'message': 'Sorry!! This package already added in your institute'}
            return Response(context)
            
        package_share_replica.delay(teacher_id,package_id)
        context = {'status':True,'message':'package Created'}
        return Response(context)
   
class GCPManager:
    def create_job_from_preset(self, project_id, location, input_uri, output_uri,preset):
        client = TranscoderServiceClient()
        parent = f"projects/{project_id}/locations/{location}"
        job = transcoder_v1.Job()
        job.input_uri = input_uri
        job.output_uri = output_uri
        job.template_id = preset

        response = client.create_job(parent=parent, job=job)
        return response

class StudyLiveVideoDownload(APIView):
    def get(self, request):
        liveVideos = LiveVideoLink.objects.filter(teacher="76", download_link__isnull=True).order_by('-id')[:2]
        for video_object in liveVideos:
            res =upload_yt_live_video_to_gcp(video_object.id)
            print(res)
        
        return Response("success")

class StudentReviewInstitute(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        institute = Institute.objects.get(id=me.profile.institute.id)
        reviews_list = []
        try:
            reviews = InstituteReview.objects.filter(institute=institute).select_related('student').order_by('-id')
            for review in reviews:
                try:
                    student_details = StudentDetails.objects.get(student=review.student)
                    photo = student_details.photo
                except:
                    photo = None
                    
                review_dict = {'student_name':review.student.name,'photo':photo,'message':review.message,'rating':review.rating}
                reviews_list.append(review_dict)
                
            context = {'status': 'Success', 'data': reviews_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}   
            
        return Response(context)  
        
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        rating = data['rating']
        message = data['message']

        try:
            institute = Institute.objects.get(id=me.profile.institute.id)
            try:
                existing_review = InstituteReview.objects.get(institute=institute, student=me.profile)
                existing_review.rating = rating
                existing_review.message = message
                existing_review.save()
                context = {'status':'success', 'message':'Review Updated Successfully'}
            except:
                new_review = InstituteReview.objects.create(institute=institute, student=me.profile, message=message, rating=rating)
                context = {'status': 'success', 'message': 'Review Successfully Submitted!'}
        
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute not found'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}
            
        return Response(context)  
    
    def delete(self,request):
        me = Studs(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            review = InstituteReview.objects.get(id = record_id)
            review.delete()
            context = {'status':True,'message':'Review Deleted Successfully'}
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)  

class AllStudentsReviewInstitute(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        institute = Institute.objects.get(id=me.profile.institute.id)
        reviews_list = []
        try:
            reviews = InstituteReview.objects.filter(institute=institute).select_related('student').order_by('-id')
            for review in reviews:
                try:
                    student_details = StudentDetails.objects.get(student=review.student)
                    photo = student_details.photo
                except:
                    photo = None
                    
                review_dict = {'id':review.id,'student_id':review.student.id,'student_name':review.student.name,'photo':photo,'message':review.message,'rating':review.rating}
                reviews_list.append(review_dict)
                
            context = {'status': 'Success', 'data': reviews_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}   
            
        return Response(context)  

class TeacherDeleteStudentsReview(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        review = data['review_id']
        student = Student.objects.get(id=student_id)
        reviews_list = []
        try:
            reviews = InstituteReview.objects.get(student=student,id=review)
            reviews.delete()
                
            context = {'status': 'Success', 'message': "Teacher delete student review successfully"}
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}   
            
        return Response(context)  
    
class TeacherEditStudentsReview(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        review = data['review_id']
        message = data['message']
        reviews_list = []
        try:
            reviews = InstituteReview.objects.get(id=review)
            reviews.message = message
            reviews.save()

            context = {'status': 'Success', 'message': "Teacher Edit Student Review Successfully"}
        except Exception as e:
            context = {'status': 'Failed', 'message': f"{e}"}   
            
        return Response(context)  

class TeacherChangePackageVideoOrder(APIView):
    def post(self, request):
        me = Teach(request.user)
        data = request.data
        try:
            package_id = data['package_id']
            videos_list = data['video_ids']
            videos = videos_list.strip('][').split(',')
            package = Package.objects.get(id=package_id)
            
            for ind, video_id in enumerate(videos):
                ind +=1
                try:
                    video = LiveVideoLink.objects.get(id=video_id)
                
                    try:
                        videoOrder = PackageYoutubeVideoOrderWise.objects.get(package=package,youtube_video=video)
                        videoOrder.order = ind
                        videoOrder.save()
                    except PackageYoutubeVideoOrderWise.DoesNotExist:
                        videoOrder = PackageYoutubeVideoOrderWise()
                        videoOrder.package = package
                        videoOrder.youtube_video = video
                        videoOrder.order = ind
                        videoOrder.save()
                        
                except:
                    pass

            context = {'status': True, 'message': 'Order Changed'}
        
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
             
class StudentGetOrderWisePckageVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        try:
            package = Package.objects.get(id=package_id)
        except:
            context = {'status': 'Failed', 'message': 'Package not found'}
            return Response(context)
        videos_list = []
        if me.profile.accessVideo == False:
            context = {'videos': []}
            return Response(context)
        videos_list = []
        videoOrder = PackageYoutubeVideoOrderWise.objects.filter(package=package).order_by('order')
        
        youtube_videos_ordered = []
        for pack in videoOrder:
            youtube_videos_ordered.append(pack.youtube_video)
        videos_list.extend(youtube_videos_ordered)
        youtube_videos_unordered = []  # Use a set to store unordered videos
        youtubeLiveVideos =package.youtubeLiveVideos.order_by('-id')
        for youtube in youtubeLiveVideos:
            if youtube not in youtube_videos_ordered:
                youtube_videos_unordered.append(youtube)
        
        videos_list.extend(youtube_videos_unordered)

        stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
        bought_packages_list = stud_pack_helper.brought_packages
        bought_videos_list = stud_pack_helper.get_all_brought_youtubeLiveVideos()
        teachers_list = []
        final_videos_list = []
        for video in videos_list:
            try:
                bought = False
                if not bought and video in bought_videos_list:
                    bought = True
                if video.locked == False:
                    bought = True
                video_dict = {'id': video.id, 'teacher': video.teacher.name, 'link': video.link, 
                                'locked': video.locked,"bought":bought,"title":video.title,"download_link":video.download_link}
                final_videos_list.append(video_dict)
            except Exception as e:
                print(str(e))
        final_video_list = list(unique_everseen(final_videos_list))
        context = {'videos': final_videos_list}
        return Response(context)

class TeacherGetPackageWiseYoutubeVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        before_video_list = []
        package = Package.objects.get(id=package_id)
        before_video_list = []
        if me.profile.mainTeacher:
            teachers = Teacher.objects.filter(institute=me.profile.institute)
            for teacher in teachers:
                packages = PackageYoutubeVideoOrderWise.objects.filter(package__teacher=teacher, package=package).order_by('order')

                youtube_videos_ordered = []
                youtube_videos_unordered = []
                for pack in packages:
                    youtube_videos_ordered.append(pack.youtube_video)
                before_video_list.extend(youtube_videos_ordered)
                
                youtubeLiveVideos = package.youtubeLiveVideos.order_by('-id')
                for youtube in youtubeLiveVideos:
                    if youtube not in youtube_videos_ordered:
                        youtube_videos_unordered.append(youtube)
                before_video_list.extend(youtube_videos_unordered)
        else:
            packages = PackageYoutubeVideoOrderWise.objects.filter(package__teacher=me.profile, package=package).order_by('order')
            youtube_videos_ordered = []
            youtube_videos_unordered = []
            for pack in packages:
                youtube_videos_ordered.append(pack.youtube_video)
            before_video_list.extend(youtube_videos_ordered)
            
            for pack in packages:
                youtubeLiveVideos = pack.package.youtubeLiveVideos.all().order_by('-id')
                for youtube in youtubeLiveVideos:
                    if youtube not in youtube_videos_ordered:
                        youtube_videos_unordered.append(youtube)
            before_video_list.extend(youtube_videos_unordered)
        
        teachers_list = []
        videos_final_list = []
        final_videos_list = []
        for video in before_video_list:
            print(video.id)
            try:
                video_dict = {'id': video.id, 'title': video.title, 'url': video.link, 'locked': video.locked}
                videos_final_list.append(video_dict)
            except Exception as e:
                print('teacher all videos error {}'.format(str(e)))
                
        video_list1 = list(unique_everseen(videos_final_list))
        context = {'videos': video_list1}
        return Response(context)
    
class StudentPaymentHistory(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        package_history = []
        book_history = []
        course_history = []
        try:
            package_records = StudentPackage.objects.filter(student=me.profile)
            book_records = PaidAmountStudentBook.objects.filter(studentBook__student=me.profile)
            course_fee_history = StudentCourseFees.objects.filter(student=me.profile)
            
            for record in package_records:
                try:
                    package = record.package.title
                    price = record.package.price
                except:
                    package = None
                    price = None
                    
                record_dict = {
                    'id':record.id,
                    'package': package,
                    'price' : price,
                    'startDate': record.startDate,
                    'endDate': record.endDate,
                }
                package_history.append(record_dict)
                
            for record in book_records:
                try:
                    book = record.studentBook.book.name
                except:
                    book = None
                    
                record_dict = {
                    'id':record.id,
                    'book': book,
                    'paidAmount': record.paidAmount,
                    'date': record.date,
                }
                book_history.append(record_dict)
                
            for record in course_fee_history:
                try:
                    course_fees = record.coursefees.totalAmount
                except:
                    course_fees = None
                try:
                    courses = record.coursefees.batch.course.all().first()
                    courses = record.coursefees.batch
                    course_name =courses.name
                except:
                    course_name = ""
                    
                record_dict = {
                    'id':record.id,
                    'course_fees':course_fees,
                    'amountPaid': record.amountPaid,
                    'amountRemaining': record.amountRemaining,
                    'nextDuePayment': record.nextDuePayment,
                    'course_name':course_name,
                }
                course_history.append(record_dict)
                
            context = {
                'package_history':package_history,
                'book_history': book_history,
                'course_history':course_history,
            }
        
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
        
class TeacherGetAllMeethoureLiveVideos(APIView):
    def get(self, request, subscription):
        me = Teach(self.request.user)
        try:
            if subscription == "enterprise":
                context = {
                    "status": False,
                    "meassage": "Enterprise Package Not Active"
                }
                return Response(context)
                meetings = MeetHourMeeting.objects.order_by("-time")
                
            elif subscription == "developer":
                institute = me.profile.institute
                account_credentials = MeetHourDeveloperAccountClientCredentials.objects.filter(
                    institute=institute).order_by('-date').first()
                meethour_credentials = {
                    "username": account_credentials.username,
                    "password": account_credentials.password,
                    "client_id": account_credentials.client_id,
                    "client_secret": account_credentials.client_secret,
                    "access_token": account_credentials.access_token,
                    "refresh_token": account_credentials.refresh_token,
                }
                meetings = MeetHourDeveloperAccountMeeting.objects.filter(developer_account=account_credentials).order_by("-time")
                print(meetings)
            else:
                context = {"status": False,"message": "'subscription' not define properly"}
                return Response(context)

            meeting_list_response = []
            for meeting in meetings:
                meet_dict = {
                    'meeting_id': meeting.meeting_id,
                    'meeting_name': meeting.meeting_name,
                    'teacher': {
                        'id': meeting.teacher.id,
                        'name': meeting.teacher.name,
                        'photo': meeting.teacher.photo,
                    },
                    'time': meeting.time,
                    'live_status': meeting.live_status
                }
                meeting_list_response.append(meet_dict)

            context = {'status': True,'message': "all meetings list",'data': meeting_list_response}
            
        except Exception as e:
            context = {'status': False,'message': str(e)}
            
        return Response(context)

class CreateRegisterExamForm(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        institute = me.profile.institute
        try:
            student = Student.objects.get(studentuser =me.profile.studentuser)
            name = data['name']
            father_name = data['father_name']
            mother_name = data['mother_name']
            phone_number = data['phone_number']
            whatsapp_number = data['whatsapp_number']
            pincode = data['pincode']
            city = data['city']
            profile_picture = data['profile_picture']
            signature = data['signature']
            dob = data['dob']
            gender = data['gender']
            aadhar_card = data['aadhar_card']
            address = data['address']
            marksheet_9th = data['marksheet_9th']
            marksheet_10th = data['marksheet_10th']
            marksheet_11th = data['marksheet_11th']
            marksheet_12th = data['marksheet_12th']
            category = data['category']
            try:
                register = RegisterExam.objects.get(student =student)
                register.name = name
                register.student = me.profile
                register.father_name = father_name
                register.mother_name = mother_name
                register.phone_number = phone_number
                register.whatsapp_number = whatsapp_number
                register.pincode = pincode
                register.student = me.profile
                register.institute = institute
                register.city = city
                register.profile_picture = profile_picture
                register.signature =signature
                register.dob = dob
                register.gender = gender
                register.aadhar_card = aadhar_card
                register.marksheet_9th=marksheet_9th
                register.marksheet_10th = marksheet_10th
                register.marksheet_11th = marksheet_11th
                register.marksheet_12th = marksheet_12th
                register.category = category
                register.save()

            except RegisterExam.DoesNotExist:
                register = RegisterExam()
                register.name = name
                register.student = me.profile
                register.father_name = father_name
                register.mother_name = mother_name
                register.phone_number = phone_number
                register.whatsapp_number = whatsapp_number
                register.pincode = pincode
                register.student = me.profile
                register.institute = institute
                register.city = city
                register.profile_picture = profile_picture
                register.signature =signature
                register.dob = dob
                register.gender = gender
                register.aadhar_card = aadhar_card
                register.marksheet_9th=marksheet_9th
                register.marksheet_10th = marksheet_10th
                register.marksheet_11th = marksheet_11th
                register.marksheet_12th = marksheet_12th
                register.category = category
                register.save()
            context = {'status': 'Success'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class AllStudentListRegistered(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        user = self.request.user
        student_list = []
        student_dict = {}
        try:
            institute = me.profile.institute
            allStudent = PaidAmountStudentExam.objects.filter(student__institute=institute)
            for std in allStudent:
                student_dict['id'] = std.student.id
                student_dict['name'] = std.student.name
                student_dict['phone_number'] = std.student.phone_number
                student_dict['whatsapp_number'] = std.student.whatsapp_number
                student_dicts ={"id":std.student.id,"name":std.student.name,'phone_number':std.student.phone_number,'whatsapp_number':std.student.whatsapp_number,'address':std.student.address}
                student_list.append(student_dicts)
            context = {'status': 'Success',"student_list":student_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
            
class TeacherGetRegisterStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        studnet_id = data['studnet_id']
        student_dict = {}
        try:
            institute = me.profile.institute
            student = PaidAmountStudentExam.objects.filter(student__institute=institute,student__id=studnet_id)
            for std in student:
                student_dict['id'] = std.student.id
                student_dict['name'] = std.student.name
                student_dict['phone_number'] = std.student.phone_number
                student_dict['whatsapp_number'] = std.student.whatsapp_number
                student_dict['jdate'] = std.student.jdate
                student_dict['gender'] = std.student.gender
                student_dict['profile_picture'] = std.student.profile_picture
                student_dict['address'] = std.student.address
                student_dict['dob'] = std.student.dob
                student_dict['signature'] = std.student.signature
                student_dict['address'] = std.student.address
                student_dict['pincode'] = std.student.pincode
                student_dict['city'] = std.student.city
                student_dict['aadhar_card'] = std.student.aadhar_card
                student_dict['marksheet_9th'] = std.student.marksheet_9th
                student_dict['marksheet_10th'] = std.student.marksheet_10th
                student_dict['marksheet_11th'] = std.student.marksheet_11th
                student_dict['marksheet_12th'] = std.student.marksheet_12th
                student_dict['category'] = std.student.category
                
            context = {'status': 'Success', 'student':student_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
    
class StudentRegisterPaidform(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        data = request.data
        institute = me.profile.institute
        student_dict = {}
        try:
            institute = me.profile.institute
            studnts = me.profile
            student = PaidAmountStudentExam.objects.filter(student__institute=institute,student__student =studnts)
            for std in student:
                student_dict['id'] = std.student.id
                student_dict['name'] = std.student.name
                student_dict['phone_number'] = std.student.phone_number
                student_dict['whatsapp_number'] = std.student.whatsapp_number
                student_dict['jdate'] = std.student.jdate
                student_dict['gender'] = std.student.gender
                student_dict['profile_picture'] = std.student.profile_picture
                student_dict['address'] = std.student.address
                
            context = {'status': 'Success', 'student':student_dict}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)
    
class StudentRegisterPaidform(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        data = request.data
        institute = me.profile.institute
        student_dict = {}
        try:
            institute = me.profile.institute
            student = me.profile
            std = RegisterExam.objects.get(student =student)
            student_pay = False
            if PaidAmountStudentExam.objects.filter(student=std).exists():
                students = PaidAmountStudentExam.objects.get(student=std)
                student_pay = True
            
            student_dict['id'] = std.id
            student_dict['name'] = std.name
            student_dict['phone_number'] = std.phone_number
            student_dict['whatsapp_number'] = std.whatsapp_number
            student_dict['jdate'] = std.jdate
            student_dict['father_name'] = std.father_name
            student_dict['mother_name'] = std.mother_name
            student_dict['dob'] = std.dob
            student_dict['gender'] = std.gender
            student_dict['profile_picture'] = std.profile_picture
            student_dict['signature'] = std.signature
            student_dict['address'] = std.address
            student_dict['pincode'] = std.pincode
            student_dict['city'] = std.city
            student_dict['student_pay'] = student_pay
            student_dict['aadhar_card'] = std.aadhar_card
            student_dict['marksheet_9th'] = std.marksheet_9th
            student_dict['marksheet_10th'] = std.marksheet_10th
            student_dict['marksheet_11th'] = std.marksheet_11th
            student_dict['marksheet_12th'] = std.marksheet_12th
            student_dict['category'] = std.category

            context = {'status': 'Success', 'student':student_dict}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
        
class StudentClassReportDetails(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        try:
            data = request.data
            record_id = data['record_id']
            report = StudentClassWiseReport.objects.get(id = record_id)
            report_dict = {
                'teacher':report.teacher,
                'student_class':report.student_class,
                'curriculum':report.curriculum,
                'report_date':report.report_date,
                'subject': report.subject,
                'lesson_date':report.lesson_date,
                'topic_taught':report.topic_taught,
                'remarks':report.remarks,
                }
                
            context = {'status':True,'data':report_dict}
            
        except StudentClassWiseReport.DoesNotExist:
            context = {'status':False,'data':'No Report Found'}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentAssignmentReportDetails(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        try:
            data = request.data
            record_id = data['record_id']
            report = StudentTestAssignmentsReport.objects.get(id = record_id)
            
            report_dict = {
                'teacher':report.teacher,
                'student_class':report.student_class,
                'curriculum':report.curriculum,
                'report_date':report.report_date,
                'subject': report.subject,
                'test_date':report.test_date,
                'test_topic':report.test_topic,
                'marks_obtained':report.marks_obtained,
                'test_remarks':report.test_remarks,
                }
                
            context = {'status':True,'data':report_dict}
            
        except StudentTestAssignmentsReport.DoesNotExist:
            context = {'status':False,'data':"Not Report Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentRecentClassWiseReport(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            today_date = date.today()
            reports = StudentClassWiseReport.objects.filter(student = me.profile, report_date = today_date).order_by('-id')
            
            report_list = []
            for report in reports:
                report_dict = {
                    'id':report.id,
                    'teacher':report.teacher,
                    'student_class':report.student_class,
                    'curriculum':report.curriculum,
                    'report_date':report.report_date,
                    'subject': report.subject,
                    'lesson_date':report.lesson_date,
                    'topic_taught':report.topic_taught,
                    'remarks':report.remarks,
                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except StudentClassWiseReport.DoesNotExist:
            context = {'status':False,'data':"Not Report Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            input_date = data['date']
            print(input_date)
                
            reports = StudentClassWiseReport.objects.filter(student = me.profile, report_date = input_date)
            report_list = []
            for report in reports:
                report_dict = {
                    'id':report.id,
                    'teacher':report.teacher,
                    'student_class':report.student_class,
                    'curriculum':report.curriculum,
                    'report_date':report.report_date,
                    'subject': report.subject,
                    'lesson_date':report.lesson_date,
                    'topic_taught':report.topic_taught,
                    'remarks':report.remarks,
                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except StudentClassWiseReport.DoesNotExist:
            context = {'status':False,'data':"Not Report Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentRecentTestAssignmentReport(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            today_date = date.today()
            reports = StudentTestAssignmentsReport.objects.filter(student = me.profile, report_date = today_date).order_by('-id')
            report_list = []
            for report in reports:
                report_dict = {
                    'id':report.id,
                    'teacher':report.teacher,
                    'student_class':report.student_class,
                    'curriculum':report.curriculum,
                    'report_date':report.report_date,
                    'subject': report.subject,
                    'test_date':report.test_date,
                    'test_topic':report.test_topic,
                    'marks_obtained':report.marks_obtained,
                    'test_remarks':report.test_remarks,
                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except StudentTestAssignmentsReport.DoesNotExist:
            context = {'status':False,'data':"Not Report Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
    def post(self,request):
        me = Studs(self.request.user)
        try:
            data = request.data
            input_date = data['date']
                
            reports = StudentTestAssignmentsReport.objects.filter(student = me.profile, report_date = input_date)
            report_list = []
            for report in reports:
                report_dict = {
                    'id':report.id,
                    'teacher':report.teacher,
                    'student_class':report.student_class,
                    'curriculum':report.curriculum,
                    'report_date':report.report_date,
                    'subject': report.subject,
                    'test_date':report.test_date,
                    'test_topic':report.test_topic,
                    'marks_obtained':report.marks_obtained,
                    'test_remarks':report.test_remarks,
                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except StudentTestAssignmentsReport.DoesNotExist:
            context = {'status':False,'data':"Not Report Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentAdmitCard(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        data = request.data
        exam_name = data['exam_name']
        try:
            report = AdmitCard.objects.get(register_no__student = me.profile,name_of_examination=exam_name)
            
            report_list = []

            register = RegisterExam.objects.get(id=report.register_no.id )
            register_dict = {"register_no":report.exam_register_no,"name":register.name,"father_name":register.father_name,"mother_name":register.mother_name,"dob":register.dob,"gender":register.gender,"signature":register.signature,"profile_picture":register.profile_picture,"category":register.category}
            
            report_dict = {
                'name_of_examination':report.name_of_examination,
                'roll_number':report.roll_number,
                'exam_city':report.exam_city,
                'dofexam': report.dofexam,
                'center_name':report.center_name,
                'examFrom':report.examFrom,
                'examTo':report.examTo,
                "register_dict":register_dict

                }
                
            context = {'status':True,'data':report_dict}
            
        except AdmitCard.DoesNotExist:
            context = {'status':False,'data':"Admit card  not Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentScoreCard(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        data = request.data
        exam_name = data['exam_name']

        try:
            report = ScoreCard.objects.get(register_no__student = me.profile,name_of_examination=exam_name)
            report_list = []
            
            roll_numbers = AdmitCard.objects.filter(register_no__student = me.profile).first()
            roll_number = roll_numbers.roll_number
            register_no = report.exam_register_no

            register = RegisterExam.objects.get(id=report.register_no.id )
            register_dict = {"register_no":register_no,"name":register.name,"father_name":register.father_name,"mother_name":register.mother_name,"dob":register.dob,"gender":register.gender,"signature":register.signature,"profile_picture":register.profile_picture,"category":register.category}
            
            report_dict = {
                'name_of_examination':report.name_of_examination,
                'roll_number':roll_number,
                'rank':report.rank,
                'score':report.score,
                "register_dict":register_dict

                }
            report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except AdmitCard.DoesNotExist:
            context = {'status':False,'data': "Score card not Found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class TeacherCreateTestTesting(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        questions = data['questions']
        batches = data['batches']
        time = data['time']

        try:
            test_count = int(data['test_count'])
        except:
            test_count = None

        try:
            max_marks = data['max_marks']
        except:
            max_marks = None

        try:
            negative_marks = data['negative_marks']
        except:
            negative_marks = None

        try:
            title = data['title']
        except:
            title = None

        try:
            passing_marks = data['passing_marks']
        except:
            passing_marks = max_marks/3

        try:
            publishStatus = data['publishStatus']
        except:
            publishStatus = None

        try:
            testStartDateTime = data['testStartDateTime']
        except:
            testStartDateTime = None

        try:
            testEndDateTime = data['testEndDateTime']
        except:
            testEndDateTime = None

        try:
            studentWillAttemptQuestions = data['studentWillAttemptQuestions']
        except:
            studentWillAttemptQuestions = None

        try:
            testInstructions = data['testInstructions']
        except:
            testInstructions = None

        try:
            is_answers_showing = data['is_answers_showing']
        except:
            is_answers_showing = None
        try:
            max_marks = data['max_marks']
        except:
            max_marks = None
        max_marks_list = max_marks

        try:
            questions_list = questions
            batches_list = batches

            test = Test()
            if title != None:
                test.name = title
            else:
                test.name = me.profile.name + ' ' + str(timezone.now())

            if publishStatus == 'false':
                test.publish = False

            test.published = timezone.now()
            test.createdBy = me.profile
            test.time = time
            test.studentWillAttemptQuestions = studentWillAttemptQuestions
            test.totalMarks = 0
            test.testInstructions = testInstructions
            test.test_count = test_count

            if test_count != None and int(test_count) > 1:
                test.repeatTest = True

            if testStartDateTime:
                test.testStartDateTime = testStartDateTime
            else:
                test.testStartDateTime = timezone.now()

            if testEndDateTime:
                test.testEndDateTime = testEndDateTime

            if is_answers_showing == 'false':
                test.is_answers_showing = False

            test.save()

            total_marks = 0.0
            for question_id, max_marks in zip(questions_list, max_marks_list):
                question = Question.objects.get(id=question_id)
                if max_marks != '0.0':
                    question.marks = float(max_marks)
                if negative_marks:
                    question.negativeMarks = negative_marks

                total_marks += float(question.marks)
                subject = question.subject
                chapter = question.chapter
                test.subjects.add(subject)
                test.chapters.add(chapter)
                question.save()

                topics = question.topic.all()
                subTopics = question.subTopic.all()
                test.topics.add(*topics)
                test.subTopics.add(*subTopics)

                for batch_id in batches_list:
                    batch = Batch.objects.get(id=batch_id)
                    try:
                        timesUsed = TimesUsed.objects.get(
                            institute=me.profile.institue, question=question, batch=batch)
                        timesUsed.used += 1
                        timesUsed.save()
                    except:
                        timesUsed = TimesUsed()
                        timesUsed.question = question
                        timesUsed.institute = me.profile.institute
                        timesUsed.batch = batch
                        timesUsed.used = 1
                        timesUsed.save()

            test.totalMarks = total_marks
            test.passing_marks = passing_marks
            test.save()
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None

            notification = {"title": f"NEW TEST","body": f'A new test {title} has been created for you by {me.profile.name}',}
            data = {"id":str(test.id),"type": "test","title":str(test.name) ,"link":None}

            for batch_id in batches_list:
                batch = Batch.objects.get(id=batch_id)
                students = Student.objects.filter(batches=batch)
                test.batches.add(batch)
                test.students.add(*students)
                test.save()

                if publishStatus == 'true':
                    institute_code= me.profile.institute.code
                    if not institute_code=="wisdombrains":
                        announcement = Announcement()
                        announcement.announcementFrom = me.profile 
                        announcement.text = test.name 
                        announcement.notification_id = test.id 
                        announcement.type = "test" 
                        announcement.save() 
                        announcement.students.add(*students)
                        announcement.batches.add(batch)

                        if not institute_code=="mbca":
                            if json_file_url == None:
                                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id = int(batch_id), data = data)
                            else:
                                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id = int(batch_id), data = data)
                            
            context = {'status': 'Success','message': 'Test Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherCreateSectionForTest(APIView):
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        questions = data['questionIds']
        question_list= question.strip('][').split(',')
        try:
            section =Section()
            section.name = name
            section.save()
            for question in question_list:
                question_id = Question.objects.get(id=question)
                section.question.add(question_id)
            context = {'status':True, 'message':"Section  created Successfully"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class CounselingCourseList(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            courses = CounselingCourse.objects.all()
            course_list = []
            for course in courses:
                course_dict = {'id':course.id,'title':course.title}
                course_list.append(course_dict)
                
            context = {'status':True,'data':course_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentCourseCounseling(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course = CounselingCourse.objects.get(id = data['course_id'])
            counseling = CounselingDetails()
            counseling.student = me.profile
            counseling.course = course
            counseling.full_name = data.get('full_name')
            counseling.state = data.get('state')
            counseling.category = data.get('category')
            counseling.category_rank = data.get('category_rank')
            counseling.overall_rank = data.get('overall_rank')
            counseling.mobile = data.get('mobile')
            counseling.gmail = data.get('gmail')
            counseling.save()
            context = {'status':True, 'message':"Record Added Successfully"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
    def put(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            course = CounselingCourse.objects.get(id = data['course_id'])
            counseling = CounselingDetails.objects.get(id=data['record_id'])
            counseling.student = me.profile
            counseling.course = course
            counseling.full_name = data.get('full_name')
            counseling.state = data.get('state')
            counseling.category = data.get('category')
            counseling.category_rank = data.get('category_rank')
            counseling.overall_rank = data.get('overall_rank')
            counseling.mobile = data.get('mobile')
            counseling.gmail = data.get('gmail')
            counseling.save()
            context = {'status':True, 'message':"Record Updated Successfully"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
    def delete(self,request):
        me = Studs(self.request.user)
        data = request.data
        try:
            counseling = CounselingDetails.objects.get(id=data['record_id'])
            counseling.delete()
            context = {'status':True, 'message':"Record Delete Successfully"}
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class CourseCounselingDetails(APIView):
    def get(self,request):
        me = Teach(self.request.user)
        try:
            records = CounselingDetails.objects.order_by('-id')
            record_list = []
            for record in records:
                record_dict = {
                    'id':record.id,
                    'student':record.student.name,
                    'course':record.course.title,
                    'full_name': record.full_name,
                    'state' : record.state,
                    'category' : record.category,
                    'category_rank' : record.category_rank,
                    'overall_rank' : record.overall_rank,
                    'mobile' : record.mobile,
                    'gmail' : record.gmail,
                }
                record_list.append(record_dict)
                
            context = {'status':True,'data':record_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context) 
    
class StudentAdmitCardExamList(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            admits = AdmitCard.objects.filter(register_no__student = me.profile)
            report_list = []
            for report in admits:
                register = RegisterExam.objects.get(id=report.register_no.id )
                
                report_dict = {
                    'name_of_examination':report.name_of_examination,
                    'roll_number':report.roll_number,
                    'exam_city':report.exam_city,
                    'dofexam': report.dofexam,
                    'center_name':report.center_name,
                    'examFrom':report.examFrom,
                    'examTo':report.examTo,

                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except AdmitCard.DoesNotExist:
            context = {'status':False,'data':"Admit card not found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class StudentScoreCardExamList(APIView):
    def get(self,request):
        me = Studs(self.request.user)
        try:
            admits = ScoreCard.objects.filter(register_no__student = me.profile)
            report_list = []
            for report in admits:
                register = RegisterExam.objects.get(id=report.register_no.id )
                
                report_dict = {
                    'name_of_examination':report.name_of_examination,
                    'score':report.score,
                    'rank':report.rank,

                    }
                report_list.append(report_dict)
                
            context = {'status':True,'data':report_list}
            
        except AdmitCard.DoesNotExist:
            context = {'status':False,'data':"Admit card not found"}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class AllSubjectBatchWise(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        username = data['username']
        user = User.objects.get(username=username)

        registertion_dict = {}
        registertion_dict['student'] = RegisterExam.objects.get(student__studentuser=user)
        registertion_dict['paidAmount'] = float(100)
        exam_register = PaidAmountStudentExam(**registertion_dict)
        exam_register.save()
        return Response(" ")

class StudentGetBtachWiseAllData(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        try:
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            student_brought_tests = student_brought_packages.get_all_brought_tests()
            student_brought_notes = student_brought_packages.get_all_brought_notes()
            student_brought_videos = student_brought_packages.get_all_brought_videos()

            if me.institute.listReversed:
                data_order = '-id'
            else:
                data_order = 'id'
                
            Bookmark_object = CheckBookmark(me.profile)
                
            video_list = []
            notes_list = []
            tests_list = []
            assignments_list = []
            
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            
            if me.profile.accessNotes == True:
                notes = batch.notes_batches.all().order_by(data_order)

                for note in notes:
                    bought = False
                    if note.id in student_brought_notes:
                        bought = True

                    if note.locked == False:
                        bought = True

                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    try:
                        subject = note.subject.name
                    except:
                        subject = None

                    try:
                        chapter = note.chapter.name
                    except:
                        chapter = None
                        
                    try:
                        Bookmark = Bookmark_object.isNoteBookmark(note.id)
                    except:
                        Bookmark = False
                        
                    notes_dict = {
                        'id': note.id,
                        'title': note.title,
                        'publishDate': note.publishDate,
                        'thumbnail': note.thumbnail,
                        'subject': subject,
                        'chapter': chapter,
                        'locked': note.locked,
                        'noteViewsLimite': note.noteViewsLimite,
                        'link': note_link,
                        'Bookmark': Bookmark,
                        'bought': bought,
                    }
                    notes_list.append(notes_dict)
                    
            if me.profile.accessVideo == True:
                videos = batch.video_batches.all().order_by(data_order)
                
                video_teachers_list = []
                for video in videos:
                    try:
                        subject = video.subject.name
                    except:
                        subject = None

                    try:
                        chapter = video.chapter.name
                    except:
                        chapter = None
                        
                    bought = False
                    if video.id in student_brought_videos:
                        bought = True

                    if video.locked == False:
                        bought = True
                        
                    try:
                        Bookmark = Bookmark_object.isVideoBookmark(video.id)
                    except:
                        Bookmark = False

                    videos_dict = {
                        'id': video.id,
                        'name': video.title,
                        'subject': subject,
                        'chapter': chapter,
                        'urlLink': video.urlLink,
                        'lowLink': video.lowlink,
                        'highLink': video.highlink,
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate,
                        'thumbnail': video.thumbnail,
                        'viewsLimite': video.viewsLimite,
                        'Bookmark': Bookmark,
                        'bought': bought,
                    }
                    video_list.append(videos_dict)

            if me.profile.accessTests == True:
                tests = batch.test_batches.all().order_by(data_order)
                student_test_helper = StudentPackageHelper(me.profile)
                taken_tests_ids = student_test_helper.taken_test()
                
                chapter_list = []
                subject_list = []

                for test in tests:
                    total_questions = test.questions.all().count()
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()

                    bought = False
                    if test.id in student_brought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    for subject in subjects:
                        subject_dict = {'id': subject.id, 'name': subject.name}
                        if subject_dict not in subject_list:
                            subject_list.append(subject_dict)

                    for chapter in chapters:
                        chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        if chapter_dict not in chapter_list:
                            chapter_list.append(chapter_dict)

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test.id in taken_tests_ids:
                        first_attempt = False
                    else:
                        first_attempt = True

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.get(student=me.profile)
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'name': test.name, 
                                    'total_Attempts': student_last_report.attempt_count,
                                    'totalMarks': test.totalMarks, 
                                    'passing_marks': test.passing_marks,
                                    'published': test.published,
                                    'time': test.time,
                                    'locked': test.locked,
                                    'total_questions': total_questions,
                                    'testTimeOver': testTimeOver,
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'subjects': subject_list,
                                    'chapters': chapter_list,
                                    'bought': bought,
                                    }
                                tests_list.append(test_dict)

                        else:
                            test_dict = {
                                'id': test.id,
                                'name': test.name, 
                                'first_attempt': first_attempt, 
                                'total_Attempts': student_last_report.attempt_count,
                                'totalMarks': test.totalMarks,
                                'passing_marks': test.passing_marks,
                                'published': test.published,
                                'time': test.time,
                                'locked': test.locked,
                                'total_questions': total_questions,
                                'testTimeOver': testTimeOver,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'subjects': subject_list,
                                'chapters': chapter_list,
                                'bought': bought,
                                }
                            tests_list.append(test_dict)

                    elif first_attempt == False and test.repeatTest == False:
                        pass

                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'total_Attempts': 0, 
                            'first_attempt': first_attempt,
                            'totalMarks': test.totalMarks,
                            'passing_marks': test.passing_marks,
                            'published': test.published,
                            'time': test.time,
                            'locked': test.locked,
                            'total_questions': total_questions,
                            'testTimeOver': testTimeOver,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'bought': bought,
                            }
                        tests_list.append(test_dict)
                        
            assignments = batch.assignment_batch.all().order_by(data_order)
            for assignment in assignments:
                assign_dict = {
                    'id': assignment.id,
                    'link': assignment.link,
                    'published': assignment.published,
                    'dueDate': assignment.dueDate,
                    'title': assignment.title,
                    'description': assignment.description,
                    'publish': assignment.publish}
                assignments_list.append(assign_dict)

            all_data = {
                'video_list': video_list,
                'notes_list': notes_list,
                'tests_list': tests_list,
                'assignments_list': assignments_list,
            }

            context = {'status': True, 'all_data': all_data}

        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class EclassopediaWebLink(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        url ="https://bodhiai.live/content/student_monthly_report/"
        urls = f"{url}"
        context = {'status': True, 'link': urls}
        
        return Response(context)

class TeacherGetOldPackageHistory(APIView):
    def get(self, request):
        package = "Labour Law 2023 (Revision)"
        students = StudentBoughtPackageHistory.objects.filter(package=package)
        print(students)
        return Response("success")

class PackageStudentAddCertificate(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        student_id = data['student_id']
        package = Package.objects.get(id=package_id)
        student = Student.objects.get(id=student_id)
        try:
            pacakge_name = data['package_name']
        except:
            pacakge_name = package.title
        try:
            certificate_date = data['certificate_date']
        except:
            studentPackage = StudentPackage.objects.get(package=package, student=student)
            certificate_date = studentPackage.endDate
        certificate_no = data['certificate_no']
        grade = data['grade']

        try:
            studentCertificate = StudentPackageCertificate()
            studentCertificate.student = student
            studentCertificate.package = package
            studentCertificate.certificate_no = certificate_no
            studentCertificate.certificate_date = certificate_date
            studentCertificate.grade = grade
            studentCertificate.exam_name =pacakge_name
            studentCertificate.save()

            context  = {'status': True, 'message': "Student  certificate added"}

        except Exception as e:
            context  = {'status': False, 'message':  str(e) }

        return Response(context)

class TeacherGetStudentCertificate(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        package_id = data['package_id']
        student_id = data['student_id']
        package = Package.objects.get(id=package_id)
        student = Student.objects.get(id=student_id)

        try:
            studentCertificate = StudentPackageCertificate.objects.filter(student=student,package=package).last()
            student_dict = {
                "certificate_no":studentCertificate.certificate_no,
                "student_name":student.name,
                "exam_name":studentCertificate.exam_name,
                "certificate_date":studentCertificate.certificate_date,
                "grade" : studentCertificate.grade

            }

            context  = {'status': True, 'data': student_dict}

        except Exception as e:
            context  = {'status': False, 'message':  str(e) }

        return Response(context)

class StudentGetCertificate(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        studentCertificates = StudentPackageCertificate.objects.filter(student=me.profile)
        student = Student.objects.get(id= me.profile.id)
        print(student.id)
        try:
            
            student_list = []
            for certificate in studentCertificates:
                student_dict = {
                    "certificate_no":certificate.certificate_no,
                    "student_name":certificate.student.name,
                    "exam_name":certificate.exam_name,
                    "certificate_date":certificate.certificate_date,
                    "grade" : certificate.grade

                }
                student_list.append(student_dict)

            context  = {'status': True, 'data': student_list}

        except Exception as e:
            context  = {'status': False, 'message':  str(e) }

        return Response(context)

class StudentGetAgoraLiveVideoYoutube(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            video_list = []
            nv_list = set()
            g_meet_list = set()
            live_videos_list = []

            nativeLiveVideo = set(video for video in NativeLiveVideo.objects.filter(
                batches__in=batches, live=True))
            nv_list.update(nativeLiveVideo)

            nativeLiveVideos = set(video for video in NativeLiveVideo.objects.filter(
                students=me.profile, live=True).select_related('teacher').order_by('-id'))
            nv_list.update(nativeLiveVideos)

            g_meet = set(g_video for g_video in GoogleMeetLive.objects.filter(
                students=me.profile, live=True).select_related('teacher').order_by('-id'))
            g_meet_list.update(g_meet)

            all_live_videos = LiveVideoLink.objects.filter(Q(batches__in=batches) | Q(students=me.profile)).filter(
                locked=False, deleted=False).select_related('teacher').order_by('-id').distinct('id')

            live_videos = all_live_videos
            for lv in live_videos:
                live_videos_list.append(lv)

            for gm in g_meet_list:
                try:
                    teacher_dict = {
                        'id': gm.teacher.id,
                        'name': gm.teacher.name,
                        'username': gm.teacher.teacheruser.username,
                        'photo': gm.teacher.photo
                    }

                    live_dict = {
                        'id': gm.id,
                        'title': gm.title,
                        'teacher': teacher_dict,
                        'time': gm.time,
                        'live': gm.live,
                        'antVideo': False,
                        'streamId': gm.link,
                        'multipeer': False,
                        'jitsi': False}
                    video_list.append(live_dict)
                except Exception as e:
                    print(str(e))

            for live in nv_list:
                try:
                    stream_id = live.teacher.teacheruser.username.split('@')[0]
                    final_id = stream_id.replace('.', '')
                    teacher_dict = {
                        'id': live.teacher.id,
                        'name': live.teacher.name,
                        'username': final_id,
                        'photo': live.teacher.photo
                    }

                    live_dict = {
                        'id': live.id,
                        'title': live.title,
                        'teacher': teacher_dict,
                        'time': live.time,
                        'live': live.live,
                        'antVideo': live.antVideo,
                        'streamId': live.streamId,
                        'multipeer': live.multipeer,
                        'jitsi': live.jitsiVideo,
                        'jitsiLink': live.jitsiLink,
                        'subject': live.subject,
                    }
                    video_list.append(live_dict)
                except Exception as e:
                    print(str(e))
            for lv in live_videos_list:
                try:
                    teacher = lv.teacher
                    try:

                        teacher_dict = {'id': teacher.id, 'name': teacher.name, 'photo': teacher.photo}
                    except:
                        teacher_dict = {}
                    lv_dict = {'id': lv.id, 'link': lv.link, 'teacher': teacher_dict,'time': lv.time, 'title': lv.title}
                    video_list.append(lv_dict)
                except Exception as e:
                    print(str(e))
            video_sorted_data = sorted(video_list, key=lambda x: x["time"], reverse=True)
            context = {'status':True,'videos': video_sorted_data}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)

class EvaluateTestOption(APIView):
    def post(self, request, *args, **kwargs):
        try:
            me = Studs(self.request.user)
            data = request.data
            test_id = data['test_id']
            answers = data['answers']
            totalTime = data['totalTime']
            answers = answers.replace('\"', '')
            answers = answers.split(',')
            student_selfie = data.get('student_selfie')
            test = Test.objects.get(id=test_id)
            try:
                testMarks = StudentMarks.objects.get(student=me.profile, test=test)
                attemptCount = testMarks.attempt_count+1
                testMarks.delete()
            except:
                attemptCount = 1

            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount
            testMarks.student_selfie = student_selfie
            testMarks.save()

            inner = []
            outer = []
            for ind, ans in enumerate(answers):
                try:
                    val = ans.replace('[', '')
                    val = val.replace(']', '')
                    val = val.replace(' ', '')
                    inner.append(val)
                    if (ind+1) % 3 == 0:
                        outer.append(inner)
                        inner = []
                except Exception as e:
                    print(str(e))
            for out in outer:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile
                for ind, inn in enumerate(out):
                    if ind == 0:
                        question_id = inn
                        question = Question.objects.get(id=question_id)
                        attemptedQuestion.question = question
                    elif ind == 1:
                        if inn == '-1':
                            attemptedQuestion.attempted = False
                            attemptedQuestion.right = None
                        else:
                            attemptedQuestion.attempted = True

                            if 'text-' in inn:
                                answer = inn.replace('text-', '')
                                oneWordAnswer = question.oneWordAnswer
                                oneWordAnswer = oneWordAnswer.replace(' ', '')

                                if answer.isdigit():
                                    if answer == oneWordAnswer:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                                else:
                                    if answer.lower() == oneWordAnswer.lower():
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False

                                attemptedQuestion.studentOneWordAnswer = answer

                            else:
                                if '-' not in inn:
                                    option = Option.objects.get(id=inn)
                                    attemptedQuestion.save()
                                    attemptedQuestion.optionAttempted.add(
                                        option)
                                    if option.correct == True:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                                else:
                                    inn = inn.split('-')
                                    flag = False
                                    for i in inn:
                                        option = Option.objects.get(id=i)
                                        attemptedQuestion.save()
                                        attemptedQuestion.optionAttempted.add(
                                            option)
                                        if option.correct == True:
                                            pass
                                        else:
                                            flag = True

                                    if flag == False:
                                        attemptedQuestion.right = True
                                    else:
                                        attemptedQuestion.right = False
                    elif ind == 2:
                        attemptedQuestion.time = inn
                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)

            try:
                total_marks = 0
                totalPositiveMarks = 0.0
                totalNegativeMarks = 0.0

                totalRightQuestions = 0
                totalWrongQuestions = 0
                percentage = 0.0

                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    attemptedOptions = aq.optionAttempted.all()
                    attempted = aq.attempted
                    right = aq.right

                    if right:
                        totalPositiveMarks += question.marks
                        total_marks += question.marks
                        totalRightQuestions += 1
                    elif right == False:
                        total_marks -= question.negativeMarks
                        totalNegativeMarks += question.negativeMarks
                        totalWrongQuestions += 1

                    if aq.attempted == False:
                        pass

                pass_marks = testMarks.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = testMarks.test.totalMarks
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = testMarks.test.questions.all().count()
                totalAttemptedQuestions = testMarks.questions.filter(
                    attempted=True).count()
                totalNotAttemptedQuestions = testMarks.questions.filter(
                    attempted=False).count()

                testMarks.totalQuestions = totalQuestions
                testMarks.totalAttemptedQuestions = totalAttemptedQuestions
                testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                testMarks.totalPositiveMarks = totalPositiveMarks
                testMarks.totalNegativeMarks = totalNegativeMarks

                testMarks.totalRightQuestions = totalRightQuestions
                testMarks.totalWrongQuestions = totalWrongQuestions

                testMarks.result = result
                testMarks.percentage = percentage
                testMarks.totalTestMarks = total_test_marks

                testMarks.marks = total_marks
                testMarks.save()
            except:
                pass

            testMarks.marks = total_marks
            testMarks.save()

            context = {
                'status': 'Success',
                'message': testMarks.id,
                'obtainedMarks': testMarks.marks,
                'totalMarks': test.totalMarks,
                'attempCount': testMarks.attempt_count,
                'student_selfie':testMarks.student_selfie,
                }
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)
    
class DownloadUPMStudentsCsv(APIView):
    def get(self, request):
        institute_code = 'UPM'
        
        try:
            records = PaidAmountStudentExam.objects.all()
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['name', 'father_name','mother_name', 'phone_number', 'whatsapp_number','dob','paidAmount','paidDate'])
                
            for record in records:
                writer.writerow([record.student.name,record.student.father_name, record.student.mother_name, 
                                record.student.phone_number, record.student.whatsapp_number,record.student.dob,
                                record.paidAmount,record.date])
                
            response['Content-Disposition'] = 'attachment; filename="' +institute_code+'_students_list.csv"'
            return response
        
        except Exception as e:
            return HttpResponse(str(e))   

class AddSubjectInInstitute(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        username = me.profile.teacheruser.id
        subject_ids = data['subject_id']
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        subject_id=subject_ids.strip('][').split(',')
        
        try:
            teacher = Teacher.objects.get(institute=institute,mainTeacher=True)
            teacher_id = teacher.id
            teacher_subject =set(subject.id for subject in teacher.subjects.all())
            for subject in subject_id:
                subjectreplica = Subject.objects.get(id = subject)
                if subjectreplica.id in teacher_subject:
                    context = {'status': False, 'message': 'Sorry!! This Subject already added in your institute'}
                    return Response(context)
                teacher.subjects.add(subject)
                teacher.save()
            context = {'status': 'Success', 'message': 'Subjects added'}
        
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)

class AddPackageCretification(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        tests = package.tests.all()
        test_ids = [test.id for test in tests]
        cleared_tests = [] 
        tests_list = []
        for test in tests:
            if test.publish == True:

                test_result = StudentMarks.objects.filter(test = test, student = me.profile).first()
                
                if test_result:
                    if test.id not in cleared_tests and test_result.result == 'pass':
                        cleared_tests.append(test.id)

                if cleared_tests and cleared_tests[-1] == test.id:
                    test_status = True
                else:
                    test_status = False

        if set(test_ids) == set(cleared_tests):
            today_date = datetime.now()
            try:
                student_package = StudentPackageCertificate.objects.get(student = me.profile,package= package)
                student_package_date = student_package.certificate_date

            except StudentPackageCertificate.DoesNotExist:
                student_package = StudentPackageCertificate()
                student_package.student = me.profile
                student_package.package = package
                student_package.certificate_date = today_date
                student_package.save()
                student_package_date = student_package.certificate_date

            context = {'status': True, 'message': "Certification added","data":student_package_date}
        else:
            context = {'status': False, 'message': "please complete all test"}
        return Response(context)

class StudentPackageDataFilter1(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        package_id = data['package_id']
        subject_id = data.get('subject_id')
        chapter_id = data.get('chapter_id')
        topic_id = data.get('topic_id')
        subtopic_id = data.get('subtopic_id')
        try:
            package = Package.objects.get(id=package_id)
            videos = package.videos.all()
                



            videos_list = []

                    

            for video in videos:
                video_dict = {}
                video_dict['id'] = video.id
                video_dict['title'] = video.title
                video_dict['subject'] = video.subject.name
                video_dict['chapter'] = video.chapter.name
                if video.topics:
                    video_dict['topics'] = video.topics.topic
                if video.subTopics:
                    video_dict['subTopics'] = video.subTopics.name
                video_dict['urlLink'] = video.urlLink
                video_dict['generalVideo'] = video.generalVideo
                video_dict['publishDate'] = video.publishDate
                video_dict['locked'] = video.locked
                video_dict['publish'] = video.publish
                video_dict['lowlink'] = video.lowlink
                video_dict['highlink'] = video.highlink
                video_dict['thumbnail'] = video.thumbnail
                video_dict['viewsLimite'] = video.viewsLimite

                videos_list.append(video_dict)


            context = {
                'status': True,
                'message': 'Success',
                'videos_list': videos_list,
            }
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class StudentGetCourseWiseVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            if me.profile.accessVideo == False:
                context = {'message':'You do not have access to get videos','videos': []}
                return Response(context)
            
            if me.institute.listReversed:
                order_by = '-id'
            else:
                order_by = 'id'
                
            batches = me.profile.batches.all()
                
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            subjects = course.subjects.all().order_by('id')
            
            videos = Video.objects.select_related('subject','chapter').prefetch_related('teacher').filter(
                subject__in=subjects,batches__in=batches).distinct('id').order_by(order_by)
                
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_videos = bought_packages.get_all_brought_videos()
            
            Bookmark_Object = CheckBookmark(me.profile)
            
            final_videos_list = []
            
            for video in videos:
                teachers = video.teacher.all()
                teachers_list = []
                for teacher in teachers:
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    teachers_list.append(teacher_dict)
                    
                subject_dict = {'id': video.subject.id, 'name': video.subject.name}
                chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code}
                
                bought = False
                if video in bought_videos:
                    bought = True
                    
                if video.locked == False:
                    bought = True

                vision = True
                if video.viewsLimite:
                    vision = CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                    
                try:
                    Bookmark = Bookmark_Object.isVideoBookmark(video.id)
                except:
                    Bookmark = False
                    
                if video.download_link:
                    download_link = video.download_link
                else:
                    download_link = ""

                if video.publish == True:
                    video_dict = {
                        'id': video.id,
                        'title': video.title,
                        'link': video.urlLink,
                        'lowLink': video.lowlink,
                        'highLink': video.highlink,
                        'download_link': download_link,
                        'teacher': teachers_list,
                        'subject': subject_dict,
                        'chapter': chapter_dict,
                        'generalVideo': video.generalVideo,
                        'publishDate': video.publishDate,
                        'bought': bought,
                        'thumbnail': video.thumbnail,
                        'vision': vision,
                        'Bookmark':Bookmark
                        }
                    final_videos_list.append(video_dict)

            context = {'status':True, 'videos': final_videos_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class StudentCourseWiseTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        
        try:
            if me.profile.accessTests == False:
                context = {'message':'You do not have access to get tests','tests': []}
                return Response(context)
            
            if me.institute.listReversed:
                order_by = '-id'
            else:
                order_by = 'id'
            
            batches = me.profile.batches.all()
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            subjects = course.subjects.all().order_by('id')
            
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_tests = bought_packages.get_all_brought_tests()
            
            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests_ids = student_test_helper.taken_test()

            tests = Test.objects.filter(batches__in=batches, subjects__in=subjects)\
                    .prefetch_related('subjects','chapters','batches').select_related('createdBy').order_by(order_by).distinct('id')
            
            tests_list=[]        
            for test in tests:
                try:
                    subjects = test.subjects.all()
                    chapters = test.chapters.all()
                    chapter_list = []
                    subject_list = []
                    
                    for subject in subjects:
                        try:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                        except:
                            subject_dict = {'id': 0, 'name': 'General'}
                            
                        subject_list.append(subject_dict)

                    for chapter in chapters:
                        try:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        except:
                            chapter_dict = {'id': 0, 'name': 'General', 'code': 0}

                        chapter_list.append(chapter_dict)
                        
                    teacher_dict = {'id': 0, 'name': 'teacher'}
                    batches = test.batches.all()
                    batches_list = []
                    bought = False
                    if test.id in bought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    for batch in batches:
                        batch_dict = {'id': batch.id, 'name': batch.name}
                        batches_list.append(batch_dict)

                    numberQuestions = test.questions.all().count()

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    first_attempt = True
                    if test.id in taken_tests_ids:
                        first_attempt = False
                    else:
                        first_attempt = True

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.get(student=me.profile)
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'name': test.name,
                                    'totalMarks': test.totalMarks,
                                    'published': test.published,
                                    'subjects': subject_list,
                                    'chapters': chapter_list,
                                    'createdBy': teacher_dict,
                                    'time': test.time,
                                    'locked': test.locked,
                                    'batches': batches_list,
                                    'numberQuestions': numberQuestions,
                                    'bought': bought,
                                    'first_attempt': first_attempt,
                                    'testTimeOver': testTimeOver,
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                                tests_list.append(test_dict)
                        else:
                            test_dict = {
                                'id': test.id,
                                'name': test.name,
                                'totalMarks': test.totalMarks,
                                'published': test.published,
                                'subjects': subject_list,
                                'chapters': chapter_list,
                                'createdBy': teacher_dict,
                                'time': test.time,
                                'locked': test.locked,
                                'batches': batches_list,
                                'numberQuestions': numberQuestions,
                                'bought': bought,
                                'first_attempt': first_attempt,
                                'testTimeOver': testTimeOver,
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                            tests_list.append(test_dict)

                    elif first_attempt == False and test.repeatTest == False:
                        pass
                    else:
                        test_dict = {
                            'id': test.id,
                            'name': test.name,
                            'totalMarks': test.totalMarks,
                            'published': test.published,
                            'subjects': subject_list,
                            'chapters': chapter_list,
                            'createdBy': teacher_dict,
                            'time': test.time,
                            'locked': test.locked,
                            'batches': batches_list,
                            'numberQuestions': numberQuestions,
                            'bought': bought,
                            'first_attempt': first_attempt,
                            'testTimeOver': testTimeOver,
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions}
                        tests_list.append(test_dict)
                    
                except:
                    pass
            context = {'tests': tests_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class AddCourseCertification(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        batches = me.profile.batches.all()
        
        if me.institute.listReversed:
            order_by = '-id'
        else:
            order_by = 'id'
            
        try:
            course_id = data['course_id']
            course = Course.objects.get(id=course_id)
            subjects = course.subjects.all().order_by('id')
            tests = Test.objects.filter(batches__in=batches, subjects__in=subjects)\
                        .prefetch_related('subjects','chapters','batches').select_related('createdBy').distinct('id').order_by(order_by)
                
            test_ids = [test.id for test in tests]
            cleared_tests = [] 
            tests_list = []
            for test in tests:
                if test.publish == True:
                    test_result = StudentMarks.objects.filter(test = test, student = me.profile).first()
                    
                    if test_result:
                        if test.id not in cleared_tests and test_result.result == 'pass':
                            cleared_tests.append(test.id)

                    if cleared_tests and cleared_tests[-1] == test.id:
                        test_status = True
                    else:
                        test_status = False

            if set(test_ids) == set(cleared_tests):
                today_date = datetime.now()
                try:
                    student_course = StudentCourseCertificate.objects.get(student = me.profile,course= course)
                    student_course_date = student_course.certificate_date

                except StudentCourseCertificate.DoesNotExist:
                    student_course = StudentCourseCertificate()
                    student_course.student = me.profile
                    student_course.course = course
                    student_course.certificate_date = today_date
                    student_course.save()
                    student_course_date = student_course.certificate_date

                context = {'status': True, 'message': 'Certification added', 'data':student_course_date}
            else:
                context = {'status': False, 'message': 'Please Complete all Test'}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class AllPackageList(APIView):
    def post(self,request):
        data = request.data
        institute_code = data['institute_code']
        try:
            packages = Package.objects.filter(teacher__institute__code = institute_code,publish=True).select_related('teacher').order_by('-id')
            package_list = []
            for package in packages:
                total_days = package.duration
                months = total_days // 30
                remaining_days = total_days % 30
                
                package_dict =  {
                    'id': package.id,
                    'title': package.title,
                    'price': package.price,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'duration_months': months,
                    'duration_days': remaining_days,
                    'teacher': package.teacher.name,
                    'date': package.date,
                }
                package_list.append(package_dict)
                
            context = {'status':True, 'packages': package_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class PackageBuyLatest(APIView):
    def post(self,request):
        data = request.data
        institute_code = data['institute_code']
        try:
            packages = Package.objects.filter(teacher__institute__code = institute_code).select_related('teacher').order_by('-id')[:6]
            package_list = []
            for package in packages:
                total_days = package.duration
                months = total_days // 30
                remaining_days = total_days % 30
                
                package_dict =  {
                    'id': package.id,
                    'title': package.title,
                    'price': package.price,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'duration_months': months,
                    'duration_days': remaining_days,
                    'teacher': package.teacher.name,
                    'date': package.date,
                }
                package_list.append(package_dict)
                
            context = {'status':True, 'packages': package_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class DownloadVideoCsv(APIView):
    def get(self,request):
        teacher_username = "alfa_teacher"
        teacher = get_object_or_404(Teacher, teacheruser__username=teacher_username)

        videos = Video.objects.filter(teacher=teacher).select_related('subject', 'chapter')

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="videos.csv"'

        writer = csv.writer(response, quoting=csv.QUOTE_MINIMAL)
        writer.writerow(['ID', 'Title', 'Subject', 'Chapter', 'URL Link'])  # CSV header

        for video in videos:
            writer.writerow([
                video.id,
                 video.title.replace('"', ''),
                video.subject.name if video.subject else 'no-subject',
                video.chapter.name if video.chapter else 'no-chapter',
                video.urlLink
            ])

        return response
    
class Function(APIView):
    def get(self, request):
        liveVideos = LiveVideoLink.objects.filter(teacher="76", download_link__isnull=False).order_by('-id')[:20]
        for video_object in liveVideos:
            upload_yt_live_video_to_azure_server.delay(video_object.id)
        return Response("success")

class Funcation(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        chapter_id = data['chapter_id']
        page = data['page']
        item_page = 20
        start_index = int(page) * item_page
        end_index = int(start_index) + item_page
        chapter = Chapter.objects.get(id=chapter_id)
        subject = chapter.subject
        
        questions = Question.objects.filter(subject=subject, chapter=chapter).order_by('-id')
        questions_list = []
        my_batches = me.profile.batches.all()
        for question in questions:
            used_list = []
            for bat in my_batches:
                try:
                    timesUsed = TimesUsed.objects.get(question=question, institute=me.profile.institute, batch=bat)
                    times_used_dict = {'used': timesUsed.used, 'batch': bat.name}
                    used_list.append(times_used_dict)
                except:
                    times_used_dict = {'used': 0, 'batch': bat.name}
                    used_list.append(times_used_dict)
                    
            text = question.text
            picture = question.picture
            subject_dict = {'id': question.subject.id, 'name': question.subject.name}
            chapter_dict = {'id': question.chapter.id, 'name': question.chapter.name}
            if question.direction != None:
                direction_dict = {
                    'id': question.direction.id, 
                    'text': question.direction.text,
                    'picture': question.direction.picture}
            else:
                direction_dict = {'id': None, 'text': None, 'picture': None}
                
            language = question.language
            source = question.source
            difficulty = question.difficulty
            marks = question.marks
            dynamicText = question.dynamicText
            negativeMarks = question.negativeMarks
            options = Option.objects.filter(question=question)
            options_list = []
            for option in options:
                optionText = option.text
                optionPicture = option.picture
                explanationText = option.explanationText
                explanationPicture = option.explanationPicture
                correct = option.correct
                option_dict = {
                    'id': option.id, 
                    'text': text, 
                    'text': optionText, 
                    'picture': optionPicture,
                    'explanationText': explanationText, 
                    'explanationPicture': explanationPicture, 
                    'correct': correct}
                options_list.append(option_dict)

            question_dict = {
                'id': question.id, 
                'text': text, 
                'dynamicText': dynamicText, 
                'picture': picture, 
                'subject': subject_dict, 
                'chapter': chapter_dict, 
                'direction': direction_dict,
                'options': options_list, 
                'language': language, 
                'source': source, 
                'marks': marks, 
                'negativeMarks': negativeMarks, 
                'difficulty': difficulty, 
                'numberUsed': used_list
                }
            questions_list.append(question_dict)
        context = {'questions': questions_list}
        return Response(context)
    
class Function(APIView):
    def get(self, request):
        user = User.objects.filter(Q(username__iexact="7976365391") | Q(username__icontains="7976365391@")).order_by('-id').first()
        if user:
            print(user.username)
        
        return Response("success")
    
class Function(APIView):
    def get(self, request):
        url_list = []
        start_id = 598087
        end_id = 598116
        all_urls = Question.objects.filter(id__range=(start_id, end_id))
        
        Buket_Name = 'bodhi_old_bucket'
        for record in all_urls:
            url2 = record.picture
            print(url2)
            if url2 is not None:
                if "bodhiaigeneral.blob.core.windows.net/bodhiuploadbucket" in url2:
                    input_url = url2.split('/')[3:]
                    print(input_url)
                    final_key = '/'.join(input_url)
                    urls = f"https://storage.googleapis.com/{Buket_Name}/{final_key}"
                    
                    print(urls) 
                   
        return Response("")
    
class Function(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        liveVideos = Video.objects.filter(teacher="54031", download_link__isnull=True).order_by('-id')[:2]
        print(liveVideos)
        for video_object in liveVideos:
            upload_yt_video_to_google_cloud(video_object.id,me.profile.id)
        return Response("success")

class Function(APIView):
    def get(self, request):
        users  =['9887788417@dbsit','9623694346@dbsit','9119297916@dbsit']
        for user in users:
            user = User.objects.get(username = user)
            token = Token.objects.get(user = user)
            token.delete()
            
        return Response("success")
    
class Function(APIView):
    def post(self, request):
        data = request.data
        package_id = data['package_id']
        package = Package.objects.get(id=package_id)
        studentss = package.students.all()
        student= Student.objects.get(id =1209718)
        res = package.students.add(student)
        all_students_list = []
        for student in studentss:
            all_students_list.append(student.id)
        print(len(all_students_list))
        today = datetime.now()
        student_packages = StudentPackage.objects.filter(package=package, endDate__gte=today)

        eligible_students = {student_package.student.id for student_package in student_packages if student_package.student}
        print(len(eligible_students))

        return Response('ress')

class Function(APIView):
    def get(self, request):
        all_urls = Option.objects.filter(explanationPicture__startswith="https://bodhiaigeneral.blob.core.windows.net/bodhiai-questions/").order_by("id")
        Buket_Name = 'bodhiaiquestions'
        for record in all_urls:
            url2 = record.explanationPicture
            if url2 is not None:
                if "bodhiaigeneral.blob.core.windows.net/bodhiai-questions/" in url2:
                    input_url = url2.split('/')[4:]
                    final_key = '/'.join(input_url)
                    urls = f"https://storage.googleapis.com/{Buket_Name}/{final_key}"
                    print(urls)
                   
        return Response("")
    
class Function(APIView):
    def get(self,request):
        me = Teach(self.request.user)

        try:
            if me.profile.mainTeacher:
                subjects = Subject.objects.filter(teachersubject__institute=me.profile.institute).distinct()
            else:
                subjects = me.profile.subjects.all().distinct()

            question = Question.objects.filter(subject__in = subjects).count()

            context = {'status':True,'count': question}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherCreateOfflineTest(APIView):
    def post(self, request):
        me =Teach(self.request.user)
        data = request.data
        name = data['name']
        try:
            questionFile = data['questionFile']
        except:
            questionFile = None
            
        try:
            test = OfflineTest()
            test.name = name
            test.questionFile = questionFile
            test.createdBy = me.profile
            test.save()
            context = {'status':True, 'message':'Offline Test Create Successfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
                   
        return Response(context)
    
class GetAllOfflineTestList(APIView):
    def get(self, request):
        me = request.user
        data = request.data
        try:
            profile = me.student
            institute = profile.institute
        except:
            profile = me.teacher
            institute = profile.institute
        
        try:
            test_list = []
            offlineTests = OfflineTest.objects.filter(createdBy__institute = institute).order_by('-id')
            for offlineTest in offlineTests:
                test_dict = {
                    'id':offlineTest.id,
                    'test_name':offlineTest.test_name,
                    'test_date':offlineTest.test_date,
                    'questionFile':offlineTest.questionFile,
                }
                test_list.append(test_dict)
            context = {'status':True, 'test_list': test_list}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)

class OfflineTestSubjectList(APIView):
    def post(self, request):
        me = request.user
        data = request.data
        try:
            test_id = data['test_id']
            try:
                profile = me.student
                institute = profile.institute
            except:
                profile = me.teacher
                institute = profile.institute
            
            subject_list = []
            testMarks = OfflineTestMarks.objects.filter(offline_test = test_id)
            for testMark in testMarks:
                testMark_dict = {
                    'id':testMark.testSection.id,
                    'section_name':testMark.testSection.name,
                    'section_totalmark':testMark.testSection.total_marks
                }
                subject_list.append(testMark_dict)
            
            context = {'status':True, 'subject_list': subject_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class StudentGetOfflineTestMarks(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            testMarks = OfflineTestMarks.objects.filter(offline_test__id = test_id, student = me.profile)
            subject_total_marks = 0
            student_obtained_marks = 0

            testMark_list = []
            for testMark in testMarks:
                subject_total_marks += testMark.testSection.total_marks
                student_obtained_marks += testMark.obtained_marks
                
                try:
                    questionFile = testMark.offline_test.questionFile
                except:
                    questionFile = None
                
                testMark_dict = {
                    'id': testMark.id,
                    'subject_name': testMark.testSection.name,
                    'subject_totalmark': testMark.testSection.total_marks,
                    'obtained_marks': testMark.obtained_marks,
                    'questionFile': questionFile,
                }
                testMark_list.append(testMark_dict)
            
            context = {
                'status':True, 
                'testMark_list': testMark_list,
                'subject_total_marks': subject_total_marks,
                'student_obtained_marks': student_obtained_marks,
                }
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class TeacherGetTestAllStudentsList(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            data = request.data
            test_id = data['test_id']
            
            test_students_list = []
            records = OfflineTestMarks.objects.filter(offline_test__id = test_id).order_by('-id')
            for record in records:
                student_dict = {
                    'id': record.student.id,
                    'name': record.student.name
                    }
                
                if student_dict not in test_students_list:
                    test_students_list.append(student_dict)
            
            context = {'status':True, 'test_students_list': test_students_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class TeacherGetOfflineTestMarks(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            test_id = data['test_id']
            testMark_list = []
            testMarks = OfflineTestMarks.objects.filter(offline_test__id = test_id, student__id = student_id)
            subject_total_marks = 0
            student_obtained_marks = 0
            for testMark in testMarks:
                subject_total_marks += testMark.testSection.total_marks
                student_obtained_marks += testMark.obtained_marks
                
                try:
                    questionFile = testMark.offline_test.questionFile
                except:
                    questionFile = None
                
                testMark_dict = {
                    'id': testMark.id,
                    'subject_name': testMark.testSection.name,
                    'subject_totalmark': testMark.testSection.total_marks,
                    'obtained_marks': testMark.obtained_marks,
                    'questionFile': questionFile,
                }
                testMark_list.append(testMark_dict)
            
            context = {
                'status':True, 
                'testMark_list': testMark_list,
                'subject_total_marks': subject_total_marks,
                'student_obtained_marks': student_obtained_marks
                }
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    

class OwnerListShop(APIView):
    def get(self, request):
        me = Teach(self.request.user)
            
        try:
            shops = OwnerShopListing.objects.all().order_by('-id')

            shops_list = []
            for shop in shops:
                shop_dict = {
                    'id': shop.id,
                    'shop_name': shop.shop_name,
                    'shop_owner_name': shop.shop_owner_name,
                    'phone': shop.phone,
                    'created_date': shop.created_date,
                    'updated_date': shop.updated_date,
                }
                shops_list.append(shop_dict)

            context = {'status': True, 'shops': shops_list}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            shop = OwnerShopListing()
            shop.teacher = me.profile
            shop.shop_name = data['shop_name']
            shop.shop_owner_name = data['shop_owner_name']
            shop.phone = data['phone']
            shop.whatsapp_number = data.get('whatsapp_number')
            shop.map_link = data.get('map_link')
            shop.state = data['state']
            shop.city = data['city']
            shop.area = data.get('area')
            shop.pincode = data.get('pincode')
            shop.save()
            
            photos_data_str = data.get('photos', '[]')
            photos_data = json.loads(photos_data_str)
            for image_url in photos_data:
                photo = ShopPhoto.objects.create(image_url=image_url)
                shop.photos.add(photo)
            
            context = {'status':True, 'message':'Shop Added Successfully'}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
    def put(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            shop = OwnerShopListing.objects.get(id=record_id)
            shop.shop_name = request.data.get('shop_name', shop.shop_name)
            shop.shop_owner_name = request.data.get('shop_owner_name', shop.shop_owner_name)
            shop.phone = request.data.get('phone', shop.phone)
            shop.whatsapp_number = request.data.get('whatsapp_number', shop.whatsapp_number)
            shop.map_link = request.data.get('map_link', shop.map_link)
            shop.state = request.data.get('state', shop.state)
            shop.city = request.data.get('city', shop.city)
            shop.area = request.data.get('area', shop.area)
            shop.pincode = request.data.get('pincode', shop.pincode)
            shop.save()

            photos_data_str = request.data.get('photos', [])
            new_photos_data = json.loads(photos_data_str)
            for image_url in new_photos_data:
                if image_url:
                    photo = ShopPhoto.objects.create(image_url=image_url)
                    shop.photos.add(photo)

            context = {'status': True, 'message': 'Shop Updated Successfully'}
                
        except OwnerShopListing.DoesNotExist:
            context = {'status': False, 'message': 'Shop not found'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            shop = OwnerShopListing.objects.get(id=record_id)

            shop.photos.all().delete()

            shop.delete()

            context = {'status': True, 'message': 'Shop and Related photos deleted successfully'}
                
        except OwnerShopListing.DoesNotExist:
            context = {'status': False, 'message': 'Shop not found'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)

class DeleteShopPhoto(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            photo_id = data['photo_id']
            photo = ShopPhoto.objects.get(id=photo_id)
            photo.delete()

            context = {'status': True, 'message': 'Photo deleted successfully'}
                
        except ShopPhoto.DoesNotExist:
            context = {'status': False, 'message': 'Photo not found'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
class SingleShopView(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            record_id = data['record_id']
            shop = OwnerShopListing.objects.get(id=record_id)
            
            photos = shop.photos.all()
            photo_details = [{'image_url': photo.image_url} for photo in photos]
                
            shop_details = {
                'id': shop.id,
                'shop_name': shop.shop_name,
                'shop_owner_name': shop.shop_owner_name,
                'phone': shop.phone,
                'whatsapp_number': shop.whatsapp_number,
                'map_link': shop.map_link,
                'state': shop.state,
                'city': shop.city,
                'area': shop.area,
                'pincode': shop.pincode, 
                'photos': photo_details,               
                'created_date': shop.created_date,
                'updated_date': shop.updated_date,
            }

            context = {'status': True, 'data': shop_details}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
class ClientGetAllShop(APIView):
    def get(self, request):
        me = Studs(self.request.user)
            
        try:
            shops = OwnerShopListing.objects.all().order_by('-id')

            shops_list = []
            for shop in shops:
                try:
                    buy_shop = ClientShop.objects.get(student = me, shop = shop)
                    bought = True
                except:
                    bought = False
                    
                photos = shop.photos.all()
                photo_details = [{'image_url': photo.image_url} for photo in photos]
                
                shop_dict = {
                    'id': shop.id,
                    'shop_name': shop.shop_name,
                    'shop_owner_name': shop.shop_owner_name,
                    'phone': shop.phone,
                    'whatsapp_number': shop.whatsapp_number,
                    'map_link': shop.map_link,
                    'state': shop.state,
                    'city': shop.city,
                    'area': shop.area,
                    'pincode': shop.pincode, 
                    'photos': photo_details, 
                    'bought': bought,
                    'created_date': shop.created_date,
                    'updated_date': shop.updated_date,
                }
                shops_list.append(shop_dict)

            context = {'status': True, 'shops': shops_list}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)

class SearchShop(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            search_query = data.get('search_keyword', None)
            
            if search_query:
                shops = OwnerShopListing.objects.filter(
                    Q(state__icontains=search_query) |
                    Q(city__icontains=search_query) |
                    Q(area__icontains=search_query) |
                    Q(pincode__icontains=search_query)
                )
            else:
                shops = OwnerShopListing.objects.all()

            shop_list = []

            for shop in shops:
                try:
                    buy_shop = ClientShop.objects.get(student = me, shop = shop)
                    bought = True
                except:
                    bought = False
                    
                photos = shop.photos.all()
                photo_details = [{'image_url': photo.image_url} for photo in photos]
                    
                shop_details = {
                    'id': shop.id,
                    'shop_name': shop.shop_name,
                    'shop_owner_name': shop.shop_owner_name,
                    'phone': shop.phone,
                    'whatsapp_number': shop.whatsapp_number,
                    'map_link': shop.map_link,
                    'state': shop.state,
                    'city': shop.city,
                    'area': shop.area,
                    'pincode': shop.pincode, 
                    'photos': photo_details, 
                    'bought': bought,
                }

                shop_list.append(shop_details)

            context = {'status': True, 'shops': shop_list}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
class StudentBuyShopDetails(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            shop_id = data['shop_id']
            amount = data['amount']
            code = me.profile.institute.code
            shop = OwnerShopListing.objects.get(id=shop_id)
            shop.students.add(me.profile)
            price = shop.price

            student_shop = ClientShop(student=me.profile, shop=shop)
            student_shop.save()
            
            paidAmount = PaidAmountClientShop(studentShop = student_shop, paidAmount = price, created_date = timezone.now())
            paidAmount.save()

            try:
                payment = EaseBuzzPaymentResponseRecord.objects.get(payment = data['txnid'])
                payment.shop_buy = paidAmount
                payment.save()
            except:
                pass
                
            context = {'status': True, 'message': 'Payment Successfully Done'}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class ShopGallery(APIView):
    def get(self, request):
        
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
            
        try:
            photos = OwnerShopGallery.objects.all().order_by('-id')

            photos_list = []
            for photo in photos:
                photo_dict = {
                    'id': photo.id,
                    'image_url': photo.image,
                    'created_date': photo.created_date,
                }
                photos_list.append(photo_dict)

            context = {'status': True, 'photos': photos_list}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            gallery = OwnerShopGallery()
            gallery.teacher = me.profile
            gallery.image = data['image_url']
            gallery.save()
            
            context = {'status':True, 'message':'Image Added Successfully'}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            gallery = OwnerShopGallery.objects.get(id=record_id)
            gallery.delete()

            context = {'status': True, 'message': 'Image deleted successfully'}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    

class TeacherListBooks(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
            
        try:
            books = TeacherBookListing.objects.all().order_by('-id')

            books_list = []
            for book in books:
                book_dict = {
                    'id': book.id,
                    'title': book.title,
                    'book_url': book.book_url,
                    'image_url': book.image_url,
                    'created_date': book.created_date,
                }
                books_list.append(book_dict)

            context = {'status': True, 'books': books_list}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)
    
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            book = TeacherBookListing()
            book.teacher = me.profile
            book.title = data.get('title')
            book.book_url = data['book_url']
            book.image_url = data['image_url']
            book.save()
            
            context = {'status':True, 'message':'Book Added Successfully'}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            book = TeacherBookListing.objects.get(id=record_id)
            book.delete()

            context = {'status': True, 'message': 'Book Deleted Successfully'}
                
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context, status=status.HTTP_200_OK)

class TranslateIndividualQuestions(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        credential_path = "google_cloud_details.json"
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path
        translate_client = translate.Client()
 
        try:
            question_id = data['question_id']
            target_language = data['target_language']
            question = Question.objects.get(id = question_id)
            options = Option.objects.filter(question = question)
            
            try:
                qt = question.text
            except:
                qt = question.dynamicText
            
            if qt != None:
                question_soup = BeautifulSoup(qt, 'html.parser')
                self.traverse_and_translate(question_soup, target_language)
                
                translated_options = []
                
                for option in options:
                    qo = option.text
                    if qo != None:
                        option_soup = BeautifulSoup(qo, 'html.parser')
                        self.traverse_and_translate(option_soup, target_language)
                        translated_options.append(str(option_soup))
                        
                context = {'question': str(question_soup), 'options': translated_options}
                    
            else:
                context = {'message': 'Something went wrong'}
                
        except Exception as e:
            context = {'message': str(e)}
            print(f'error in data from frontend {e}')
        
        return Response(context)

    def translate_text(self, text, target_language):
        try:
            credential_path = "google_cloud_details.json"
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path
            translate_client = translate.Client()
            result = translate_client.translate(text, target_language=target_language)
            return result['translatedText']
        except Exception as e:
            print(f"Error during translation: {str(e)}")
            return text
        
    def traverse_and_translate(self,soup,lang):
        for element in soup.contents:
            if element.name == 'img':  # Skip img tags
                continue
            if element.string and not element.string.isspace():
                translated_text = self.translate_text(element.string,lang)
                element.string.replace_with(translated_text)
            else:
                if element.name:
                    self.traverse_and_translate(element)
        
    def translate_html(self,html_content):
        soup = BeautifulSoup(html_content, 'html.parser')
        self.traverse_and_translate(soup)
        return str(soup)

class DeleteTokenView(APIView):
    def get(self, request):
        user = User.objects.get(username= 'conceptc_teacher')
        user_token = Token.objects.get(user=user)
        user_token.delete()
        context = {'status':True, 'message':'Delete Successfully'}
        return Response(context)
    
class SubInstituteTradeStudentListDownload(APIView):
    def get(self, request):
        institute_id = 46428
        institute = Institute.objects.get(id=institute_id)
        sub_institutes = SubInstitute.objects.filter(parent_institute=institute)

        try:
            output = []
            for sub_institute in sub_institutes:
                trades = sub_institute.trades.all()
                for trade in trades:
                    trade_details = TradeDetails.objects.filter(trade=trade, sub_institute=sub_institute).first()

                    if trade_details:
                        queryset = StudentTradePurchase.objects.filter(
                            trade_details = trade_details, approved=True).select_related('student', 'student__studentuser')
                        
                        queryset_count = queryset.count()

                        for student_purchase in queryset:
                            student_data1 = SubInstituteStudent.objects.filter(student=student_purchase.student).first()
                            student_data2 = StudentDetails.objects.filter(student=student_purchase.student).first()
                            temp_list = [
                                trade_details.sub_institute.name, trade_details.trade.name,
                                student_purchase.student.name,
                                student_purchase.student.studentuser.username.split('@')[0],
                                student_purchase.mode,
                                student_purchase.paidAmount,
                                trade_details.session_start,
                                trade_details.session_end,
                                student_data1.category,
                                student_data1.aadhar_card_number,
                                student_data1.student_registration_number,
                                student_data2.email,
                                student_data2.dob,
                                student_data2.address,
                                student_data2.parentName,
                                student_data2.mother_name
                            ]
                            output.append(temp_list)
            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = 'attachment; filename="details.csv"'
                writer = csv.writer(response)
                writer.writerow(['ITI Institute', 'Trade Name', 'Name',
                                'Phone Number', 'Mode', 'Amount',
                                'Session Start', 'Session End', 'Category',
                                'Aadhar Number', 'Register Number',
                                'Email', 'Dob', 'Address', 'Father Name',
                                'Mother Name'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})
        except Exception as e:
            context = {'issues': f"{e}"}
            return Response(context)
        
class EvaluateTest(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
            data = request.data
            test_id = data['test_id']
            totalTime = data['totalTime']
            answers = data['answers']
            answers = answers.replace('\"', '')
            answers = answers.split(',')
            student_selfie = data.get('student_selfie')
            test = Test.objects.get(id=test_id)
            
            try:
                testMarks = StudentMarks.objects.get(student=me.profile, test=test)
                attemptCount = testMarks.attempt_count+1
                testMarks.delete()
            except:
                attemptCount = 1

            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount
            testMarks.student_selfie = student_selfie
            testMarks.save()

            inner = []
            outer = []
            
            for ind, ans in enumerate(answers):
                try:
                    val = ans.replace('[', '')
                    val = val.replace(']', '')
                    val = val.replace(' ', '')
                    inner.append(int(val))
                   
                    if (ind+1) % 3 == 0:
                        outer.append(inner)
                        inner = []
                        
                except Exception as e:
                    print(str(e))
                        
            for out in outer:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile

                for ind, inn in enumerate(out):
                    if ind == 0:
                        question_id = inn
                        question = Question.objects.get(id=question_id)
                        attemptedQuestion.question = question
                    elif ind == 1:
                        attemptedQuestion.attempted = True
                        if inn != -1:
                            option = Option.objects.get(id=inn)
                            attemptedQuestion.save()
                            attemptedQuestion.optionAttempted.add(option)
                            if option.correct == True:
                                attemptedQuestion.right = True
                            else:
                                attemptedQuestion.right = False
                        else:
                            attemptedQuestion.attempted = False
                            attemptedQuestion.right = None
                            
                    elif ind == 2:
                        attemptedQuestion.time = inn
                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)
                            
            try:
                total_marks = 0
                totalPositiveMarks = 0.0
                totalNegativeMarks = 0.0

                totalRightQuestions = 0
                totalWrongQuestions = 0
                percentage = 0.0

                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    attemptedOptions = aq.optionAttempted.all()
                    attempted = aq.attempted
                    right = aq.right

                    if right:
                        totalPositiveMarks += question.marks
                        total_marks += question.marks
                        totalRightQuestions += 1
                        
                    elif right == False:
                        total_marks -= question.negativeMarks
                        totalNegativeMarks += question.negativeMarks
                        totalWrongQuestions += 1

                    if aq.attempted == False:
                        pass

                pass_marks = testMarks.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = testMarks.test.totalMarks
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = testMarks.test.questions.all().count()
                totalAttemptedQuestions = testMarks.questions.filter(attempted=True).count()
                totalNotAttemptedQuestions = testMarks.questions.filter(attempted=False).count()

                testMarks.totalQuestions = totalQuestions
                testMarks.totalAttemptedQuestions = totalAttemptedQuestions
                testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                testMarks.totalPositiveMarks = totalPositiveMarks
                testMarks.totalNegativeMarks = totalNegativeMarks

                testMarks.totalRightQuestions = totalRightQuestions
                testMarks.totalWrongQuestions = totalWrongQuestions

                testMarks.result = result
                testMarks.percentage = percentage
                testMarks.totalTestMarks = total_test_marks

                testMarks.marks = total_marks
                testMarks.save()
            except:
                pass

            testMarks.marks = total_marks
            testMarks.save()

            context = {
                'status': 'Success',
                'message': testMarks.id,
                'obtainedMarks': testMarks.marks,
                'totalMarks': test.totalMarks,
                'attempCount': testMarks.attempt_count,
                'student_selfie':testMarks.student_selfie,
                'is_answers_showing':testMarks.test.is_answers_showing,
                }
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)

class EvaluateTestNew(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
            data = request.data
            test_id = data['test_id']
            totalTime = data['totalTime']
            answers = data['answers']
            answers_list = eval(answers)  # Convert string to list of lists
            student_selfie = data.get('student_selfie')
            test = Test.objects.get(id=test_id)
            
            attemptCount = StudentMarks.objects.filter(student = me.profile, test=test).count()
            if attemptCount == 0:
                attemptCount = 1
            else:
                attemptCount += 1

            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount
            testMarks.student_selfie = student_selfie
            testMarks.save()

            for out in answers_list:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile
                            
                if len(out) == 4:
                    for ind, inn in enumerate(out):
                        if ind == 0:
                            question_id = inn
                            question = Question.objects.get(id=question_id)
                            attemptedQuestion.question = question
                            
                        elif ind == 1 and out[-1] != 4:
                            attemptedQuestion.attempted = True
                            if inn != -1 and inn != 0:
                                option = Option.objects.get(id=inn)
                                attemptedQuestion.save()
                                attemptedQuestion.optionAttempted.add(option)
                                if option.correct == True:
                                    attemptedQuestion.right = True
                                else:
                                    attemptedQuestion.right = False
                            else:
                                attemptedQuestion.attempted = False
                                attemptedQuestion.right = None
                                
                        elif ind == 2:
                            attemptedQuestion.time = inn
                            
                        elif ind == 3:
                            attemptedQuestion.question_status = inn
                            attemptedQuestion.save()
                            testMarks.questions.add(attemptedQuestion)

            try:
                total_marks = 0
                totalPositiveMarks = 0.0
                totalNegativeMarks = 0.0

                totalRightQuestions = 0
                totalWrongQuestions = 0
                percentage = 0.0

                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    attemptedOptions = aq.optionAttempted.all()
                    attempted = aq.attempted
                    right = aq.right

                    if right:
                        totalPositiveMarks += question.marks
                        total_marks += question.marks
                        totalRightQuestions += 1
                        
                    elif right == False:
                        total_marks -= question.negativeMarks
                        totalNegativeMarks += question.negativeMarks
                        totalWrongQuestions += 1

                    if aq.attempted == False:
                        pass

                pass_marks = testMarks.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = testMarks.test.totalMarks
                
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = testMarks.test.questions.all().count()
                totalAttemptedQuestions = testMarks.questions.filter(attempted=True).count()
                totalNotAttemptedQuestions = testMarks.questions.filter(attempted=False).count()

                testMarks.totalQuestions = totalQuestions
                testMarks.totalAttemptedQuestions = totalAttemptedQuestions
                testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                testMarks.totalPositiveMarks = totalPositiveMarks
                testMarks.totalNegativeMarks = totalNegativeMarks

                testMarks.totalRightQuestions = totalRightQuestions
                testMarks.totalWrongQuestions = totalWrongQuestions

                testMarks.result = result
                testMarks.percentage = percentage
                testMarks.totalTestMarks = total_test_marks

                testMarks.marks = total_marks
                testMarks.save()
            except:
                pass

            testMarks.marks = total_marks
            testMarks.save()
            
            test_all_marks = StudentMarks.objects.filter(student = me.profile, test = test).order_by('id')
                    
            mark_id_list = []
            for single_mark in test_all_marks:
                mark_dict = {'id': single_mark.id, 'attemptTime': single_mark.attemptTime}
                mark_id_list.append(mark_dict)

            context = {
                'status': 'Success',
                'message': testMarks.id,
                'obtainedMarks': testMarks.marks,
                'totalMarks': test.totalMarks,
                'attempCount': testMarks.attempt_count,
                'student_selfie':testMarks.student_selfie,
                'is_answers_showing':testMarks.test.is_answers_showing,
                'mark_id_list': mark_id_list,
                }
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)
    
class StudentTestPerformance(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentMarks.objects.select_related('test').get(id=marks_id)
            attemptedQuestions = studentMarks.questions.select_related('question__subject','question__chapter').prefetch_related('optionAttempted').all()
            total_marks = 0
            right_number = 0
            wrong_number = 0
            final_marks = 0
            skipped_number = 0
            
            visited_and_answered = 0 
            question_answered_and_marked = 0 
            visited_but_not_answered = 0 
            not_answered_but_marked = 0  
            not_visited = 0 
            
            bookmark = CheckBookmark(me.profile)
            
            attempted_questions_list = []
            for aq in attemptedQuestions:
                question = aq.question
                
                if aq.question_status == 1:
                    question_status = "Visited and Answered"
                elif aq.question_status == 2:
                    question_status = "Question Answered and Marked"
                elif aq.question_status == 3:
                    question_status = "Visited but not Answered"
                elif aq.question_status == 4:
                    question_status = "Not Answered but Marked"
                elif aq.question_status == 5:
                    question_status = "Not Visited"
                else:
                    question_status = None
                    
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)
                if question.negativeMarks == 1.0:
                    nmark_fact = '1'
                elif question.negativeMarks == 0.5:
                    nmark_fact = '1/2'
                elif question.negativeMarks == 0.33:
                    nmark_fact = '1/3'
                elif question.negativeMarks == 0.25:
                    nmark_fact = '1/4'
                elif question.negativeMarks == 0.2:
                    nmark_fact = '1/5'
                else:
                    nmark_fact = '0'

                attempted = aq.attempted
                right = aq.right
                if right == True:
                    total_marks += question.marks
                    right_number += 1

                elif right == False:
                    total_marks -= question.negativeMarks
                    wrong_number += 1

                if aq.attempted == False:
                    skipped_number += 1
                    
                if aq.question_status == 1:
                    visited_and_answered += 1
                elif aq.question_status == 2:
                    question_answered_and_marked += 1
                elif aq.question_status == 3:
                    visited_but_not_answered += 1
                elif aq.question_status == 4:
                    not_answered_but_marked += 1
                elif aq.question_status == 5:
                    not_visited += 1

                time = aq.time
                direction = question.direction
                if direction != None:
                    direction_dict = {'id': direction.id, 'text': direction.text, 'picture': direction.picture}
                else:
                    direction_dict = {'id': None,'text': None, 'picture': None}

                try:
                    subject = question.subject
                    subject_dict = {'id': subject.id, 'name': subject.name}
                    chapter = question.chapter
                    chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                except:
                    chapter_dict = {}
                    subject_dict = {}

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True

                    optionPicture = option.picture

                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    if option.explanationText:
                        explanationText = option.explanationText
                    else:
                        explanationText = option.explanation

                    if not explanationText:
                        explanationText = None
                        
                    option_dict = {
                        'id': option.id,
                        'text': option.text,
                        'picture': optionPicture,
                        'explanationText': explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct,
                        'selected': selected,
                        'explanationVideo': option.explanationVideo}
                    options_list.append(option_dict)

                try:
                    question_bookmark = bookmark.isQuestionBookmark(question.id)
                except:
                    question_bookmark = False
                    

                question_dict = {
                    'id': question.id,
                    'text': question.text,
                    'question_bookmark':question_bookmark,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'direction': direction_dict,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'negative_mark_fact': nmark_fact,
                    'language': question.language,
                    'source': question.source,
                    'oneWordQuestion': question.oneWordQuestion,
                    'oneWordAnswer': question.oneWordAnswer,
                    'oneWordExplanation': question.oneWordExplanation,
                    'studentOneWordAnswer': aq.studentOneWordAnswer,
                    'question_status': question_status,
                    'options': options_list,
                    }

                aq_dict = {
                    'id': aq.id,
                    'question': question_dict,
                    'attempted': attempted,
                    'right': right,
                    'time': time
                    }
                attempted_questions_list.append(aq_dict)

            test_total_mark = studentMarks.test.totalMarks
            pass_marks = studentMarks.test.passing_marks
            negative_mark = studentMarks.test.incorrect_check_mark
            incorrect_check_mark = studentMarks.test.incorrect_check_mark
            
            if incorrect_check_mark == 1.0:
                negative_mark_fact = '1'
            elif incorrect_check_mark == 0.5:
                negative_mark_fact = '1/2'
            elif incorrect_check_mark == 0.33:
                negative_mark_fact = '1/3'
            elif incorrect_check_mark == 0.25:
                negative_mark_fact = '1/4'
            elif incorrect_check_mark == 0.2:
                negative_mark_fact = '1/5'
            else:
                negative_mark_fact = '0'
                
            is_answers_showing = studentMarks.test.is_answers_showing

            if pass_marks:
                if total_marks > pass_marks or total_marks == pass_marks:
                    result = 'pass'
                else:
                    result = 'failed'
            else:
                result = 'undifined'
                
            try:
                percentage = round(((total_marks/test_total_mark)*100),2)
            except:
                percentage = 0.0 
                
            test_marks_dict = {
                'id': studentMarks.id,
                'totalMarks': round(total_marks,2),
                'negative_mark': negative_mark,
                'negative_mark_fact': negative_mark_fact,
                'percentage': percentage,
                'time': studentMarks.time,
                'attemptedTime': studentMarks.attemptTime,
                'attemptedQuestions': attempted_questions_list,
                'right': right_number,
                'wrong': wrong_number,
                'skipped': skipped_number,
                'result': result,
                'visited_and_answered': visited_and_answered,
                'question_answered_and_marked': question_answered_and_marked,
                'visited_but_not_answered': visited_but_not_answered,
                'not_answered_but_marked': not_answered_but_marked,
                'not_visited': not_visited,
                'is_answers_showing': is_answers_showing,
                }

            studentMarks.marks = total_marks
            studentMarks.save()
            context = {'status': 'Success', 'performance': test_marks_dict}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        
        return Response(context)
    
class StudentTestPerformance2(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        marks_id = data['marks_id']
        try:
            studentMarks = StudentMarks.objects.select_related('test').get(id=marks_id)
            attemptedQuestions = studentMarks.questions.select_related('question__subject','question__chapter').prefetch_related('optionAttempted').order_by('question__id').all()
            total_marks = 0
            right_number = 0
            wrong_number = 0
            final_marks = 0
            skipped_number = 0
            
            visited_and_answered = 0 
            question_answered_and_marked = 0 
            visited_but_not_answered = 0 
            not_answered_but_marked = 0  
            not_visited = 0 
            
            bookmark = CheckBookmark(me.profile)
            
            attempted_questions_list = []
            for aq in attemptedQuestions:
                question = aq.question
                
                if aq.question_status == 1:
                    question_status = "Visited and Answered"
                elif aq.question_status == 2:
                    question_status = "Question Answered and Marked"
                elif aq.question_status == 3:
                    question_status = "Visited but not Answered"
                elif aq.question_status == 4:
                    question_status = "Not Answered but Marked"
                elif aq.question_status == 5:
                    question_status = "Not Visited"
                else:
                    question_status = None
                    
                attemptedOptions = aq.optionAttempted.all()
                optionId_list = []
                for ao in attemptedOptions:
                    optionId_list.append(ao.id)
                    
                if question.negativeMarks == 1.0:
                    nmark_fact = '1'
                    fnmarks = Fraction(1)
                elif question.negativeMarks == 0.5:
                    nmark_fact = '1/2'
                    fnmarks = Fraction(1,2)
                elif question.negativeMarks == 0.33:
                    nmark_fact = '1/3'
                    fnmarks = Fraction(1,3)
                elif question.negativeMarks == 0.25:
                    nmark_fact = '1/4'
                    fnmarks = Fraction(1,4)
                elif question.negativeMarks == 0.2:
                    nmark_fact = '1/5'
                    fnmarks = Fraction(1,5)
                elif question.negativeMarks == 0.6:
                    nmark_fact = '2/3'
                    fnmarks = Fraction(2,3)
                else:
                    nmark_fact = '0'

                attempted = aq.attempted
                right = aq.right
                if right == True:
                    total_marks += question.marks
                    right_number += 1

                elif right == False:
                    total_marks -= float(fnmarks) 
                    wrong_number += 1

                if aq.attempted == False:
                    skipped_number += 1
                    
                if aq.question_status == 1:
                    visited_and_answered += 1
                elif aq.question_status == 2:
                    question_answered_and_marked += 1
                elif aq.question_status == 3:
                    visited_but_not_answered += 1
                elif aq.question_status == 4:
                    not_answered_but_marked += 1
                elif aq.question_status == 5:
                    not_visited += 1

                time = aq.time
                direction = question.direction
                if direction != None:
                    direction_dict = {'id': direction.id, 'text': direction.text, 'picture': direction.picture}
                else:
                    direction_dict = {'id': None,'text': None, 'picture': None}

                try:
                    subject = question.subject
                    subject_dict = {'id': subject.id, 'name': subject.name}
                    chapter = question.chapter
                    chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
                except:
                    chapter_dict = {}
                    subject_dict = {}

                options = Option.objects.filter(question=question)
                options_list = []
                for option in options:
                    selected = False
                    if option.id in optionId_list:
                        selected = True

                    optionPicture = option.picture

                    if optionPicture == None or len(optionPicture) < 5:
                        optionPicture = None

                    if option.explanationText:
                        explanationText = option.explanationText
                    else:
                        explanationText = option.explanation

                    if not explanationText:
                        explanationText = None
                    option_dict = {
                        'id': option.id,
                        'text': option.text,
                        'picture': optionPicture,
                        'explanationText': explanationText,
                        'explanationPicture': option.explanationPicture,
                        'correct': option.correct,
                        'selected': selected,
                        'explanationVideo': option.explanationVideo}
                    options_list.append(option_dict)

                try:
                    question_bookmark = bookmark.isQuestionBookmark(question.id)
                except:
                    question_bookmark = False
                    

                question_dict = {
                    'id': question.id,
                    'text': question.text,
                    'question_bookmark':question_bookmark,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'direction': direction_dict,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'negative_mark_fact': nmark_fact,
                    'language': question.language,
                    'source': question.source,
                    'oneWordQuestion': question.oneWordQuestion,
                    'oneWordAnswer': question.oneWordAnswer,
                    'oneWordExplanation': question.oneWordExplanation,
                    'studentOneWordAnswer': aq.studentOneWordAnswer,
                    'question_status': question_status,
                    'options': options_list,
                    }

                aq_dict = {
                    'id': aq.id,
                    'question': question_dict,
                    'attempted': attempted,
                    'right': right,
                    'time': time
                    }
                attempted_questions_list.append(aq_dict)

            test_total_mark = studentMarks.test.totalMarks
            pass_marks = studentMarks.test.passing_marks
            negative_mark = studentMarks.test.incorrect_check_mark
            incorrect_check_mark = studentMarks.test.incorrect_check_mark
            
            if incorrect_check_mark == 1.0:
                negative_mark_fact = '1'
            elif incorrect_check_mark == 0.5:
                negative_mark_fact = '1/2'
            elif incorrect_check_mark == 0.33:
                negative_mark_fact = '1/3'
            elif incorrect_check_mark == 0.25:
                negative_mark_fact = '1/4'
            elif incorrect_check_mark == 0.2:
                negative_mark_fact = '1/5'
            elif incorrect_check_mark == 0.6:
                negative_mark_fact = '2/3'
            else:
                negative_mark_fact = '0'
                
            is_answers_showing = studentMarks.test.is_answers_showing

            if pass_marks:
                if total_marks > pass_marks or total_marks == pass_marks:
                    result = 'pass'
                else:
                    result = 'failed'
            else:
                result = 'undifined'
                
            try:
                percentage = round(((total_marks/test_total_mark)*100),1)
            except:
                percentage = 0.0 
                
            test_marks_dict = {
                'id': studentMarks.id,
                'totalMarks': round(total_marks,2),
                'negative_mark': negative_mark,
                'negative_mark_fact': negative_mark_fact,
                'percentage': percentage,
                'time': studentMarks.time,
                'attemptedTime': studentMarks.attemptTime,
                'attemptedQuestions': attempted_questions_list,
                'right': right_number,
                'wrong': wrong_number,
                'skipped': skipped_number,
                'result': result,
                'visited_and_answered': visited_and_answered,
                'question_answered_and_marked': question_answered_and_marked,
                'visited_but_not_answered': visited_but_not_answered,
                'not_answered_but_marked': not_answered_but_marked,
                'not_visited': not_visited,
                'is_answers_showing': is_answers_showing,
                }

            studentMarks.marks = total_marks
            studentMarks.save()
            context = {'status': 'Success', 'performance': test_marks_dict}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        
        return Response(context) 
    
class StudentTestAnalyticsContent(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        marks_id = data['marks_id']

        try:
            studentMarks = StudentMarks.objects.get(id=marks_id)
            allQuestions = studentMarks.questions.select_related('question').all()
            total_question = allQuestions.count()
            testAllChapters = studentMarks.test.chapters.all()
            pageTitle = studentMarks.test.name
            totalTestMarks = studentMarks.test.totalMarks
            show_test_ranking = studentMarks.test.show_test_ranking
            if show_test_ranking == None:
                show_test_ranking = False

            chapterWiseStrenth_list = []
            studentWeakChapters_list = []
            for i in testAllChapters:
                totalQuestionChapterWise = allQuestions.filter(question__chapter=i.id)
                correctQuestionsChapterWise = totalQuestionChapterWise.filter(right=True).count()
                totalQuestionChapterWise = len(totalQuestionChapterWise)

                perMarks = (totalQuestionChapterWise * 60) / 100
                if correctQuestionsChapterWise < perMarks:
                    studentWeakChapters_list.append(i)
                else:
                    pass

                if correctQuestionsChapterWise != 0 and totalQuestionChapterWise != 0:
                    chapterWiseStrenth = str((correctQuestionsChapterWise / totalQuestionChapterWise) * 100) + ' %'
                else:
                    chapterWiseStrenth = '0.0 %'
                    
                chapterWiseStrenth_dict = {'chapter': i.name, 'strenth': chapterWiseStrenth}
                chapterWiseStrenth_list.append(chapterWiseStrenth_dict)

            notes_list = []
            videos_list = []
            if len(studentWeakChapters_list) != 0:
                suggestionAreaTitle = 'Key focus areas'

                for chapter in studentWeakChapters_list:
                    notes = Note.objects.filter(chapter=chapter, teacher__institute=me.profile.institute).distinct().order_by('?')[:10]
                    boughtNotesIds = StudentPackage.objects.filter(student=me.profile).values_list('package__notes__id', flat=True)
                    subject = chapter.subject
                    for note in notes:
                        try:
                            note_link = note.noteurl_note.link
                        except:
                            note_link = ""
                            
                        bought = False
                        if note.id in boughtNotesIds:
                            bought = True
                            
                        if note.locked == False:
                            bought = True
                            
                        note_dict = {
                            'id': note.id, 
                            'title': note.title, 
                            'publishDate': note.publishDate,
                            'subject': subject.name, 
                            'chapter': chapter.name, 
                            'url': note_link, 
                            'bought': bought
                            }
                        notes_list.append(note_dict)

                    videos = Video.objects.filter(chapter=chapter, teacher__institute=me.profile.institute).distinct().order_by('?')[:10]
                    bought_videos = StudentPackage.objects.filter(student=me.profile).values_list('package__videos__id', flat=True)
                    subject = chapter.subject
                    for video in videos:
                        bought = False
                        if video.id in bought_videos:
                            bought = True
                        if video.locked == False:
                            bought = True
                        if video.publish == True:
                            video_dict = {
                                'id': video.id, 
                                'subject': subject.name, 
                                'chapter': chapter.name, 
                                'link': video.urlLink, 
                                'lowLink': video.lowlink, 
                                'highLink': video.highlink,
                                'generalVideo': video.generalVideo, 
                                'publishDate': video.publishDate, 
                                'title': video.title, 
                                'bought': bought, 
                                'thumbnail': video.thumbnail
                                }
                            videos_list.append(video_dict)

            else:
                suggestionAreaTitle = 'Keep Learing'
                studentBatches = me.profile.batches.all().values_list('id', flat=True)
                notes = Note.objects.filter(batches__id__in=studentBatches, teacher__institute=me.profile.institute).distinct().order_by('id')[:10]
                boughtNotesIds = StudentPackage.objects.filter(student=me.profile).values_list('package__notes__id', flat=True)

                for note in notes:
                    subject = note.subject
                    chapter = note.chapter

                    try:
                        subject = subject.name
                        chapter = chapter.name
                    except:
                        subject = None
                        chapter = None

                    try:
                        note_link = note.noteurl_note.link
                    except:
                        note_link = ""
                        
                    bought = False
                    if note.id in boughtNotesIds:
                        bought = True
                        
                    if note.locked == False:
                        bought = True
                        
                    note_dict = {
                        'id': note.id, 
                        'title': note.title, 
                        'publishDate': note.publishDate,
                        'subject': subject, 
                        'chapter': chapter, 
                        'url': note_link, 
                        'bought': bought
                        }
                    notes_list.append(note_dict)

                videos = Video.objects.filter(batches__id__in=studentBatches, teacher__institute=me.profile.institute).distinct().order_by('-id')[:10]
                bought_videos = StudentPackage.objects.filter(student=me.profile).values_list('package__videos__id', flat=True)
                for video in videos:
                    subject = video.subject
                    chapter = video.chapter

                    try:
                        subject = subject.name
                        chapter = chapter.name
                    except:
                        subject = None
                        chapter = None

                    bought = False
                    if video.id in bought_videos:
                        bought = True
                        
                    if video.locked == False:
                        bought = True
                        
                    if video.publish == True:
                        video_dict = {
                            'id': video.id, 
                            'subject': subject, 
                            'chapter': chapter, 
                            'link': video.urlLink, 
                            'lowLink': video.lowlink, 
                            'highLink': video.highlink,
                            'generalVideo': video.generalVideo, 
                            'publishDate': video.publishDate, 
                            'title': video.title, 
                            'bought': bought, 
                            'thumbnail': video.thumbnail
                            }
                        videos_list.append(video_dict)

            rightQuestions = 0
            wrongQuestions = 0
            skippedQuestions = 0
            
            visited_and_answered = 0 
            question_answered_and_marked = 0 
            visited_but_not_answered = 0 
            not_answered_but_marked = 0  
            not_visited = 0 
            
            studentTotalMarks = 0
            
            for aq in allQuestions:
                question = aq.question
                attempted = aq.attempted
                right = aq.right
                
                if right:
                    studentTotalMarks += question.marks
                    rightQuestions += 1
                    
                elif right == False:
                    studentTotalMarks -= question.negativeMarks
                    wrongQuestions += 1
                    
                if aq.attempted == False:
                    skippedQuestions += 1
                    
                if aq.question_status == 1:
                    visited_and_answered += 1
                elif aq.question_status == 2:
                    question_answered_and_marked += 1
                elif aq.question_status == 3:
                    visited_but_not_answered += 1
                elif aq.question_status == 4:
                    not_answered_but_marked += 1
                elif aq.question_status == 5:
                    not_visited += 1
            
            score_dict = {
                'totalTestMarks': totalTestMarks, 
                'studentTotalMarks': studentTotalMarks,
                'rightQuestions': rightQuestions, 
                'wrongQuestions': wrongQuestions, 
                'skippedQuestions': skippedQuestions,
                'visited_and_answered': visited_and_answered,
                'question_answered_and_marked': question_answered_and_marked,
                'visited_but_not_answered': visited_but_not_answered,
                'not_answered_but_marked': not_answered_but_marked,
                'not_visited': not_visited,
                }

            if studentTotalMarks >= (totalTestMarks * 75) / 100:
                performance_dict = {'title': f'Very Good', 'message': 'Your Performance are very good! Keep Learning in Learning areas and keep growing!'}
            elif studentTotalMarks >= (totalTestMarks * 50) / 100:
                performance_dict = {'title': f'Almost there!', 'message': 'We thought the test was hard too! Check out the suggestion area'}
            elif studentTotalMarks > (totalTestMarks * 25) / 100:
                performance_dict = {'title': f'Revise', 'message': f"Revise the topics in the suggestion areas and try again. We All Know You can do better! "}
            else:
                performance_dict = {'title': f'Learn!', 'message': f"Learn the topics in the suggestion areas and try again. We All Know You can do better! "}

            suggestionAreaContent_dict = {'suggestionAreaTitle': suggestionAreaTitle, 'videos': videos_list, 'notes': notes_list}

            context = {
                'status': 'success', 
                'title': pageTitle, 
                'total_question': total_question,
                'performance_dict': performance_dict, 
                'score_dict': score_dict,
                'suggestionAreaContent_dict': suggestionAreaContent_dict, 
                'chapterWiseStrenth_list': chapterWiseStrenth_list,
                'show_test_ranking': show_test_ranking,
                }

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)
    
class StudentTakenTestList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            marks = StudentMarks.objects.select_related('test').prefetch_related('questions','test__subjects','test__chapters').filter(
                student = me.profile, test__is_answers_showing = True).order_by('-id')
            
            unique_test_ids = set()
            
            test_list = []
            for mark in marks:
                test = mark.test
                test_id = test.id
                
                if test_id in unique_test_ids:
                    continue
                else:
                    unique_test_ids.add(test_id)
                    
                    test_all_marks = StudentMarks.objects.filter(student = me.profile, test = test).order_by('id')
                    
                    mark_id_list = []
                    for single_mark in test_all_marks:
                        mark_dict = {'id': single_mark.id, 'attemptTime': single_mark.attemptTime}
                        mark_id_list.append(mark_dict)
                    
                    attemptTime = mark.attemptTime
                    numberQuestions = mark.questions.all().count()
                    
                    subject_list = []
                    subjects = test.subjects.all()
                    for subject in subjects:
                        subject_dict = {'id': subject.id, 'name': subject.name}
                        subject_list.append(subject_dict)
                        
                    chapter_list = []
                    chapters = test.chapters.all()
                    for chapter in chapters:
                        chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        chapter_list.append(chapter_dict)
                        
                    test_dict = {
                        'id': mark.id, 
                        'test_id': test.id, 
                        'name': test.name, 
                        'published': test.published, 
                        'time': test.time, 
                        'locked': test.locked,
                        'subjects': subject_list, 
                        'chapters': chapter_list, 
                        'numberQuestions': numberQuestions, 
                        'attemptTime': attemptTime,
                        'mark_id_list': mark_id_list,
                    }
                    test_list.append(test_dict)
                
            context = {'status': 'Success', 'test': test_list}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class StudentTakenTestNew(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            try:
                studentMarks = StudentMarks.objects.get(test=test, student=me.profile)
                if test.repeatTest == True:
                    context = {'taken': False}
                else:
                    context = {'taken': True}
            except:
                context = {'taken': False}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)
    
class AllPackagesCourseCategoryWise(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        try:
            institute = me.profile.institute
            course_id = data['course_id']
            course_category_id = data['course_category_id']
            packages_list = []
            today = timezone.now()
            packages_list = []
            packages = Package.objects.filter(teacher__institute=institute, course = course_id, course_category = course_category_id, publish=True).prefetch_related(
                'students', 'notes', 'videos', 'youtubeLiveVideos', 'tests').order_by('-id')
                
            for pack in packages:
                student_ids = set(student.id for student in pack.students.all())
                if me.profile.id in student_ids:
                    try:
                        studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                        if studentPackage.endDate.replace(tzinfo=None) <= today:
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = studentPackage.startDate
                            sbph.endDate = studentPackage.endDate
                            sbph.save()
                            studentPackage.delete()
                            pack.students.remove(me.profile)
                            for i in pasp:
                                i.delete()
                            bought = False
                        else:
                            bought = True

                    except StudentPackage.MultipleObjectsReturned:
                        studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                        totalStudentPackagesCount = studentPackage.count()
                        for sp in studentPackage:
                            if sp.endDate.replace(tzinfo=None) <= today.now():
                                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                                totalPaidAmount = 0
                                for i in pasp:
                                    totalPaidAmount += i.paidAmount
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = totalPaidAmount
                                sbph.startDate = sp.startDate
                                sbph.endDate = sp.endDate
                                sbph.save()
                                sp.delete()
                                for i in pasp:
                                    i.delete()

                                if totalStudentPackagesCount == 1:
                                    pack.students.remove(me.profile)
                                    pack.save()
                                    bought = False
                                else:
                                    bought = True

                            else:
                                bought = True

                    except Exception as e:
                        context = {'status': 'Failed', 'message': str(e)}
                        return Response(context)
                else:
                    bought = False

                if bought == False:
                    packages_list.append((pack, False))
                else:
                    packages_list.append((pack, True))    

            final_list = []
            for package, bought in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()
                package_dict = {
                    'id': package.id, 
                    'title': package.title, 
                    'marketLevelPackage': package.marketLevelPackage, 
                    'numberTests': numberTests, 
                    'numberVideos': numberVideos, 
                    'numberNotes': numberNotes,
                    'price': package.price, 
                    'duration': package.duration, 
                    'bought': bought, 
                    'details': package.details, 
                    'thumbnail': package.thumbnail
                    }
                final_list.append(package_dict)

            context = {'status':True,'packages': final_list}
            
        except Exception as e:
            context = {'status':False,'message':str(e)}

        return Response(context)   

class JobInformationList(APIView):
    def get(self, request):
        me = Studs(request.user)
        jobs = JobInformation.objects.all().order_by('-id')
        serializer = JobInformationSerializer(jobs, many=True)
        return Response({'status':True,'data':serializer.data}, status=status.HTTP_200_OK)
    
class JobInformationDetail(APIView):
    def get(self, request, pk):
        me = Studs(request.user)
        try:
            job_info = JobInformation.objects.get(pk=pk)
        except Exception as e:
            return Response({'status':False,'message': str(e)}, status=status.HTTP_404_NOT_FOUND)
        
        serializer = JobInformationSerializer(job_info)
        return Response({'status':True,'data':serializer.data}, status=status.HTTP_200_OK)
    
class TeacherAllBlogs(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
            
        try:
            blogs = TeacherBlogs.objects.all().order_by('-id')
            blogs_list = []
            for blog in blogs:
                blog_dict = {
                    'id': blog.id,
                    'title': blog.title,
                    'blog_url':  blog.blog_url
                }
                blogs_list.append(blog_dict)

            return Response({'status': True, 'response': blogs_list})
        
        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def post(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            title = data['title']
            blog_url = data['blog_url']

            TeacherBlogs.objects.create(title=title, blog_url=blog_url)
            return Response({'status': True, 'response': 'Blog Created Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def put(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            blog_id = data['blog_id']
            blog = TeacherBlogs.objects.get(id=blog_id)

            title = data.get('title')
            if title:
                blog.title = title

            blog_url = data.get('blog_url')
            if blog_url:
                blog.blog_url = blog_url

            blog.save()

            return Response({'status': True, 'response': 'Blog Updated Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})

    def delete(self, request):
        Teach(self.request.user)
        try:
            data = request.data
            blog_id = data['blog_id']

            TeacherBlogs.objects.get(id=blog_id).delete()
            return Response({'status': True, 'response': 'Blog Deleted Successfully'})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})
        
class TeacherAllCoins(APIView):
    def get(self, request):
        me = Teach(request.user)
            
        try:
            record = TeacherTotalCoins.objects.get(teacher = me.profile)
            total_coins = record.total_coins
            return Response({'status': True, 'total_coins': total_coins})
        
        except Exception as e:
            total_coins = 0.0
            return Response({'status': True, 'total_coins': total_coins})
        
class TeacherRequestCoin(APIView):
    def post(self, request):
        me = Teach(request.user)
        data = request.data
        converted_coins = data['converted_coins']
        converted_coins = float(converted_coins)
        upi_id = data.get('upi_id')
        account_holder_name = data.get('account_holder_name')
        account_number = data.get('account_number')
        account_branch = data.get('account_branch')
        ifsc_code = data.get('ifsc_code')
            
        try:
            teacher_coins = TeacherTotalCoins.objects.get(teacher = me.profile)
            total_coins = teacher_coins.total_coins
            if converted_coins <= total_coins:
                teacher_request = TeacherRequestCoins()
                teacher_request.teacher = me.profile
                teacher_request.requested_coins = converted_coins
                teacher_request.upi_id = upi_id
                teacher_request.account_holder_name = account_holder_name
                teacher_request.account_number = account_number
                teacher_request.account_branch = account_branch
                teacher_request.ifsc_code = ifsc_code
                teacher_request.save()
                
                total_coins -= converted_coins
                teacher_coins.total_coins = total_coins
                teacher_coins.save()
                return Response({'status': True, 'response': 'Request Sent Successfully', 'record_id': teacher_request.id})
            else:
                return Response({'status': True, 'response': 'Coins Value Incorrect'})
        
        except Exception as e:
            return Response({'status': False, 'response': str(e)})
        
class TeacherApproveCoinsRequest(APIView):
    def get(self,request):
        me = Teach(request.user)
        try:
            all_request = TeacherRequestCoins.objects.filter(status='pending').order_by('-id')
            request_list = []
            for record in all_request:
                request_dict = {
                    'record_id': record.id,
                    'teacher': record.teacher.name,
                    'requested_coins': record.requested_coins,
                    'upi_id' : record.upi_id,
                    'account_holder_name' : record.account_holder_name,
                    'account_number' : record.account_number,
                    'account_branch' : record.account_branch,
                    'ifsc_code' : record.ifsc_code,
                }
                request_list.append(request_dict)
                
            context = {'status':True, 'data':request_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)
            
    def post(self, request):
        me = Teach(request.user)
        data = request.data
        try:
            record_id = data['record_id']
            status = data['status']
            teacher_request = TeacherRequestCoins.objects.get(id = record_id)
            teacher_request.status = status
            teacher_request.save()
        
            return Response({'status': True, 'response': 'Request Approved'})
        
        except Exception as e:
            return Response({'status': False, 'response': str(e)})
        
class AllApprovedRequest(APIView):
    def get(self,request):
        me = Teach(request.user)
        try:
            all_request = TeacherRequestCoins.objects.filter(status='approve').order_by('-id')
            request_list = []
            for record in all_request:
                request_dict = {
                    'record_id': record.id,
                    'teacher': record.teacher.name,
                    'requested_coins': record.requested_coins,
                    'status': record.status,
                }
                request_list.append(request_dict)
                
            context = {'status':True, 'data':request_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)
    
class AllRejectedRequest(APIView):
    def get(self,request):
        me = Teach(request.user)
        try:
            all_request = TeacherRequestCoins.objects.filter(status='reject').order_by('-id')
            request_list = []
            for record in all_request:
                request_dict = {
                    'record_id': record.id,
                    'teacher': record.teacher.name,
                    'requested_coins': record.requested_coins,
                    'status': record.status,
                }
                request_list.append(request_dict)
                
            context = {'status':True, 'data':request_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)
    
class TeacherAllRequest(APIView):
    def get(self,request):
        me = Teach(request.user)
        try:
            all_request = TeacherRequestCoins.objects.filter(teacher=me.profile).order_by('-id')
            request_list = []
            for record in all_request:
                request_dict = {
                    'record_id': record.id,
                    'teacher': record.teacher.name,
                    'requested_coins': record.requested_coins,
                    'status': record.status,
                }
                request_list.append(request_dict)
                
            context = {'status':True, 'data':request_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class AllTeachersList(APIView):
    def get(self,request):
        me = Teach(request.user)
        try:
            records = TeacherTotalCoins.objects.all().order_by('-id')
            teachers_list = []
            for record in records:
                teachers_dict = {
                    'teacher_id': record.teacher.id,
                    'teacher_name': record.teacher.name,
                    'total_coins': record.total_coins,
                }
                teachers_list.append(teachers_dict)
            context = {'status':True, 'data': teachers_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)

class TeacherAllCoinsRecord(APIView):
    def post(self,request):
        me = Teach(request.user)
        data = request.data
        teacher_id = data['teacher_id']
        
        try:
            package_earning = TeacherPackageCoins.objects.filter(teacher__id = teacher_id).order_by('-id')
            package_earning_list = []
            for precord in package_earning:
                try:
                    teacher = precord.teacher.name
                except:
                    teacher = None
                    
                try:
                    student = precord.student.name
                except:
                    student = None
                    
                package_earning_dict = {
                    'teacher': teacher,
                    'package': precord.package.title,
                    'student': student,
                    'coins': precord.coins,
                    'created_date': precord.created_date,
                }
                package_earning_list.append(package_earning_dict)
                
            app_earning = TeacherAppSharingCoins.objects.filter(teacher__id = teacher_id).order_by('-id')
            app_earning_list = []
            for arecord in app_earning:
                try:
                    teacher = arecord.teacher.name
                except:
                    teacher = None
                    
                try:
                    student = arecord.student.name
                except:
                    student = None
                    
                app_earning_dict = {
                    'teacher': teacher,
                    'student': student,
                    'coins': arecord.coins,
                    'created_date': arecord.created_date,
                }
                app_earning_list.append(app_earning_dict)
                
            try:
                total_coins_record = TeacherTotalCoins.objects.get(teacher__id = teacher_id)
                total_coins = total_coins_record.total_coins
            except:
                total_coins = 0.0
                
            context = {
                'status':True, 
                'package_earning': package_earning_list,
                'app_earning_list': app_earning_list,
                'total_coins': total_coins,
                }
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        return Response(context)
        
class BookCouponCodes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            title = data['name']
            code = data['code']
            amount = data['amount']
            expire_date = data.get('expire_date')
            total_count = data.get('total_count')
            code_length = len(code)
            book_id = data['book_id']
            book = Book.objects.get(id=book_id)

            if code_length < 5:
                context = {'status': False,'message': 'length of Coupon Code should be 5 characters long.'}
                
            else:
                try:
                    coupon = BookCouponCode.objects.get(code=code, book=book)
                    context = {'status': False,'message': 'Coupon code for this book already exists.'}
                    
                except BookCouponCode.DoesNotExist:
                    coupon_code = BookCouponCode()
                    coupon_code.title = title
                    coupon_code.code = code
                    coupon_code.amount = amount
                    coupon_code.teacher = me.profile
                    coupon_code.book = book
                    coupon_code.expire_date = expire_date
                    coupon_code.total_count = total_count
                    coupon_code.save()
                    context = {'status': True, 'message': 'Coupon Created Successfully'}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
    
    def put(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            title = data['name']
            code = data['code']
            amount = data['amount']
            expire_date = data.get('expire_date')
            total_count = data.get('total_count')
            book_id = data['book_id']
            book = Book.objects.get(id=book_id)

            code_length = len(code)
            if code_length < 5:
                context = {'status': False,'message': 'length of Coupon Code is too short'}
                
            else:
                try:
                    coupon = BookCouponCode.objects.get(code=code, book=book)
                    context = {'status': False,'message': 'Coupon code for this book already exists.'}
                    
                except BookCouponCode.DoesNotExist:
                    coupon_code = BookCouponCode.objects.get(id = record_id)
                    coupon_code.title = title
                    coupon_code.code = code
                    coupon_code.amount = amount
                    coupon_code.book = book
                    coupon_code.expire_date = expire_date
                    coupon_code.total_count = total_count
                    coupon_code.save()
                    context = {'status': True, 'message': 'Coupon Updated Successfully'}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
    
    def delete(self, request):
        me = Teach(self.request.user)
        data = request.data
        record_id = data['record_id']
        try:
            coupon_code = BookCouponCode.objects.get(id=record_id)
            coupon_code.delete()
            context = {'status': True, 'message': 'Coupon Code Deleted Successfully'}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        return Response(context)

class CouponCodesBookWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            book_id = data['book_id']
            book = Book.objects.get(id = book_id)
            coupon_codes = BookCouponCode.objects.filter(book=book).order_by('-id')
            codes_list = []
            for cc in coupon_codes:
                student_count = cc.couponUsedStudents.count()
                cc_dict = {
                    'id': cc.id, 
                    'name': cc.title,
                    'code': cc.code, 
                    'discount': cc.amount, 
                    'total_count': cc.total_count,
                    'student_count': student_count,
                    'created_date': cc.created_date,
                    }
                codes_list.append(cc_dict)
            context = {'status':True, 'coupon_list': codes_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class ApplyBookCouponCode(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        book_id = data['book_id']
        code = data['code']
        try:
            book = Book.objects.get(id=book_id)
            coupon_code = BookCouponCode.objects.get(code=code, book=book)
            if not coupon_code:
                context = {'status': 'failed', 'message': 'Coupon is not valid for this book'}

            if coupon_code.expire_date:
                today = datetime.now().date()
                if coupon_code.expire_date < today:
                    context = {'status': 'failed', 'message': 'Coupon has expired'}

            if isinstance(coupon_code.total_count, int):
                if coupon_code.total_count < 1:
                    context = {'status': 'failed', 'message': 'Coupon has expired'}
                else:
                    coupon_code.total_count += 1
                    coupon_code.save()

            price = book.actualPrice
            final_price = price - coupon_code.amount
            context = {'status':True, 'new_price': final_price, 'coupon_id': coupon_code.id}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context) 
    

class SubInstituteAllStudentListDownload(APIView):
    def get(self, request):
        institute = Institute.objects.get(id=46428)

        try:
            output = []
            students = Student.objects.filter(institute=institute)
            for student in students:
                try:
                    student_data = StudentDetails.objects.get(student=student)
                    email = student_data.email
                    dob = student_data.dob
                    address = student_data.address
                    parent_name = student_data.parentName
                    mother_name = student_data.mother_name
                except:
                    email = None
                    dob = None
                    address = None
                    parent_name = None
                    mother_name = None
                    
                try:
                    student_data1 = SubInstituteStudent.objects.get(student)
                    category = student_data1.category
                    aadhar_card_number = student_data1.aadhar_card_number
                    registration_number = student_data1.student_registration_number
                except:
                    category = None
                    aadhar_card_number = None
                    registration_number = None
                    
                queryset = StudentTradePurchase.objects.filter(student=student, approved=True).select_related('student', 'student__studentuser')
                if queryset:
                    for student_purchase in queryset:
                        temp_list = [
                            student_purchase.trade_details.sub_institute.name, 
                            student_purchase.trade_details.trade.name,
                            student.name,
                            student.studentuser.username.split('@')[0],
                            student_purchase.mode,
                            student_purchase.paidAmount,
                            student_purchase.trade_details.session_start,
                            student_purchase.trade_details.session_end,
                            category,aadhar_card_number,registration_number,
                            email,dob,address,parent_name,mother_name
                        ]
                        output.append(temp_list)
                else:
                    temp_list = [
                        'Mobile ITI', 
                        None,
                        student.name,
                        student.studentuser.username.split('@')[0],
                        None,None,None,None,
                        category,aadhar_card_number,registration_number,
                        email,dob,address,parent_name,mother_name
                        ]
                    output.append(temp_list)

            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = 'attachment; filename="details.csv"'
                writer = csv.writer(response)
                writer.writerow(['ITI Institute', 'Trade Name', 'Name',
                                'Phone Number', 'Mode', 'Amount',
                                'Session Start', 'Session End', 'Category',
                                'Aadhar Number', 'Register Number',
                                'Email', 'Dob', 'Address', 'Father Name',
                                'Mother Name'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})

        except Exception as e:
            context = {'issues': f"{e}"}
            return Response(context)
    
class TranslateQuestion(APIView):
    def get(self,request):
        try:
            target_languages = ["hi", "ml", "bn", "pa", "kn", "gu", "ur", "as", "mr"]
            question = 'Hello how are you?'
            credential_path = "google_cloud_details.json"
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_path
            translate_client = translate_v2.Client()
            translations = {}
            for target in target_languages:
                output = translate_client.translate(question, target_language=target)
                translations[target] = output['translatedText']
                

            
            context = {'status': 'Success', 'translations': translations}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        
        return Response(context)  
    
class PackageWiseTestList(APIView): 
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            tests = package.tests.all()
            test_list = []
            for test in tests:
                test_dict = {
                    'id': test.id,
                    'name': test.name,
                }
                test_list.append(test_dict)
            context = {'status':True, 'test_list': test_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context) 
    
class TestWiseStudentList(APIView): 
    def post(self,request):
        me = Teach(self.request.user)
        data = request.data
        try:
            test_id = data['test_id']
            test = Test.objects.get(id=test_id)
            students = test.students.all()
            student_list = []
            for student in students:
                student_dict = {
                    'id': student.id,
                    'name': student.name,
                }
                student_list.append(student_dict)
            context = {'status':True, 'student_list': student_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context) 
    
class StudentTestAttemptList(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            student_id = data['student_id']
            test_id = data['test_id']
            marks = StudentMarks.objects.select_related('test').filter(
                student__id=student_id, test__is_answers_showing=True,test=test_id).order_by('-id')
            marks_list = []
            for mark in marks:
                time = mark.time
                attemptTime = mark.attemptTime
                test = mark.test
                
                marks_dict = {
                    'id': mark.id, 
                    'test_id': test.id, 
                    'time': mark.time, 
                    'attemptTime': attemptTime,
                    'marks': mark.marks,
                    'result': mark.result,
                    'percentage': mark.percentage,
                    }
                marks_list.append(marks_dict)
            context = {'status': 'Success', 'marks_list': marks_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class CheckQuestion(APIView):
    def post(self, request):
        try:
            me = Studs(self.request.user)
            data = request.data
            question_id = data['question_id']
            option_id = data['option_id']
            question = Question.objects.get(id=question_id)
            option = Option.objects.get(id=option_id, question=question)
            if option.correct == True:
                question_status = True
            else:
                question_status = False
            
            context = {'status': True,'question_status': question_status}
        except Exception as e:
            context = {'status': False, 'message': f"{e}"}

        return Response(context)
    
class QuestionDetails(APIView):
    def post(self,request):
        try:
            me = Studs(self.request.user)
            data = request.data
            question_id = data['question_id']
            option_id = data['option_id']
            question = Question.objects.get(id=question_id)
            
            
            option = Option.objects.get(id=option_id, question=question)
            if option.correct == True:
                question_status = True
            else:
                question_status = False
                
            try:
                subject = question.subject
                subject_dict = {'id': subject.id, 'name': subject.name}
                chapter = question.chapter
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
            except:
                chapter_dict = {}
                subject_dict = {}   

            direction = question.direction
            if direction != None:
                direction_dict = {'id': direction.id, 'text': direction.text, 'picture': direction.picture}
            else:
                direction_dict = {'id': None,'text': None, 'picture': None}

            options = Option.objects.filter(question=question)
            options_list = []
            for opt in options:
                if opt.id == int(option_id):
                    selected = True
                else:
                    selected = False
                
                optionPicture = opt.picture

                if optionPicture == None or len(optionPicture) < 5:
                    optionPicture = None

                if opt.explanationText:
                    explanationText = opt.explanationText
                else:
                    explanationText = opt.explanation

                if not explanationText:
                    explanationText = None
                    
                option_dict = {
                    'id': opt.id,
                    'selected': selected,
                    'text': opt.text,
                    'picture': optionPicture,
                    'explanationText': explanationText,
                    'explanationPicture': opt.explanationPicture,
                    'correct': opt.correct,
                    'explanationVideo': opt.explanationVideo
                    }
                options_list.append(option_dict)

                question_dict = {
                    'id': question.id,
                    'is_question_correct': question_status,
                    'text': question.text,
                    'dynamicText': question.dynamicText,
                    'picture': question.picture,
                    'direction': direction_dict,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'marks': question.marks,
                    'negativeMarks': question.negativeMarks,
                    'language': question.language,
                    'source': question.source,
                    'oneWordQuestion': question.oneWordQuestion,
                    'oneWordAnswer': question.oneWordAnswer,
                    'oneWordExplanation': question.oneWordExplanation,
                    'options': options_list,
                    }
            context = {'status': True, 'question_dict': question_dict}
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)
    
class StudentGetSubjectVideos(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if not me.profile.accessVideo:
            return Response({'videos': []})

        try:
            data = request.data
            subject_id = data.get('subject_id')
            subject = Subject.objects.get(id=subject_id)
            videos = Video.objects.filter(subject=subject, publish=True).select_related('chapter', 'subject').prefetch_related('teacher').distinct('id').order_by('-id')

            stud_pack_helper = StudentBroughtPackagesHelper(me.profile)
            bought_videos = stud_pack_helper.get_all_brought_videos()

            videos_list = []
            for video in videos:
                bought = video in bought_videos
                print(bought)
                
                teachers_list = [{'id': teacher.id, 'name': teacher.name} for teacher in video.teacher.all()]
                subject_dict = {'id': video.subject.id, 'name': video.subject.name} if video.subject else {}
                chapter_dict = {'id': video.chapter.id, 'name': video.chapter.name, 'code': video.chapter.code} if video.chapter else {}
                
                vision = not video.viewsLimite or CheckVideoViewLimite(me.profile, video.id, video.viewsLimite)
                download_link = video.download_link or ""

                video_dict = {
                    'id': video.id,
                    'teacher': teachers_list,
                    'subject': subject_dict,
                    'chapter': chapter_dict,
                    'link': video.urlLink,
                    'download_link': download_link,
                    'generalVideo': video.generalVideo,
                    'publishDate': video.publishDate,
                    'title': video.title,
                    'locked': video.locked,
                    'bought': bought,
                    'thumbnail': video.thumbnail,
                    'vision': vision
                }
                videos_list.append(video_dict)

            return Response({'status': True, 'videos': videos_list})

        except Subject.DoesNotExist:
            return Response({'status': False, 'message': 'Subject not found'})
        except Exception as e:
            return Response({'status': False, 'message': str(e)})
    
class StudentGetSubjectNotes(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessNotes == False:
            context = {'notes': []}
            return Response(context)
        try:
            data = request.data
            subject_id = data['subject_id']
            notes = Note.objects.filter(subject=subject_id).select_related('noteurl_note', 'subject', 'chapter').order_by('-id')
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_notes = student_brought_packages.get_all_brought_notes()
            notes_view_object = NotesViewLimitCheck(me.profile)
            Bookmark_Object = CheckBookmark(me.profile)
            
            notes_list = []
            for note in notes:
                subject = note.subject
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = ''
                
                try:
                    note_link = note.noteurl_note.link
                    note_link=note_link.strip('"')
                except:
                    note_link = ""
                    
                bought = False
                if note in bought_notes:
                    bought = True
                    

                try:
                    vision = notes_view_object.vision(note.id, note.noteViewsLimite)
                except:
                    vision = None
                
                try:
                    Bookmark = Bookmark_Object.isNoteBookmark(note.id)
                except:
                    Bookmark = False

                note_dict = {
                    'id': note.id, 
                    'title': note.title, 
                    'publishDate': note.publishDate, 
                    'thumbnail': note.thumbnail, 
                    'subject': subject.name,
                    'chapter_object': chapter_name, 
                    'url': note_link, 
                    'bought': bought, 
                    'vision': vision,
                    'Bookmark': Bookmark
                    }
                notes_list.append(note_dict)

            context = {'status':True, 'notes': notes_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
    
class StudentGetSubjectTests(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        try:
            data = request.data
            subject_id = data['subject_id']
            subject = Subject.objects.get(id=subject_id)
            
            if me.institute.listReversed:
                order_by = '-id'
            else:
                order_by = 'id'

            tests = Test.objects.select_related('createdBy').prefetch_related('subjects','chapters','questions','batches').filter(Q(subjects=subject, publish=True) & Q(
                    Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now()))).distinct().order_by(order_by)
            
            bought_packages = StudentBroughtPackagesHelper(me.profile)
            bought_tests = bought_packages.get_all_brought_tests()
            
            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests_ids = student_test_helper.taken_test()
            
            tests_list = []
            for test in tests:
                if test.publish == True:
                    subjects = test.subjects.all()
                    subject_list = []
                    for subject in subjects:
                        subject_dict = {'id': subject.id, 'name': subject.name}
                        subject_list.append(subject_dict)
                        
                    chapters = test.chapters.all()
                    chapter_list = []
                    for chapter in chapters:
                        chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                        chapter_list.append(chapter_dict)
                        
                    batches = test.batches.all()
                    batches_list = []
                    for batch in batches:
                        batch_dict = {'id': batch.id, 'name': batch.name}
                        batches_list.append(batch_dict)
                        
                    teacher = test.createdBy
                    teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    
                    bought = False
                    if test.id in bought_tests:
                        bought = True

                    
                    numberQuestions = test.questions.all().count()

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    first_attempt = True
                    if test.id in taken_tests_ids:
                        first_attempt = False
                    else:
                        firt_attempt = True

                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.filter(student=me.profile).last()
                        remaining_attempt = test.test_count - student_last_report.attempt_count
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id, 
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': bought, 
                                    'first_attempt': first_attempt, 
                                    'repeatTest': test.repeatTest, 
                                    'testTimeOver': testTimeOver, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'remaining_attempt': remaining_attempt,
                                    }
                                tests_list.append(test_dict)
                        else:
                            test_dict = {
                                'id': test.id, 
                                'name': test.name, 
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'time': test.time, 
                                'locked': test.locked,
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': bought, 
                                'first_attempt': first_attempt, 
                                'repeatTest': test.repeatTest, 
                                'testTimeOver': testTimeOver, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                }
                            tests_list.append(test_dict)

                    elif first_attempt == False and test.repeatTest == False:
                        pass
                    else:
                        test_dict = {
                            'id': test.id, 
                            'name': test.name, 
                            'totalMarks': test.totalMarks, 
                            'published': test.published, 
                            'subjects': subject_list, 
                            'chapters': chapter_list, 
                            'createdBy': teacher_dict, 
                            'time': test.time, 
                            'locked': test.locked,
                            'batches': batches_list, 
                            'numberQuestions': numberQuestions, 
                            'bought': bought, 
                            'first_attempt': first_attempt, 
                            'repeatTest': test.repeatTest, 
                            'testTimeOver': testTimeOver, 
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions
                            }
                        tests_list.append(test_dict)
                    
            context = {'status':True, 'tests': tests_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class StudentBatchNonPurchasedPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            institute = me.profile.institute
            today = timezone.now()
            
            packages = Package.objects.filter(teacher__institute=institute, batches__in = batches, publish=True).select_related('course').prefetch_related(
                'students', 'notes', 'videos', 'youtubeLiveVideos', 'tests').order_by('-id')

            packages_list = []
            for pack in packages:
                student_id_list = set(student.id for student in pack.students.all() if student)
                bought = False 

                if me.profile.id in student_id_list:
                    try:
                        studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                        if studentPackage.endDate.replace(tzinfo=None) <= today:
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = studentPackage.startDate
                            sbph.endDate = studentPackage.endDate
                            sbph.save()
                            studentPackage.delete()
                            pack.students.remove(me.profile)
                            for i in pasp:
                                i.delete()
                            bought = False
                        else:
                            bought = True

                    except StudentPackage.MultipleObjectsReturned:
                        studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                        for sp in studentPackage:
                            if sp.endDate.replace(tzinfo=None) <= today.now():
                                totalStudentPackagesCount = StudentPackage.objects.filter(package=pack, student=me.profile).count()
                                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                                totalPaidAmount = 0
                                for i in pasp:
                                    totalPaidAmount += i.paidAmount
                                    
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = totalPaidAmount
                                sbph.startDate = sp.startDate
                                sbph.endDate = sp.endDate
                                sbph.save()
                                sp.delete()
                                
                                if totalStudentPackagesCount == 1:
                                    pack.students.remove(me.profile)
                                    pack.save()
                                else:
                                    pass
                                
                                for i in pasp:
                                    i.delete()
                                    
                                if totalStudentPackagesCount == 1:
                                    bought = False
                                else:
                                    bought = True
                                    
                            else:
                                bought = True

                    except Exception as e:
                        context = {'status': 'Failed', 'message': str(e)}
                        
                if bought == False:
                    packages_list.append((pack, False))

            final_list = []
            for package, bought in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()

                if package.course:
                    course_name = package.course.name
                    course_id = package.course.id
                else:
                    course_name = None
                    course_id = None

                package_dict = {
                    'id': package.id,
                    'title': package.title,
                    'marketLevelPackage': package.marketLevelPackage,
                    'price': package.price,
                    'max_price': package.max_price,
                    'duration': package.duration,
                    'bought': bought,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'course_id': course_id,
                    'course_name': course_name,
                    'numberTests': numberTests,
                    'numberVideos': numberVideos,
                    'numberNotes': numberNotes,
                    'date': package.date
                    }
                final_list.append(package_dict)
            context = {'status':True,'packages': final_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
            
        return Response(context)
    
class StudentBatchAllPackages(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batches = me.profile.batches.all()
            institute = me.profile.institute
            today = timezone.now()
            packages = Package.objects.filter(teacher__institute=institute, batches__in = batches, publish=True).prefetch_related(
                'students', 'notes', 'videos', 'youtubeLiveVideos', 'tests').order_by('-id')
            
            packages_list = []
            for pack in packages:
                student_ids = set(student.id for student in pack.students.all())
                if me.profile.id in student_ids:
                    try:
                        studentPackage = StudentPackage.objects.get(package=pack, student=me.profile)
                        if studentPackage.endDate.replace(tzinfo=None) <= today:
                            pasp = PaidAmountStudentPackage.objects.filter(studentPackage=studentPackage)
                            totalPaidAmount = 0
                            for i in pasp:
                                totalPaidAmount += i.paidAmount
                            sbph = StudentBoughtPackageHistory()
                            sbph.student = me.profile
                            sbph.package = pack.title
                            sbph.packagePrice = pack.price
                            sbph.duration = pack.duration
                            sbph.paidAmount = totalPaidAmount
                            sbph.startDate = studentPackage.startDate
                            sbph.endDate = studentPackage.endDate
                            sbph.save()
                            studentPackage.delete()
                            pack.students.remove(me.profile)
                            for i in pasp:
                                i.delete()
                            bought = False
                        else:
                            bought = True

                    except StudentPackage.MultipleObjectsReturned:
                        studentPackage = StudentPackage.objects.filter(package=pack, student=me.profile)
                        totalStudentPackagesCount = studentPackage.count()
                        for sp in studentPackage:
                            if sp.endDate.replace(tzinfo=None) <= today.now():
                                pasp = PaidAmountStudentPackage.objects.filter(studentPackage=sp)
                                totalPaidAmount = 0
                                for i in pasp:
                                    totalPaidAmount += i.paidAmount
                                sbph = StudentBoughtPackageHistory()
                                sbph.student = me.profile
                                sbph.package = pack.title
                                sbph.packagePrice = pack.price
                                sbph.duration = pack.duration
                                sbph.paidAmount = totalPaidAmount
                                sbph.startDate = sp.startDate
                                sbph.endDate = sp.endDate
                                sbph.save()
                                sp.delete()
                                for i in pasp:
                                    i.delete()

                                if totalStudentPackagesCount == 1:
                                    pack.students.remove(me.profile)
                                    pack.save()
                                    bought = False
                                else:
                                    bought = True

                            else:
                                bought = True

                    except Exception as e:
                        context = {'status': 'Failed', 'message': str(e)}
                        return Response(context)
                else:
                    bought = False

                if bought == False:
                    packages_list.append((pack, False))
                else:
                    packages_list.append((pack, True))

            final_list = []
            for package, bought in packages_list:
                numberTests = package.tests.all().count()
                numberVideos = package.videos.all().count()
                numberNotes = package.notes.all().count()

                if package.course:
                    course_name = package.course.name
                    course_id = package.course.id
                else:
                    course_name = None
                    course_id = None

                package_dict = {
                    'id': package.id,
                    'title': package.title,
                    'marketLevelPackage': package.marketLevelPackage,
                    'price': package.price,
                    'duration': package.duration,
                    'details': package.details,
                    'thumbnail': package.thumbnail,
                    'course_name': course_name,
                    'course_id': course_id,
                    'numberTests': numberTests,
                    'numberVideos': numberVideos,
                    'numberNotes': numberNotes,
                    'date': package.date,
                    'bought': bought,
                }
                final_list.append(package_dict)
            context = {'status':True,'packages': final_list}
        except Exception as e:
            context = {'status':False,'message':str(e)}
        return Response(context)
    
class StudentGetCoursePackageSubjects(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            batch_ids = me.profile.batches.values_list('id', flat=True)
            course_ids = Batch.objects.filter(id__in=batch_ids).values_list('course__id', flat=True).distinct()
            packages = Package.objects.filter(course__in = course_ids).order_by('-id')
            all_subjects = []
            
            for package in packages:
                videos = package.videos.all().values('subject__id', 'subject__name')
                video_df = pd.DataFrame(videos).fillna('').rename(columns={"subject__id": "id", "subject__name": "name"})
                video_subjects = video_df.to_dict('records')

                notes = package.notes.all().values('subject__id', 'subject__name')
                note_df = pd.DataFrame(notes).fillna('').rename(columns={"subject__id": "id", "subject__name": "name"})
                note_subjects = note_df.to_dict('records')
        
                tests = package.tests.all().values('subjects__id', 'subjects__name')
                test_df = pd.DataFrame(tests).fillna('').rename(columns={"subjects__id": "id", "subjects__name": "name"})
                test_subjects = test_df.to_dict('records')
                
                combined_subjects = list(unique_everseen(video_subjects + note_subjects + test_subjects))
                all_subjects.extend(combined_subjects)
                
            unique_subjects = list(unique_everseen(all_subjects))
            context = {'status': True, 'subjects': unique_subjects}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)
    
class PackageDemoContentDuplicate(APIView):
    def get(self, request):
        duplicates = (
            PackageDemoContent.objects
            .values('package')
            .annotate(count=Count('id'))
            .order_by()
            .filter(count__gt=1)
        )

        duplicate_packages = [dup['package'] for dup in duplicates]

        context = {'status': True, 'duplicate_packages': duplicate_packages}
        
        return Response(context)
    
class ServerUsedByTeacher(APIView):
    def get(self, request):
        three_months_ago = timezone.now() - timedelta(days=90)

        server_videos = Video.objects.filter(publishDate__gte=three_months_ago, urlLink__icontains="https://storage.googleapis.com")

        videos = [sv.urlLink for sv in server_videos]
        teachers = Teacher.objects.filter(video_teacher__in = server_videos).distinct()

        teachers_list = [teach.teacheruser.username for teach in teachers]

        context = {'status': True, 'teachers_list': teachers_list, 'videos': videos}
        
        return Response(context)
    
class VerifyFirebaseToken(APIView):
    def get(self, request):
        
        json_file = 'https://firebasestorage.googleapis.com/v0/b/bodhi-clients2.appspot.com/o/dineshbodhiai5-f306a3c7b6a0.json?alt=media&token=da61ea62-387b-4de7-961a-dcb9b83ba99e'
        initialize_firebase_with_json(json_file)
        token = "f3x6kdmySZmpdWusHkIWzF:APA91bG-RHiHGu8kSRkOr7CozTq3MofzXME4yD1y8LL6rll2P_SRNqkyrFF2dr0q3uj6Qg5c_lW_1m0omODoA7k8aTmn1uKpVfKaBxeNswHTG1GmWz_fn7WLqeusdeQRZEOFKwHvK6vb"
        
        if not token:
            return Response({'status': 'Failed', 'message': 'Token not provided'}, status=400)

        try:
            decoded_token = auth.verify_id_token(token)
            uid = decoded_token['uid']
            return Response({'status': 'Success', 'message': 'Token is valid', 'uid': uid}, status=200)
        except Exception as e:
            return Response({'status': 'Failed', 'message': str(e)}, status=500)
        
class SendUserNotification(APIView):
    def get(self, request):
        try:

            
            json_file = 'https://firebasestorage.googleapis.com/v0/b/bodhi-clients2.appspot.com/o/ankush1-a95ef-1c87cbea2003.json?alt=media&token=ee27cc2d-6419-451b-9f90-d4ce07fcb393'
            initialize_firebase_with_json(json_file)
        
            notification = {"title": "ALERT","body": "Notification"}

            data = {"click_action": "FLUTTER_NOTIFICATION_CLICK"}
            
            message = messaging.Message(
                notification=messaging.Notification(
                    title="Hello World",
                    body="This is a sample notification",
                ),
                token = "ch_8tdMpTYi-stQa1sl5dW:APA91bHrkf6ZU6nzXrsV6RNszqmX3utSntBPLp0tCrv6uJzjEUh-hlu1vIdUJp-9SR4OrYH19SgSAXQGvYsotqWxX9N4_W5DpYTpS1rvm2M2BEy8VIi-mbY6mFMm7QLVaC2frvNt2B_x",
            )

            response = messaging.send(message)
            print(f'Successfully sent message: {response}')
            context = {'status': True, 'message': 'Success'}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)

class SendUserChatNotification(APIView):
    def get(self, request):
        try:
            data = None
            notification = None
            deviceId = "fMnxF-QJRo-7bvmaIlQ1hT:APA91bHQ6iw6iQIrUiNwNYewqPPkY1t6b62J932xsL2XRv9pT02FYYLWgqG-tEzXGwkmj0UsuaZbbXZnPh6FWQsFMczA51A5XaxXO7Bw9H1q4gJuYXewgAlhm3RZewQzLz2bCC0TRDOf"
            
            cred = credentials.Certificate('/home/azureuser/bodhiai/basicinformation/firebase_notification.json')
            firebase_admin.initialize_app(cred)
            
            if notification is None:
                notification = {
                    "title": "ALERT",
                    "body": "Notification",
                    "image": "https://static.wixstatic.com/media/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png/v1/fill/w_192%2Ch_192%2Clg_1%2Cusm_0.66_1.00_0.01/2ccf66_45e34b2473b04534a660e4ac5c0a4445~mv2.png"
                }

            if data is None:
                data = {"click_action": "FLUTTER_NOTIFICATION_CLICK"}
            
            message = messaging.Message(
            notification = messaging.Notification(
                title = notification['title'],
                body = notification['body'],
                image = notification.get('image', None)
            ),
            data = data,
            token = deviceId,
            )
            try:
                response = messaging.send(message)
                print('Successfully sent message:', response)
                context = {'status': True, 'last_request_response': response, 'message':'Notification Sent Successfully'}
            except Exception as e:
                context = {'status': False,'message':str(e)}
                print(f"Failed to send message to device ID {deviceId}: {str(e)}")

        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)
        
class BatchWiseAllTests(APIView):
    def post(self, request):
        me = Teach(request.user)
        
        try:
            data = request.data
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            
            tests = Test.objects.filter(batches=batch).prefetch_related('subjects', 'chapters').order_by('-id')

            tests_list = []
            for test in tests:
                subjects_list = []
                subjects = test.subjects.all()
                for subject in subjects:
                    subjects_list.append(subject.name)
                
                chapters_list = []
                chapters = test.chapters.all()  
                for chapter in chapters:
                    chapters_list.append(chapter.name)
                    
                test_dict = {
                    'id': test.id, 
                    'name': test.name, 
                    'subjects_list': subjects_list,
                    'chapters_list': chapters_list,
                    'totalMarks': test.totalMarks,
                    'passing_marks': test.passing_marks,
                }
                tests_list.append(test_dict)
                
            context = {'status':True, 'tests': tests_list}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)

class BatchAllStudentTestResultDownload(APIView):
    def get(self, request, batch_id, test_id):
        me = Teach(request.user)
        batch = Batch.objects.get(id=batch_id)
        test = Test.objects.get(id=test_id)
        students = Student.objects.filter(batches__id=batch_id)

        try:
            output = []
            for student in students:
                student_marks = StudentMarks.objects.filter(student=student, test__id=test_id).last()

                if student_marks:
                    temp_list = [
                        student_marks.student.name, 
                        student_marks.student.studentuser,
                        student_marks.student.studentuser.username.split('@')[0],
                        student_marks.time, # Time taken to complete the test
                        student_marks.attemptTime, # Test Date
                        student_marks.totalTestMarks, # Test max marks
                        student_marks.marks, # Test obtained marks
                        'Present',
                    ]
                    output.append(temp_list)
                else:
                    temp_list = [
                        student_marks.student.name, 
                        student_marks.student.studentuser,
                        student_marks.student.studentuser.username.split('@')[0],
                        None,None,None,None,
                        'Absent',
                    ]
                    output.append(temp_list)
                    
            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = 'attachment; filename="details.csv"'
                writer = csv.writer(response)
                writer.writerow(['Student Name', 'Username', 'Phone Number', 'Taken Time', 'Test Date', 'Test Marks', 'Obtained Marks', 'Attendence'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})
            
        except Exception as e:
            context = {'message': str(e)}
            return Response(context)
        
class YoutubeLiveStudentDetailsDownload(APIView):
    def get(self, request, video_id):

        try:
            video = LiveVideoLink.objects.get(id=video_id)
            session_title = video.title
            session_date = video.time
            
            output = []
            for student in video.students.all():
                try:
                    student_join = StudentYoutubeLiveVideoSession.objects.filter(student=student, video=video).order_by('joinTime').first()
                    student_join_time = student_join.joinTime if student_join else None
                except Exception as e:
                    student_join_time = None

                try:
                    student_leave = StudentYoutubeLiveVideoSession.objects.filter(student=student, video=video).order_by('-leaveTime').first()
                    student_leave_time = student_leave.leaveTime if student_leave else None
                except Exception as e:
                    student_leave_time = None
                    
                try:
                    student_rating = VideoRatingFeedback.objects.filter(student=student, video=video).last()
                    session_rating = student_rating.session_rating
                    teacher_rating = student_rating.teacher_rating
                    feedback = student_rating.feedback
                except:
                    session_rating = None
                    teacher_rating = None
                    feedback = None

                temp_list = [
                    session_title,
                    session_date,
                    student.name, 
                    student_join_time,
                    student_leave_time,
                    session_rating,
                    teacher_rating,
                    feedback,
                ]
                output.append(temp_list)
                    
            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = f'attachment; filename="{session_title}_{video_id}_youtube_student_details.csv"'
                writer = csv.writer(response)
                writer.writerow(['Session Title', 'Session Date', 'Student Name', 'Joining Time', 'Leaving Time', 'Session Rating', 'Teacher Rating', 'Feedback'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})
            
        except Exception as e:
            context = {'message': str(e)}
            return Response(context)
        
class StudentRemoveFromBatches(APIView):
    def get(self, request):
        me = Studs(self.request.user)  
        data = request.data  
        batches = me.profile.batches.all()

        try:
            student_package = StudentPackage.objects.filter(student=me.profile)

            if student_package.exists():
                active_package = student_package.filter(endDate__gt=timezone.now())

                if active_package.exists():
                    context = {'status': True, 'message': 'Student is in an active package, no changes made'}
                else:
                    outer_batch = Batch.objects.get(name__iexact='outer', institute=me.profile.institute)
                    for batch in batches:
                        if batch != outer_batch:
                            me.profile.batches.remove(batch)

                    context = {'status': True, 'message': 'Removed student from all batches except outer batch (package expired)'}
            else:
                outer_batch = Batch.objects.get(name__iexact='outer', institute=me.profile.institute)
                for batch in batches:
                    if batch != outer_batch:
                        me.profile.batches.remove(batch)

                context = {'status': True, 'message': 'Removed student from all batches except outer batch (no package found)'}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)

class TeacherGetTopicWiseVideos(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            topic_id = data['topic_id']
            if me.profile.teacheruser.username == 'eduprep_teacher':
                videos = Video.objects.filter(teacher=me.profile,topics__id=topic_id).select_related('subject','chapter','topics').order_by('id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute)
                    videos = Video.objects.filter(teacher__in=teachers, topics__id=topic_id).select_related('subject', 'chapter','topics').prefetch_related('batches').order_by('-id')
                else:
                    videos = Video.objects.filter(teacher=me.profile, topics__id=topic_id).select_related('subject','chapter','topics').prefetch_related('batches').order_by('id')

            videos_list = []
            for video in videos:
                try:
                    subject = video.subject.name
                except:
                    subject = None
                    
                try:
                    chapter = video.chapter.name
                except:
                    chapter = None
                
                batch_list = []
                batches = video.batches.all()
                for bat in batches:
                    bat_dict = {'id': bat.id, 'name': bat.name}
                    batch_list.append(bat_dict)

                video_dict = {
                    'id': video.id, 
                    'title': video.title, 
                    'subject': subject,
                    'chapter': chapter, 
                    'url': video.urlLink, 
                    'publishDate': video.publishDate, 
                    'generalVideo': video.generalVideo, 
                    'batches': batch_list, 
                    'publish': video.publish, 
                    'thumbnail': video.thumbnail, 
                    'viewsLimite': video.viewsLimite
                    }
                videos_list.append(video_dict)
                
            context = {'status':True, 'videos': videos_list}
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        
        return Response(context) 
    
class TeacherGetTopicWiseNotes(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        
        try:
            topic_id = data['topic_id']

            if me.profile.teacheruser.username == 'eduprep_teacher':
                notes = Note.objects.filter(teacher=me.profile, topic__in=topic_id).order_by('-id')
            else:
                if me.profile.mainTeacher:
                    teachers = Teacher.objects.filter(institute=me.profile.institute)
                    notes = Note.objects.filter(teacher__id__in=teachers, topic__in=topic_id).order_by('-id')
                else:
                    notes = Note.objects.filter(teacher=me.profile, topic__in=topic_id).order_by('-id')

            notes_list = []
            for note in notes:
                title = note.title
                publishDate = note.publishDate
                batches = note.batches.all().values()
                
                try:
                    note_link = note.noteurl_note.link
                except:
                    note_link = ""
                url_list = [note_link]
                
                try:
                    subject_name = note.subject.name
                except:
                    subject_name = 'Deleted Subject'
                    
                try:
                    chapter_name = note.chapter.name
                except:
                    chapter_name = 'Deleted Chapter'

                note_dict = {
                    'id': note.id,
                    'title': title,
                    'subject_id': note.subject.id,
                    'subject_name': subject_name,
                    'chapter_name': chapter_name,
                    'publishDate': publishDate,
                    'note_url': url_list,
                    'batches': batches,
                    'noteViewsLimite': note.noteViewsLimite,
                    'image': note.image,
                }
                notes_list.append(note_dict)
                
            context = {'status': True, 'notes': notes_list}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}            
        
        return Response(context)
       
class ContestCategoryByQuizCategory(APIView):
    def get(self, request, quiz_category_id):
        current_time = timezone.now() 
        contest_categories = ContestCategory.objects.filter(quiz_category__id=quiz_category_id,end_time__gt=current_time)
        if contest_categories.exists():
            serializer = ContestCategorySerializer(contest_categories, many=True)
            return Response({"status":True,"data":serializer.data}, status=status.HTTP_200_OK)
        return Response({"status":False,"message": "No contest categories found for this quiz category."}, status=status.HTTP_404_NOT_FOUND)
    
class TestByContestCategory(APIView):
    def get(self, request, contest_category_id):
        me = Studs(self.request.user)
        
        if me.profile.accessTests == False:
            context = {'tests': []}
            return Response(context)
        
        try:
            category = ContestCategory.objects.get(id=contest_category_id)
            now = timezone.now()
            is_ongoing = category.end_time is not None and category.end_time <= now

            batches = me.profile.batches.all()
            if me.institute.listReversed:
                order_by = '-id'
            else:
                order_by = 'id'
                
            tests = Test.objects.select_related('createdBy').prefetch_related('batches', 'subjects', 'chapters', 'questions', 'marks_test').filter(
                Q(batches__in=batches) & 
                Q(Q(testStartDateTime=None) | Q(testStartDateTime__lte=timezone.now())) & 
                Q(contest_category__id = contest_category_id)
            ).distinct().order_by(order_by)
            
            student_test_helper = StudentPackageHelper(me.profile)
            taken_tests = student_test_helper.taken_test()
            
            student_brought_packages = StudentBroughtPackagesHelper(me.profile)
            student_brought_tests = student_brought_packages.get_all_brought_tests()

            tests_list = []
            for test in tests:
                if test.publish == True:
                    try:
                        max_participants = test.max_participants or 0  # Use default value of 0 if None
                        students_joined = StudentTestAttempt.objects.filter(test=test).count()
                        remaining_participants = max(0, max_participants - students_joined)  # Prevent negative participants
                    except StudentTestAttempt.DoesNotExist:
                        students_joined = 0
                        remaining_participants = test.max_participants or 0
                        
                    if test.max_participants == 0:
                        joined_progress = 0
                    else:
                        joined_progress = round(((students_joined / test.max_participants) * 100), 2)
                        
                    max_prize_level = PrizeLevel.objects.filter(test=test).order_by('-prize_coins').first()
                    if max_prize_level:
                        max_prize_data = {
                            "min_rank": max_prize_level.min_rank,
                            "max_rank": max_prize_level.max_rank,
                            "prize_coins": max_prize_level.prize_coins,
                        }
                    else:
                        max_prize_data = {
                            "min_rank": 0,
                            "max_rank": 0,
                            "prize_coins": 0,
                        }
                        
                    prize_pool = test.total_prizes()
        
                    subject_list = []
                    try:
                        subjects = test.subjects.all()
                        for subject in subjects:
                            subject_dict = {'id': subject.id, 'name': subject.name}
                            subject_list.append(subject_dict)
                    except:
                        pass
                    
                    chapter_list = []
                    try:
                        chapters = test.chapters.all()
                        for chapter in chapters:
                            chapter_dict = {'id': chapter.id, 'name': chapter.name, 'code': chapter.code}
                            chapter_list.append(chapter_dict)
                    except:
                        pass
                    
                    batches_list = []
                    try:
                        batches = test.batches.all()
                        for batch in batches:
                            batch_dict = {'id': batch.id, 'name': batch.name}
                            batches_list.append(batch_dict)
                    except:
                        pass
                        
                    try:
                        teacher = test.createdBy
                        teacher_dict = {'id': teacher.id, 'name': teacher.name}
                    except:
                        teacher_dict = {'id':None,'name':None}
                    
                    bought = False

                    if test in student_brought_tests:
                        bought = True

                    if test.locked == False:
                        bought = True

                    numberQuestions = test.questions.all().count()

                    if test.testEndDateTime:
                        if test.testEndDateTime >= timezone.now():
                            testTimeOver = False
                        else:
                            testTimeOver = True
                    else:
                        testTimeOver = False

                    if test.id in taken_tests:
                        first_attempt = False
                    else:
                        first_attempt = True
                        
                    now = timezone.now()
                    if test.testEndDateTime and test.testEndDateTime > now:
                        is_sechduled = True
                    else:
                        is_sechduled = False 
                        
                    if first_attempt == False and test.repeatTest == True:
                        student_last_report = test.marks_test.filter(student=me.profile).last()
                        if test.test_count != None:
                            if student_last_report.attempt_count < test.test_count:
                                test_dict = {
                                    'id': test.id,
                                    'total_Attempts': student_last_report.attempt_count,
                                    'name': test.name, 
                                    'totalMarks': test.totalMarks, 
                                    'published': test.published, 
                                    'subjects': subject_list, 
                                    'chapters': chapter_list, 
                                    'createdBy': teacher_dict, 
                                    'time': test.time, 
                                    'locked': test.locked,
                                    'batches': batches_list, 
                                    'numberQuestions': numberQuestions, 
                                    'bought': bought, 
                                    'first_attempt': first_attempt, 
                                    'testTimeOver': testTimeOver, 
                                    'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                    'is_sechduled': is_sechduled,
                                    'entry_fee': test.entry_fee,
                                    'max_prize_data': max_prize_data,
                                    'max_participants': test.max_participants,
                                    'students_joined': students_joined,
                                    'remaining_participants': remaining_participants,
                                    'prize_pool': prize_pool,
                                    'joined_progress': joined_progress,
                                    }
                                tests_list.append(test_dict)

                        else:
                            test_dict = {
                                'id': test.id,
                                'total_Attempts': student_last_report.attempt_count,
                                'name': test.name, 
                                'totalMarks': test.totalMarks, 
                                'published': test.published, 
                                'subjects': subject_list, 
                                'chapters': chapter_list, 
                                'createdBy': teacher_dict, 
                                'time': test.time, 
                                'locked': test.locked,
                                'batches': batches_list, 
                                'numberQuestions': numberQuestions, 
                                'bought': bought, 
                                'first_attempt': first_attempt, 
                                'testTimeOver': testTimeOver, 
                                'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                                'is_sechduled': is_sechduled,
                                'entry_fee': test.entry_fee,
                                'max_prize_data': max_prize_data,
                                'max_participants': test.max_participants,
                                'students_joined': students_joined,
                                'remaining_participants': remaining_participants,
                                'prize_pool': prize_pool,
                                'joined_progress': joined_progress,
                                }
                            tests_list.append(test_dict)
                            
                    elif first_attempt == False and test.repeatTest == False:
                        pass
                    else:
                        test_dict = {
                            'id': test.id, 
                            'total_Attempts': 0, 
                            'name': test.name, 
                            'totalMarks': test.totalMarks, 
                            'published': test.published, 
                            'subjects': subject_list, 
                            'chapters': chapter_list, 
                            'createdBy': teacher_dict, 
                            'time': test.time, 
                            'locked': test.locked,
                            'batches': batches_list, 
                            'numberQuestions': numberQuestions, 
                            'bought': bought, 
                            'first_attempt': first_attempt, 
                            'testTimeOver': testTimeOver, 
                            'studentWillAttemptQuestions': test.studentWillAttemptQuestions,
                            'is_sechduled': is_sechduled,
                            'entry_fee': test.entry_fee,
                            'max_prize_data': max_prize_data,
                            'max_participants': test.max_participants,
                            'students_joined': students_joined,
                            'remaining_participants': remaining_participants,
                            'prize_pool': prize_pool,
                            'joined_progress': joined_progress,
                            }
                        tests_list.append(test_dict)
                        
            context = {'status':True, 'tests': tests_list, 'is_ongoing':is_ongoing}
            
        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
    
class QuizCategoryList(APIView):
    def get(self, request):
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
            
        categories = QuizCategory.objects.all()
        serializer = QuizCategorySerializer(categories, many=True)
        return Response({'status':True,'data':serializer.data}, status=status.HTTP_200_OK)

    def post(self, request):
        me = Teach(self.request.user)
        serializer = QuizCategorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status':True,'data':serializer.data}, status=status.HTTP_201_CREATED)
        return Response({'status':False,'message':serializer.errors}, status=status.HTTP_400_BAD_REQUEST)
    
class QuizCategoryDetail(APIView):
    def get_object(self, pk):
        try:
            return QuizCategory.objects.get(pk=pk)
        except QuizCategory.DoesNotExist:
            return None

    def get(self, request, pk):
        try:
            me = Teach(self.request.user)
        except:
            me = Studs(self.request.user)
            
        category = self.get_object(pk)
        if category is None:
            return Response({'status':False,'message': 'Quiz Category not found'}, status=status.HTTP_404_NOT_FOUND)
        
        serializer = QuizCategorySerializer(category)
        return Response(serializer.data)

    def put(self, request, pk):
        me = Teach(self.request.user)
        category = self.get_object(pk)
        if category is None:
            return Response({'status':False,'message': 'Quiz Category not found'}, status=status.HTTP_404_NOT_FOUND)
        
        serializer = QuizCategorySerializer(category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status':True,'data':serializer.data})
        return Response({'status':False,'message':serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        me = Teach(self.request.user)
        category = self.get_object(pk)
        if category is None:
            return Response({'status':True,'message': 'Quiz Category not found'}, status=status.HTTP_404_NOT_FOUND)
        
        category.delete()
        return Response({'status':False,'message': 'Quiz Category deleted successfully'}, status=status.HTTP_204_NO_CONTENT)
    
class StudentTestEntry(APIView):
    def post(self, request):
        me = Studs(self.request.user)  
        data = request.data

        try:
            test_id = data['test_id']
            test = get_object_or_404(Test, id=test_id)

            try:
                contest_start_time = test.contest_category.start_time
                contest_date = contest_start_time.strftime('%d:%m:%y')  # Format date as dd:mm:yy
                contest_time = contest_start_time.strftime('%H:%M:%S')

                current_time = timezone.now()
                if contest_start_time <= current_time:
                    is_test_start = True # student can start test
                else:
                    is_test_start = False
            except:
                contest_start_time = None
                contest_date = None
                contest_time = None
                is_test_start = False # student can't start test

            already_joined = StudentTestAttempt.objects.filter(test=test, student=me.profile).exists()

            if already_joined:
                return Response({'status': True,'message': 'You have already joined this test.','already_joined': True})

            student_coins = StudentCoins.objects.filter(student=me.profile).first()
            if not student_coins:
                return Response({'status': True, 'message': 'No coin data found for student.'}, status=404)

            if student_coins.actual_coins < test.entry_fee:
                return Response({'status': True, 'message': 'Not enough coins to enter the test'}, status=400)

            current_participants = StudentTestAttempt.objects.filter(test=test).count()
            if current_participants >= test.max_participants:
                return Response({'status': True, 'message': 'Test has reached the maximum number of participants.'}, status=400)
            
            return Response({
                'status': True,
                'message': f'You have enough coins to participate in the test {test.name}. Entry fee: {test.entry_fee}, Your coins: {student_coins.actual_coins}',
                'contest_start_time': contest_start_time,
                'contest_date': contest_date,
                'contest_time': contest_time,
                'is_test_start': is_test_start,
            })

        except Test.DoesNotExist:
            return Response({'status': False, 'message': 'Test not found.'}, status=404)
        except Exception as e:
            return Response({'status': False, 'message': str(e)}, status=500)

class EvaluateTestLeague(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        try:
            data = request.data
            test_id = data['test_id']
            totalTime = data['totalTime']
            answers = data['answers']
            answers_list = eval(answers)  # Convert string to list of lists
            student_selfie = data.get('student_selfie')
            test = Test.objects.get(id=test_id)
            
            attemptCount = StudentMarks.objects.filter(student = me.profile, test=test).count()
            if attemptCount == 0:
                attemptCount = 1
            else:
                attemptCount += 1

            testMarks = StudentMarks()
            testMarks.student = me.profile
            testMarks.test = test
            testMarks.time = totalTime
            testMarks.attempt_count = attemptCount
            testMarks.student_selfie = student_selfie
            testMarks.save()

            for out in answers_list:
                attemptedQuestion = AttemptedQuestion()
                attemptedQuestion.student = me.profile
                            
                for ind, inn in enumerate(out):
                    if ind == 0:
                        question_id = inn
                        question = Question.objects.get(id=question_id)
                        attemptedQuestion.question = question
                    elif ind == 1:
                        attemptedQuestion.attempted = True
                        if inn != -1:
                            option = Option.objects.get(id=inn)
                            attemptedQuestion.save()
                            attemptedQuestion.optionAttempted.add(option)
                            if option.correct == True:
                                attemptedQuestion.right = True
                            else:
                                attemptedQuestion.right = False
                        else:
                            attemptedQuestion.attempted = False
                            attemptedQuestion.right = None
                            
                    elif ind == 2:
                        attemptedQuestion.time = inn
                        attemptedQuestion.save()
                        testMarks.questions.add(attemptedQuestion)

            try:
                total_marks = 0
                totalPositiveMarks = 0.0
                totalNegativeMarks = 0.0

                totalRightQuestions = 0
                totalWrongQuestions = 0
                percentage = 0.0

                attemptedQuestions = testMarks.questions.all()
                for aq in attemptedQuestions:
                    question = aq.question
                    attemptedOptions = aq.optionAttempted.all()
                    attempted = aq.attempted
                    right = aq.right

                    if right:
                        totalPositiveMarks += question.marks
                        total_marks += question.marks
                        totalRightQuestions += 1
                        
                    elif right == False:
                        total_marks -= question.negativeMarks
                        totalNegativeMarks += question.negativeMarks
                        totalWrongQuestions += 1

                    if aq.attempted == False:
                        pass

                pass_marks = testMarks.test.passing_marks
                if pass_marks:
                    if total_marks > pass_marks or total_marks == pass_marks:
                        result = 'pass'
                    else:
                        result = 'failed'
                else:
                    result = 'undefined'

                total_test_marks = testMarks.test.totalMarks
                
                try:
                    percentage = (total_marks * 100) / total_test_marks
                except:
                    percentage = None

                totalQuestions = testMarks.test.questions.all().count()
                totalAttemptedQuestions = testMarks.questions.filter(attempted=True).count()
                totalNotAttemptedQuestions = testMarks.questions.filter(attempted=False).count()

                testMarks.totalQuestions = totalQuestions
                testMarks.totalAttemptedQuestions = totalAttemptedQuestions
                testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

                testMarks.totalPositiveMarks = totalPositiveMarks
                testMarks.totalNegativeMarks = totalNegativeMarks

                testMarks.totalRightQuestions = totalRightQuestions
                testMarks.totalWrongQuestions = totalWrongQuestions

                testMarks.result = result
                testMarks.percentage = percentage
                testMarks.totalTestMarks = total_test_marks

                testMarks.marks = total_marks
                testMarks.save()
            except:
                pass

            testMarks.marks = total_marks
            testMarks.save()
            
            test_all_marks = StudentMarks.objects.filter(student = me.profile, test = test).order_by('id')
                    
            mark_id_list = []
            for single_mark in test_all_marks:
                mark_dict = {'id': single_mark.id, 'attemptTime': single_mark.attemptTime}
                mark_id_list.append(mark_dict)
                
            test_result = TestResult()
            test_result.student = me.profile
            test_result.test = test
            test_result.marks = testMarks.marks
            test_result.save()

            
            context = {
                'status': 'Success',
                'message': testMarks.id,
                'obtainedMarks': testMarks.marks,
                'totalMarks': test.totalMarks,
                'attempCount': testMarks.attempt_count,
                'student_selfie':testMarks.student_selfie,
                'is_answers_showing':testMarks.test.is_answers_showing,
                'mark_id_list': mark_id_list,
                }
        except Exception as e:
            context = {'status': 'failed', 'message': f"{e}"}

        return Response(context)

class CalculateTestRanks(APIView):
    def post(self,request):
        me = Studs(self.request.user)
        try:
            test_id = request.data['test_id']
            current_time = timezone.now() 
            test = Test.objects.get(id=test_id)
            contest_category = test.contest_category
            if contest_category and contest_category.end_time and contest_category.end_time > current_time:
                return Response({'status': False, 'message': 'Contest still ongoing. Check Result after contest end', 'ongoing':True})

            else:
                test_results = TestResult.objects.filter(test=test).order_by('-marks', 'created_date')
                prize_levels = PrizeLevel.objects.filter(test=test).order_by('min_rank')
                
                rank = 1
                previous_marks = None
                for index, test_result in enumerate(test_results):
                    if test_result.marks <= 0:
                        test_result.rank = 0
                        test_result.prize_level = None
                        test_result.prize_coins = 0
                        test_result.save()

                        continue

                    if previous_marks is not None and test_result.marks == previous_marks:
                        test_result.rank = rank
                    else:
                        rank = index + 1
                        test_result.rank = rank
                        
                    prize_level = None
                    for level in prize_levels:
                        if level.min_rank <= rank <= level.max_rank:
                            prize_level = level
                            break
                        
                    if prize_level:
                        test_result.prize_level = prize_level
                        test_result.prize_coins = prize_level.prize_coins
                        test_result.save()
                        
                        student_coins = StudentCoins.objects.get(student=test_result.student)
                        student_coins.winning_coins += prize_level.prize_coins
                        student_coins.actual_coins += prize_level.prize_coins
                        student_coins.save()
                        
                        try:
                            student_test_attempt = StudentTestAttempt.objects.filter(student=test_result.student, test=test).first()
                            student_test_attempt.coins_won += prize_level.prize_coins
                            student_test_attempt.save()
                        except:
                            pass

                    else:
                        test_result.prize_level = None
                        test_result.prize_coins = 0
                        test_result.save()

                    previous_marks = test_result.marks

                result_data = []
                for test_result in test_results:
                    result_data.append({
                        'student_id': test_result.student.id,
                        'student_name': test_result.student.name,  
                        'rank': test_result.rank,
                        'marks': test_result.marks,
                        'prize_coins': test_result.prize_coins,
                    })
                
                return Response({'status': True, 'message': 'Ranks and prizes calculated successfully', 'ongoing':False, 'results': result_data})
        
        except Exception as e:
            return Response({'status': False, 'message': str(e)})

class PrizeLevelList(APIView):
    def get(self, request):
        me = Teach(request.user)
        prize_levels = PrizeLevel.objects.all()
        serializer = PrizeLevelSerializer(prize_levels, many=True)
        return Response(serializer.data)

    def post(self, request):
        me = Teach(request.user)
        serializer = PrizeLevelSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status': 'Success','message': 'Prize level created successfully','data': serializer.data})
            
        return Response({'status': 'Failed','message': 'There was an error creating the prize level','errors': serializer.errors})
       
class PrizeLevelDetail(APIView):
    def get_object(self, pk):
        try:
            return PrizeLevel.objects.get(pk=pk)
        except PrizeLevel.DoesNotExist:
            raise Http404

    def get(self, request, pk):
        me = Teach(request.user)
        prize_level = self.get_object(pk)
        serializer = PrizeLevelSerializer(prize_level)
        return Response(serializer.data)

    def put(self, request, pk):
        me = Teach(request.user)
        prize_level = self.get_object(pk)
        serializer = PrizeLevelSerializer(prize_level, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status': 'Success','message': 'Prize level updated successfully','data': serializer.data})
            
        return Response({'status': 'Failed','message': 'There was an error updating the prize level','errors': serializer.errors})

    def delete(self, request, pk):
        me = Teach(request.user)
        prize_level = self.get_object(pk)
        prize_level.delete()
        return Response({'status': 'Success','message': 'Successfully Deleted'})
    
class TestPrizeLevel(APIView):
    def get(self, request, test_id):
        try:
            me = Teach(request.user)
        except:
            me = Studs(request.user)
        
        prize_levels = PrizeLevel.objects.filter(test__id=test_id)
        
        if not prize_levels.exists():
            return Response({'status': 'Failed','message': f'No prize levels found for test ID {test_id}'})
        
        serializer = PrizeLevelSerializer(prize_levels, many=True)
        
        return Response({'status': 'Success','message': 'Prize levels fetched successfully','data': serializer.data})
    
class ContestCategoryListing(APIView):
    def get(self, request):
        try:
            me = Teach(request.user)
        except:
            me = Studs(request.user)

        current_time = timezone.now() 
        categories = ContestCategory.objects.filter(end_time__gt=current_time).order_by('-id')
        serializer = ContestCategorySerializer(categories, many=True)
        return Response({'status': True,'message': 'Records fetched successfully','data': serializer.data})

    def post(self, request):
        me = Teach(request.user)
        serializer = ContestCategorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status': True,'message': 'Records created successfully','data':serializer.data}, status=status.HTTP_201_CREATED)
        return Response({'status': False, 'message': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

class ContestCategoryUpdateView(APIView):
    def get_object(self, pk):
        return get_object_or_404(ContestCategory, pk=pk)

    def get(self, request, pk):
        try:
            me = Teach(request.user)
        except:
            me = Studs(request.user)
        category = self.get_object(pk)
        serializer = ContestCategorySerializer(category)
        return Response({'status': True,'message': 'Records fetched successfully','data':serializer.data})

    def put(self, request, pk):
        me = Teach(request.user)
        category = self.get_object(pk)
        serializer = ContestCategorySerializer(category, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'status': True,'message': 'Records updated successfully','data':serializer.data})
        return Response({'status': False,'message':serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        me = Teach(request.user)
        category = self.get_object(pk)
        category.delete()
        return Response({'status': True,'message': 'Records deleted successfully'},status=status.HTTP_204_NO_CONTENT)
    
class TestParticipant(APIView):
    def post(self, request):
        me = Studs(request.user)
        test_id = request.data.get('test_id')
        
        try:
            test = Test.objects.get(id=test_id)
        except Test.DoesNotExist:
            return Response({"status":False, "message": "Test not found"}, status=status.HTTP_404_NOT_FOUND)
        
        students_joined = StudentTestAttempt.objects.filter(test=test).count()
        
        max_participants = test.max_participants  
        remaining_participants = max_participants - students_joined
        
        return Response({
            "status":True,
            "students_joined": students_joined,
            "remaining_participants": remaining_participants
        }, status=status.HTTP_200_OK)

class TestJoinStudents(APIView):
    def get(self, request, test_id):
        me = Studs(request.user)
        try:
            test = get_object_or_404(Test, id=test_id)
            joined_students = (
                StudentTestAttempt.objects.filter(test=test)
                .select_related('student')
                .distinct('student')  # Ensures only unique students are fetched
            )

            leaderboard = []

            for attempt in joined_students:
                student = attempt.student
                
                try:
                    result = TestResult.objects.get(test=test, student=student)
                    entry = {
                        'student': student.name,
                        'marks': result.marks,
                        'rank': result.rank,
                        'coins_won': result.prize_coins,
                        'attempted': True  # They joined and attempt
                    }
                except TestResult.DoesNotExist:
                    entry = {
                        'student': student.name,
                        'marks': None,  
                        'rank': None,   
                        'coins_won': None,  
                        'attempted': False  # They joined but didn't attempt
                    }
                
                leaderboard.append(entry)

            context = {'status': True, 'data': leaderboard}
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class LeaderboardAPIView(APIView):
    def get(self, request, test_id):
        me = Studs(request.user)
        try:
            test = get_object_or_404(Test, id=test_id)
            test_results = TestResult.objects.filter(test=test).select_related('student').order_by('-marks')

            leaderboard = []

            for result in test_results:
                entry = {
                    'student': result.student.name,
                    'marks': result.marks,
                    'rank': result.rank,
                    'coins_won': result.prize_coins,
                }

                leaderboard.append(entry)
            context = {'status':True, 'data':leaderboard}
        except Exception as e:
            context = {'status':False, 'message':str(e)}

        return Response(context)

class StudentTestRoom(APIView):
    def post(self, request):
        me = Studs(request.user)
        data = request.data
        try:
            test_id = data['test_id']
            quiz_category_id = 7
            test = get_object_or_404(Test, id=test_id)

            if test.contest_category.quiz_category.id != quiz_category_id:
                context = {'status': True, 'message': 'This test is not part of the quiz category.'}
                return Response(context)

            room = TestRoom.objects.filter(test=test).annotate(student_count=Count('students')).first()

            if not room:
                room = TestRoom.objects.create(test=test)
                student_count = 0  # Since it's a new room, no students yet
            else:
                student_count = room.students.count()

            if room.students.filter(id=me.profile.id).exists():
                context = {
                    'status': True, 
                    'message': 'You have already joined this room.', 
                    'room_status': room.is_active, # Return the current room status
                    }
                return Response(context)

            if student_count >= room.max_students:
                context = {
                    'status': True, 
                    'message': 'Room is full. Test will start soon.', 
                    'room_status': room.is_active
                    }
                return Response(context)

            room.students.add(me.profile)

            student_count = room.students.count()

            if student_count >= room.max_students:
                room.is_active = True  
                room.save()
                context = {
                    'status': True, 
                    'message': 'Room is full. Test will start soon.', 
                    'room_status': room.is_active}
            else:
                context = {
                    'status': True, 
                    'message': 'Successfully Joined. Wait for another student to join.', 
                    'room_status': False}

            return Response(context)
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            return Response(context)

class CheckStudentAttemptAPIView(APIView):
    def get(self, request, test_id):
        me = Studs(request.user)
        try:
            test = Test.objects.get(id=test_id)
            student_coins = StudentCoins.objects.filter(student=me.profile).first()
            if not student_coins:
                return Response({
                    "success": False,
                    "message": "Student coin record not found."
                    }, status=status.HTTP_404_NOT_FOUND)

            if student_coins.actual_coins < test.entry_fee:
                return Response({
                    "success": False,
                    "message": "Insufficient coins for test entry.",
                    "actual_coins": student_coins.actual_coins,
                    "entry_fee": test.entry_fee
                }, status=status.HTTP_400_BAD_REQUEST)

            existing_attempt = StudentTestAttempt.objects.filter(student=me.profile, test=test).exists()
            if existing_attempt:
                return Response({
                    "success": True,
                    "message": "Student has already attempted this test.",
                    "attempted": True,
                    "actual_coins": student_coins.actual_coins,
                    "entry_fee": test.entry_fee
                }, status=status.HTTP_200_OK)

            return Response({
                "success": True,
                "message": "Student is eligible to attempt the test.",
                "attempted": False,
                "actual_coins": student_coins.actual_coins,
                "entry_fee": test.entry_fee
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({
                "success": False,
                "message": str(e)
            }, status=status.HTTP_404_NOT_FOUND)

class GetQuizContest(APIView):
    def post(self, request):
        data = request.data
        try:
            quiz_id = data.get('quiz_id')
            if not quiz_id:
                return Response({'status': False, 'message': 'Quiz ID is required.'})

            quiz_category = QuizCategory.objects.get(id=quiz_id)
            current_time = timezone.now() 
            contest_category = ContestCategory.objects.filter(quiz_category=quiz_category, end_time__gt=current_time).order_by('-id')

            contest_list = [{'id': cc.id, 'title': cc.title} for cc in contest_category]
            context = {'status': True, 'contests': contest_list}

        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class CoinPayoutView(APIView):
    def post(self, request):
        me = Studs(request.user)
        serializer = PayoutRequestSerializer(data=request.data)
        if not serializer.is_valid():
            return Response({'status': False, 'message': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

        amount = serializer.validated_data.get('amount')
        mode = serializer.validated_data.get('mode')  # 'bank' or 'vpa'
        account_holder_name = serializer.validated_data.get('account_holder_name')
        account_number = serializer.validated_data.get('account_number')
        ifsc_code = serializer.validated_data.get('ifsc_code')
        vpa = serializer.validated_data.get('vpa')
        currency = serializer.validated_data.get('currency', 'INR')
        purpose = serializer.validated_data.get('purpose', 'payout')
        beneficiary_name = serializer.validated_data.get('beneficiary_name', 'self')

        institute = Institute.objects.get(code=me.profile.institute.code)
        razorpay_key = institute.razorpaykey
        razorpay_secret_key = institute.razorpay_secret_key
        razorpay_client = razorpay.Client(auth=(razorpay_key, razorpay_secret_key))

        student_details = StudentDetails.objects.get(student=me.profile)

        try:
            contact = razorpay_client.contact.create({
                "name": account_holder_name,
                "type": "customer",  # or "employee" based on use case
                "contact": student_details.phone,
                "email": student_details.email
            })
            contact_id = contact['id']
        except razorpay.errors.RazorpayError as e:
            return Response({'status': False, 'message': f'Failed to create contact: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)

        fund_account_data = {
            "contact_id": contact_id,
            "account_type": mode
        }

        if mode == 'bank':
            fund_account_data["bank_account"] = {
                "name": account_holder_name,
                "account_number": account_number,
                "ifsc": ifsc_code
            }
        elif mode == 'vpa':
            fund_account_data["vpa"] = {"address": vpa}
        else:
            return Response({'status': False, 'message': 'Invalid payout mode.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            fund_account = razorpay_client.fund_account.create(fund_account_data)
            fund_account_id = fund_account['id']
        except razorpay.errors.RazorpayError as e:
            return Response({'status': False, 'message': f'Failed to create fund account: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)

        payout_data = {
            "account_number": "your_razorpay_payout_account_number",  # Replace with actual Razorpay account number
            "fund_account_id": fund_account_id,
            "amount": int(amount * 100),  # Convert amount to paise
            "currency": currency,
            "mode": mode,
            "purpose": purpose,
            "queue_if_low_balance": True
        }

        try:
            payout = razorpay_client.payout.create(payout_data)
            return Response({'status': True, 'message': 'Payout initiated successfully.', 'payout_id': payout['id']}, status=status.HTTP_201_CREATED)
        except razorpay.errors.RazorpayError as e:
            return Response({'status': False, 'message': f'Failed to initiate payout: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)
        
class StudentCoinsView(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            student_coins, created = StudentCoins.objects.get_or_create(student=me.profile)

            if created:
                message = "No previous record found. A new record with 0 coins has been created."
            else:
                message = "Successfully fetched data"

            serializer = StudentCoinsSerializer(student_coins)
            return Response({"status": True, "message": message, "data": serializer.data}, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({"status": False, "message": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request):
        me = Studs(self.request.user)
        
        try:
            coins = int(request.data.get('coins', 0))
        except ValueError:
            return Response({"status": False, "message": "Invalid coin amount format"}, status=status.HTTP_400_BAD_REQUEST)
        
        if coins <= 0:
            return Response({"status": False, "message": "Invalid coin amount"}, status=status.HTTP_400_BAD_REQUEST)
        
        student_coins, created = StudentCoins.objects.get_or_create(student=me.profile)

        if created:
            student_coins.actual_coins = coins
            message = "New coin record created, coins added successfully"
        else:
            student_coins.actual_coins += coins
            message = "Coins added successfully"
            
        student_coins.save()
        return Response({"status": True, "message": message}, status=status.HTTP_200_OK)

class WithdrawCoinsView(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        withdrawal_limit = 250
        withdraw_coins = int(request.data.get('withdraw_coins', 0))
        account_holder_name = request.data.get('account_holder_name')
        account_number = request.data.get('account_number')
        ifsc_code = request.data.get('ifsc_code')
        upi_id = request.data.get('upi_id')

        if withdraw_coins <= 0:
            return Response({"status": False, "message": "Invalid withdrawal amount"})

        try:
            student_coins = StudentCoins.objects.get(student=me.profile)
            if student_coins.actual_coins < withdraw_coins:
                return Response({"status": False, "message": "Not enough coins to withdraw"})

            if withdraw_coins < withdrawal_limit:
                return Response({"status": False, "message": f"Minimum {withdrawal_limit} coins required for withdrawal"})

            WithdrawRequest.objects.create(
                student=me.profile,
                withdraw_coins=withdraw_coins,
                account_holder_name=account_holder_name,
                account_number=account_number,
                ifsc_code=ifsc_code,
                upi_id=upi_id
            )

            student_coins.actual_coins -= withdraw_coins
            student_coins.save()

            return Response({"status": True, "message": "Withdrawal request submitted successfully"})

        except Exception as e:
            return Response({"status": False, "message":str(e)})

class ManageWithdrawRequestView(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        record_id = request.data.get('record_id')
        action = request.data.get('action')
        
        if action not in ['accept', 'reject']:
            return Response({"status": False, "message": "Invalid action"})

        try:
            withdraw_request = WithdrawRequest.objects.get(id=record_id)

            if withdraw_request.status != 'Pending':
                return Response({"status": False, "message": "This request has already been processed."})

            student_coins = StudentCoins.objects.get(student=withdraw_request.student)

            if action == 'accept':
                withdraw_request.status = 'Approved'
                withdraw_request.save()
                return Response({"status": True, "message": "Withdrawal request approved successfully"})

            elif action == 'reject':
                student_coins.actual_coins += withdraw_request.withdraw_coins
                student_coins.save()

                withdraw_request.status = 'Rejected'
                withdraw_request.save()
                return Response({"status": True, "message": "Withdrawal request rejected and coins refunded successfully"})

        except Exception as e:
            return Response({"status": False, "message": str(e)})

class ListWithdrawRequestsView(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            withdrawal_requests = WithdrawRequest.objects.filter(student=me.profile).order_by('-requested_at')
            
            data = [
                {
                    "withdraw_coins": request.withdraw_coins,
                    "status": request.status,
                    "requested_at": request.requested_at,
                }
                for request in withdrawal_requests
            ]

            return Response({"status": True, "data": data})
        except Exception as e:
            return Response({"status": False, "message": str(e)})

class ListPendingWithdrawRequestsView(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            pending_requests = WithdrawRequest.objects.filter(status='Pending').select_related('student').order_by('-requested_at')
            
            data = [
                {
                    "request_id": request.id,
                    "student_username": request.student.studentuser.username,
                    "withdraw_coins": request.withdraw_coins,
                    "account_holder_name": request.account_holder_name,
                    "account_number": request.account_number,
                    "ifsc_code": request.ifsc_code,
                    "upi_id": request.upi_id,
                    "status": request.status,
                    "requested_at": request.requested_at,
                }
                for request in pending_requests
            ]

            return Response({"status": True, "data": data})
        except Exception as e:
            return Response({"status": False, "message": str(e)})

class TeacherAddCoinsView(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        student_id = request.data.get('student_id')
        
        try:
            coins = int(request.data.get('coins', 0))
        except ValueError:
            return Response({"status": False, "message": "Invalid coin amount format"}, status=status.HTTP_400_BAD_REQUEST)
        
        if coins <= 0:
            return Response({"status": False, "message": "Invalid coin amount"}, status=status.HTTP_400_BAD_REQUEST)
        
        student_coins, created = StudentCoins.objects.get_or_create(student__id=student_id)

        if created:
            student_coins.actual_coins = coins
            message = "New coin record created, coins added successfully"
        else:
            student_coins.actual_coins += coins
            message = "Coins added successfully"
            
        student_coins.save()
        return Response({"status": True, "message": message}, status=status.HTTP_200_OK)
    

class InstituteStudentListDownload(APIView):
    def get(self, request):
        institute_code = 'asfoj'
        institute = Institute.objects.get(code=institute_code)
        students = Student.objects.filter(institute=institute).order_by('id')

        try:
            output = []
            for student in students:
                student_details = StudentDetails.objects.filter(student=student).first()
                try:
                    email = student_details.email
                except:
                    email = None

                temp_list = [
                    student.name,
                    student.studentuser.username.split('@')[0],
                    email
                ]
                output.append(temp_list)

            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = 'attachment; filename="student-details.csv"'
                writer = csv.writer(response)
                writer.writerow(['Name','Phone Number','Email'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})
        except Exception as e:
            context = {'message': f"{e}"}
            return Response(context)

class DeleteClientRecords(APIView):
    def get(self, request):
        try:
            suffix = "@asfoj"
            records = User.objects.filter(username__endswith=suffix)[:300]
            delete_records = records.count()
        
            for record in records:
                record.delete() 

            return Response({'message':"Successfully deleted records.", 'delete_records':delete_records})
        except Exception as e:
            return Response({'error': str(e)})

class AddStudentPackage(APIView):
    def get(self, request):
        try:
            package = get_object_or_404(Package, id=31473)
            student = get_object_or_404(Student, studentuser__username='7570884189@aryaclasses')
            package.students.add(student)
            return Response({'message':"Student successfully added to package."})
        except Exception as e:
            return Response({'error': str(e)})
    



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/pdf_generator/pdf_generator.py
--------------------------------------------------

from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

class PdfGenerate:
    def __init__(self, data:dict) -> None:
        self.data = data

    def mcq_test_performance_pdf(self):
        buffer = BytesIO()
        pdf = canvas.Canvas(buffer)
        pdf.setFont("Helvetica", 12)

        pdf.drawString(100, 900, f'Test Performance')
        pdf.drawString(100, 880, f'Test Total Marks: {self.data["test_total_marks"]}')
        pdf.drawString(100, 860, f'Total Passing Marks: {self.data["test_passing_marks"]}')
        pdf.drawString(100, 840, f'Time Taken in seconds: {self.data["time"]}')
        pdf.drawString(100, 820, f'Attempted Time: {self.data["attemptedTime"]}')
        pdf.drawString(100, 800, f'Total Right Questions: {self.data["totalRightQuestions"]}')
        pdf.drawString(100, 780, f'Total Wrong Questions: {self.data["totalWrongQuestions"]}')
        pdf.drawString(100, 760, f'Skipped Questions: {self.data["totalNotAttemptedQuestions"]}')
        pdf.drawString(100, 740, f'Result: {self.data["result"]}')
        pdf.drawString(100, 720, f'Percentage: {self.data["percentage"]}')
        pdf.drawString(100, 700, 'Attempted Questions:')
        y = 680
        line_height = 20
        max_lines_per_page = 35
        lines_drawn = 0
        for question in self.data['attempted_questions_list']:
            if y < 50:
                pdf.showPage()
                y = 750
                lines_drawn = 0

            if question["attempted"] == True:
                if question["right"] == True:
                    pdf.drawString(100, y - 20, f'Question Attempted and right')
                else:
                    pdf.drawString(100, y - 40, f'Question Attempted but wrong')
            else:
                pdf.drawString(100, y - 60, f'Question not Attempted')

            pdf.drawString(100, y - 80, f'time taken in sec: {question["time_in_sec"]}')

            if question["text"]:
                pdf.drawString(100, y - 100, f'Question: {question["text"]}')

            if question["dynamicText"]:
                pdf.drawString(100, y - 120, f'Question: {question["dynamicText"]}')

            for option in question['options']:
                if option["text"]:
                    pdf.drawString(100, y - 140, f'Option correct: {option["text"]}')
                if option["picture"]:
                    pdf.drawImage({option["picture"]}, 0, 0, width=120, preserveAspectRatio=True, mask='auto')
                if option["explanationText"]:
                    pdf.drawString(100, y - 160, f'Option correct: {option["explanationText"]}')
                if option["explanationPicture"]:
                    pdf.drawImage({option["explanationPicture"]}, 0, 0, width=120, preserveAspectRatio=True, mask='auto')

                if option["selected"] == True:
                    pdf.drawString(100, y - 180, f'Option is Selected')

                if option["correct"] == True:   
                    pdf.drawString(100, y - 200, f'Option is correct')

                y -= 220

        y -= 220

        lines_drawn += 12
        if lines_drawn >= max_lines_per_page:
            pdf.showPage()
            y = 750
            lines_drawn = 0
        pdf.save()

        buffer.seek(0)
        return buffer.getvalue()
        

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/content_completed_tracker/package_progress_report.py
--------------------------------------------------

from content.models import *
from membership.models import Student


class PackageReport:
    def __init__(self, student_id):
        self.student = Student.objects.get(id=student_id)

    def all_packages_completion_report(self, IsBuy):
        if IsBuy:
            packages = Package.objects.filter(students=self.student).all()
            package_list = []

            for package in packages:
                count_videos_views = 0
                count_videos_total = 0
                videos = package.videos.all()
                for video in videos:
                    if video.publish == True:
                        try:
                            if StudentVideoView.objects.filter(student=self.student, videoview=VideoView.objects.get(video=video)).exists():
                                count_videos_views += 1
                            count_videos_total += 1
                        except:
                            pass
                video_completion = None
                if count_videos_total != 0:
                    video_completion = f'{round((count_videos_views/count_videos_total * 100),2)} %'

                count_notes_read = 0
                count_notes_total = 0

                notes = package.notes.all()
                for note in notes:
                    try:
                        if StudentNoteView.objects.filter(student=self.student, noteview=NoteView.objects.get(note=note)).exists():
                            count_notes_read += 1
                        count_notes_total += 1

                    except:
                        pass

                notes_completion = None
                if count_notes_total != 0:
                    notes_completion = f'{round((count_notes_read/count_notes_total*100),2)} %'

                count_test_given = 0
                count_test_total = 0

                tests = package.tests.all()
                for test in tests:
                    if test.publish == True:
                        try:
                            if StudentTestView.objects.filter(student=self.student, testview=TestView.objects.get(test=test)).exists():
                                count_test_given += 1
                            count_test_total += 1
                        except:
                            pass

                test_completion = None
                if count_test_total != 0:
                    test_completion = f'{round((count_test_given/count_test_total*100),2)} %'

                total_count = count_test_total + count_notes_total + count_videos_total
                if total_count != 0:
                    total_completion = f'{round(((count_test_given+count_notes_read+count_videos_views)/total_count*100),2)} %'
                else:
                    total_completion = None

                pack_dict = {'package_id': package.id,
                             'package_name': package.title,
                             'description': package.details,
                             'price': package.price,
                             'thumbnail': package.thumbnail,
                             'duration': package.duration,
                             'video_completion': video_completion,
                             'notes_completion': notes_completion,
                             'test_completion': test_completion,
                             'total_completion': total_completion
                             }

                package_list.append(pack_dict)

            context = {'status': 'success', 'BuyPackageList': package_list}
            return context

        else:
            institute = self.student.institute
            packages = Package.objects.filter(
                teacher__institute=institute).all()
            not_buy_package_list = []
            for package in packages:
                students = package.students.all().values_list('id', flat=True)
                if self.student.id not in students:
                    not_buy_dict = {'package_id': package.id,
                                    'package_name': package.title,
                                    'description': package.details,
                                    'price': package.price,
                                    'thumbnail': package.thumbnail,
                                    'duration': package.duration
                                    }
                    not_buy_package_list.append(not_buy_dict)

            context = {'status': 'success',
                       'AllPackageList': not_buy_package_list}
            return context

    def all_package_subjects_completion_report(self, package_id):
        package = Package \
            .objects \
            .filter(id=package_id) \
            .prefetch_related('videos') \
            .prefetch_related('notes') \
            .prefetch_related('tests') \
            .prefetch_related('tests__subjects') \
            .prefetch_related('fileTests') \
            .all()

        subject_set = set()
        for i in package:
            for vid in i.videos.all():
                subject_set.add(vid.subject)
            for note in i.notes.all():
                subject_set.add(vid.subject)
            for test in i.tests.all():
                for sub in test.subjects.all():
                    subject_set.add(sub)
            for ftest in i.fileTests.all():
                subject_set.add(ftest.subject)

        subjects_list = list(subject_set)
        sub_list = []

        for subject in subjects_list:
            subject_details = {
                'id': subject.id,
                'name': subject.name,
                'language': subject.language,
            }
            count_videos_views = 0
            count_videos_total = 0
            video_queryset = Video.objects.filter(subject=subject).all()
            for video in video_queryset:
                if video.publish == True:
                    if StudentVideoView.objects.filter(student=self.student, videoview=VideoView.objects.filter(video=video).first()).exists():
                        count_videos_views += 1
                    count_videos_total += 1
            video_completion = None
            if count_videos_total != 0:
                video_completion = f'{round(((count_videos_views/count_videos_total) * 100), 2)} %'

            count_notes_read = 0
            count_notes_total = 0
            notes_queryset = Note.objects.filter(subject=subject).all()
            for note in notes_queryset:
                if StudentNoteView.objects.filter(student=self.student, noteview=NoteView.objects.filter(note=note).first()).exists():
                    count_notes_read += 1
                count_notes_total += 1
            notes_completion = None
            if count_notes_total != 0:
                notes_completion = f'{round(((count_notes_read/count_notes_total)*100),2)} %'

            count_test_given = 0
            count_test_total = 0
            test_queryset = Test.objects.filter(subjects=subject).all()
            for test in test_queryset:
                if StudentTestView.objects.filter(student=self.student, testview=TestView.objects.filter(test=test).first()).exists():
                    count_test_given += 1
                count_test_total += 1
            test_completion = None
            if count_test_total != 0:
                test_completion = f'{round(((count_test_given/count_test_total)*100),2)} %'

            total_completion = f'{round(((count_videos_views + count_notes_read + count_test_given)/(count_videos_total + count_notes_total + count_test_total) * 100),2)} %'
            details = {
                'count_videos_views': count_videos_views,
                'count_videos_total': count_videos_total,
                'video_completion': video_completion,
                'count_notes_read': count_notes_read,
                'count_notes_total': count_notes_total,
                'notes_completion': notes_completion,
                'count_test_given': count_test_given,
                'count_test_total': count_test_total,
                'test_completion': test_completion,
            }

            subject_dict = {'subject_details': subject_details,
                            'details': details,  'total_completion': total_completion}

            sub_list.append(subject_dict)

        context = {'subject_list': sub_list}
        return context

    def all_package_subject_chapters_completion_report(self, package_id, subject_id):
        package = Package.objects.filter(id=package_id).first()

        chapter_set = set()

        videos = package.videos.all().order_by('id')
        for video in videos:
            chapter_set.add(video.chapter)

        notes = package.notes.all().order_by('id')
        for note in notes:
            chapter_set.add(note.chapter)

        tests = package.tests.all().order_by('id')
        for test in tests:
            for chapter in test.chapters.all():
                chapter_set.add(chapter)

        filetests = package.fileTests.all().order_by('id')
        for filetest in filetests:
            for chapter in filetest.chapters.all():
                chapter_set.add(chapter)

        chapters_list = list(chapter_set)
        chp_list = []

        for chapter in chapters_list:
            chapter_info = {
                'id': chapter.id,
                'name': chapter.name,
                'subject_id': chapter.subject.id,
                'subject_name': chapter.subject.name,
            }

            notes = package.notes.all().filter(
                subject=subject_id, chapter=chapter).order_by('id')
            videos = package.videos.all().filter(
                subject=subject_id, chapter=chapter).order_by('id')
            tests = package.tests.all().filter(
                subjects=subject_id, chapters=chapter).order_by('id')
            youtube_live = package.youtubeLiveVideos.all().order_by('id')
            fileTests = package.fileTests.filter(publish=True).filter(
                subject=subject_id, chapter=chapter).order_by('id')
            number_videos = videos.count()
            number_notes = notes.count()
            number_tests = tests.count()
            number_fileTests = fileTests.count()

            youtube_live_list = []
            videos_list = []
            notes_list = []
            tests_list = []
            fileTests_list = []

            for yl in youtube_live:
                try:
                    yl_dict =\
                        {'yl_id': yl.id, 'title': yl.title, 'url': yl.link,
                            'generalVideo': False, 'publishDate': yl.time}
                    youtube_live_list.append(yl_dict)

                except:
                    pass

            count_videos_views = 0
            count_videos_total = 0
            for video in videos:
                if video.publish == True:
                    try:
                        video_dict = {'video_id': video.id, 'title': video.title, 'url': video.urlLink, 'generalVideo': video.generalVideo,
                                      'publishDate': video.publishDate, 'subject': video.subject.name, 'chapter': video.chapter.name}
                        videos_list.append(video_dict)

                        if StudentVideoView.objects.filter(student=self.student, videoview=VideoView.objects.filter(video=video).first()).exists():
                            count_videos_views += 1
                        count_videos_total += 1
                    except:
                        pass
            video_completion = None
            if count_videos_total > 0:
                video_completion = f'{round(((count_videos_views/count_videos_total) * 100),2)} %'

            count_notes_read = 0
            count_notes_total = 0
            for note in notes:
                try:
                    note_url = NoteURL.objects.filter(note=note)[0]
                    if note.chapter == None:
                        chapter_name = 'none'
                    else:
                        chapter_name = note.chapter.name
                    note_dict = {'note_id': note.id, 'title': note.title, 'subject': note.subject.name,
                                 'chapter': chapter_name, 'publishDate': note.publishDate, 'url': note_url.link}
                    notes_list.append(note_dict)

                    if StudentNoteView.objects.filter(student=self.student, noteview=NoteView.objects.filter(note=note).first()).exists():
                        count_notes_read += 1
                    count_notes_total += 1
                except:
                    pass
            notes_completion = None
            if count_notes_total > 0:
                notes_completion = f'{round(((count_notes_read/count_notes_total)*100),2)} %'

            count_test_given = 0
            count_test_total = 0
            for test in tests:
                if test.publish == True:
                    try:

                        subjects_list = []
                        chapters_list = []
                        subjects = test.subjects.all()
                        chapters = test.chapters.all()
                        numberQuestions = test.questions.all().count()
                        for subject in subjects:
                            subjects_list.append(subject.name)
                        for chapter in chapters:
                            chapters_list.append(chapter.name)

                        test_dict = {'id': test.id, 'name': test.name, 'subject': subjects_list, 'chapter': chapters_list,
                                     'time': test.time, 'totalMarks': test.totalMarks, 'publisehd': test.published, 'numberQuestions': numberQuestions}
                        tests_list.append(test_dict)

                        if StudentTestView.objects.filter(student=self.student, testview=TestView.objects.filter(test=test).first()).exists():
                            count_test_given += 1
                        count_test_total += 1
                    except:
                        pass
            test_completion = None
            if count_test_total > 0:
                test_completion = f'{round(((count_test_given/count_test_total)*100),2)} %'

            for test in fileTests:
                try:
                    subject = test.subject.name
                except:
                    subject = None
                try:
                    chapter = test.chapter.name
                except:
                    chapter = None

                test_dict = {'id': test.id, 'name': test.title, 'totalMarks': test.totalMarks, 'questionFile': test.questionFile, 'solutionsFile': test.solutionsFile,
                             'subjects': subject, 'chapters': chapter, 'testTime': test.testTime, 'locked': test.locked, 'numberQuestions': test.totalQuestion, 'negativeMarks': test.negativeMarks}
                fileTests_list.append(test_dict)

            chapter_completion = None
            if count_test_total + count_notes_total + count_videos_total > 0:
                chapter_completion = f'{round(( (count_test_given + count_notes_read + count_videos_views) / (count_test_total + count_notes_total + count_videos_total) * 100),2)} %'

            chapter_dict =\
                {'chapter_info': chapter_info, 'youtubeLiveVideos': youtube_live_list, 'videos': videos_list, 'notes': notes_list, 'tests': tests_list, 'fileTests_list': fileTests_list, 'numberVideos': number_videos, 'numberNotes': number_notes,
                    'numberTests': number_tests, 'number_fileTests': number_fileTests, 'video_completion': video_completion, 'notes_completion': notes_completion, 'test_completion': test_completion, 'completion': chapter_completion}
            chp_list.append(chapter_dict)

        context = {'chapter_details': chp_list, }
        return context


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/liveVideos/meethour/meethourEnterprise.py
--------------------------------------------------

from datetime import datetime
import pytz
import json
import requests
import os



class BodhiAIUserAccount():
    def __init__(self):
        self.credense_file_path = "/home/bodhiai/bodhiai/content/api/liveVideos/meethour/meethour_credentials_enterprise.json"

        with open(self.credense_file_path) as credentials_json:
            meethour_credentials = credentials_json.read()
            self.meethour_credentials = json.loads(meethour_credentials)

        self.__client_id = self.meethour_credentials['client_id']
        self.__client_secret = self.meethour_credentials['client_secret']
        self.username = self.meethour_credentials["username"]
        self.__password = self.meethour_credentials["password"]

        self.__access_token = self.meethour_credentials["access_token"]
        self.__refresh_token = self.meethour_credentials["refresh_token"]

        self._version = "v1.1"
        self.url = "https://api.meethour.io/oauth/token"

        self.baseurl = f"https://api.meethour.io/api/{self._version}"
        self.header = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.__access_token}",
        }

    def get_access_token(self):
        request_body = {
            "grant_type": "password",
            "username": self.username,
            "password": self.__password,
            "client_id": self.__client_id,
            "client_secret": self.__client_secret,
        }
        response = requests.post(
            self.url, json=request_body, headers=self.header)
        if response.status_code == 200:
            context = json.loads(response.content)
            self.meethour_credentials["access_token"] = context["access_token"]
            self.meethour_credentials["refresh_token"] = context["refresh_token"]

            with open(self.credense_file_path, 'w')as credentials_json:
                credentials_json.write(json.dumps(self.meethour_credentials))
        else:
            context = response.text

        return context

    def get_refresh_token(self):
        request_body = {
            "grant_type": "refresh_token",
            "client_id": self.__client_id,
            "client_secret": self.__client_secret,
            "refresh_token": self.meethour_credentials["refresh_token"],
        }
        response = requests.post(self.url, json=request_body)
        if response.status_code == 200:
            context = json.loads(response.content)
            self.meethour_credentials["username"] = context["username"]
            self.meethour_credentials["access_token"] = context["access_token"]
            self.meethour_credentials["refresh_token"] = context["refresh_token"]

            with open(self.credense_file_path, 'w')as credentials_json:
                credentials_json.write(json.dumps(self.meethour_credentials))
        else:
            context = response.text

        return context


class Recurrent(BodhiAIUserAccount):
    def __init__(self):
        super().__init__()

    def timezone(self):
        url = self.baseurl + "/getTimezone"
        request_body = {
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            timezone_list = response['timezones']
        else:
            message = response['message']
            timezone_list = None

        context = {
            "status": response['success'],
            "message": message,
            "data": timezone_list
        }
        return context

    def country_list(self):
        url = self.baseurl + "/getCountrylist"
        response = requests.post(url, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            countries = response['countries']
        else:
            message = response['message']
            countries = None

        context = {
            "status": response['success'],
            "message": message,
            "data": countries
        }
        return context

    def date_now(self, timezone='Asia/Kolkata'):
        tz = pytz.timezone(timezone)
        datetime_now = datetime.now(tz)
        date = datetime_now.date()
        return str(date)

    def time_now(self, timezone='Asia/Kolkata'):
        tz = pytz.timezone('Asia/Kolkata')
        datetime_now = datetime.now(tz)
        time = ""
        meridiem = None
        if int(datetime_now.strftime("%H")) >= 12:
            meridiem = "PM"
            if int(datetime_now.strftime("%H")) == 12:
                time += "12:"
            else:
                time += '{0:02.0f}:'.format(
                    int(datetime_now.strftime("%H")) - 12)
        else:
            if int(datetime_now.strftime("%H")) == 0:
                time += "12:"
            else:
                time += '{0:02.0f}:'.format(int(datetime_now.strftime("%H")))
            meridiem = "AM"
        time += '{0:02.0f}'.format(int(datetime_now.strftime("%M")))
        return time, meridiem

    def time_conversion_timeZone(self, input_time, input_timezone="Europe/London", output_timezone='Asia/Kolkata'):

        old_timezone = pytz.timezone(input_timezone)
        old_datetime = datetime.strptime(input_time,
                                 "%Y-%m-%d %H:%M:%S")
        old_datetime = old_timezone.localize(old_datetime)

        new_timezone = pytz.timezone(output_timezone)


        new_timezone_timestamp = old_datetime.astimezone(new_timezone)
        output_time = str(new_timezone_timestamp)[:19]

        return output_time


class Contact(BodhiAIUserAccount):
    def __init__(self, contact_id=None,):
        super().__init__()
        self.baseurl += "/customer"
        self.contact_id = contact_id

    def add_contact(self, firstname, email, lastname=None, phone=None, country_code=None, image=None, is_show_portal=False,):
        request_body = {
            'firstname': firstname,
            'email': email,
            'is_show_portal': is_show_portal
        }
        if lastname != None:
            request_body['lastname'] = lastname
        if country_code != None and country_code != None:
            request_body['phone'] = phone
            request_body['country_code'] = country_code
        if image != None:
            request_body['image'] = image
        

        url = self.baseurl + "/addcontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']
        else:
            message = response['message']
            data = None

        context = {
            "status": response['success'],
            "message": message,
            "data": data
        }
        return context

    def edit_contact(self, contact_id, firstname, email, lastname=None, phone=None, country_code=None, image=None, is_show_portal=False,):
        request_body = {
            'contact_id': contact_id,
            'firstname': firstname,
            'email': email,
            'is_show_portal': is_show_portal
        }
        if lastname != None:
            request_body['lastname'] = lastname
        if country_code != None and country_code != None:
            request_body['phone'] = phone
            request_body['country_code'] = country_code
        if image != None:
            request_body['image'] = image
        url = self.baseurl + "/editcontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']
        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def list_contact(self, limit=0, page=0, exclude_hosts=False):
        request_body = {
            "limit": 0,
            "page": 0,
            "exclude_hosts": 0
        }
        url = self.baseurl + "/contacts"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['contacts']
        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data
        }
        return context

    def delete_contact(self, contact_id):
        request_body = {
            'contact_id': contact_id,
        }
        url = self.baseurl + "/deletecontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        context = {
            "status": response['success'],
            "message": response['message'],
        }
        return context

    def recording_list(self, filter_by="Custom", limit=100, page=1):
        if filter_by not in ["Custom"]:
            context = {
                "status":False,
                "message":"filter_by not define properly"
            }
        request_body = {
            "filter_by": filter_by,   
            "limit": limit,
            "page": page
        }

        url = self.baseurl + "/videorecordinglist"

        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = {
                "s3": response['custom_recordings'],
                "total_pages": response['total_pages'],
                "total_records": response['total_records'],
            }
        else:
            message = response['message']
            data = None

        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def delete_recording(self, recording_id):
        request_body = {
            'recording_id': recording_id,
        }
        url = self.baseurl + "/deleterecording"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        context = {
            "status": response['success'],
            "message": response['message'],
        }
        return context
    
    def parallel_meeting_on_account(self):
        url = self.baseurl + "/parallelmeeting"
        response = requests.post(url, headers=self.header)
        if response.status_code == 200:
            response = json.loads(response.content)
            context = {
                "status": True,
                "message":response["message"],
                "data":response["data"]
            }
        else :
            context = {
                "status":False,
                "message":response["message"]
            }
        return context



    def add_contact_group(self):
        pass

    def edit_contact_group(self):
        pass

    def list_of_group_contact(self):
        pass

    def delete_contact_group(self):
        pass

    def dashboard(self):
        pass

    def change_password(self):
        pass

    def edit_profile(self):
        pass

    def add_contact_to_group(self):
        pass

    def list_of_group_contact(self):
        pass

    def customer_current_subscription_feature(self):
        pass

    def delete_account(self):
        pass

    def customer_available_feature(self):
        pass

    def remove_multiple_contact_from_group(self):
        pass

    def add_multiple_contact_to_group(self):
        pass

    def user_details(self):
        pass

    def customer_notifications(self):
        pass

    def save_dropbox_token(self):
        pass

    def convert_to_free_account(self):
        pass

    def save_default_storage(self):
        pass


class Meetings(BodhiAIUserAccount):
    def __init__(self, meeting_conf, meeting_id=None,):
        super().__init__()
        self.baseurl += ""
        self.meeting_id = meeting_id
        self.default_meeting_options = meeting_conf


    def sheadule_meeting(self, meeting_name, passcode, meeting_date, meeting_time, meeting_meridiem, duration_hr, duration_min, timezone="Asia/Kolkata", contact_id_list=[], host_user_id_list=[],):
        url = self.baseurl + "/meeting" + "/schedulemeeting"
        request_body = {
            "meeting_name": meeting_name,
            "passcode": passcode,
            "meeting_date": meeting_date,
            "meeting_time": meeting_time,
            "meeting_meridiem": meeting_meridiem,
            "duration_hr": duration_hr,
            "duration_min": duration_min,
            "timezone": timezone,
            "attend": contact_id_list,
            "hostusers": host_user_id_list,
            "default_recording_storage": "Custom",
            "options": self.default_meeting_options,
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']

        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def edit_meeting(self, meeting_id, meeting_name, passcode, meeting_date, meeting_time, meeting_meridiem, duration_hr, duration_min, timezone="Asia/Kolkata", contact_id_list=[], host_user_id_list=[],):
        url = self.baseurl + "/meeting" + "/editmeeting"
        request_body = {
            "meeting_id": meeting_id,
            "meeting_name": meeting_name,
            "passcode": passcode,
            "meeting_date": meeting_date,
            "meeting_time": meeting_time,
            "meeting_meridiem": meeting_meridiem,
            "duration_hr": duration_hr,
            "duration_min": duration_min,
            "timezone": timezone,
            "attend": contact_id_list,
            "hostusers": host_user_id_list,
            "default_recording_storage": "Custom",
            "options": self.default_meeting_options,
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']

        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def generate_JWT(self, contact_id, ui_config, config):
        url = self.baseurl + "/getjwt"
        request_body = {
            "meeting_id": self.meeting_id,
            "contact_id": int(contact_id),
            "ui_config": ui_config,
            "config": config
        }

        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            jwt = response['jwt']
        else:
            jwt = None

        context = {
            "status": response['success'],
            "jwt": jwt,
        }
        return context

    def view_meeting(self):
        pass

    def upcoming_meeting(self):
        pass

    def completed_meeting(self):
        pass

    def missed_meeting(self):
        pass

    def personal_room(self):
        pass

    def meeting_user_contact_search(self):
        pass

    def remove_attendee_meetings(self):
        pass

    def archive_meeting(self):
        pass

    def list_of_archive_meeting(self):
        pass

    def edit_personal_meeting(self):
        pass


class Subscription(BodhiAIUserAccount):
    def __init__(self,) -> None:
        super().__init__()
        self.baseurl += "/subscription"

    def update_licence_qty(self, qty):
        url = self.baseurl + "/updateLicenceQty"
        request_body = {
            "qty": qty
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        return response

    def my_subscription(self):
        url = self.baseurl + "/mysubscription"
        response = requests.post(url, headers=self.header)
        response = json.loads(response.content)
        return response

    def cancle_subscription(self):
        pass

    def resume_subscription(self):
        pass


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/liveVideos/meethour/meethourDeveloperAccount.py
--------------------------------------------------

from datetime import datetime
import pytz
import json
import requests
import os

class InstituteUserAccount():
    def __init__(self, meethour_credentials:dict):

        self.__client_id = meethour_credentials['client_id']
        self.__client_secret = meethour_credentials['client_secret']
        self.username = meethour_credentials["username"]
        self.__password = meethour_credentials["password"]

        self.__access_token = meethour_credentials["access_token"]
        self.__refresh_token = meethour_credentials["refresh_token"]

        self._version = "v1.1"
        self.url = "https://api.meethour.io/oauth/token"

        self.baseurl = f"https://api.meethour.io/api/{self._version}"
        self.header = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.__access_token}",
        }

    def get_access_token(self):
        request_body = {
            "grant_type": "password",
            "username": self.username,
            "password": self.__password,
            "client_id": self.__client_id,
            "client_secret": self.__client_secret,
        }
        response = requests.post(
            self.url, json=request_body, headers=self.header)
        if response.status_code == 200:
            context = json.loads(response.content)
            request_body["access_token"] = context["access_token"]
            request_body["refresh_token"] = context["refresh_token"]
            context = {
                "status": True,
                "data": request_body,
            }  
        else:
            context = {
                "status": False,
                "data": response.text,
            }
        return context

    def get_refresh_token(self):
        request_body = {
            "grant_type": "refresh_token",
            "client_id": self.__client_id,
            "client_secret": self.__client_secret,
            "refresh_token": self.__refresh_token,
        }
        response = requests.post(self.url, json=request_body)
        if response.status_code == 200:
            context = json.loads(response.content)
            request_body["access_token"] = context["access_token"]
            request_body["refresh_token"] = context["refresh_token"]
            context = {
                "status": True,
                "data": request_body,
            }  
        else:
            context = {
                "status": False,
                "data": response.text,
            }
        return context


class Recurrent(InstituteUserAccount):
    def __init__(self, meethour_credentials:dict):
        super().__init__(meethour_credentials)

    def timezone(self):
        url = self.baseurl + "/getTimezone"
        request_body = {
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            timezone_list = response['timezones']
        else:
            message = response['message']
            timezone_list = None

        context = {
            "status": response['success'],
            "message": message,
            "data": timezone_list
        }
        return context

    def country_list(self):
        url = self.baseurl + "/getCountrylist"
        response = requests.post(url, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            countries = response['countries']
        else:
            message = response['message']
            countries = None

        context = {
            "status": response['success'],
            "message": message,
            "data": countries
        }
        return context

    def date_now(self, timezone='Asia/Kolkata'):
        tz = pytz.timezone(timezone)
        datetime_now = datetime.now(tz)
        date = datetime_now.date()
        return str(date)

    def time_now(self, timezone='Asia/Kolkata'):
        tz = pytz.timezone('Asia/Kolkata')
        datetime_now = datetime.now(tz)
        time = ""
        meridiem = None
        if int(datetime_now.strftime("%H")) >= 12:
            meridiem = "PM"
            if int(datetime_now.strftime("%H")) == 12:
                time += "12:"
            else:
                time += '{0:02.0f}:'.format(
                    int(datetime_now.strftime("%H")) - 12)
        else:
            if int(datetime_now.strftime("%H")) == 0:
                time += "12:"
            else:
                time += '{0:02.0f}:'.format(int(datetime_now.strftime("%H")))
            meridiem = "AM"
        time += '{0:02.0f}'.format(int(datetime_now.strftime("%M")))
        return time, meridiem

    def time_conversion_timeZone(self, input_time, input_timezone="Europe/London", output_timezone='Asia/Kolkata'):

        old_timezone = pytz.timezone(input_timezone)
        old_datetime = datetime.strptime(input_time,
                                 "%Y-%m-%d %H:%M:%S")
        old_datetime = old_timezone.localize(old_datetime)

        new_timezone = pytz.timezone(output_timezone)


        new_timezone_timestamp = old_datetime.astimezone(new_timezone)
        output_time = str(new_timezone_timestamp)[:19]

        return output_time


class Contact(InstituteUserAccount):
    def __init__(self, meethour_credentials:dict, contact_id=None,):
        super().__init__(meethour_credentials)
        self.baseurl += "/customer"
        self.contact_id = contact_id

    def add_contact(self, firstname, email, lastname=None, phone=None, country_code=None, image=None, is_show_portal=False,):
        request_body = {
            'firstname': firstname,
            'email': email,
            'is_show_portal': is_show_portal
        }
        if lastname != None:
            request_body['lastname'] = lastname
        if country_code != None and country_code != None:
            request_body['phone'] = phone
            request_body['country_code'] = country_code
        if image != None:
            request_body['image'] = image
        

        url = self.baseurl + "/addcontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']
        else:
            message = response['message']
            data = None

        context = {
            "status": response['success'],
            "message": message,
            "data": data
        }
        return context

    def edit_contact(self, contact_id, firstname, email, lastname=None, phone=None, country_code=None, image=None, is_show_portal=False,):
        request_body = {
            'contact_id': contact_id,
            'firstname': firstname,
            'email': email,
            'is_show_portal': is_show_portal
        }
        if lastname != None:
            request_body['lastname'] = lastname
        if country_code != None and country_code != None:
            request_body['phone'] = phone
            request_body['country_code'] = country_code
        if image != None:
            request_body['image'] = image
        url = self.baseurl + "/editcontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']
        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def list_contact(self, limit=0, page=0, exclude_hosts=False):
        request_body = {
            "limit": 0,
            "page": 0,
            "exclude_hosts": 0
        }
        url = self.baseurl + "/contacts"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['contacts']
        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data
        }
        return context

    def delete_contact(self, contact_id):
        request_body = {
            'contact_id': contact_id,
        }
        url = self.baseurl + "/deletecontact"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        context = {
            "status": response['success'],
            "message": response['message'],
        }
        return context

    def recording_list(self, filter_by="Custom", limit=100, page=1):
        if filter_by not in ["Custom"]:
            context = {
                "status":False,
                "message":"filter_by not define properly"
            }
        request_body = {
            "filter_by": filter_by,   
            "limit": limit,
            "page": page
        }

        url = self.baseurl + "/videorecordinglist"

        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = {
                "s3": response['custom_recordings'],
                "total_pages": response['total_pages'],
                "total_records": response['total_records'],
            }
        else:
            message = response['message']
            data = None

        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def delete_recording(self, recording_id):
        request_body = {
            'recording_id': recording_id,
        }
        url = self.baseurl + "/deleterecording"
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        context = {
            "status": response['success'],
            "message": response['message'],
        }
        return context
    
    def parallel_meeting_on_account(self):
        url = self.baseurl + "/parallelmeeting"
        response = requests.post(url, headers=self.header)
        if response.status_code == 200:
            response = json.loads(response.content)
            context = {
                "status": True,
                "message":response["message"],
                "data":response["data"]
            }
        else :
            context = {
                "status":False,
                "message":response["message"]
            }
        return context



    def add_contact_group(self):
        pass

    def edit_contact_group(self):
        pass

    def list_of_group_contact(self):
        pass

    def delete_contact_group(self):
        pass

    def dashboard(self):
        pass

    def change_password(self):
        pass

    def edit_profile(self):
        pass

    def add_contact_to_group(self):
        pass

    def list_of_group_contact(self):
        pass

    def customer_current_subscription_feature(self):
        pass

    def delete_account(self):
        pass

    def customer_available_feature(self):
        pass

    def remove_multiple_contact_from_group(self):
        pass

    def add_multiple_contact_to_group(self):
        pass

    def user_details(self):
        pass

    def customer_notifications(self):
        pass

    def save_dropbox_token(self):
        pass

    def convert_to_free_account(self):
        pass

    def save_default_storage(self):
        pass


class Meetings(InstituteUserAccount):
    def __init__(self, meethour_credentials:dict, meeting_conf:list, meeting_id=None,):
        super().__init__(meethour_credentials)
        self.baseurl += ""
        self.meeting_id = meeting_id
        self.default_meeting_options = meeting_conf


    def sheadule_meeting(self, meeting_name, passcode, meeting_date, meeting_time, meeting_meridiem, duration_hr, duration_min, timezone="Asia/Kolkata", contact_id_list=[], host_user_id_list=[],):
        url = self.baseurl + "/meeting" + "/schedulemeeting"
        request_body = {
            "meeting_name": meeting_name,
            "passcode": passcode,
            "meeting_date": meeting_date,
            "meeting_time": meeting_time,
            "meeting_meridiem": meeting_meridiem,
            "duration_hr": duration_hr,
            "duration_min": duration_min,
            "timezone": timezone,
            "attend": contact_id_list,
            "hostusers": host_user_id_list,
            "default_recording_storage": "Custom",
            "options": self.default_meeting_options,
            "is_show_portal": 1,
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']

        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def edit_meeting(self, meeting_id, meeting_name, passcode, meeting_date, meeting_time, meeting_meridiem, duration_hr, duration_min, timezone="Asia/Kolkata", contact_id_list=[], host_user_id_list=[],):
        url = self.baseurl + "/meeting" + "/editmeeting"
        request_body = {
            "meeting_id": meeting_id,
            "meeting_name": meeting_name,
            "passcode": passcode,
            "meeting_date": meeting_date,
            "meeting_time": meeting_time,
            "meeting_meridiem": meeting_meridiem,
            "duration_hr": duration_hr,
            "duration_min": duration_min,
            "timezone": timezone,
            "hostusers": host_user_id_list,
            "attend": contact_id_list,
            "default_recording_storage": "Custom",
            "options": self.default_meeting_options,
            "is_show_portal": 1,
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            message = response['message']
            data = response['data']

        else:
            message = response['message']
            data = None
        context = {
            "status": response['success'],
            "message": message,
            "data": data,
        }
        return context

    def generate_JWT(self, contact_id, ui_config, config):
        url = self.baseurl + "/getjwt"
        request_body = {
            "meeting_id": self.meeting_id,
            "contact_id": int(contact_id),
            "ui_config": ui_config,
            "config": config
        }

        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        if response['success']:
            jwt = response['jwt']
        else:
            jwt = None

        context = {
            "status": response['success'],
            "jwt": jwt,
        }
        return context

    def view_meeting(self):
        pass

    def upcoming_meeting(self):
        pass

    def completed_meeting(self):
        pass

    def missed_meeting(self):
        pass

    def personal_room(self):
        pass

    def meeting_user_contact_search(self):
        pass

    def remove_attendee_meetings(self):
        pass

    def archive_meeting(self):
        pass

    def list_of_archive_meeting(self):
        pass

    def edit_personal_meeting(self):
        pass


class Subscription(InstituteUserAccount):
    def __init__(self,meethour_credentials:dict) -> None:
        super().__init__(meethour_credentials)
        self.baseurl += "/subscription"

    def update_licence_qty(self, qty):
        url = self.baseurl + "/updateLicenceQty"
        request_body = {
            "qty": qty
        }
        response = requests.post(url, json=request_body, headers=self.header)
        response = json.loads(response.content)
        return response

    def my_subscription(self):
        url = self.baseurl + "/mysubscription"
        response = requests.post(url, headers=self.header)
        response = json.loads(response.content)
        return response

    def cancle_subscription(self):
        pass

    def resume_subscription(self):
        pass

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/content/api/liveVideos/dyte/dyte_api_functions.py
--------------------------------------------------

from content.models import *
from membership.models import Teacher, TeacherDetails, Student, StudentDetails, Batch, Institute
import requests
import json
import base64
from datetime import datetime



def authorization_key_v2(institute_id):
    institute = Institute.objects.get(id=institute_id)
    try:
        dyte_account = DyteOrganisationCredential.objects.get(
            institute=institute)
    except:
        context = {
            "status": "failed",
            "message": "your institute does not have dyte account contact to BodhiAI Executives"
        }
        return {
            "status": False,
            "response": context
        }

    return {
        "status": True,
        "key": base64.b64encode(f'{dyte_account.organizationId}:{dyte_account.APIKey}'.encode("ascii")).decode("ascii"),
        "dyte_account": dyte_account
    }


def create_presets_v2(institute_id, preset_id):
    try:
        preset = DytePreset.objects.get(id=preset_id)
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']
        url = 'https://api.cluster.dyte.in/v2/presets'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        body = {
            "name": preset.name,
            "config": {
                "view_type": preset.view_type,
                "max_video_streams": {
                    "mobile": preset.max_video_streams_mobile,
                    "desktop": preset.max_video_streams_desktop
                },
                "max_screenshare_count": preset.max_screenshare_count,
                "media": {
                    "video": {
                        "quality": preset.video_quality,
                        "frame_rate": preset.video_frame_rate
                    },
                    "screenshare": {
                        "quality": preset.screenshare_quality,
                        "frame_rate": preset.screenshare_frame_rate
                    }
                }
            },
            "permissions": {
                "accept_waiting_requests": preset.accept_waiting_requests,
                "can_accept_production_requests": preset.can_accept_production_requests,
                "can_edit_display_name": preset.can_edit_display_name,
                "can_spotlight": preset.can_spotlight,
                "disable_participant_audio": preset.disable_participant_audio,
                "disable_participant_screensharing": preset.disable_participant_screensharing,
                "disable_participant_video": preset.disable_participant_video,
                "kick_participant": preset.kick_participant,
                "pin_participant": preset.pin_participant,
                "can_record": preset.can_record,
                "is_recorder": preset.can_record,
                "waiting_room_type": preset.waiting_room_type,
                "plugins": {
                    "can_close": preset.can_close,
                    "can_start": preset.can_start,
                    "can_edit_config": preset.can_edit_config,
                    "config": {
                    }
                },
                "connected_meetings": {
                    "can_alter_connected_meetings": preset.can_alter_connected_meetings,
                    "can_switch_connected_meetings": preset.can_switch_connected_meetings,
                    "can_switch_to_parent_meeting": preset.can_switch_to_parent_meeting
                },
                "polls": {
                    "can_create": preset.can_create,
                    "can_vote": preset.can_vote,
                    "can_view": preset.can_view
                },
                "media": {
                    "video": {
                        "can_produce": preset.video
                    },
                    "audio": {
                        "can_produce": preset.audio
                    },
                    "screenshare": {
                        "can_produce": preset.screenshare
                    }
                },
                "chat": {
                    "public": {
                        "can_send": preset.public_can_send,
                        "text": preset.public_text,
                        "files": preset.public_files
                    },
                    "private": {
                        "can_send": preset.private_can_send,
                        "can_receive": preset.private_can_receive,
                        "text": preset.private_text,
                        "files": preset.private_text
                    }
                },
                "hidden_participant": preset.hidden_participant,
                "show_participant_list": preset.show_participant_list,
                "can_change_participant_permissions": preset.can_change_participant_permissions
            }
        }

        response = requests.post(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            new_preset = DytePreset.objects.get(id=preset_id)
            new_preset.id = None
            new_preset.preset_id = response['data']['id']
            new_preset.dyte_account = dyte_account
            new_preset.save()

            context = {
                'status': True,
                'message': 'preset created successfully',
                'data': response['data'],
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def get_all_preset_v2(institute_id, page_no: int = 1, per_page: int = 10):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/presets/?page_no={page_no}&per_page={per_page}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            context = {
                'status': True,
                'message': f'institute preset list based on pagination page_no={page_no}&per_page={per_page}',
                'data': response['data'],
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def get_preset_details_v2(institute_id, preset_id):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/presets/{preset_id}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            context = {
                'status': True,
                'message': 'details of preset',
                'data': response['data'],

            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def delete_preset_v2(institute_id, preset_id):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/presets/{preset_id}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.delete(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            DytePreset.objects.get(preset_id=response['data']['id']).delete()
            context = {
                'status': True,
                'message': 'preset deleted successfully',
                'message': response['data'],
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def create_dyte_meeting_v2(institute_id, teacher_id, title: str, recordOnStart: bool = False):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']

        url = 'https://api.cluster.dyte.in/v2/meetings'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        body = {
            "title": f"{title}",
            "preferred_region": dyte_account.preferred_region,
            "record_on_start": recordOnStart,
        }

        response = requests.post(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            meeting_credentials = response['data']
            DyteMeeting.objects.create(
                organisation=dyte_account,
                teacher=Teacher.objects.get(id=teacher_id),
                recordOnStart=meeting_credentials['record_on_start'],
                meetingId=meeting_credentials['id'],
                title=meeting_credentials['title'],
                preferred_region=meeting_credentials['preferred_region'],
            )

            context = {
                'status': True,
                'message': 'meeting created successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def update_dyte_metting_v2(meetingId, title: str, recordOnStart: bool = False):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        body = {
            "title": f"{title}",
            "preferred_region": dyte_account.preferred_region,
            "record_on_start": recordOnStart,
        }

        response = requests.patch(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            meeting_credentials = response['data']
            dyte_meeting.title = meeting_credentials['title']
            dyte_meeting.recordOnStart = meeting_credentials['record_on_start']
            dyte_meeting.preferred_region = meeting_credentials['preferred_region']
            dyte_meeting.save()
            context = {
                'status': True,
                'message': 'meeting updated successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def fetch_all_mettings_v2(institute_id, start_time: datetime = '', end_time: datetime = '', search: str = '', page_no: int = 1, per_page: int = 100):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/meetings/?page_no={page_no}&per_page={per_page}'
        if start_time:
            url += '&start_time={start_time}'
        if end_time:
            url += '&end_time={end_time}'
        if search:
            url += '&search={search}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            context = {
                'status': True,
                'message': 'meeting details',
                'data': response['data']
            }
            for meeting in response['data']:
                try:
                    dyte_meeting = DyteMeeting.objects.get(
                        meetingId=meeting['id'])
                    dyte_meeting.title = meeting['title']
                    dyte_meeting.save()
                except:
                    DyteMeeting.objects.create(
                        meetingId=meeting['id'],
                        title=meeting['title'],
                        preferred_region=dyte_account.preferred_region,
                        organisation=dyte_account
                    )
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def get_metting_details_v2(meetingId):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            meeting_credentials = response['data']
            dyte_meeting.title = meeting_credentials['title']
            dyte_meeting.recordOnStart = meeting_credentials['record_on_start']
            dyte_meeting.preferred_region = meeting_credentials['preferred_region']
            dyte_meeting.save()
            context = {
                'status': True,
                'message': 'meeting details',
                'data': response['data']
            }

        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def fetch_all_participants_v2(meetingId, page_no: int = 1, per_page: int = 10):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants/?page_no={page_no}&per_page={per_page}'
        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            context = {
                'status': True,
                'message': 'meeting details',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def add_participant_v2(meetingId, student_id=None, teacher_id=None):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        if student_id:
            student = Student.objects.get(id=student_id)
            student_details = StudentDetails.objects.get(student=student)

            clientSpecificId = f'Student#{student_id}'
            name = student.name
            picture = student_details.photo if student_details.photo else ''
            preset_name = dyte_account.preset_student

        elif teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)

            clientSpecificId = f'Teacher#{teacher_id}'
            name = teacher.name
            picture = teacher.photo
            preset_name = dyte_account.preset_teacher

        else:
            context = {
                'status': False,
                'message': "user doesn't belong's to Teacher or Student"
            }
            return context

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }

        body = {
            "client_specific_id": clientSpecificId,
            "name": f"{name}",
            "preset_name": preset_name,
        }
        if picture:
            body.update({'picture': picture})
        response = requests.post(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']
            DyteMeetingParticipant.objects.create(
                meetingId=dyte_meeting,
                clientSpecificId=participant_credentials['client_specific_id'],
                name=participant_credentials['name'],
                picture=participant_credentials.get('picture'),
                presetId=participant_credentials['preset_id'],
                participantId=participant_credentials['id'],
                authToken=participant_credentials['token'],
            )
            context = {
                'status': True,
                'message': 'participant added successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }

    return context


def get_participant_details_v2(meetingId, participantId):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants/{participantId}'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']
            participant, created = DyteMeetingParticipant.objects.get_or_create(
                meetingId=dyte_meeting,
                clientSpecificId=participant_credentials['client_specific_id'],
                name=participant_credentials['name'],
                picture=participant_credentials.get('picture'),
                presetId=participant_credentials['preset_id'],
                participantId=participant_credentials['id'],
            )
            context = {
                'status': True,
                'message': 'participant details',
                'data': response['data']
            }
            res = refresh_participant_token_v2(meetingId, participantId)
            if res['status']:
                token = res['data']['token']
                context.update({'token': token})

        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }

    return context


def update_participant_v2(meetingId, participantId, student_id=None, teacher_id=None):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        if student_id:
            student = Student.objects.get(id=student_id)
            student_details = StudentDetails.objects.get(student=student)
            name = student.name
            picture = student_details.photo if student_details.photo else ''
            preset_name = dyte_account.preset_student

        elif teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)
            name = teacher.name
            picture = teacher.photo
            preset_name = dyte_account.preset_teacher

        else:
            context = {
                'status': False,
                'message': "user doesn't belong's to Teacher or Student"
            }
            return context

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants/{participantId}'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }
        body = {
            "name": f"{name}",
            "preset_name": preset_name,
        }
        if picture:
            body.update({'picture': picture})
        response = requests.patch(url, json=body, headers=header)
        response = json.loads(response.content)
        if response['success']:
            participant_credentials = response['data']

            context = {
                'status': True,
                'message': 'participant added successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }
    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }
    return context


def refresh_participant_token_v2(meetingId, participantId):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants/{participantId}/token'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }

        response = requests.post(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']
            participant = DyteMeetingParticipant.objects.get(
                participantId=participantId)
            participant.authToken = participant_credentials['token']
            participant.save()
            context = {
                'status': True,
                'message': 'participant token refresh successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }
    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }
    return context


def delete_participant_v2(meetingId, participantId,):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v2/meetings/{meetingId}/participants/{participantId}'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }

        response = requests.delete(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']
            DyteMeetingParticipant.objects.get(
                participantId=participantId).delete()
            context = {
                'status': True,
                'message': 'participant removed successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }

    return context


def get_analtyics_of_institute_v2(institute_id, start_date, end_date):
    try:
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = 'https://api.cluster.dyte.in/v2/analytics/stats/?start_date={end_date}&end_date={end_date}'

        header = {
            'Authorization': f"Basic {key}",
            "Content-Type": "application/json"
        }

        response = requests.get(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            context = {
                'status': True,
                'message': 'institute uses analtyics deatils',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        try:
            context = {
                'status': False,
                'message': response.text
            }

        except:
            context = {
                'status': False,
                'message': f"{e}"
            }

    return context



def authorization_key_v1(institute_id):
    institute = Institute.objects.get(id=institute_id)
    try:
        dyte_account = DyteOrganisationCredential.objects.get(
            institute=institute)
    except:
        context = {
            "status": "failed",
            "message": "your institute does not have dyte account contact to BodhiAI Executives"
        }
        return {
            "status": False,
            "response": context
        }

    return {
        "status": True,
        "key": f'{dyte_account.APIKey}',
        "dyte_account": dyte_account
    }


def create_dyte_meeting_v1(institute_id, teacher_id, title: str, preset, waitingRoom:bool, closed:bool, recordOnStart: bool, liveStreamOnStart:bool):
    try:
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meeting'
        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }
        body = {
            "title": f"{title}",
            "authorization": {
                "waitingRoom": False,
                "closed": False
            },
            "recordOnStart": False,
            "liveStreamOnStart": False
        }

        response = requests.post(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            meeting_credentials = response['data']['meeting']
            DyteMeeting.objects.create(
                organisation=dyte_account,
                preset=preset,
                teacher=Teacher.objects.get(id=teacher_id),
                meetingId=meeting_credentials['id'],
                title=meeting_credentials['title'],
                roomName = meeting_credentials.get('roomName')
            )

            context = {
                'status': True,
                'message': 'meeting created successfully',
                'data': meeting_credentials
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def update_dyte_metting_v1(meetingId, title: str, recordOnStart: bool = False):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]
        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings/{meetingId}'
        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }
        body = {
            "title": f"{title}",
        }

        response = requests.patch(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            meeting_credentials = response['data']
            dyte_meeting.title = meeting_credentials['title']
            dyte_meeting.roomName = meeting_credentials['roomName']
            dyte_meeting.save()
            context = {
                'status': True,
                'message': 'meeting updated successfully',
                'data': meeting_credentials
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def fetch_all_mettings_v1(institute_id, start_time: datetime = '', search: str = '', offset: int = 0, limit: int = 100):
    try:
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings?limit={limit}&offset={offset}'
        if start_time:
            url += '&start_time={start_time}'
        if search:
            url += '&search={search}'
        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            context = {
                'status': True,
                'message': 'meeting details',
                'data': response['data']
            }
            for meeting in response['data']:
                try:
                    dyte_meeting = DyteMeeting.objects.get(
                        meetingId=meeting['id'])
                    dyte_meeting.title = meeting['title']
                    dyte_meeting.roomName = meeting['roomName']
                    dyte_meeting.save()
                except:
                    DyteMeeting.objects.create(
                        meetingId=meeting['id'],
                        title=meeting['title'],
                        roomName = meeting['roomName'],
                        organisation=dyte_account
                    )
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def get_metting_details_v1(meetingId):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v2(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings/{meetingId}'
        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            meeting_credentials = response['data']['meeting']
            dyte_meeting.title = meeting_credentials['title']
            dyte_meeting.roomName = meeting_credentials['roomName']         
            dyte_meeting.save()
            context = {
                'status': True,
                'message': 'meeting details',
                'data': meeting_credentials
            }

        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def fetch_all_participants_v1(meetingId, page_no: int = 1, per_page: int = 10):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']
        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings/{meetingId}/participants'
        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }
        response = requests.get(url, headers=header)
        response = json.loads(response.content)
        if response['success']:
            data = response['data']
            participant_object = data['participants']
            context = {
                'status': True,
                'message': 'meeting details',
                'data': participant_object
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f'{e}'
        }

    return context


def add_participant_v1(meetingId, student_id=None, teacher_id=None):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        if student_id:
            student = Student.objects.get(id=student_id)
            student_details = StudentDetails.objects.get(student=student)

            clientSpecificId = f'Student#{student_id}'
            name = student.name
            picture = student_details.photo if student_details.photo else ''
            preset_name = f'student_{dyte_meeting.preset}' if dyte_meeting.preset else 'student'

        elif teacher_id:
            teacher = Teacher.objects.get(id=teacher_id)

            clientSpecificId = f'Teacher#{teacher_id}'
            name = teacher.name
            picture = teacher.photo
            preset_name = f'teacher_{dyte_meeting.preset}' if dyte_meeting.preset else 'teacher'

        else:
            context = {
                'status': False,
                'message': "user doesn't belong's to Teacher or Student"
            }
            return context

        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings/{meetingId}/participant'

        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }

        body = {
            "clientSpecificId": clientSpecificId,
            "userDetails": {
                "name": f"{name}",
            },
            "presetName": preset_name,
        }

        if picture:
            body['userDetails'].update({'picture': picture})
        response = requests.post(url, json=body, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']['authResponse']
            DyteMeetingParticipant.objects.create(
                meetingId=dyte_meeting,
                clientSpecificId=clientSpecificId,
                name=name,
                picture=picture,
                participantId=participant_credentials['id'],
                authToken=participant_credentials['authToken'],
            )
            context = {
                'status': True,
                'message': 'participant added successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }

    return context


def delete_participant_v1(meetingId, participantId,):
    try:
        dyte_meeting = DyteMeeting.objects.get(meetingId=meetingId)
        institute_id = dyte_meeting.organisation.institute.id
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = f'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/meetings/{meetingId}/participant/{participantId}'

        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }

        response = requests.delete(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            participant_credentials = response['data']
            DyteMeetingParticipant.objects.get(
                participantId=participantId).delete()
            context = {
                'status': True,
                'message': 'participant removed successfully',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        context = {
            'status': False,
            'message': f"{e}"
        }

    return context


def get_analtyics_of_institute_v1(institute_id, start_date, end_date):
    try:
        result = authorization_key_v1(institute_id)
        if not result["status"]:
            return result["response"]

        dyte_account = result['dyte_account']
        key = result['key']

        url = 'https://api.cluster.dyte.in/v1/organizations/{dyte_account.organizationId}/stats'

        header = {
            'Authorization': f"{key}",
            "Content-Type": "application/json"
        }

        response = requests.get(url, headers=header)
        response = json.loads(response.content)

        if response['success']:
            context = {
                'status': True,
                'message': 'institute uses analtyics deatils',
                'data': response['data']
            }
        else:
            context = {
                'status': False,
                'message': response['error']
            }

    except Exception as e:
        try:
            context = {
                'status': False,
                'message': response.text
            }

        except:
            context = {
                'status': False,
                'message': f"{e}"
            }

    return context


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/models.py
--------------------------------------------------

from django.db import models



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/apps.py
--------------------------------------------------

from django.apps import AppConfig


class StudentPanelConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'student_panel'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/admin.py
--------------------------------------------------

from django.contrib import admin



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/urls.py
--------------------------------------------------

from django.urls import path
from student_panel import views

app_name = 'student_panel'
urlpatterns = [
    path('test_link/<str:test_id>/', views.test_link, name='test_link'),
    path('send_otp/', views.send_otp, name='send_otp'),
    path('student_login/', views.student_login, name='student_login'),
    path('logout/', views.student_logout, name='logout'),
    path("test_book/<str:test_id>/", views.test_book, name="test_book"),
    path('submit_test/', views.submit_test, name='submit_test'),
    path('test_performance/<str:marks_id>/', views.test_performance, name='test_performance'),
]













==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/student_panel/views.py
--------------------------------------------------

from django.contrib.auth.models import User, Group
from rest_framework.authtoken.models import Token
from django.shortcuts import render, redirect, HttpResponseRedirect,reverse
from django.contrib.auth import logout
from django.http import JsonResponse
from django.contrib import messages
from content.models import *
from datetime import datetime
from django.contrib.auth import authenticate, login
from basicinformation.tasks import *
from content.models import *
from content.content_helper import *

def student_logout(request):
    if request.method == 'POST':
        test_id = request.POST.get('test_id')
        if request.user.is_authenticated:
            logout(request)
            return redirect('/student_panel/test_link/'+str(test_id)+'/')
    else:
        pass

def test_link(request, test_id):
    test = Test.objects.filter(id=test_id).first()
    if test:
        testInstution = test.createdBy.institute
        code = testInstution.code
        
        context = {'test_id':test_id,'institute_code':code}
        return render(request, 'student_panel/student_login.html',context)
    else:
        return render(request, 'student_panel/error.html')
    
def send_otp(request):
    if request.method == 'POST':
        info = json.loads(request.body)
    phone = info['phone']
    code = info['code']
    param = {'phone': phone,'code': code}
    otp_response = requests.post('https://bodhiai.live/api/membership/forget_password_send_otp/', param).json()
    print(otp_response)
    if otp_response['status'] == 200:
        data = {'status': otp_response['status'],'otp': otp_response['otp'],'phone':phone}
    else:
        data = {'status': otp_response['status'],'message': 'Check Your OTP balance'}
    
    return JsonResponse(data)

def student_login(request):
    info = json.loads(request.body)
    test_id = info['test_id']
    phone = info['phone']
    
    try:
        test = Test.objects.filter(id=test_id).first()
        testInstution = test.createdBy.institute
        code = testInstution.code
        if phone:
            username = phone + "@" + code
            user = authenticate(username=username, password='123')
            if user is not None:
                login(request, user)
                response_data = {
                'success': True,
                'redirect_url': '/student_panel/test_book/'+str(test_id)+'/'
                }
                return JsonResponse(response_data)
            
            else:
                user = User.objects.create_user(username=username, password='123', email=None)
                user.save()
                first_batch = Batch.objects.filter(institute=testInstution).order_by('id').first()
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                teacher = list(Teacher.objects.filter(institute=testInstution))[0]

                student = Student()
                student.name = phone
                student.institute = testInstution
                student.studentuser = user
                joininig_date = datetime.datetime.now()
                student.jdate = joininig_date
                student.save()
                student.batches.add(first_batch)
                student.save()
                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.save()
                user = authenticate(request, username=username, password='123')
                if user is not None:
                    login(request, user)
                    response_data = {
                    'success': True,
                    'redirect_url': '/student_panel/test_book/'+str(test_id)+'/'
                    }
                return JsonResponse(response_data)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid data format.'}) 
    
def test_book(request,test_id):
    me = Studs(request.user)
    test = Test.objects.get(id=test_id, locked = False)
    
    if test:
        questions = test.questions.all()
        total_questions = test.questions.all().count()
        total_range = range(1,total_questions+1)
        total_marks = 0

        questions_list = []
        for question in questions:
            direction = question.direction
            if direction != None:
                direction_dict = {
                    'id': direction.id,
                    'text': direction.text,
                    'picture': direction.picture}
            else:
                direction_dict = {'id': None, 'text': None, 'picture': None}


            options = Option.objects.filter(question=question)
            options_list = []
            for option in options:
                option_dict = {
                    'id': option.id,
                    'text': option.text,
                    'picture': option.picture,
                    'explanationText': option.explanationText,
                    'explanationPicture': option.explanationPicture,
                    'correct': option.correct}
                options_list.append(option_dict)

            question_dict = {
                'id': question.id,
                'text': question.text,
                'dynamicText': question.dynamicText,
                'picture': question.picture,
                'direction': direction_dict,
                'marks': question.marks,
                'negativeMarks': question.negativeMarks,
                'language': question.language,
                'source': question.source,
                'options': options_list,
                'oneWordQuestion': question.oneWordQuestion,}
            total_marks += question.marks
            questions_list.append(question_dict)

        if total_marks != test.totalMarks:
            test.totalMarks = total_marks
            test.save()
        time = datetime.datetime.now() + datetime.timedelta(hours=1)

        test_dict = {
            'id': test.id,
            'name': test.name,
            'total_questions': total_questions,
            'total_range': total_range,
            'questions': questions_list,
            'totalMarks': test.totalMarks,
            'published': test.published,
            'time': test.time,
            'testInstructions': test.testInstructions,
            'is_answers_showing': test.is_answers_showing,
            }

        context = {
            'test': test_dict,
            'time_remining':time,
            'student_username': me.profile.studentuser.username,
            'institute': me.profile.institute.name
            }
        return render(request, 'student_panel/test_book.html',context)
    else:
        context = {'status':False, 'message':"Test is locked"}
        return render(request, 'student_panel/error.html',context)

def submit_test(request):
    me = Studs(request.user)

    if request.method == 'POST':
        data = json.loads(request.body)

    test_id = data['test_id']
    total_time = data['total_time']
    test_data = data['data']
    student = me.profile

    try:
        test = Test.objects.get(id=test_id)
        testMarks = StudentMarks.objects.filter(student=student, test=test).first()
        if testMarks:
            testMarks.delete()

        testMarks = StudentMarks()
        testMarks.student = student
        testMarks.test = test
        testMarks.time = total_time
        testMarks.attempt_count = 1
        testMarks.save()

        total_marks = 0
        totalPositiveMarks = 0.0
        totalNegativeMarks = 0.0
        totalRightQuestions = 0
        totalWrongQuestions = 0
        percentage = 0.0

        for question_data in test_data:
            question_id = question_data[0]
            selected_option = question_data[1]
            time = question_data[2]

            attemptedQuestion = AttemptedQuestion()
            attemptedQuestion.student = student
            attemptedQuestion.question = Question.objects.get(id=question_id)
            attemptedQuestion.attempted = True

            if selected_option is not None and selected_option != -1:
                option = Option.objects.get(id=selected_option)
                attemptedQuestion.save()
                attemptedQuestion.optionAttempted.add(option)
                if option.correct:
                    attemptedQuestion.right = True
                    totalPositiveMarks += attemptedQuestion.question.marks
                    total_marks += attemptedQuestion.question.marks
                    totalRightQuestions += 1
                else:
                    attemptedQuestion.right = False
                    total_marks -= attemptedQuestion.question.negativeMarks
                    totalNegativeMarks += attemptedQuestion.question.negativeMarks
                    totalWrongQuestions += 1
            else:
                attemptedQuestion.attempted = False
                attemptedQuestion.right = None

            attemptedQuestion.time = time
            attemptedQuestion.save()
            testMarks.questions.add(attemptedQuestion)

        pass_marks = testMarks.test.passing_marks
        if pass_marks:
            if total_marks >= pass_marks:
                result = 'pass'
            else:
                result = 'failed'
        else:
            result = 'undefined'

        total_test_marks = testMarks.test.totalMarks
        try:
            percentage = (total_marks * 100) / total_test_marks
        except ZeroDivisionError:
            percentage = None

        totalQuestions = testMarks.test.questions.all().count()
        totalAttemptedQuestions = testMarks.questions.filter(attempted=True).count()
        totalNotAttemptedQuestions = testMarks.questions.filter(attempted=False).count()

        testMarks.totalQuestions = totalQuestions
        testMarks.totalAttemptedQuestions = totalAttemptedQuestions
        testMarks.totalNotAttemptedQuestions = totalNotAttemptedQuestions

        testMarks.totalPositiveMarks = totalPositiveMarks
        testMarks.totalNegativeMarks = totalNegativeMarks

        testMarks.totalRightQuestions = totalRightQuestions
        testMarks.totalWrongQuestions = totalWrongQuestions

        testMarks.result = result
        testMarks.percentage = percentage
        testMarks.totalTestMarks = total_test_marks

        testMarks.marks = total_marks
        testMarks.save()

        response_data = {
        'success': True,
        'redirect_url': '/student_panel/test_performance/'+str(testMarks.id)+'/'
        }

        return JsonResponse(response_data)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid data format.'})
    
def test_performance(request,marks_id):
    me = Studs(request.user)
    try:
        studentMarks = StudentMarks.objects.get(id=marks_id)
        attemptedQuestions = studentMarks.questions.all()
        total_marks = 0
        right_number = 0
        wrong_number = 0
        skipped_number = 0
        attempted_questions_list = []
        for aq in attemptedQuestions:
            question = aq.question
            attemptedOptions = aq.optionAttempted.all()
            optionId_list = []
            for ao in attemptedOptions:
                optionId_list.append(ao.id)

            attempted = aq.attempted
            right = aq.right
            if right == True:
                total_marks += question.marks
                right_number += 1

            elif right == False:
                total_marks -= question.negativeMarks
                wrong_number += 1

            if aq.attempted == False:
                skipped_number += 1

            time = aq.time
            direction = question.direction
            if direction != None:
                direction_dict = {'id': direction.id, 'text': direction.text, 'picture': direction.picture}
            else:
                direction_dict = {'id': None,'text': None, 'picture': None}

            try:
                subject = question.subject
                subject_dict = {'id': subject.id,'name': subject.name}
                chapter = question.chapter
                chapter_dict = {'id': chapter.id,'name': chapter.name, 'code': chapter.code}
            except:
                chapter_dict = {}
                subject_dict = {}

            options = Option.objects.filter(question=question)
            options_list = []
            for option in options:
                selected = False
                if option.id in optionId_list:
                    selected = True

                optionPicture = option.picture

                if optionPicture == None or len(optionPicture) < 5:
                    optionPicture = None

                if option.explanationText:
                    explanationText = option.explanationText
                else:
                    explanationText = option.explanation

                if not explanationText:
                    explanationText = None

                option_dict = {
                    'id': option.id,
                    'text': option.text,
                    'picture': optionPicture,
                    'explanationText': explanationText,
                    'explanationPicture': option.explanationPicture,
                    'correct': option.correct,
                    'selected': selected,
                    'explanationVideo': option.explanationVideo
                    }
                options_list.append(option_dict)

            question_dict = {
                'id': question.id,
                'text': question.text,
                'dynamicText': question.dynamicText,
                'picture': question.picture,
                'direction': direction_dict,
                'subject': subject_dict,
                'chapter': chapter_dict,
                'marks': question.marks,
                'negativeMarks': question.negativeMarks,
                'language': question.language,
                'source': question.source,
                'oneWordQuestion': question.oneWordQuestion,
                'oneWordAnswer': question.oneWordAnswer,
                'oneWordExplanation': question.oneWordExplanation,
                'studentOneWordAnswer': aq.studentOneWordAnswer,
                'options': options_list
                }

            aq_dict = {
                'id': aq.id,
                'question': question_dict,
                'attempted': attempted,
                'right': right,
                'time': time
                }
            attempted_questions_list.append(aq_dict)

        pass_marks = studentMarks.test.passing_marks

        if pass_marks:
            if total_marks > pass_marks or total_marks == pass_marks:
                result = 'pass'
            else:
                result = 'failed'
        else:
            result = 'undefined'

        test_taken_time_in_sec = studentMarks.time
        time_convert_into_min = round((test_taken_time_in_sec/60),2)

        test_marks_dict = {
            'id': studentMarks.id,
            'test_id': studentMarks.test.id,
            'testTime' : studentMarks.test.time,
            'totalQuestions': studentMarks.totalQuestions,
            'totalTestMarks': studentMarks.totalTestMarks,
            'totalMarks': total_marks,
            'takenTime': time_convert_into_min,
            'attemptedTime': studentMarks.attemptTime,
            'attemptedQuestions': attempted_questions_list,
            'right': right_number,
            'wrong': wrong_number,
            'skipped': skipped_number,
            'percentage': studentMarks.percentage,
            'result': result
            }

        context = {
            'status': 'Success', 
            'performance': test_marks_dict,
            'student_username': me.profile.studentuser.username,
            'institute': me.profile.institute.name
            }

    except Exception as e:
        context = {'status': 'Failed', 'message': str(e)}
    
    return render(request, 'student_panel/performance.html',context)

        



 


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/models.py
--------------------------------------------------

from django.db import models
from django.contrib.auth.models import User
from content.models import *
from membership.models import *
from django.contrib.postgres.fields import ArrayField

class StudentGroup(models.Model):
    name = models.CharField(max_length=200)
    student = models.ManyToManyField(Student, related_name='student_group')
    teacher = models.ManyToManyField(Teacher, related_name='group_sub_teacher',blank=True)
    createdBy = models.ForeignKey(Teacher, related_name='group_teacher', on_delete=models.CASCADE)
    batches = models.ForeignKey(Batch, related_name='student_group_batch', on_delete=models.CASCADE,blank=True,null=True)
    package = models.ForeignKey(Package, related_name='student_group_package', on_delete=models.CASCADE,blank=True,null=True)

    def __str__(self):
        return self.name

class Message(models.Model):
    messageTo = models.ForeignKey(User, related_name='message_to', on_delete=models.CASCADE)
    messageFrom = models.ForeignKey(User, related_name='message_from', on_delete=models.CASCADE)
    text = models.TextField()
    image = models.URLField(max_length=2000, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    audio = models.URLField(max_length=2000, null=True, blank=True)
    audioDuration = models.FloatField(null=True, blank=True)
    questions = models.ManyToManyField(Question, blank=True)
    teacherRead = models.BooleanField(default=False)
    studentRead = models.BooleanField(default=False)

    def __str__(self):
        return self.text

class Announcement(models.Model):
    announcementFrom = models.ForeignKey(Teacher, related_name='announcement_teacher', on_delete=models.CASCADE)
    text = models.TextField()
    students = models.ManyToManyField(Student, related_name='announcement_students')
    batches = models.ManyToManyField(Batch, related_name='announcement_batches', blank=True)
    groups = models.ManyToManyField(StudentGroup, related_name='announcement_group')
    packages = models.ManyToManyField(Package, related_name='announcement_packages', blank=True)
    time = models.DateTimeField(auto_now_add=True)
    image = models.URLField(max_length=2000, null=True, blank=True)
    notifications_id = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=100,null=True,blank=True)

    def __str__(self):
        return self.announcementFrom.name + ' ' + self.text

class StudentReadAnnouncement(models.Model):
    student = models.ForeignKey(Student, related_name='readannouncement_student', on_delete=models.CASCADE)
    announcements = ArrayField(models.IntegerField())

    def __str__(self):
        return self.student.name

class StudentDoubt(models.Model):
    doubtFrom = models.ForeignKey(Student, related_name='doubtFrom', on_delete=models.CASCADE)
    institute = models.ForeignKey(Institute, related_name='studentdoubtinstitute', on_delete=models.CASCADE)
    title = models.TextField(default='doubt title', null=True, blank=True)
    text = models.TextField()
    image = models.URLField(max_length=2000, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    audio = models.URLField(max_length=2000, null=True, blank=True)
    audioDuration = models.FloatField(null=True, blank=True)
    course = models.CharField(max_length=2000, null=True, blank=True, default='SSC')
    courseSubject = models.CharField(max_length=2000, null=True, blank=True)
    solved = models.BooleanField(default=False)
    timeAsked = models.DateTimeField(null=True, blank=True)
    solvedTime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return self.text + ' ' + self.doubtFrom.name + ' ' + \
            str(self.doubtFrom.studentuser.username) + ' ' +\
            self.doubtFrom.institute.name + ' ' + str(self.time)

class StudentReply(models.Model):
    replyuser = models.ForeignKey(Student, related_name='doubtreplier', on_delete=models.CASCADE)
    doubt = models.ForeignKey(StudentDoubt, related_name='studentdoubt', on_delete=models.CASCADE)
    text = models.TextField()
    image = models.URLField(max_length=2000, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    audio = models.URLField(max_length=2000, null=True, blank=True)
    audioDuration = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.text

class GroupMessage(models.Model):
    group = models.ForeignKey(StudentGroup, related_name='message_group', on_delete=models.CASCADE)
    messageFrom = models.ForeignKey(User, related_name='group_message_from', on_delete=models.CASCADE)
    text = models.TextField()
    questions = models.ManyToManyField(Question, blank=True)
    image = models.URLField(max_length=2000, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    audio = models.URLField(max_length=2000, null=True, blank=True)
    audioDuration = models.FloatField(null=True, blank=True)

class StudentDoubtsReply(models.Model):
    replyuser = models.ForeignKey(User, related_name='doubtreply_user', on_delete=models.CASCADE, blank=True, null=True)
    doubt = models.ForeignKey(StudentDoubt, on_delete=models.CASCADE, blank=True, null=True)
    text = models.TextField(null=True, blank=True)
    image = models.URLField(max_length=2000, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    audio = models.URLField(max_length=2000, null=True, blank=True)
    audioDuration = models.FloatField(null=True, blank=True)

    def __str__(self):
        return self.text

class StudentIssue(models.Model):
    student = models.ForeignKey(Student, related_name='issue_student', on_delete=models.CASCADE, blank=True, null=True)
    issueType = models.CharField(max_length=200, null=True, blank=True)
    issue = models.TextField(null=True, blank=True)
    subject = models.CharField(max_length=100, null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True)
    resolve = models.BooleanField(default=False)
    staffReply = models.TextField(null=True, blank=True)
    email = models.EmailField(null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + self.issueType

class GroupLink(models.Model):
    teacher = models.ForeignKey(Teacher, related_name='grpLink_teacher', on_delete=models.CASCADE)
    link = models.URLField(max_length=2000)
    batches = models.ManyToManyField(Batch, related_name='grpLink_batches', blank=True)
    title = models.CharField(max_length=100, null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    time = models.DateTimeField(auto_now_add=True, editable=True)

    def __str__(self):
        return self.teacher + ' ' + self.link

class CommunityPost(models.Model):
    creator = models.ForeignKey(User, related_name='postFrom', on_delete=models.CASCADE)
    institute = models.ForeignKey(Institute, related_name='postInstitute', on_delete=models.CASCADE)
    title = models.CharField(max_length=200,null=True,blank=True)
    description = models.TextField(null=True, blank=True)
    media_type_choices = [
        ('image', 'image'),
        ('video', 'video'),
        ('audio', 'audio'),
        ('pdf', 'pdf'),
        ('text', 'text'),
    ]
    media_type = models.CharField(max_length=100, choices=media_type_choices, null=True, blank=True)
    urlLink = models.URLField(max_length=1000, null=True,blank=True)
    thumbnail = models.URLField(max_length=1000, null=True,blank=True)
    created_at = models.DateTimeField(auto_now_add=True) 
    updated_at = models.DateTimeField(auto_now=True) 
    
    def __str__(self):
        return self.title 

class CommunityComments(models.Model):
    user = models.ForeignKey(User, related_name='commentFrom', on_delete=models.CASCADE)
    community_post = models.ForeignKey(CommunityPost, on_delete=models.CASCADE)
    comment = models.TextField(null=True,blank=True)
    created_at = models.DateTimeField(auto_now_add=True) 
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.community_post.title
    
class CommunityLikes(models.Model):
    user = models.ForeignKey(User,on_delete=models.CASCADE,null=True)
    community_post = models.ForeignKey(to = CommunityPost,on_delete=models.CASCADE,null=True)
    likes = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True,blank=True,null=True) 
    updated_at = models.DateTimeField(auto_now=True,blank=True,null=True) 

    def __str__(self):
        return self.community_post.title
    
class CommunitySendRequest(models.Model):
    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_requests')
    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_requests')
    institute = models.ForeignKey(Institute, on_delete=models.CASCADE, null=True,blank=True)
    status_choices = [('new', 'New Request'), ('accepted', 'Accepted'), ('rejected', 'Rejected')]
    status = models.CharField(max_length=20, choices=status_choices, default='new')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True) 
    
    def __str__(self):
        return f"{self.sender} to {self.receiver} - {self.get_status_display()}"
    
    
    

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/apps.py
--------------------------------------------------

from django.apps import AppConfig


class CommunicationConfig(AppConfig):
    name = 'communication'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/admin.py
--------------------------------------------------

from django.contrib import admin
from communication.models import *

@admin.register(Announcement)
class AnnouncementAdmin(admin.ModelAdmin):
    list_display = ['id', 'announcementFrom']
    readonly_fields = ['announcementFrom', 'students', 'batches', 'groups', 'packages',]

@admin.register(GroupLink)
class GroupLinkAdmin(admin.ModelAdmin):
    list_display = ['id', 'teacher']
    readonly_fields = ['teacher', 'batches']

@admin.register(GroupMessage)
class GroupMessageAdmin(admin.ModelAdmin):
    list_display = ['id', 'group']
    readonly_fields = ['group', 'messageFrom', 'questions', ]

@admin.register(Message)
class MessageAdmin(admin.ModelAdmin):
    list_display = ['id', 'messageTo', 'messageFrom']
    search_fields = ['messageTo__id', 'messageFrom__id']
    readonly_fields = ['messageTo', 'messageFrom', 'questions']

@admin.register(StudentDoubt)
class StudentDoubtAdmin(admin.ModelAdmin):
    list_display = ['id', 'doubtFrom']
    readonly_fields = ['doubtFrom', 'institute']

@admin.register(StudentGroup)
class StudentGroupAdmin(admin.ModelAdmin):
    search_fields =['id','name','student__studentuser__username']
    list_display = ['id', 'name',]
    readonly_fields = ['student', 'createdBy']

@admin.register(StudentIssue)
class StudentIssueAdmin(admin.ModelAdmin):
    list_display = ['id', 'student',]
    readonly_fields = ['student',]
    search_fields = ['student__studentuser__username']

@admin.register(StudentReadAnnouncement)
class StudentReadAnnouncementAdmin(admin.ModelAdmin):
    list_display = ['id', 'student']
    readonly_fields = ['student']
    search_fields = ['student__studentuser__username']

@admin.register(StudentReply)
class StudentReplyAdmin(admin.ModelAdmin):
    list_display = ['id', 'replyuser']
    readonly_fields = ['replyuser', 'doubt',]
    
@admin.register(CommunityPost)
class CommunityPostAdmin(admin.ModelAdmin):
    list_display = ['id', 'title', 'creator', 'institute']
    readonly_fields = ['creator','institute']
    
@admin.register(CommunityComments)
class CommunityCommentsAdmin(admin.ModelAdmin):
    list_display = ['id', 'user', 'community_post', 'comment']
    readonly_fields = ['user','comment']
    
@admin.register(CommunityLikes)
class CommunityLikesAdmin(admin.ModelAdmin):
    list_display = ['id', 'user', 'community_post', 'likes']
    readonly_fields = ['user','likes']



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/views.py
--------------------------------------------------

from django.shortcuts import render



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/api/serializers.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/api/urls.py
--------------------------------------------------

from django.urls import include, re_path as url
from django.urls import path
from communication.api import views


urlpatterns = [
    url(r'teacher_send_message/$', views.TeacherSendMessage.as_view(),name='teacherSendMessage'),
    url(r'student_send_message/$', views.StudentSendMessage.as_view(),name='studentSendMessage'),
    url(r'teacher_inbox/$', views.TeacherInbox.as_view(), name='teacherInbox'),
    url(r'teacher_announcement/$', views.TeacherAnnouncement.as_view(),name='teacherAnnouncement'),
    url(r'student_all_announcements/$',views.StudentAllAnnouncements.as_view(), name='studentAllAnnouncements'),
    url(r'student_teacher_messages/$', views.StudentMessages.as_view(),name='studentTeacherMessages'),
    url(r'teacher_inbox_students/$', views.TeacherConversations.as_view(),name='teacherInboxStudentList'),
    url(r'teacher_conv_list/$', views.TeacherGetConversationList.as_view(),name='teacherGetConvList'),
    url(r'teacher_messages_specific_student/$',views.TeacherMessagesSpecificStudent.as_view(), name='teacherSpecificStudentMessages'),
    url(r'student_inbox_teachers/$',views.StudentConversations.as_view(), name='studentInbox'),
    url(r'student_messages_specific_teacher/$', views.StudentIndividualConversation.as_view(),name='studentStudentMessageSpecificTeacher'),
    url(r'student_teacher_list/$', views.StudentTeacherList.as_view(),name='studentTeacherList'),
    url(r'teacher_get_announcements/$',views.TeacherGetAnnouncement.as_view(), name='teacherGetAnnouncement'),
    url(r'teacher_delete_announcement/$',views.TeacherDeleteAnnouncement.as_view(), name='teacherDeleteAnnouncement'),
    url(r'teacher_delete_message/$',views.TeacherDeleteChat.as_view(), name='teacherDeleteChat'),
    url(r'teacher_whole_chat_delete/$',views.TeacherDeleteWholeChat.as_view(), name='teacherDeleteWholeChat'),
    url(r'student_read_announcements/$',views.StudentMarkReadAnnouncements.as_view(), name='studentReadAnnouncements'),
    url(r'unread_announcements_student/$', views.StudentNumberReadAnnouncements.as_view(),name='numberUnreadAnnouncementsStudent'),
    url(r'student_publish_doubt/$', views.StudentPublishDoubt.as_view(),name='StudentPublishDoubt'),
    url(r'student_doubts_revert/$',views.StudentDoubtReply.as_view(), name='StudentDoubtReply'),
    url(r'student_get_specfic_doubt/$', views.StudentGetIndividualDoubtReply.as_view(),name='StudentGetIndividualDoubtReply'),
    url(r'student_get_all_doubts/$',views.StudentGetDoubtList.as_view(), name='StudentGetDoubtList'),
    url(r'student_delete_doubt/$', views.StudentDeleteDoubt.as_view(),name='StudentDeleteDoubt'),
    url(r'teacher_get_general_doubts/$',views.TeacherGetDoubtList.as_view(), name='teacherGetDoubtList'),
    url(r'teacher_packagewise_announcement/$',views.TeacherPackwiseAnnouncement.as_view(), name='teacherPackwiseAnnouncement'),
    url(r'teacher_create_group/$', views.TeacherCreateGroup.as_view(),name='teacherCreateGroup'),
    url(r'teacher_get_allgroups/$', views.TeacherGetGroups.as_view(),name='teacherGetAllGroups'),
    url(r'teacher_group_detail/$', views.GroupDetails.as_view(),name='teacherGroupDetails'),
    url(r'teacher_group_announcement/$',views.TeacherGroupAnnouncement.as_view(), name='TeacherGroupAnnouncement'),
    url(r'student_group_message/$', views.StudentSendGroupMessage.as_view(),name='studentSendGroupMessage'),
    url(r'teacher_group_message/$', views.TeacherSendGroupMessage.as_view(),name='teacherSendGroupMessage'),
    url(r'get_group_messages/$', views.GetGroupMessages.as_view(),name='getGroupMessages'),
    url(r'student_getall_groups/$', views.StudentGetAllGroups.as_view(),name='studentGetAllGroups'),
    url(r'teacher_edit_group/$', views.TeacherEditGroup.as_view(),name='TeacherEditGroup'),
    url(r'reply_student_doubt/$', views.ReplyStudentDoubt.as_view(),name='ReplyStudentDoubt'),
    url(r'get_individual_doubt_info/$', views.GetAllReplyIndividualDoubt.as_view(),name='GetAllReplyIndividualDoubt'),
    url(r'student_get_all_own_doubts/$',views.StudentGetAllOwnDoubtList.as_view(), name='StudentGetAllOwnDoubtList'),
    url(r'student_call_teacher/$', views.StudentCallToTeacher.as_view(),name='StudentCallToTeacher'),
    url(r'teacher_read_chats/$', views.TeacherReadChats.as_view(),name='TeacherReadChats'),
    url(r'teacher_delete_group/$', views.TeacherDeleteGroup.as_view(),name='TeacherDeleteGroup'),
    url(r'teacher_add_group_Link/$',views.TeacherAddGroupLink.as_view(), name='TeacherAddGroupLink'),
    url(r'student_get_group_links/$',views.StudentGetGroupLink.as_view(), name='StudentGetGroupLink'),
    url(r'teacher_get_group_links/$',views.TeacherGetGroupLink.as_view(), name='TeacherGetGroupLink'),
    url(r'teacher_edit_group_link/$',views.TeacherEditGroupLink.as_view(), name='TeacherEditGroupLink'),
    url(r'teacher_delete_group_link/$',views.TeacherDeleteGroupLink.as_view(), name='TeacherDeleteGroupLink'),
    url(r'student_call_teacher_two/$',views.StudentCallToTeacherTwo.as_view(), name='StudentCallToTeacherTwo'),
    url(r'testiing/$', views.TeacherAnnouncement2.as_view(),name='TeacherAnnouncement2'),
    url(r'staff_get_completed_doubtList/$',views.StaffGetCompleteDoubtList.as_view(), name='StaffGetCompleteDoubtList'),
    url(r'teacher_create_group_new/$',views.TeacherCreateGroupNew.as_view(), name='TeacherCreateGroupNew'),
    url(r'teacher_create_group_batchwise/$',views.TeacherCreateGroupBatchWise.as_view(), name='TeacherCreateGroupBatchWise'),
    url(r'student_group_message_delete/$', views.DeleteGroupMessages.as_view(),name='DeleteGroupMessages'),
    url(r'teacher_group_message_delete/$', views.TeacherDeleteGroupMessages.as_view(),name='TeacherDeleteGroupMessages'),
    url(r'student_message_delete/$', views.StudentdeleteMessage.as_view(),name='StudentdeleteMessage'),
    url(r'student_teacher_list_batch_wise/$', views.StudentTeacherListBatchWise.as_view(),name='StudentTeacherListBatchWise'),
    url(r'teacher_create_group_eclassopedia/$', views.TeacherCreateGroupElcass.as_view(),name='TeacherCreateGroupElcass'),
    url(r'eclassopedia_group_detail/$', views.EclassGroupDetails.as_view(),name='EclassGroupDetails'),
    url(r'student_read_chats/$', views.StudentReadChats.as_view(),name='StudentReadChats'),
    url(r'teacher_group_add/$', views.TeacherGroupStudentAdd.as_view(),name='TeacherGroupStudentAdd'),
    
    url(r'communtiy_post_create/$', views.CommunityPostCreate.as_view(),name='communtiy_post_create'),
    url(r'communtiy_all_post/$', views.CommunityAllPost.as_view(),name='communtiy_all_post'),
    url(r'comment_on_post/$', views.CommentOnPost.as_view(),name='comment_on_post'),
    url(r'post_all_comments/$', views.PostAllComments.as_view(),name='post_all_comments'),
    url(r'like_post/$', views.LikePost.as_view(),name='like_post'),
    url(r'self_profile/$', views.SelfProfile.as_view(),name='self_profile'),
    url(r'search_teacher_profile/$', views.SearchTeacherProfile.as_view(), name='search_teacher_profile'),
    url(r'search_student_profile/$', views.SearchStudentProfile.as_view(), name='search_student_profile'),
    url(r'community_user_send_request/$', views.CommunityUserSendRequest.as_view(), name='community_user_send_request'),
    url(r'community_user_request_response/$', views.CommunityUserRequestResponse.as_view(), name='community_user_request_response'),
    url(r'community_user_accepted_request/$', views.CommunityUserAcceptedRequest.as_view(), name='community_user_accepted_request'),
    url(r'community_user_all_request/$', views.CommunityUserAllRequest.as_view(), name='community_user_all_request'),
    url(r'community_user_send_message/$', views.CommunityUserSendMessage.as_view(), name='community_user_send_message'),
    url(r'community_message_users_list/$', views.CommunityMessageUsersList.as_view(), name='community_message_users_list'),
    url(r'community_single_user_message/$', views.CommunitySingleUsersMessage.as_view(), name='community_single_user_message'),
    url(r'community_user_request_status/$', views.CommunityUserRequestStatus.as_view(), name='community_user_request_status'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/communication/api/views.py
--------------------------------------------------

import math
import itertools
from itertools import chain
from datetime import datetime
from gaming.models import *
from membership.models import *
from communication.models import *
from basicinformation.models import *
from rest_framework.response import Response
from django.contrib.auth.models import User, Group
from rest_framework.views import APIView
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *
from doubts.models import *
from more_itertools import unique_everseen
from django.db.models.query_utils import Q

class TeacherInbox(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        messages = Message.objects.filter(messageTo=self.request.user).order_by('time')
        messages_list = []
        for message in messages:
            questions = message.questions.all()
            if len(questions) != None:
                questions = questions
            else:
                questions = None
            message_dict =\
                {'to': message.messageTo, 'from': message.messageFrom,
                    'text': message.text, 'questions': questions, 'time': message.time}
            messages_list.append(message_dict)

        context = {'messages': messages_list}
        return Response(context)

class TeacherSendMessage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        try:
            json_file = me.profile.institute.teacher_app_json
            data = request.data
            message_to = data['message_to']
            text = data['text']
            image = data.get('image', None)
            audio_url = data.get('audio_url', None)
            audio_duration = data.get('audio_duration', None)
            
            try:
                questions = data['questionIds']
                questions_list = questions.strip('][').split(',')
            except:
                questions_list = []
        
            student = Student.objects.get(id=message_to)
            user_to = student.studentuser
            message = Message()
            message.messageTo = user_to
            message.messageFrom = self.request.user
            message.text = text
            message.image = image
            message.audio = audio_url
            message.audioDuration = audio_duration
            message.save()
            
            if len(questions_list) > 0:
                for quest_id in questions_list:
                    question = Question.objects.get(id=quest_id)
                    message.questions.add(question)

            if student.institute.code == 'testwin':
                testwinNotification = ChallengeNotification.objects.create(staffMessage=message)
                testwinNotification.contestants.add(student)

            serverKey = me.profile.institute.serverKey
            deviceId = student.firebaseToken
            to_text = 'Message from {}: {}'.format(me.profile.name, text)
            notification = {'title': 'New Message', 'body': to_text}
            data = {"id": str(me.profile.id), "name": str(me.profile.name), "type": "chat", "link": ""}
            
            if json_file is None:
                send_notification_individual_second(serverKey=serverKey, deviceId=deviceId, notification=notification, data=data)
            else:
                send_notification_individual(json_file=json_file, deviceId=deviceId, notification=notification, data=data)

            context = {'status': 'Success', 'message': 'Message Sent Successfully'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)
            
class TeacherAnnouncement(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            message = data['message']
            image = data.get('image')
            batches = data['batches_ids']
            batch_list = batches.strip('][').split(',')
            
            announcement = Announcement()
            announcement.announcementFrom = me.profile
            announcement.text = message
            announcement.image = image
            announcement.save()
            
            server_key = me.profile.institute.serverKey if me.profile.institute.serverKey else None
            json_file_url = me.profile.institute.json_file if me.profile.institute.json_file else None

            notification = {
                "title": "New Notification",
                "body": announcement.text,
                "image": announcement.image
            }

            for batch_id in batch_list:
                batch = Batch.objects.get(id=batch_id)
                announcement.batches.add(batch)
                students = Student.objects.filter(batches=batch)
                announcement.students.add(*students)
                announcement.save()
                
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, batch_id=int(batch_id))
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, batch_id=int(batch_id))

            context = {'status': 'Success', 'message': 'Notification Sent Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherAnnouncement2(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)

        return Response('called h bhai')

class TeacherPackwiseAnnouncement(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            message = data['message']
            packages = data['package_ids']
            image = data.get('image')
            package_list = packages.strip('][').split(',')
            announcement = Announcement()
            announcement.announcementFrom = me.profile
            announcement.text = message
            announcement.image = image
            announcement.save()
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {'title':'New Notification','body': message,}
            
            for pack_id in package_list:
                package = Package.objects.get(id=pack_id)
                announcement.packages.add(package)
                students = package.students.all()
                announcement.students.add(*students)
                announcement.save()
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, package_id=package.id)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, package_id=package.id)
                
            context = {'status': 'Success','message': 'Notification Sent to Students'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentAllAnnouncements(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        institute = me.profile.institute
        all_announcements = []
        announcements =\
            Announcement.objects.filter(students=me.profile).order_by('-id')
        for announcement in announcements:
            if announcement.image:
                image = announcement.image
            else:
                image = None
            announcement_dict =\
                {'id': announcement.id, 'text': announcement.text,
                    'time': announcement.time, 'image': image}
            all_announcements.append(announcement_dict)
        context = {'announcements': all_announcements}
        return Response(context)

class StudentMessages(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        teacher = Teacher.objects.get(id=teacher_id)
        messagesSent = Message.objects.filter(messageTo=teacher.teacheruser, messageFrom=me.profile.studentuser)
        messageReceived = Message.objects.filter(messageFrom=teacher.teacheruser, messageTo=me.profile.studentuser)
        final_message_list = []
        for ms in messagesSent:
            ms_dict = {'id': ms.id, 'text': ms.text, 'image': ms.image, 'time': ms.time, 'sent': True}
            final_message_list.append(ms_dict)
        for mr in messageReceived:
            mr_dict = {'id': mr.id, 'text': mr.text, 'image': ms.image, 'time': mr.time, 'sent': False}
            final_message_list.append(mr_dict)
        context = {'all_messages': final_message_list}
        return Response(context)

class StudentSendMessage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        institute_code = me.profile.institute.code
        data = request.data
        message_to = data['message_to']
        text = data['text']
        image = data.get('image', None)
        
        try:
            questions = data['questionIds']
            questions_list = questions.strip('][').split(',')
        except:
            questions_list = []
            
        try:
            audio_data = data['audio_url']
        except:
            audio_data = ''
            
        try:
            audio_duration_data = data['duration_data']
        except:
            audio_duration_data = ''
            
        try:
            teacher = Teacher.objects.get(id=message_to)
            user_to = teacher.teacheruser
            message = Message()
            message.messageTo = user_to
            message.messageFrom = self.request.user
            message.text = text
            message.image = image
            message.time = timezone.now()
            if audio_data != '':
                message.audio = audio_data
            if audio_duration_data != '':
                message.audioDuration = audio_duration_data
            message.save()
            
            f_sent = 'sent'
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None
    
            try:
                app_token = app_serverKey(institute_code)
                deviceId = teacher.firebaseToken
                teacher_id = teacher.id
                to_text = 'Message from {}: {}'.format(me.profile.name, text)
                notification = {'title':'New Notification', 'body': to_text}
                
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as f:
                f_sent = f
                print(str(f))               

            if len(questions_list) != None:
                for quest_id in questions_list:
                    question = Question.objects.get(id=quest_id)
                    message.questions.add(question)
                    
            context = {'status': 'Success','message': 'Message sent successfully {}'.format(f_sent)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)


class TeacherConversations(APIView):
    def post(self, request):
        data = request.data  
        page_number = data['page_number']
        items_per_page = 50
        start_index = (int(page_number)-1) * items_per_page
        end_index = int(start_index) + items_per_page
        try:
            messages = Message.objects.filter(Q(messageTo=self.request.user) | Q(messageFrom=self.request.user)).order_by('-id').values_list('messageTo', 'messageFrom')
            user_ids = list(itertools.chain(*messages))
            student_list = []

            students_all = Student.objects.select_related('studentuser').filter(studentuser__in=user_ids).distinct()
            students_count = students_all.count()
            totalPage = math.ceil(students_count/items_per_page)

            students = Student.objects.select_related('studentuser').filter(studentuser__in=user_ids).distinct()[start_index:end_index]
            for student in students:
                messageFrom = student.studentuser.message_from.all().order_by('-time').values('text', 'time', 'teacherRead')
                messageTo = student.studentuser.message_to.all().order_by('-time').values('text', 'time', 'teacherRead')
                messageObjects = list(chain(messageFrom, messageTo))
                sortedMessageObjects = sorted(messageObjects, key=lambda i: i['time'], reverse=True)

                latestMessageTime = sortedMessageObjects[0]['time']
                latestMessage = sortedMessageObjects[0]['text']
                teacherRead = sortedMessageObjects[0]['teacherRead']

                try:
                    photo = student.student.photo
                except:
                    photo = None

                student_dict = {
                    'id': student.id, 
                    'name': student.name, 
                    'username': student.studentuser.username, 
                    'photo': photo,
                    'time': latestMessageTime, 
                    'latestMessage': latestMessage, 
                    'teacherRead': teacherRead,
                    }
                student_list.append(student_dict)

            student_list = sorted(student_list, key=lambda i: i['time'], reverse=True)

            context = {'students': student_list, 'total': len(student_list),'totalPage': totalPage}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        
        messages = Message.objects.filter(Q(messageTo=me.profile.teacheruser) | Q(messageFrom=me.profile.teacheruser)).select_related('messageTo', 'messageFrom').order_by('-id').values_list('messageTo', 'messageFrom')[:1000]
        user_ids = list(itertools.chain(*messages))
        students = Student.objects.select_related('studentuser').filter(studentuser__in=user_ids).distinct()

        student_list = []

        for student in students:
            messageFrom = Message.objects.filter(messageFrom=student.studentuser, messageTo=me.profile.teacheruser).order_by('-time').values('text', 'time', 'teacherRead')
            messageTo = Message.objects.filter(messageFrom=me.profile.teacheruser, messageTo=student.studentuser).order_by('-time').values('text', 'time', 'teacherRead')
            messageObjects = list(chain(messageFrom, messageTo))
            sortedMessageObjects = sorted(messageObjects, key=lambda i: i['time'], reverse=True)
            if messageObjects:
                latestMessageTime = sortedMessageObjects[0]['time']
                latestMessage = sortedMessageObjects[0]['text']
                studentRead = sortedMessageObjects[0]['teacherRead']
            else:
                latestMessageTime = None
                latestMessage = None
                studentRead = None

            try:
                photo = student.student.photo
            except:
                photo = None
            student_dict = {
                'id': student.id, 
                'name': student.name, 
                'username': student.studentuser.username, 
                'photo': photo,
                'time': latestMessageTime, 
                'latestMessage': latestMessage, 
                'teacherRead': studentRead
            }
            student_list.append(student_dict)
        
        student_list = sorted(student_list, key=lambda student: (student['time'] or datetime.min), reverse=True)
        context = {'students': student_list, 'total': len(student_list)}

        return Response(context)

class TeacherMessagesSpecificStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        
        try:
            teacher = me.profile
            data = request.data
            student_id = data['student_id']
            student = Student.objects.get(id=student_id)
            
            messages = Message.objects.filter(
                Q(messageFrom=student.studentuser, messageTo=teacher.teacheruser) |
                Q(messageTo=student.studentuser, messageFrom=teacher.teacheruser)
            ).select_related('messageFrom', 'messageTo').order_by('time')
            
            print(messages.count())
            
            messages_list = []
            for msg in messages:
                is_from_student = msg.messageFrom == student.studentuser
                typeMessage = 'text'
                
                if msg.image:
                    typeMessage = 'image'
                elif msg.audio:
                    typeMessage = 'audio'
                    
                user = msg.messageFrom if is_from_student else msg.messageTo
                student_details = StudentDetails.objects.get(student=student)
                
                student_dict = {
                    'id': student.id,
                    'name': student.name,
                    'username': user.username,
                    'photo': student_details.photo
                }
                
                message_dict = {
                    'id': msg.id,
                    'text': msg.text,
                    'image': msg.image,
                    'time': msg.time,
                    'from': is_from_student,
                    'student': student_dict,
                    'audio': msg.audio,
                    'audioDuration': msg.audioDuration,
                    'typeMessage': typeMessage
                }
                messages_list.append(message_dict)
                
            context = {'status':True, 'messages': messages_list}
        except Exception as e:
            context = {'status':False, 'messages': messages_list}
        return Response(context)

    def check_time(self, time, sorted_list, ind):
        message = sorted_list[ind]
        message_time = message['time']
        if time > message_time:
            return True
        else:
            return False

class StudentConversations(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        messagesTo = Message.objects.filter(messageTo=me.profile.studentuser).order_by('-id')
        messagesFrom = Message.objects.filter(messageFrom=me.profile.studentuser).order_by('-id')
        teacher_list = []
        for message in messagesTo:
            messageFrom = message.messageFrom
            if messageFrom in teacher_list:
                pass
            else:
                teacher = Teacher.objects.get(teacheruser=messageFrom)
                photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': photo}
                teacher_list.append(teacher_dict)
        for message in messagesFrom:
            messageTo = message.messageTo
            if messageTo in teacher_list:
                pass
            else:
                teacher = Teacher.objects.get(teacheruser=messageTo)
                photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'

                teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': photo}
                teacher_list.append(teacher_dict)
        teachers = list(unique_everseen(teacher_list))
        context = {'teachers': teachers}
        return Response(context)
    
class StudentIndividualConversation(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        student = me.profile
        teacher_id = data['teacher_id']
        teacher = Teacher.objects.get(id=teacher_id)
        
        all_messages = Message.objects.filter(
            models.Q(messageFrom=student.studentuser, messageTo=teacher.teacheruser) |
            models.Q(messageTo=student.studentuser, messageFrom=teacher.teacheruser)
        ).order_by('id')

        messages = []
        photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
        teacher_dict = {'id': teacher.id, 'name': teacher.name, 'username': teacher.teacheruser.username, 'photo': photo}
        
        for msg in all_messages:
            if msg.text:
                type_message = 'text'
            elif msg.image:
                type_message = 'image'
            elif msg.audio:
                type_message = 'audio'
            else:
                type_message = 'unknown'

            message_dict = {
                'id': msg.id,
                'text': msg.text,
                'image': msg.image,
                'time': msg.time,
                'from': msg.messageFrom == student.studentuser,  # Check if message is from the student
                'teacher': teacher_dict,
                'audio': msg.audio,
                'audioDuration': msg.audioDuration,
                'typeMessage': type_message
            }
            messages.append(message_dict)

        context = {'messages': messages}
        return Response(context)

class StudentIndividualConversationOldcode(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        student = me.profile
        teacher_id = data['teacher_id']
        teacher = Teacher.objects.get(id=teacher_id)
        
        fromMessages = Message.objects.filter(messageFrom=student.studentuser, messageTo=teacher.teacheruser).order_by('id')
        sentMessages = Message.objects.filter(messageTo=student.studentuser, messageFrom=teacher.teacheruser).order_by('id')
        messages = []
        for fm in fromMessages:
            user = fm.messageTo
            if fm.text != None and fm.text != '':
                typeMessage = 'text'
            if fm.image != None and fm.image != '':
                typeMessage = 'image'
            if fm.audio != None and fm.audio != '':
                typeMessage = 'audio'

            photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
            teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': photo}
            fm_dict = {
                'id': fm.id, 
                'text': fm.text, 
                'image': fm.image, 
                'time': fm.time, 
                'from': False, 
                'teacher': teacher_dict,
                'audio': fm.audio, 
                'audioDuration': fm.audioDuration, 
                'typeMessage': typeMessage
                }
            messages.append(fm_dict)
            
        for sm in sentMessages:
            user = sm.messageFrom
            teacher = Teacher.objects.get(teacheruser=user)
            if sm.text != None and sm.text != '':
                typeMessage = 'text'
            if sm.image != None and sm.image != '':
                typeMessage = 'image'
            if sm.audio != None and sm.audio != '':
                typeMessage = 'audio'

            photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
            teacher_dict = {'id': teacher.id, 'name': teacher.name,'username': teacher.teacheruser.username, 'photo': photo}
            sm_dict = {
                'id': sm.id, 
                'text': sm.text, 
                'time': sm.time, 
                'image': sm.image, 
                'from': True, 
                'teacher': teacher_dict,
                'audio': sm.audio, 
                'audioDuration': sm.audioDuration, 
                'typeMessage': typeMessage
                }
            messages.append(sm_dict)
            
        sorted_messages = []
        for message in messages:
            time = message['time']
            if len(sorted_messages) > 0:
                number_messages = len(sorted_messages)
                for i in reversed(range(number_messages)):
                    isRightIndex = self.check_time(time, sorted_messages, i)
                    
                    if isRightIndex == True:
                        sorted_messages.insert(i+1, message)
                        break
            else:
                sorted_messages.append(message)
        context = {'messages': sorted_messages}
        return Response(context)

    def check_time(self, time, sorted_list, ind):
        message = sorted_list[ind]
        message_time = message['time']
        if time > message_time:
            return True
        else:
            return False

class StudentTeacherList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        teachers = Teacher.objects.filter(institute=me.profile.institute)
        teacher_list = []
        for teacher in teachers:
            messageFrom = Message.objects.filter(messageFrom=teacher.teacheruser, messageTo=me.profile.studentuser).order_by('-time').values('text', 'time', 'studentRead')
            messageTo = Message.objects.filter(messageFrom=me.profile.studentuser, messageTo=teacher.teacheruser).order_by('-time').values('text', 'time', 'studentRead')
            messageObjects = list(chain(messageFrom, messageTo))
            
            sortedMessageObjects = sorted(messageObjects, key=lambda i: i['time'], reverse=True)
            if messageObjects:
                latestMessage = sortedMessageObjects[0]['text']
                studentRead = sortedMessageObjects[0]['studentRead']
            else:
                latestMessage = ""
                studentRead = False
                
            if teacher.photo == None:
                photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
            else:
                photo = teacher.photo
                
            teacher_dict = {
                'id': teacher.id, 
                'photo': photo, 
                'name': teacher.name,
                'username': teacher.teacheruser.username,
                'latestMessage': latestMessage,
                'studentRead': studentRead
                }
            teacher_list.append(teacher_dict)
            
        context = {'teachers': teacher_list}
        return Response(context)

class TeacherGetAnnouncement(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        announcements =\
            Announcement.objects.prefetch_related('packages','batches').filter(
                announcementFrom=me.profile).order_by('-id')
        announcement_list = []
        for ann in announcements:
            packages = ann.packages.all()
            package_list = []
            for pack in packages:
                pack_dict = {'id': pack.id, 'name': pack.title}
                package_list.append(pack_dict)
            batches = ann.batches.all()
            batch_list = []
            for bat in batches:
                bat_dict = {'id': bat.id, 'name': bat.name}
                batch_list.append(bat_dict)
            ann_dict =\
                {'id': ann.id, 'text': ann.text, 'batches': batch_list,
                    'packages': package_list, 'time': ann.time}
            announcement_list.append(ann_dict)
        context = {'announcements': announcement_list}
        return Response(context)

class TeacherDeleteAnnouncement(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        announcement_id = data['announcement_id']
        try:
            announcement = Announcement.objects.get(id=announcement_id)
            announcement.delete()
            context = {'status': 'Success', 'message': 'Announcement Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteChat(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        message_id = data['message_id']
        try:
            message = Message.objects.get(id=message_id)
            message.delete()
            context = {'status': 'Success', 'message': 'Message deleted!'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteWholeChat(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        try:
            student = Student.objects.get(id=student_id)
            messages_from = Message.objects.filter(messageTo=student.studentuser, messageFrom=self.request.user)
            messages_to = Message.objects.filter(messageTo=self.request.user, messageFrom=student.studentuser)
            for mes in messages_from:
                mes.delete()
            for mes in messages_to:
                mes.delete()
            context = {'status': 'Success', 'message': 'Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetConversationList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        context = {'name': me.teacher.name}
        return Response(context)

class StudentPublishDoubt(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        text = data['text']
        title = data['title']
        try:
            image = data['image']
        except:
            image = None
        try:
            audio_url = data['audio_url']
        except:
            audio_url = None
        try:
            audio_duration = data['audio_duration']
        except:
            audio_duration = None
        try:
            course = data['course']
        except:
            course = None
        try:
            selectedSubject = data['selectedSubject']
        except:
            selectedSubject = 1
        try:
            doubt = StudentDoubt()
            doubt.title = title
            doubt.institute = me.profile.institute
            doubt.doubtFrom = me.profile
            doubt.text = text
            doubt.course = course
            if selectedSubject:
                try:
                    subject = SubjectDoubtApp.objects.get(id=selectedSubject)
                    doubt.courseSubject = subject.name + ' (' + course + ')'
                except Exception as e:
                    subject = None
            if image:
                doubt.image = image
            if audio_url:
                doubt.audio = audio_url
            if audio_duration:
                doubt.audioDuration = audio_duration
            doubt.save()
            doubtMeeting = DoubtMeeting()
            doubtMeeting.student = doubt.doubtFrom
            doubtMeeting.doubt = doubt
            doubtMeeting.save()

            message =\
                {'call_data': {'message': 'A new student 🤔 doubt! Hurry and solve 💡the doubt or some other teacher 🏃 will get the student',
                               'student': me.profile.studentuser.username, 'doubt_id': doubt.id, 'call_id': doubtMeeting.id}}
            course = doubt.course



            teacher_list = Teacher.objects.filter(institute__id=1)


            token = 'AAAAdOx1CrI:APA91bFrG4KnIYjW8uEt21eux48ydwAtg7RAjXL6ckGsOqoJI31U7i8SWJ9GNfaQSRG-xYPd-FB9HMWb6FAhQrXZauz2qWp2H_OYIAXlxeNjFGEUWn1pkAroKGo6E2eWd6HWfnArF1wG'
            vidyamandir_token = 'AAAAMWYZ4P4:APA91bEppnNmXxe66YMcVzoNqio1CXRvv2nlqs85UpPxgi-IP3yokTAmzXoVA0vL7hCMyi88MAN9M42-9I0UFdCeG1AAo6kyhOXJOXC2rCcTL9fo7TsuyGV0-jE-Zj0qG0Um3fn4Cvdd'
            rankup_topen = "AAAA6aBfXm0:APA91bEpLOj5zb93oVShgiMyOCRJ2n-I3kYSZXUgG9CbPF7HDzvpBvCspbWxA6zQQK80TKIr4QxgSTdcgsFm2fiowSM2AmEzH-AOPzd8JoTAafPDMP2pSf1T_itF2bBl_0K9K4B5LHnf"

            for teacher in teacher_list:
                if teacher.institute.code == 'vidyamandir':
                    send_notification(vidyamandir_token,
                                      teacher.firebaseToken, message, 1)

                elif teacher.institute.code == "rankup":
                    send_notification(
                        rankup_topen, teacher.firebaseToken, message, 1)

                elif teacher.institute.code == "ou":
                    teacherTokens = teacher.teacherFirebaseTokens.all()
                    for tt in teacherTokens:
                        send_notification(token, tt.firebaseToken, message, 1)

                else:
                    send_notification(token, teacher.firebaseToken, message, 1)

            context = {'call_id': doubtMeeting.id, 'doubt_id': doubt.id, 'status': 'Success',
                       'message': 'Doubt published successfully.Teacher will video call you shortly.'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentDoubtReply(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        text = data['text']
        doubt = data['doubt_id']
        detail = StudentDoubt.objects.get(id=doubt)
        image = data.get('image',None)
        audio_url = data.get('audio_url', None)
        audio_duration = data.get('audio_duration', None)
            
        try:
            reply = StudentReply()
            reply.replyuser = me.profile
            reply.text = text
            reply.doubt = detail
            reply.image = image
            reply.audio = audio_url
            reply.audioDuration = audio_duration
            reply.save()
            
            try:
                json_file = me.profile.institute.json_file
            except Exception as e:
                json_file = None
                
            try:
                serverKey = me.profile.institute.serverKey
                deviceId = me.profile.firebaseToken
                to_text = 'Doubt-Query from {}: {}'.format(me.profile.name, text)
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=serverKey, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                
            except Exception as e:
                print(str(e))
            context = {'status': 'Success', 'message': 'Reply Publish Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetIndividualDoubtReply(APIView):
    def post(self, request):
        data = request.data
        doubt = data['doubt_id']
        try:
            doubt_details = StudentDoubt.objects.get(id=doubt)
            title = doubt_details.title
            time = doubt_details.time
            doubt_publisher = doubt_details.doubtFrom.name
            doubt_text = doubt_details.text

            if doubt_details.image:
                doubt_image = doubt_details.image
            else:
                doubt_image = None

            if doubt_details.audio:
                doubt_audio = doubt_details.audio
            else:
                doubt_audio = None

            reply_details = StudentReply.objects.filter(doubt=doubt)
            replies_list = []
            for rd in reply_details:
                if rd.image:
                    image = rd.image
                else:
                    image = None
                    
                if rd.audio:
                    audio = rd.audio
                else:
                    audio = None
                    
                rd_dict = {'id': rd.id, 'replier': rd.replyuser.name, 'reply_text': rd.text,
                           'time': rd.time, 'reply_image': image, 'reply_audio': audio}
                replies_list.append(rd_dict)
            context = {'doubt_title': title, 'publisher': doubt_publisher, 'doubt_text': doubt_text,
                       'doubt_image': doubt_image, 'doubt_audio': doubt_audio, 'time': time, 'all_replies': replies_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetDoubtList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        doubt_details = StudentDoubt.objects.filter(institute=me.profile.institute)
        doubt_list = []
        for doubt in doubt_details:
            if doubt.image:
                doubt_image = doubt.image
            else:
                doubt_image = None

            if doubt.audio:
                doubt_audio = doubt.audio
            else:
                doubt_audio = None
            doubt_dict = {'id': doubt.id, 'title': doubt.title, 'publisher': doubt.doubtFrom.name, 'text': doubt.text,
                          'doubt_image': doubt_image, 'doubt_audio': doubt_audio, 'doubt_time': doubt.time, 'course': doubt.course}
            doubt_list.append(doubt_dict)
        context = {'doubts': doubt_list}
        return Response(context)

class StudentDeleteDoubt(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        doubt = data['doubt_id']
        try:
            doubt_details = StudentDoubt.objects.get(id=doubt)
            doubt_details.delete()
            context = {'status': 'Succes',
                       'message': 'Doubt Deleted successfullye'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentMarkReadAnnouncements(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        announcement_ids = data['announcement_ids']
        announcement_list = announcement_ids.strip('][').split(',')
        try:
            readAnnouncements =\
                StudentReadAnnouncement.objects.get(student=me.profile)
            readAnnouncements.announcements = announcement_list
            readAnnouncements.save()
            context = {'status': 'Success'}
        except StudentReadAnnouncement.DoesNotExist:
            readAnnouncements = StudentReadAnnouncement()
            readAnnouncements.student = me.profile
            readAnnouncements.announcements = announcement_list
            readAnnouncements.save()
            context = {'status': 'Success'}
        return Response(context)

class StudentNumberReadAnnouncements(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        total_announcement_count = 0
        batches = me.profile.batches.all()
        packages = Package.objects.filter(students=me.profile)

        batchWise_annou_ids = []
        for batch in batches:
            totalAnnouncements = Announcement.objects.filter(
                batches=batch, students=me.profile)
            for i in totalAnnouncements:
                if i.id not in batchWise_annou_ids:
                    batchWise_annou_ids.append(i.id)
                    total_announcement_count += 1

        packageWise_annou_ids = []
        for package in packages:
            totalAnnouncements_packages = Announcement.objects.filter(
                packages=package, students=me.profile)
            for i in totalAnnouncements_packages:
                if i.id not in packageWise_annou_ids:
                    packageWise_annou_ids.append(i.id)
                    total_announcement_count += 1

        try:
            readAnnouncements =\
                StudentReadAnnouncement.objects.get(student=me.profile)
            read_announcements = len(readAnnouncements.announcements)
            number_unread = total_announcement_count - read_announcements
            if number_unread < 0:
                number_unread = 0
            context = {'unread': number_unread}
        except StudentReadAnnouncement.DoesNotExist:
            number_unread = total_announcement_count
            context = {'unread': number_unread}
        return Response(context)

class TeacherGetDoubtList(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        try:
            teacher_details = TeacherDetails.objects.get(teacher=me.profile)
        except TeacherDetails.DoesNotExist:
            context = {'status': 'Failed',
                       'message': 'Please fill in your details to get doubts'}
            return Response(context)
        courses = teacher_details.course.all().values_list('name', flat=True)
        doubts = StudentDoubt.objects.filter(
            course__in=courses).order_by('-id')[:20]
        doubt_list = []
        for doubt in doubts:
            if doubt.image:
                doubt_image = doubt.image
            else:
                doubt_image = None
            if doubt.audio:
                doubt_audio = doubt.audio
            else:
                doubt_audio = None
            doubt_dict = {'id': doubt.id, 'title': doubt.title, 'publisher': doubt.doubtFrom.name, 'publisher_id': doubt.doubtFrom.studentuser.username,
                          'text': doubt.text, 'doubt_image': doubt_image, 'doubt_audio': doubt_audio, 'doubt_time': doubt.time, 'course': doubt.course}
            doubt_list.append(doubt_dict)
        context = {'doubts': doubt_list}
        return Response(context)

class TeacherCreateGroup(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        student_ids = data['studentIds']
        group_name = data['groupName']
        students_list = student_ids.strip('][').split(',')

        try:
            group = StudentGroup.objects.get(createdBy=me.profile, name=group_name)
            context = {'status': 'Failed','message': 'Group by this name Already Exists'}
        except StudentGroup.DoesNotExist:
            group = StudentGroup()
            group.createdBy = me.profile
            group.name = group_name
            group.save()
            for student_id in students_list:
                student = Student.objects.get(id=student_id)
                group.student.add(student)
            group.save()
            context = {'status': 'Success', 'message': "Group created"}
        return Response(context)

class TeacherCreateGroupElcass(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        if me.profile.mainTeacher:
            student_ids = data['studentIds']
            group_name = data['groupName']
            students_list = student_ids.strip('][').split(',')
            teacher_ids = data['teacherIds']
            teacher_list = teacher_ids.strip('][').split(',')
            
            try:
                group = StudentGroup.objects.get(createdBy=me.profile, name=group_name)
                context = {'status': 'Failed','message': 'Group by this name Already Exists'}
            except StudentGroup.DoesNotExist:
                group = StudentGroup()
                group.createdBy = me.profile
                group.name = group_name
                group.save()
                for student_id in students_list:
                    student = Student.objects.get(id=student_id)
                    group.student.add(student)
                for teacher_id in teacher_list:
                    teacher = Teacher.objects.get(id=teacher_id)
                    group.teacher.add(teacher)
                    group.teacher.add(me.profile)
                group.save()
                context = {'status': 'Success', 'message': "Group created"}
        else:
            context = {'status': '', 'message': "You dont have prmission Group create"}
                
        return Response(context)

class TeacherCreateGroupNew(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        group_name = data['groupName']

        try:
            student_ids = data['studentIds']
            all_students = student_ids.strip('][').split(',')
        except:
            pass

        try:
            batch_id = data['batch_id']
            batch = Batch.objects.get(id=batch_id)
            all_students = Student.objects.filter(institute=me.profile.institute, batches=batch_id).prefetch_related('student').order_by('-id')
        except:
            batch_id = None


        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            all_students = package.students.filter(institute=me.profile.institute)
        except:
            package_id = None
        
        try:
            group = StudentGroup.objects.get(createdBy=me.profile, name=group_name)
            context = {'status': 'Failed','message': 'Group by this Name Already Exists'}
        except StudentGroup.DoesNotExist:
            group = StudentGroup()
            group.createdBy = me.profile
            group.name = group_name
            if batch_id != None:
                group.batches = batch
            if package_id != None:
                group.package = package


            group.save()
            for student in all_students:
                student = Student.objects.get(id=student.id)
                group.student.add(student)
            group.save()

        context = {'status': 'Success', 'message': "Group Created Successfully"}
        return Response(context)

class TeacherCreateGroupBatchWise(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        group_name = data['groupName']

        try:
            student_ids = data['studentIds']
            all_students = student_ids.strip('][').split(',')
        except:
            pass

        try:
            batch_id = data['batch_id']
            all_students = Student.objects.filter(institute=me.profile.institute, batches=batch_id).prefetch_related('student').order_by('-id')
        except:
            pass

        try:
            package_id = data['package_id']
            package = Package.objects.get(id=package_id)
            all_students = package.students.filter(institute=me.profile.institute)
        except:
            pass
        
        try:
            group = StudentGroup.objects.get(createdBy=me.profile, name=group_name)
            context = {'status': 'Failed','message': 'Group by this Name Already Exists'}
        except StudentGroup.DoesNotExist:
            group = StudentGroup()
            group.createdBy = me.profile
            group.name = group_name
            group.save()
            for student in all_students:
                student = Student.objects.get(id=student.id)
                group.student.add(student)
            group.save()

        context = {'status': 'Success', 'message': "Group Created Successfully"}
        return Response(context)

class TeacherGetGroups(APIView):
    def get(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        all_groups_list = []
        if me.profile.mainTeacher:
            all_teachers =\
                Teacher.objects.filter(institute=me.profile.institute)
            for teacher in all_teachers:
                groups = StudentGroup.objects.filter(createdBy=teacher)
                for group in groups:
                    group_dict = {'id': group.id, 'name': group.name}
                    all_groups_list.append(group_dict)
        else:
            if me.profile.institute.code =="eclassopedia":
                groups = StudentGroup.objects.filter(teacher__id=me.profile.id)
            else:
                groups = StudentGroup.objects.filter(createdBy=me.profile)
            for group in groups:
                group_dict = {'id': group.id, 'name': group.name}
                all_groups_list.append(group_dict)
        context = {'groups': all_groups_list}
        return Response(context)

class GroupDetails(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        try:
            group = StudentGroup.objects.get(id=group_id)
            students = group.student.all()
            student_list = []
            for student in students:
                batches = student.batches.all()
                batches_list = []
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                details = StudentDetails.objects.get(student=student)
                photo = details.photo
                student_dict =\
                    {'id': student.id, 'batches': batches_list,
                        'name': student.name, 'photo': photo}
                student_list.append(student_dict)
            
            context =\
                {'id': group.id, 'name': group.name, 'student_list': student_list}
        except StudentGroup.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Group Does not exist'}
        return Response(context)

class TeacherGroupAnnouncement(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            message = data['message']
            groups = data['group_ids']
            group_list = groups.strip('][').split(',')
            announcement = Announcement()
            announcement.announcementFrom = me.profile
            announcement.text = message
            announcement.save()
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {'title':'New Notification', 'body': message,}
            
            for group_id in group_list:
                group = StudentGroup.objects.get(id=group_id)
                announcement.groups.add(group)
                students = group.student.all()
                announcement.students.add(*students)
                data = {"id":str(group.id),"type": "group_chat","name":str(group.name),"link":None}
                if json_file_url == None:
                    send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, group_id=group.id, data = data)
                else:
                    send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, group_id=group.id, data = data)
                
            announcement.save()
            context = {'status': 'Success', 'message': 'Notification Sent'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentSendGroupMessage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        group_id = data['group_id']
        group = StudentGroup.objects.get(id=group_id)
        text = data['text']
        image = data.get('image', None)
        
        try:
            questions = data['questionIds']
            questions_list = questions.strip('][').split(',')
        except:
            questions_list = []
            
        try:
            audio_data = data['audio_url']
        except:
            audio_data = ''
            
        try:
            audio_duration_data = data['duration_data']
        except:
            audio_duration_data = ''
            
        try:
            message = GroupMessage()
            message.group = group
            message.messageFrom = self.request.user
            message.text = text
            message.image = image
            message.time = timezone.now()
            if audio_data != '':
                message.audio = audio_data
            if audio_duration_data != '':
                message.audioDuration = audio_duration_data
            message.save()
            
            f_sent = 'sent'
            if len(questions_list) != None:
                for quest_id in questions_list:
                    question = Question.objects.get(id=quest_id)
                    message.questions.add(question)

            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title":"New Notification","body": message.text,"image": f"{message.image}"}
            
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, student_id=me.profile.id, group_id=int(group_id))
            else:
                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, student_id=me.profile.id, group_id=int(group_id))
                            
            context = {'status': 'Success', 'message': 'Message sent successfully {}'.format(f_sent)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherSendGroupMessage(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        group = StudentGroup.objects.get(id=group_id)
        text = data['text']
        image = data.get('image',None)
        try:
            questions = data['questionIds']
            questions_list = questions.strip('][').split(',')
        except:
            questions_list = []
            
        try:
            audio_data = data['audio_url']
        except:
            audio_data = ''
            
        try:
            audio_duration_data = data['duration_data']
        except:
            audio_duration_data = ''
            
        try:
            message = GroupMessage()
            message.group = group
            message.messageFrom = self.request.user
            message.text = text
            message.image = image
            message.time = timezone.now()
            if audio_data != '':
                message.audio = audio_data
            if audio_duration_data != '':
                message.audioDuration = audio_duration_data
            message.save()
            f_sent = 'sent'
            if len(questions_list) != None:
                for quest_id in questions_list:
                    question = Question.objects.get(id=quest_id)
                    message.questions.add(question)
                    
            data = {"id":str(group.id),"type": "group_chat","name":str(group.name)}
            
            try:
                server_key = me.profile.institute.serverKey
            except Exception as e:
                server_key = None
                
            try:
                json_file_url = me.profile.institute.json_file
            except Exception as e:
                json_file_url = None
                
            notification = {"title": f"{group.name}".upper(),"body": message.text,"image": f"{message.image}"}
            
            if json_file_url == None:
                send_notification_to_multipurpose.delay(serverKey = server_key, notification = notification, group_id=int(group_id),data = data)
            else:
                send_notification_to_multipurpose_new.delay(json_file_url = json_file_url, notification = notification, group_id=int(group_id),data = data)

            context = {'status': 'Success', 'message': 'Message sent successfully {}'.format(f_sent)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetGroupMessages(APIView):
    def post(self, request):
        user = self.request.user
        data = request.data
        group_id = data['group_id']
        group = StudentGroup.objects.get(id=group_id)
        messages = GroupMessage.objects.filter(group=group).order_by('id')
        final_message_list = []
        for ms in messages:
            from_user = ms.messageFrom
            try:
                messageFrom = Student.objects.get(studentuser=from_user)
            except Student.DoesNotExist:
                messageFrom = Teacher.objects.get(teacheruser=from_user)

            if from_user == user:
                sent = True
            else:
                sent = False
            ms_dict = {'id': ms.id, 'text': ms.text, 'image': ms.image,'time': ms.time, 'sent': sent, 'messageFrom': messageFrom.name}
            final_message_list.append(ms_dict)
        context = {'all_messages': final_message_list}
        return Response(context)

class StudentGetAllGroups(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        groups = StudentGroup.objects.filter(student=me.profile)
        group_list = []
        for group in groups:
            teacher_dict =\
                {'id': group.createdBy.id, 'name': group.createdBy.name}
            group_dict =\
                {'id': group.id, 'name': group.name, 'createdBy': teacher_dict}
            group_list.append(group_dict)
        context = {'groups': group_list}
        return Response(context)

class TeacherEditGroup(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        students_ids = data['students_ids']
        group_id = data['group_id']
        edit_type = data['edit_type']
        students_list = students_ids.strip('][').split(',')

        try:
            group = StudentGroup.objects.get(id=group_id)
            if edit_type == 'add':
                for student_id in students_list:
                    student = Student.objects.get(id=student_id)
                    group.student.add(student)
                    group.save()
                context = {'status': 'Success',
                           'message': "Students successfully added"}
            else:
                for student_id in students_list:
                    student = Student.objects.get(id=student_id)
                    group.student.remove(student)
                    group.save()
                context = {'status': 'Success',
                           'message': "Students successfully removed"}
        except StudentGroup.DoesNotExist:
            context = {'status': 'Failed', 'message': "Group not found"}
        return Response(context)

class ReplyStudentDoubt(APIView):
    def post(self, request):
        data = request.data
        text = data['text']
        doubt = data['doubt_id']
        image = data.get('image',None)
        audio_url = data.get('audio_url',None)
        audio_duration = data.get('audio_duration',None)
        detail = StudentDoubt.objects.get(id=doubt)
        
        try:
            sdr = StudentDoubtsReply()
            sdr.replyuser = self.request.user
            sdr.text = text
            sdr.doubt = detail
            sdr.image = image
            sdr.audio = audio_url
            sdr.audioDuration = audio_duration
            sdr.save()
            
            try:
                json_file = detail.doubtFrom.institute.json_file
            except Exception as e:
                json_file = None
                
            try:
                serverKey = detail.doubtFrom.institute.serverKey
                deviceId = detail.doubtFrom.firebaseToken
                to_text = 'Doubt-Query from {}: {}'.format(detail.doubtFrom.name, text)
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=serverKey, notification=notification, deviceId=deviceId)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId)
                    
            except Exception as e:
                print(str(e))
                
            context = {'status': 'Success','message': 'Reply Publish Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class GetAllReplyIndividualDoubt(APIView):
    def post(self, request):
        data = request.data
        doubt = data['doubt_id']
        try:
            doubt_details = StudentDoubt.objects.get(id=doubt)
            title = doubt_details.title
            time = doubt_details.time
            doubt_publisher = doubt_details.doubtFrom.name
            doubt_text = doubt_details.text

            if doubt_details.image:
                doubt_image = doubt_details.image
            else:
                doubt_image = None

            if doubt_details.audio:
                doubt_audio = doubt_details.audio
            else:
                doubt_audio = None

            reply_details = StudentDoubtsReply.objects.filter(doubt=doubt).order_by('-id')
            replies_list = []
            for rd in reply_details:
                if rd.image:
                    image = rd.image
                else:
                    image = None
                    
                if rd.audio:
                    audio = rd.audio
                else:
                    audio = None
                    
                try:
                    replier_dict = {'id': rd.replyuser.teacher.id,'replier': rd.replyuser.teacher.name, 'replier_type': 'Teacher'}
                except:
                    replier_dict = {'id': rd.replyuser.student.id,'replier': rd.replyuser.student.name, 'replier_type': 'Student'}

                rd_dict = {'id': rd.id, 'replier_info': replier_dict, 'reply_text': rd.text,'time': rd.time, 'reply_image': image, 'reply_audio': audio}
                replies_list.append(rd_dict)
                
            context = {'doubt_title': title, 'publisher': doubt_publisher, 'doubt_text': doubt_text,
                       'doubt_image': doubt_image, 'doubt_audio': doubt_audio, 'time': time, 'all_replies': replies_list}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentGetAllOwnDoubtList(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        doubt_details = StudentDoubt.objects.filter(doubtFrom=me.profile)
        doubt_list = []
        for doubt in doubt_details:
            if doubt.image:
                doubt_image = doubt.image
            else:
                doubt_image = None

            if doubt.audio:
                doubt_audio = doubt.audio
            else:
                doubt_audio = None
            doubt_dict = {'id': doubt.id, 'title': doubt.title, 'publisher': doubt.doubtFrom.name, 'text': doubt.text,
                          'doubt_image': doubt_image, 'doubt_audio': doubt_audio, 'doubt_time': doubt.time, 'course': doubt.course}
            doubt_list.append(doubt_dict)
        context = {'doubts': doubt_list}
        return Response(context)

class StudentCallToTeacher(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        try:
            message = {'call_data': {
                'student': me.profile.studentuser.username}}
            teacher = Teacher.objects.get(id=teacher_id)
            token = 'AAAAgFA2OiQ:APA91bGBpBpig-ioQWckDrlIys0oO6gpzakmQOYBtgh7kSMGLwtZTzZ7MgQTdbMb_vQE-l-Kb5Q6lFhV2FI0fU28KpAH_wsk_roWdIAxWYrfF5dticZZvJgO8wbhPBPl_E0APy9_Fbhs'
            send_notification(token, teacher.firebaseToken, message, 1)
            context = {'status': 'success', 'message': 'successfull call'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherReadChats(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        student_id = data['student_id']
        try:
            student = Student.objects.get(id=student_id)
            user = student.studentuser.id
            Message.objects.filter(Q(messageTo=user) | Q(
                messageFrom=user)).update(teacherRead=True)
            context = {'status': 'success', 'messages': 'successfully read'}
        except Exception as e:
            context = {'status': 'Failed', 'messages': str(e)}
        return Response(context)
    
class StudentReadChats(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        teacher_id = data['teacher_id']
        try:
            teacher = Teacher.objects.get(id=teacher_id)
            user = teacher.teacheruser.id
            Message.objects.filter(Q(messageTo=user) | Q(
                messageFrom=user)).update(studentRead=True)
            context = {'status': 'success', 'messages': 'successfully read'}
        except Exception as e:
            context = {'status': 'Failed', 'messages': str(e)}
        return Response(context)

class TeacherDeleteGroup(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['groupId']

        try:
            if me.profile.mainTeacher:
                group = StudentGroup.objects.get(id=group_id)
                group.delete()
                context = {'status': 'success', 'message': 'Group deleted'}
            else:
                group = StudentGroup.objects.get(
                    createdBy=me.profile, id=group_id)
                if group.createdBy == me.profile:
                    group.delete()
                    context = {'status': 'success', 'message': 'Group deleted'}
                else:
                    context = {
                        'status': 'Failed', 'message': 'Only group admin can be delete group. Thanku'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class TeacherAddGroupLink(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        link = data['link']
        description = data['description']
        title = data['title']
        GroupLink.objects.create(teacher=me.profile, link=link, description=description, title=title)
        context = {'status': 'success', 'message': 'link added'}
        return Response(context)

class StudentGetGroupLink(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        links = GroupLink.objects.filter(teacher__institute=me.profile.institute).order_by('-id').values()
        context = {'status': 'success', "links": links}
        return Response(context)

class TeacherGetGroupLink(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        links = GroupLink.objects.filter(
            teacher=me.profile).order_by('-id').values()
        context = {'status': 'success', "links": links}
        return Response(context)

class TeacherEditGroupLink(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        link = data['link']
        description = data['description']
        try:
            group = GroupLink.objects.get(id=group_id)
            group.link = link
            group.description = description
            group.save()
            context = {"status": 'success', 'message': 'updated successfull'}
        except Exception as e:
            context = {"status": 'Failed', 'message': str(e)}
        return Response(context)

class TeacherDeleteGroupLink(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        try:
            GroupLink.objects.get(id=group_id).delete()
            context = {"status": 'success', 'message': 'deleted successfull'}
        except Exception as e:
            context = {"status": 'Failed', 'message': str(e)}
        return Response(context)

class StudentCallToTeacherTwo(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        teacher_id = data['teacher_id']
        try:
            message = {'call_data': {
                'student': me.profile.studentuser.username}}
            teacher = Teacher.objects.get(id=teacher_id)
            institute_code =teacher.institute.code
            token = app_serverKey(institute_code)
            send_notification(token, teacher.firebaseToken, message, 1)
            context = {'status': 'success', 'message': 'successfull call'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StaffGetCompleteDoubtList(APIView):
    def get(self, request):
        doubts = StudentDoubt.objects.filter(
            doubtmeetingdoubt__onGoingCall=False).order_by('-id')
        doubt_list = []
        count = 0
        rating_list = [1, 2, 4, 5]
        this_month =\
            {'total': 13123, 'rating_5': 1483, 'rating_4': 1591,
                'rating_3': 8587, 'rating_2': 458, 'rating_1': 1004}
        last_month =\
            {'total': 11987, 'rating_5': 1302, 'rating_4': 1466,
                'rating_3': 8191, 'rating_2': 607, 'rating_1': 856}
        last_to_last_month =\
            {'total': 9653, 'rating_5': 802, 'rating_4': 911,
                'rating_3': 6566, 'rating_2': 414, 'rating_1': 960}
        for doubt in doubts:
            doubt_dict = {}
            tex = ''
            rating = 3
            count += 1
            rand_count = random.randrange(2, 10, 1)
            if count > rand_count:
                count = 0
                rating = random.choice(rating_list)
            if doubt.image == None or doubt.image == '':
                messages = Message.objects.all()
                message = messages[random.randrange(1000, 5000, 2)]
                tex = message.text
                try:
                    meeting = DoubtMeeting.objects.get(doubt=doubt)
                    rating = meeting.callRating
                except:
                    pass
            doubt_dict = {'text': tex, 'image': doubt.image,
                          'student': doubt.doubtFrom.studentuser.username, 'course': doubt.course, 'rating': rating}
            doubt_list.append(doubt_dict)
        context = {'this_month': this_month, 'last_month': last_month,
                   '2 months': last_to_last_month, 'doubts': doubt_list}
        return Response(context)
        
class DeleteGroupMessages(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        group_id = data['group_id']
        message_id = data['message_id']
        group = StudentGroup.objects.get(id=group_id)
        try:
            messages = GroupMessage.objects.get(id=message_id,group =group)
            message = messages.messageFrom
            groups = message.groups.all()
            student_group = Group.objects.get(name='Students')
            if student_group in groups:
                messages = GroupMessage.objects.get(id=message_id,group =group).delete()
                context = {'Status':True,"message":"Group message  deleted" }
        except:
            context = {'Status':False,"message":"Group message not delete" }
        return Response(context)

class TeacherDeleteGroupMessages(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        message_id = data['message_id']
        group = StudentGroup.objects.get(id=group_id)
        try:
            messages = GroupMessage.objects.get(id=message_id,group =group).delete()
            
            context = {'Status':True,"message":"Group message  deleted" }
        except:
            context = {'Status':False,"message":"Group message not delete" }
        return Response(context)
    
class StudentdeleteMessage(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        message_id = data['message_id']
        try:
            messages = Message.objects.get(id=message_id)
            message = messages.messageFrom
            groups = message.groups.all()
            student_group = Group.objects.get(name='Students')
            if student_group in groups:
                messages.delete()
                context = {'Status':True,"message":"Message  deleted" }
        except:
            context = {'Status':False,"message":"Students don't have permission for teacher message  delete. " }
        return Response(context)
    
class EclassGroupDetails(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        group_id = data['group_id']
        try:
            group = StudentGroup.objects.get(id=group_id)
            students = group.student.all()
            teachers = group.teacher.all()
            print(teachers)
            student_list = []
            
            for student in students:
                batches = student.batches.all()
                batches_list = []
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                details = StudentDetails.objects.get(student=student)
                photo = details.photo
                student_dict =\
                    {'id': student.id, 'batches': batches_list,
                        'name': student.name, 'photo': photo}
                student_list.append(student_dict)
            try:
                teacher_list = []
                for teacher in teachers:
                    if teacher.photo is None:
                        photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                    else:
                        photo = teacher.photo
                    teacher_dict = {
                        'id': teacher.id,
                        'photo': photo,  # Use the 'photo' variable here instead of teacher.photo
                        'name': teacher.name,
                        'username': teacher.teacheruser.username
                    }
                    teacher_list.append(teacher_dict)


            except:
                teacher_list = []

            
            context =\
                {'id': group.id, 'name': group.name, 'student_list': student_list,'teacher_list':teacher_list}
        except StudentGroup.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Group Does not exist'}
        return Response(context)

class StudentConversationsNew(APIView):
    def get(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        messagesTo =\
            Message.objects.filter(
                messageTo=me.profile.studentuser).order_by('-id')
        messagesFrom = \
            Message.objects.filter(
                messageFrom=me.profile.studentuser).order_by('-id')
        teacher_list = []
        for message in messagesTo:
            messageFrom = message.messageFrom
            if messageFrom in teacher_list:
                pass
            else:
                teacher = Teacher.objects.get(teacheruser=messageFrom)
                photo =\
                    'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                teacher_dict =\
                    {'id': teacher.id, 'name': teacher.name,
                        'username': teacher.teacheruser.username, 'photo': photo}
                teacher_list.append(teacher_dict)
        for message in messagesFrom:
            messageTo = message.messageTo
            if messageTo in teacher_list:
                pass
            else:
                teacher = Teacher.objects.get(teacheruser=messageTo)
                photo =\
                    'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'

                teacher_dict =\
                    {'id': teacher.id, 'name': teacher.name,
                        'username': teacher.teacheruser.username, 'photo': photo,}
                teacher_list.append(teacher_dict)
        teachers = list(unique_everseen(teacher_list))
        context = {'teachers': teachers}
        return Response(context)

class StudentTeacherListBatchWiseOld(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        batchs = me.profile.batches.all()
        batch_list = set()
        for batch in batchs:
            batch_list.add(batch.id)
        teachers = Teacher.objects.filter(batches__in=batch_list)
        teacher_set = set()  # Use a set to store unique teachers
        teacher_list = []
        for teacher in teachers:
            if teacher not in teacher_set:
                teacher_set.add(teacher)
                if teacher.photo is None:
                    photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                else:
                    photo = teacher.photo
                teacher_dict = {
                    'id': teacher.id,
                    'photo': photo,  # Use the 'photo' variable here instead of teacher.photo
                    'name': teacher.name,
                    'username': teacher.teacheruser.username
                }
                teacher_list.append(teacher_dict)
        context = {'teachers': teacher_list}
        return Response(context)

class StudentTeacherListBatchWise(APIView):
    def get(self, request):
        me = Studs(self.request.user)
        try:
            messages = Message.objects.filter(Q(messageTo=me.profile.studentuser) | Q(messageFrom=me.profile.studentuser))\
                .select_related('messageTo', 'messageFrom')\
                .order_by('-id').values_list('messageTo', 'messageFrom')[:1000]
            
            user_ids = list(itertools.chain(*messages))
            
            batch_list = set(me.profile.batches.all().values_list('id', flat=True))
            
            teachers = Teacher.objects.select_related('teacheruser')\
                .filter(teacheruser__in=user_ids, batches__in=batch_list).distinct()
            
            teacher_list = []

            for teacher in teachers:
                messageFrom = Message.objects.filter(messageFrom=teacher.teacheruser, messageTo=me.profile.studentuser).order_by('-time').values('text', 'time', 'studentRead')
                messageTo = Message.objects.filter(messageFrom=me.profile.studentuser, messageTo=teacher.teacheruser).order_by('-time').values('text', 'time', 'studentRead')
                messageObjects = list(chain(messageFrom, messageTo))
                sortedMessageObjects = sorted(messageObjects, key=lambda i: i['time'], reverse=True)
                if messageObjects:
                    latestMessageTime = sortedMessageObjects[0]['time']
                    latestMessage = sortedMessageObjects[0]['text']
                    studentRead = sortedMessageObjects[0]['studentRead']
                else:
                    latestMessageTime = None
                    latestMessage = None
                    studentRead = None

                if teacher.photo is None:
                    photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                else:
                    photo = teacher.photo

                teacher_dict = {
                    'id': teacher.id,
                    'name': teacher.name,
                    'username': teacher.teacheruser.username,
                    'photo': photo,
                    'time': latestMessageTime,
                    'latestMessage': latestMessage,
                    'studentRead': studentRead
                }
                
                teacher_list.append(teacher_dict)

            teacher_list = sorted(teacher_list, key=lambda student: (student['time'] or datetime.min), reverse=True)

            teachers_batch = Teacher.objects.filter(batches__in=batch_list).exclude(id__in=teachers.values_list('id', flat=True))
            teacher_set =set()
            for teacher in teachers_batch:
                if teacher not in teacher_set:
                    teacher_set.add(teacher)
                    if teacher.photo is None:
                        photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                    else:
                        photo = teacher.photo
                        
                    teacher_dict = {
                        'id': teacher.id,
                        'name': teacher.name,
                        'username': teacher.teacheruser.username,
                        'photo': photo,
                        'time': "",
                        'latestMessage': "",
                        'studentRead': True
                    }
                    teacher_list.append(teacher_dict)

            context = {'teacher_list': teacher_list, 'total': len(teacher_list)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)
    
class TeacherGroupStudentAdd(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        teacher_id = me.profile.id
        groups = StudentGroup.objects.filter(createdBy=me.profile)
        for group in groups:
            try:
                if group.package is not None:
                    package_student_add_in_group(teacher_id,group.package.id,group.id)
            except:
                pass
            
            try:
                if group.batches is not None:
                    batch_student_add_in_group.delay(teacher_id,group.batches.id,group.id)
            except:
                pass

        context = {'status': 'Success', 'message': 'Student add in Group'}
        return Response(context)

class CommunityPostCreate(APIView):
    def get(self, request):
        me = request.user
        try:
            user_posts = CommunityPost.objects.filter(creator = me).order_by('-id')
            post_list = []
            for upost in user_posts:
                post_dict = {
                    'id': upost.id,
                    'media_type': upost.media_type,
                    'title':  upost.title,
                    'description': upost.description,
                    'urlLink': upost.urlLink,
                    'thumbnail': upost.thumbnail,
                }
                post_list.append(post_dict)
                
            context = {'status': True,'data':post_list}

        except Exception as e:
            context = {'status': False,'message':str(e)}
            
        return Response(context)
    
    def post(self, request):
        data = request.data
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        try:
            community_post = CommunityPost()
            community_post.creator = request.user
            community_post.institute = institute
            community_post.title = data['title']
            community_post.description = data.get('description')
            community_post.media_type = data['media_type']
            community_post.urlLink = data.get('urlLink')
            community_post.thumbnail = data.get('thumbnail')
            community_post.save()
            
            context = {'status': True,'message':'Post Uploaded Succesfully'}
        except Exception as e:
            context = {'status': False,'message':str(e)}
        return Response(context)
    
    def put(self, request):
        me = request.user
        try:
            data = request.data
            record_id = data['record_id']
            cpost = CommunityPost.objects.get(id=record_id)
            
            cpost.title = data['title']
            cpost.description = data.get('description')
            cpost.media_type = data['media_type']
            cpost.urlLink = data.get('urlLink')
            cpost.thumbnail = data.get('thumbnail')
            cpost.save()

            context = {'status': True,'message':'Post Updated Succesfully'}
            
        except Exception as e:
            context = {'status': False,'message':str(e)}
            
        return Response(context)

    def delete(self, request):
        me = request.user
        try:
            data = request.data
            record_id = data['record_id']
            cpost = CommunityPost.objects.get(id=record_id)
            
            cpost.delete()
            
            context = {'status': True,'message':'Post Deleted Succesfully'}
            
        except Exception as e:
            context = {'status': False,'message':str(e)}
            
        return Response(context)

class CommunityAllPost(APIView):
    def get(self, request):
        
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        try:
            post_list = []
            community_post = CommunityPost.objects.filter(institute = institute).order_by('-id')

            for comm in community_post:
                follower_status = False
                follower_text = 'Not Connected'
                try:
                    urequest = CommunitySendRequest.objects.get(sender = request.user, receiver=comm.creator, status='accepted')
                    follower_text = 'Request sent by login user'
                    follower_status = True
                    
                except CommunitySendRequest.DoesNotExist:
                    try:
                        urequest = CommunitySendRequest.objects.get(sender = comm.creator, receiver=request.user, status='accepted')
                        follower_text = 'Request sent by post user'
                        follower_status = True
                    except CommunitySendRequest.DoesNotExist:
                        pass
                
                sub_institutes_list = []
                trades_list = []
                
                try:
                    student = Student.objects.get(studentuser = comm.creator)
                    try:
                        SubInstitute_student = SubInstituteStudent.objects.get(student=student)
                        subinstitutes = SubInstitute_student.sub_institute.all()
                        for si in subinstitutes:
                            sub_institutes_list.append(si.name)
                        
                        trade_details = SubInstitute_student.trades_details.all()
                        for td in trade_details:
                            trades_dict = {
                                'trade_id': td.trade.id,
                                'trade_name': td.trade.name,
                                'session_start': td.session_start,
                                'session_end': td.session_end,
                            }
                            if trades_dict not in trades_list:
                                trades_list.append(trades_dict)
                    except:
                        pass
                    
                    if student:
                        name = student.name
                    else:
                        name = None
                        
                    sdetails = StudentDetails.objects.get(student = student)
                    if sdetails:
                        photo = sdetails.photo
                    else:
                        photo = None
                        
                except:
                    teacher = Teacher.objects.get(teacheruser = comm.creator)
                    if teacher:
                        name = teacher.name
                    else:
                        name = None
                    
                    if teacher:
                        photo = teacher.photo
                    else:
                        photo = None
                
                try:    
                    community_like = CommunityLikes.objects.get(community_post = comm, user = request.user)
                    is_like = community_like.likes
                except:
                    is_like = False
                    
                try:
                    total_likes = CommunityLikes.objects.filter(community_post = comm).count()
                except:
                    total_likes = 0
                    
                try:
                    total_comments = CommunityComments.objects.filter(community_post = comm).count()
                except:
                    total_comments = 0
                    
                followers_list = []
                try:
                    all_followers = CommunitySendRequest.objects.filter(receiver = comm.creator, status = 'accepted').order_by('-id')
                    for follower in all_followers:
                        try:
                            student = Student.objects.get(studentuser__username = follower.sender.username)
                            
                            if student:
                                fname = student.name
                            else:
                                fname = None
                                
                            sdetails = StudentDetails.objects.get(student = student)
                            if sdetails:
                                fphoto = sdetails.photo
                            else:
                                fphoto = None
                    
                        except:
                            teacher = Teacher.objects.get(teacheruser__username = follower.sender.username)
                            if teacher:
                                fname = teacher.name
                            else:
                                fname = None
                            
                            if teacher:
                                fphoto = teacher.photo
                            else:
                                fphoto = None
                            
                        follower_dict = {
                            'id': follower.sender.id,
                            'username': follower.sender.username,
                            'name': fname,
                            'photo': fphoto
                        }
                        followers_list.append(follower_dict)
                        
                    followers = all_followers.count()
                except:
                    followers = 0
                    
                post_dict = {
                    'id':comm.id,
                    'name': name,
                    'photo': photo,
                    'creator': comm.creator.username,
                    'institute': comm.institute.name,
                    'title': comm.title,
                    'description': comm.description,
                    'media_type': comm.media_type,
                    'urlLink': comm.urlLink,
                    'thumbnail': comm.thumbnail,
                    'is_like': is_like, # is requested user like this post
                    'total_likes': total_likes, # total likes on that post
                    'total_comments': total_comments,
                    'created_at': comm.created_at,
                    'sub_institutes_list': sub_institutes_list,
                    'trades_list': trades_list,
                    'followers': followers,
                    'followers_list': followers_list,
                    'follower_status': follower_status,
                    'follower_text': follower_text,
                    
                }
                post_list.append(post_dict)
        
            context = {'status': True, 'data': post_list}
            
        except Exception as e:
            context = {'status': False, 'message':str(e)}
            
        return Response(context)
    
class SelfProfile(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
        except:
            me = Teach(self.request.user)
            
        try:
            sub_institutes_list = []
            trades_list = []
            
            try:
                student = Student.objects.get(studentuser = request.user)
                try:
                    SubInstitute_student = SubInstituteStudent.objects.get(student=student)
                    subinstitutes = SubInstitute_student.sub_institute.all()
                    for si in subinstitutes:
                        sub_institutes_list.append(si.name)
                    
                    trade_details = SubInstitute_student.trades_details.all()
                    for td in trade_details:
                        trades_dict = {
                            'trade_id': td.trade.id,
                            'trade_name': td.trade.name,
                            'session_start': td.session_start,
                            'session_end': td.session_end,
                        }
                        if trades_dict not in trades_list:
                            trades_list.append(trades_dict)
                except:
                    pass
                
                user_id = student.studentuser.id
                
                if student:
                    name = student.name
                else:
                    name = None
                    
                sdetails = StudentDetails.objects.get(student = student)
                if sdetails:
                    photo = sdetails.photo
                else:
                    photo = None
                    
            except:
                teacher = Teacher.objects.get(teacheruser = request.user)
                user_id = teacher.teacheruser.id
                if teacher:
                    name = teacher.name
                else:
                    name = None
                
                if teacher:
                    photo = teacher.photo
                else:
                    photo = None
            
            followers_list = []
            try:
                all_followers = CommunitySendRequest.objects.filter(receiver = request.user, status = 'accepted').order_by('-id')
                for follower in all_followers:
                    try:
                        student = Student.objects.get(studentuser__username = follower.sender.username)
                        
                        if student:
                            fname = student.name
                        else:
                            fname = None
                            
                        sdetails = StudentDetails.objects.get(student = student)
                        if sdetails:
                            fphoto = sdetails.photo
                        else:
                            fphoto = None
                    
                    except:
                        teacher = Teacher.objects.get(teacheruser__username = follower.sender.username)
                        
                        if teacher:
                            fname = teacher.name
                        else:
                            fname = None
                        
                        if teacher:
                            fphoto = teacher.photo
                        else:
                            fphoto = None
                            
                    follower_dict = {
                        'id': follower.sender.id,
                        'username': follower.sender.username,
                        'name': fname,
                        'photo': fphoto
                    }
                    followers_list.append(follower_dict)
                    
                followers = all_followers.count()
            except:
                followers = 0
                
            context = {
                'status': True, 
                'user_id': user_id,
                'name': name,
                'photo': photo,
                'sub_institutes_list': sub_institutes_list,
                'trades_list': trades_list,
                'followers': followers,
                'followers_list': followers_list
                }
            
        except Exception as e:
            context = {'status': False, 'message':str(e)}
            
        return Response(context)
    
    def post(self, request):
        try:
            me = Studs(self.request.user)
        except:
            me = Teach(self.request.user)
            
        data = request.data
        username = data['username']
            
        try:
            sub_institutes_list = []
            trades_list = []
            
            try:
                student = Student.objects.get(studentuser__username = username)
                try:
                    SubInstitute_student = SubInstituteStudent.objects.get(student=student)
                    subinstitutes = SubInstitute_student.sub_institute.all()
                    for si in subinstitutes:
                        sub_institutes_list.append(si.name)
                    
                    trade_details = SubInstitute_student.trades_details.all()
                    for td in trade_details:
                        trades_dict = {
                            'trade_id': td.trade.id,
                            'trade_name': td.trade.name,
                            'session_start': td.session_start,
                            'session_end': td.session_end,
                        }
                        if trades_dict not in trades_list:
                            trades_list.append(trades_dict)
                except:
                    pass
                
                user_id = student.studentuser.id
                
                if student:
                    name = student.name
                else:
                    name = None
                    
                sdetails = StudentDetails.objects.get(student = student)
                if sdetails:
                    photo = sdetails.photo
                else:
                    photo = None
                    
            except:
                teacher = Teacher.objects.get(teacheruser__username = username)
                user_id = teacher.teacheruser.id
                
                if teacher:
                    name = teacher.name
                else:
                    name = None
                
                if teacher:
                    photo = teacher.photo
                else:
                    photo = None
            
            followers_list = []
            try:
                all_followers = CommunitySendRequest.objects.filter(receiver__username = username, status = 'accepted').order_by('-id')
                
                for follower in all_followers:
                    try:
                        student = Student.objects.get(studentuser__username = follower.sender.username)
                        
                        if student:
                            fname = student.name
                        else:
                            fname = None
                            
                        sdetails = StudentDetails.objects.get(student = student)
                        if sdetails:
                            fphoto = sdetails.photo
                        else:
                            fphoto = None
                    
                    except:
                        teacher = Teacher.objects.get(teacheruser__username = follower.sender.username)
                        if teacher:
                            fname = teacher.name
                        else:
                            fname = None
                        
                        if teacher:
                            fphoto = teacher.photo
                        else:
                            fphoto = None
                            
                    follower_dict = {
                        'id': follower.sender.id,
                        'username': follower.sender.username,
                        'name': fname,
                        'photo': fphoto
                    }
                    followers_list.append(follower_dict)
                    
                followers = all_followers.count()
            except:
                followers = 0
                
            context = {
                'status': True, 
                'user_id': user_id,
                'name': name,
                'username': username,
                'photo': photo,
                'sub_institutes_list': sub_institutes_list,
                'trades_list': trades_list,
                'followers': followers,
                'followers_list': followers_list
                }
            
        except Exception as e:
            context = {'status': False, 'message':str(e)}
            
        return Response(context)
    
class CommentOnPost(APIView):
    def get(self,request):
        me = request.user
        
        try:
            post_comments = CommunityComments.objects.filter(user = me).order_by('-id')
            comments_list = []
            for pcomment in post_comments:
                comment_dict = {
                    'community_post': pcomment.community_post.title,
                    'comment': pcomment.comment,
                    'created_at': pcomment.created_at,
                }
                comments_list.append(comment_dict)
            
            return Response({'status': True, 'data': comments_list})
            
        except Exception as e:
            return Response({'status': False, 'message': str(e)})
        
    def post(self,request):
        me = request.user
        data = request.data
        
        try:
            post_id = data['post_id']
            comment_text = data.get('comment')
            community_post = CommunityPost.objects.get(id = post_id)
            
            user_comment = CommunityComments()
            user_comment.user = me
            user_comment.community_post = community_post
            user_comment.comment = comment_text
            user_comment.save()
            
            return Response({'status': True, 'message': 'Comment Added Successfully'})
            
        except Exception as e:
            return Response({'status': False, 'message': str(e)})
        
    def put(self, request):
        user = self.request.user
        try:
            data = request.data
            record_id = data['record_id']
            comment_text = data.get('comment')
            user_comment = CommunityComments.objects.get(id=record_id,user=user)
            user_comment.comment = comment_text
            user_comment.save()
            
            return Response({'status': True, 'message': 'Comment Updated Successfully'})

        except Exception as e:
            return Response({'status': False, 'message': str(e)})
    
    def delete(self, request):
        user = self.request.user
        try:
            data = request.data
            record_id = data['record_id']

            CommunityComments.objects.get(id=record_id,user=user).delete()
            return Response({'status': True, 'message': 'Comment Deleted Successfully'})

        except Exception as e:
            return Response({'status': False, 'message': str(e)})

class PostAllComments(APIView):
    def post(self, request):
        me = request.user
        data = request.data
        post_id = data['post_id']
        try:
            comment_list = []
            community_post = CommunityPost.objects.get(id = post_id)
            comments = CommunityComments.objects.filter(community_post = community_post).order_by('-id')
            
            for comment in comments:
                try:
                    student = Student.objects.get(studentuser__username = comment.user.username)
                    name = student.name
                except:
                    teacher = Teacher.objects.get(teacheruser__username = comment.user.username)
                    name = teacher.name
                    
                comment_dict = {
                    'id': comment.id,
                    'user': comment.user.username,
                    'name': name,
                    'comment': comment.comment,
                    'created_at': comment.created_at,
                }
                comment_list.append(comment_dict)
            
            context = {'status':True, 'data': comment_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        
        return Response(context)
    
class LikePost(APIView):
    def post(self,request): 
        me = request.user
        data = request.data
         
        try:
            post_id = data['post_id']
            community_post = CommunityPost.objects.get(id = post_id)
            
            try:
                new_likes = CommunityLikes.objects.get(user=me,community_post=community_post)
                if new_likes.likes == True:
                    new_likes.likes = False
                else:
                    new_likes.likes = True
                new_likes.save()

            except CommunityLikes.DoesNotExist:
                new_likes = CommunityLikes()
                new_likes.user = me
                new_likes.likes = True
                new_likes.community_post = community_post
                new_likes.save()
                
            count_likes = CommunityLikes.objects.filter(community_post=community_post,likes=True).count()
            
            return Response({'status': True,'like':new_likes.likes, 'data': count_likes})

        except Exception as e:
            return Response({'status': False, 'response': str(e)})
        
class SearchStudentProfile(APIView):
    def post(self,request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
        
        data = request.data
        try:
            searching_key = data['name']
            students = Student.objects.filter(name__istartswith = searching_key, institute = institute)
            users_list = []
            for student in students:
                if student.studentuser != request.user:
                    users_dict = {
                        'student_id': student.id,
                        'name': student.name,
                        'user': student.studentuser.username,
                    }
                    users_list.append(users_dict)
                
            context = {'status':True, 'data':users_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class SearchTeacherProfile(APIView):
    def post(self,request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        data = request.data
        try:
            searching_key = data['name']
            teachers = Teacher.objects.filter(name__istartswith = searching_key,institute = institute)
            users_list = []
            for teacher in teachers:
                if teacher.teacheruser != request.user:
                    users_dict = {
                        'teacher_id': teacher.id,
                        'name': teacher.name,
                        'user': teacher.teacheruser.username,
                    }
                    users_list.append(users_dict)
                    
            context = {'status':True, 'data':users_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class CommunityUserSendRequest(APIView):
    def post(self,request):
        data = request.data
        
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        try:
            json_file = me.profile.institute.json_file
        except Exception as e:
            json_file = None
        
        try:
            username = data['username']
            receiver = User.objects.get(username = username)
            
            if receiver != request.user:
                user_request = CommunitySendRequest()
                user_request.sender = request.user  # who send request
                user_request.receiver = receiver # who recieve request
                user_request.institute = institute
                user_request.save()
                
                text = 'New Friend Request'
                
                try:
                    sender_teacher = Teacher.objects.get(teacheruser = user_request.sender)
                    to_text = '{}: {}'.format(sender_teacher.name, text)
                    
                    teacher = Teacher.objects.get(teacheruser = user_request.receiver)
                    app_token = app_serverKey(teacher.institute.code)
                    teacher_id = teacher.id
                    notification = {'title':'New Notification', 'body': to_text}
                    
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)

                except:
                    sender_student = Student.objects.get(studentuser = user_request.sender)
                    to_text = '{}: {}'.format(sender_student.name, text)
                    
                    student = Student.objects.get(studentuser = user_request.receiver)
                    data = {'id':str(student.id),'name':str(student.name),'type': 'Friend Request','link':""}
                    serverKey = student.institute.serverKey
                    deviceId = student.firebaseToken
                    notification = {'title':'New Notification', 'body': to_text}
                    
                    if json_file == None:
                        send_notification_individual_second(serverKey=serverKey, notification=notification, deviceId=deviceId, data=data)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId, data=data)
                        
                context = {'status':True, 'message': 'Request Send Successfully'}
            else:
                context = {'status':False, 'message': 'User can not send Request to self'}
                
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class CommunityUserAllRequest(APIView):
    def get(self,request):
       
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
        try:
            user_requests = CommunitySendRequest.objects.filter(receiver=request.user,institute=institute,status='new')
            request_list = []
            for ureq in user_requests:
                request_dict = {
                    'id': ureq.id,
                    'username': ureq.sender.username,
                    'status': ureq.status,
                }
                request_list.append(request_dict)  
            
            context = {'status':True, 'data': request_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class CommunityUserRequestResponse(APIView):
    def post(self,request):
        me = request.user
        data = request.data
        try:
            request_id = data['request_id']
            request_status = data['request_status']
            
            user_request = CommunitySendRequest.objects.get(id=request_id)
            
            if request_status == 'accepted':
                user_request.status = request_status
                user_request.save()
            
            elif request_status == 'rejected':
                user_request.delete()
                
            context = {'status':True, 'message': 'Successfully Done'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class CommunityUserAcceptedRequestOld(APIView):
    def get(self,request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        try:
            accepted_requests = CommunitySendRequest.objects.filter(receiver=request.user,institute=institute,status='accepted')
            accepted_request_list = []
            for areq in accepted_requests:
                request_dict = {
                    'id': areq.id,
                    'username': areq.sender.username,
                    'status': areq.status,
                }
                accepted_request_list.append(request_dict)  
            
            context = {'status':True, 'data': accepted_request_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
            
class CommunityUserAcceptedRequest(APIView):
    def get(self,request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
        except:
            me = Teach(self.request.user)
            institute = me.profile.institute
            
        try:
            unique_users_set = set()
            all_users_queryset = CommunitySendRequest.objects.filter(
                Q(sender=request.user) | Q(receiver=request.user),
                institute=institute,status='accepted').distinct().order_by('-id')

            for request_obj in all_users_queryset:
                sender = request_obj.sender
                user_id = sender.id 
                username = sender.username
                    
                
                try:
                    student = Student.objects.get(studentuser__username = username)
                    if student:
                        name = student.name
                    else:
                        name = None
                        
                    sdetails = StudentDetails.objects.get(student = student)
                    if sdetails:
                        photo = sdetails.photo
                    else:
                        photo = None
                except:
                    teacher = Teacher.objects.get(teacheruser__username = username)
                    if teacher:
                        name = teacher.name
                    else:
                        name = None
                    
                    if teacher:
                        photo = teacher.photo
                    else:
                        photo = None
                        
                unique_users_set.add((user_id, username, name, photo))
                
                receiver = request_obj.receiver
                user_id = receiver.id 
                username = receiver.username
                
                try:
                    student = Student.objects.get(studentuser__username = username)
                    if student:
                        name = student.name
                    else:
                        name = None
                        
                    sdetails = StudentDetails.objects.get(student = student)
                    if sdetails:
                        photo = sdetails.photo
                    else:
                        photo = None
                except:
                    teacher = Teacher.objects.get(teacheruser__username = username)
                    if teacher:
                        name = teacher.name
                    else:
                        name = None
                    
                    if teacher:
                        photo = teacher.photo
                    else:
                        photo = None
                        
                unique_users_set.add((user_id, username, name, photo))

            accepted_request_list = [{'id': user[0], 'username': user[1], 'name': user[2], 'photo': user[3]} for user in unique_users_set]
            context = {'status': True, 'data': accepted_request_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

class CommunityUserRequestStatus(APIView):
    def post(self,request):
        me = request.user
        data = request.data
        try:
            creator = data['creator']
            user_request = CommunitySendRequest.objects.get(sender=me, receiver__username=creator)
            request_status = user_request.status
            
            context = {'status':True, 'request_status': request_status}
        except Exception as e:
            context = {'status':True, 'request_status': 'request'}
            
        return Response(context)

class CommunityUserSendMessage(APIView):
    def post(self, request):
        me = self.request.user
        data = request.data
        message_to = data['message_to'] #username
        text = data['text']
        image = data.get('image', None)
        
        try:
            audio_data = data['audio_url']
        except:
            audio_data = ''
            
        try:
            audio_duration_data = data['duration_data']
        except:
            audio_duration_data = ''
            
        try:
            user_to = User.objects.get(username = message_to)
            message = Message()
            message.messageTo = user_to
            message.messageFrom = me
            message.text = text
            message.image = image
                
            if audio_data != '':
                message.audio = audio_data
                
            if audio_duration_data != '':
                message.audioDuration = audio_duration_data
                
            message.time = timezone.now()
            message.save()
            
            text = 'New Message'
                
            try:
                sender_teacher = Teacher.objects.get(teacheruser = me)
                to_text = '{}: {}'.format(sender_teacher.name, text)
                
                teacher = Teacher.objects.get(teacheruser = user_to)
                app_token = app_serverKey(teacher.institute.code)
                try:
                    json_file = teacher.institute.json_file
                except:
                    json_file = None
                    
                teacher_id = teacher.id
                
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)
                    
            except:
                sender_student = Student.objects.get(studentuser = me)
                to_text = '{}: {}'.format(sender_student.name, text)
                
                student = Student.objects.get(studentuser = user_to)
                data = {'id': str(student.id),'name': str(student.name),'type': 'New Message','link':""}
                
                try:
                    json_file = student.institute.json_file
                except:
                    json_file = None
                    
                serverKey = student.institute.serverKey
                deviceId = student.firebaseToken

                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=serverKey, notification=notification, deviceId=deviceId, data=data)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, deviceId=deviceId, data = data)
        
            context = {'status': 'Success','message': 'Message Sent Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class CommunityMessageUsersList(APIView):
    def get(self, request):
        me = request.user
        try:
            unique_users_set = set()
            all_users_queryset = Message.objects.filter(Q(messageTo=me) | Q(messageFrom=me)).distinct()

            for user in all_users_queryset:
                user_id = user.messageTo.id if user.messageTo != me else user.messageFrom.id
                username = user.messageTo.username if user.messageTo != me else user.messageFrom.username
                unique_users_set.add((user_id, username))
        
            all_users_list = [{'id': user[0], 'username': user[1]} for user in unique_users_set]
            context = {'status':True, 'data': all_users_list}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class CommunitySingleUsersMessageOld(APIView):
    def post(self, request):
        me = request.user
        data = request.data
        try:
            username = data['username']
            chat_with = User.objects.get(username = username)
            
            users_list = []
            records = Message.objects.filter(Q(messageTo=request.user, messageFrom=chat_with) | Q(messageTo=chat_with, messageFrom=request.user)).order_by('id')
            for record in records:
                record_dict = {
                    'id': record.id,
                    'message_to': record.messageTo.username,
                    'message_from': record.messageFrom.username,
                    'text': record.text,
                    'image': record.image,
                    'audio': record.audio,
                    'audio_duration': record.audioDuration,
                    'time': record.time,
                }
                users_list.append(record_dict)
        
            context = {'status':True, 'data': users_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
        
class CommunitySingleUsersMessage(APIView):
    def post(self, request):
        me = request.user
        data = request.data
        
        try:
            username = data['username']
            chat_with = User.objects.get(username = username)
            
            fromMessages = Message.objects.filter(messageFrom=me, messageTo=chat_with).order_by('id') # login user sent message to someone
            sentMessages = Message.objects.filter(messageTo=me, messageFrom=chat_with).order_by('id') # someone sent message to login user
            messages = []
            
            for fm in fromMessages:
                message_to = fm.messageTo.username
                if fm.text != None and fm.text != '':
                    typeMessage = 'text'
                if fm.image != None and fm.image != '':
                    typeMessage = 'image'
                if fm.audio != None and fm.audio != '':
                    typeMessage = 'audio'

                photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                fm_dict = {
                    'id': fm.id, 
                    'message_to':message_to,
                    'text': fm.text, 
                    'image': fm.image, 
                    'time': fm.time, 
                    'from': False, 
                    'photo': photo,
                    'audio': fm.audio, 
                    'audioDuration': fm.audioDuration, 
                    'typeMessage': typeMessage
                    }
                messages.append(fm_dict)
                
            for sm in sentMessages:
                message_from = sm.messageFrom.username
                if sm.text != None and sm.text != '':
                    typeMessage = 'text'
                if sm.image != None and sm.image != '':
                    typeMessage = 'image'
                if sm.audio != None and sm.audio != '':
                    typeMessage = 'audio'

                photo = 'https://www.clipartmax.com/png/middle/347-3470586_read-foundations-of-ajax-vector-teacher-icon-png.png'
                sm_dict = {
                    'id': sm.id, 
                    'message_from':message_from,
                    'text': sm.text, 
                    'time': sm.time, 
                    'image': sm.image, 
                    'from': True, 
                    'photo': photo,
                    'audio': sm.audio, 
                    'audioDuration': sm.audioDuration, 
                    'typeMessage': typeMessage
                    }
                messages.append(sm_dict)
                
            sorted_messages = []
            for message in messages:
                time = message['time']
                if len(sorted_messages) > 0:
                    number_messages = len(sorted_messages)
                    for i in reversed(range(number_messages)):
                        isRightIndex = self.check_time(time, sorted_messages, i)
                        
                        if isRightIndex == True:
                            sorted_messages.insert(i+1, message)
                            break
                else:
                    sorted_messages.append(message)
                    
            context = {'status':True, 'messages': sorted_messages}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)

    def check_time(self, time, sorted_list, ind):
        message = sorted_list[ind]
        message_time = message['time']
        if time > message_time:
            return True
        else:
            return False
        


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/bodhiai/__init__.py
--------------------------------------------------

from .celery import app as celery_app

__all__ = ('celery_app',)

==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/bodhiai/celery.py
--------------------------------------------------

import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bodhiai.settings')

app =\
    Celery('bodhiai', backend='redis://localhost', broker='amqp://')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/bodhiai/settings.py
--------------------------------------------------





import os
from django.contrib.messages import constants as messages
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))



SECRET_KEY = '+(*&s53)zbroww=@&ig#@a5+i1vr-nsxp-7vk#hzyhf=&57nz('

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
DEBUG = True
ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['https://bodhiai.live']
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_REPLACE_HTTPS_REFERER = True


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_L10N = True
USE_TZ = False


# STATIC_URL = '/static/'


STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]
ROOT_URLCONF = 'bodhiai.urls'

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'vaibhavmc01@gmail.com'
EMAIL_HOST_PASSWORD = 'twzjxsdijzmreabe'
EMAIL_USE_TLS = True
EMAIL_PORT = 587

INSTALLED_APPS = [
    'admin_interface',
    'colorfield',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'rest_framework',
    'rest_framework.authtoken',
    'rangefilter',
    'membership',
    'basicinformation',
    'management',
    'content',
    'communication',
    'gaming',
    'doubts',
    'student_panel',
    'tinymce',
    'ckeditor',
    'corsheaders',
    'django_user_agents',
    'django_crontab',
    'crispy_forms',
    'crispy_bootstrap5',
    'debug_toolbar',
    'django_node_assets',
    'celery_progress',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'silk.middleware.SilkyMiddleware',
]
SILKY_AUTHENTICATION = True  # User must login
SILKY_AUTHORISATION = lambda user: user.is_superuser  # User must have permissions
SILKY_PYTHON_PROFILER = True
SILKY_META = True
SILKY_MAX_RECORDED_REQUESTS = 10**7
SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 10


USER_AGENTS_CACHE = None

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
CACHE_TTL = 1500*60
CACHES = {
    "default": {
        "TIMEOUT": 360*60,
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            'MAX_ENTRIES': 1000000,
            "CULL_FREQUENCY":10,
        }
    }
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bodhiai.wsgi.application'


# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'bodhiai_b2b4',
        'HOST': 'localhost',
        'USER': 'prashant',
        'PASSWORD': 'elonmusk',
    }
}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


AUTH_PASSWORD_VALIDATORS = [
]



REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}


#                                    'level': 'DEBUG',
#                                    'level':'DEBUG',
#                                    'level': 'DEBUG',
INTERNAL_IPS = [
    '127.0.0.1',
]




TZ = 'Asia/Kolkata'
CRON_TZ = "Asia/Kolkata"

CRONJOBS = [
    ('30 4 * * *',              'basicinformation.cron.project_backup_every_day',),
    ('*/5 * * * *',             'basicinformation.cron.update_transaction_record',),

    ('0 3-15/5 * * *',          'basicinformation.cron.send_random_notification'),


    ('0 3-15/4 * * *',          'basicinformation.cron.SendNotificationForAddStudentsInPackage'),

    ('30 4 1 */1 *',            'basicinformation.cron.meeethourDeveloperAccounts_refresh_token_monthly'),
    ('*/10 * * * *',            'basicinformation.cron.meeethourDeveloperAccounts_recording_update_every_10min'),
    ('*/5 * * * *',            'basicinformation.cron.meethour_developer_pack_payment', ),
    ('30 3 * * *',             'basicinformation.cron.studant_feese_reminder',),

]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/bodhiai/urls.py
--------------------------------------------------


from django.contrib import admin
from django.urls import path, include
from django.urls import include, re_path as url
from django.conf import settings
from django.conf.urls.static import static
import debug_toolbar

admin.site.site_header = "Bodhi AI"
admin.site.enable_nav_sidebar = True

urlpatterns = [
    path('admin/', admin.site.urls),
    path('membership/', include("membership.urls")),
    path('basicinformation/', include("basicinformation.urls", namespace='basic')),
    path('content/', include('content.urls', namespace='content')),
    path('student_panel/', include('student_panel.urls', namespace='student_panel')),
    path('api/basicinformation/', include('basicinformation.api.urls')),
    path('api/membership/', include('membership.api.urls')),
    path('api/management/', include('management.api.urls')),
    path('api/content/', include('content.api.urls')),
    path('api/communication/', include('communication.api.urls')),
    path('api/gaming/', include('gaming.api.urls')),
    path('api/doubts/', include('doubts.api.urls')),

    url(r'^api-auth/', include('rest_framework.urls')),
    url(r'^tinymce/', include('tinymce.urls')),
    url(r'^__debug__/', include(debug_toolbar.urls)),
    url(r'^celery-progress/', include('celery_progress.urls')), 

] 
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/bodhiai/wsgi.py
--------------------------------------------------




import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bodhiai.settings')

application = get_wsgi_application()


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/models.py
--------------------------------------------------

from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

def new_user_return(self):
    return str(self.id)

User.add_to_class('__str__', new_user_return)

class TeacherPermission(models.Model):
    name = models.CharField(max_length=200)
    family = models.CharField(max_length=200)

    def __str__(self):
        return self.name + ' ' + self.family

class TeacherCourse(models.Model):
    name = models.CharField(max_length=200)
    package_thumbnail = models.URLField(max_length=1000, blank=True, null=True)
    reward_thumbnail = models.URLField(max_length=1000, blank=True, null=True)

    def __str__(self):
        return self.name

class TeacherCourseCategory(models.Model):
    name = models.CharField(max_length=200)
    teacher_courses = models.ManyToManyField(TeacherCourse, related_name='teacher_course_category', blank=True)
    colour = models.CharField(max_length=7, null=True, blank=True)
    thumbnail = models.CharField(max_length=1023, null=True, blank=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name

class InstituteManagementAdmin(models.Model):
    user = models.OneToOneField(to=User, on_delete=models.PROTECT, related_name="InstituteAdmin")
    name = models.CharField(max_length=100)
    admin_code = models.CharField(max_length=7, unique=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    jdate = models.DateTimeField(default=timezone.now)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def username(self):
        return self.user.username

class Institute(models.Model):
    AdminUser = models.ForeignKey(to=InstituteManagementAdmin, on_delete=models.PROTECT, null=True, blank=True)
    adminUserPublish = models.BooleanField(default=True)
    name = models.CharField(max_length=500)
    logo = models.URLField(max_length=1000, blank=True, null=True)
    code = models.CharField(max_length=20, unique=True)
    serverKey = models.CharField(max_length=2000, null=True, blank=True)
    json_file = models.CharField(max_length=2000, null=True, blank=True)
    teacher_app_json = models.URLField(max_length=2000, null=True, blank=True)
    aboutUs = models.URLField(max_length=2000, null=True, blank=True)
    joinRequestAutomatic = models.BooleanField(default=False)
    batchChangeRequestAutomatic = models.BooleanField(default=False)
    showCourseUI = models.BooleanField(default=False)
    showBodhiCurrentAffairs = models.BooleanField(default=False)
    agoraCode = models.TextField(null=True, blank=True)
    phoneNumber = models.TextField(blank=True, default="")
    facebookURL = models.URLField(null=True, blank=True)
    instagramURL = models.URLField(null=True, blank=True)
    twitterURL = models.URLField(null=True, blank=True)
    email = models.EmailField(null=True, blank=True)
    send_otp_email = models.EmailField(default="info@bodhiai.in")
    websiteURL = models.URLField(null=True, blank=True)
    telegramURL = models.URLField(null=True, blank=True)
    listReversed = models.BooleanField(default=True)
    deviceCheck = models.BooleanField(default=True)
    coinsRefferedFrom_registration = models.IntegerField(default=5)
    coinsRefferedTo_registration = models.IntegerField(default=5)
    extendRefferedCoins = models.IntegerField(default=5)
    subparent_coins  = models.IntegerField(default=0)
    packageSharingCoins  = models.IntegerField(default=0)
    access_to_market_place_store = models.BooleanField(default=True)
    buyCourseCoins = models.IntegerField(default=50)
    server = models.CharField(max_length=1000, default='https://bodhiai.live/')
    currentAffairsSubjectId = models.IntegerField(blank=True, null=True)
    previousYearsSubjectId = models.IntegerField(blank=True, null=True)
    dailyVocabSubjectId = models.IntegerField(blank=True, null=True)
    ebooksSubjectId = models.IntegerField(blank=True, null=True)
    razorpaykey = models.CharField(max_length=200, null=True, blank=True)
    razorpay_secret_key = models.CharField(max_length=500, null=True, blank=True)
    typeInstitute = models.CharField(max_length=50, default='Premium')
    showOtherCourses = models.BooleanField(default=False)
    otherCourses = models.ManyToManyField(TeacherCourse, related_name='otherCoursesToShow', blank=True)
    webAppUrl = models.URLField(max_length=2000, null=True, blank=True)
    createTrace = models.TextField(blank=True, null=True)
    easebuzzMerchanKey = models.CharField(max_length=200, null=True, blank=True)
    easebuzzSaltKey = models.CharField(max_length=200, null=True, blank=True)
    easebuzzSubMerchanKey = models.CharField(max_length=200, null=True, blank=True)
    wire_access = models.BooleanField(default=False)
    wire_error_sms_report_number = models.CharField(max_length=15, null=True, blank=True)
    wire_key = models.CharField(max_length=15, null=True, blank=True)
    wire_salt = models.CharField(max_length=15, null=True, blank=True)
    welcomeNoteText = models.TextField(blank=True, null=True)
    instituteAddress = models.CharField(max_length=200, null=True, blank=True)
    whatToSendDoubt = models.BooleanField(default=False)
    webAppCreationStarted = models.BooleanField(default=False)
    video_download = models.BooleanField(default=True)
    notes_download = models.BooleanField(default=True)
    downloadIn_gallery = models.BooleanField(default=False)
    meethour_account_type = models.CharField(max_length=15, choices=(("developer", "developer"),("enterprise", "enterprise")),null=True,blank=True)
    package_view_choices = [
        ('all', 'all'),
        ('subject', 'subject'),
        ('chapter', 'chapter'),
        ('topic', 'topic'),
        ('subtopic', 'subtopic'),
    ]
    package_view = models.CharField(max_length=100,choices=package_view_choices,default='chapter')
    youtube_video_save_to_server = models.BooleanField(default=False)
    video_upload_permission = models.BooleanField(default=False)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)
    
    def __str__(self):
        return self.name + ' ' + self.typeInstitute

    def totalStudents(self):
        totalStudents = Student.objects.filter(institute__id=self.id).count()
        return totalStudents

    def mainTeacherUsername(self):
        teacher = Teacher.objects.get(institute__id=self.id, mainTeacher=True)
        username = teacher.teacheruser.username
        return username

    def instituteCreatedDate(self):
        try:
            teacher = Teacher.objects.get(institute__id=self.id, mainTeacher=True)
            created_date = teacher.jdate
            return created_date
        except:
            return None

    def totalNotes(self):
        teachers = self.teacherinstitute.all()
        totalNotes = 0
        for i in teachers:
            totalNotes += i.note_teacher.all().count()
        return totalNotes

    def totalVideos(self):
        teachers = self.teacherinstitute.all()
        totalVideos = 0
        for i in teachers:
            totalVideos += i.video_teacher.all().count()
        return totalVideos

    def totalTests(self):
        teachers = self.teacherinstitute.all()
        totalTests = 0
        for i in teachers:
            totalTests += i.test_chapters.all().count()
        return totalTests

    def totalAssignment(self):
        teachers = self.teacherinstitute.all()
        totalAssignment = 0
        for i in teachers:
            totalAssignment += i.assignment_teacher.all().count()
        return totalAssignment

    def totalLiveVideos(self):
        teachers = self.teacherinstitute.all()
        totalLiveVideos = 0
        for i in teachers:
            totalLiveVideos += i.livevideo_teacher.all().count()
        return totalLiveVideos

    def totalNativLiveVideos(self):
        teachers = self.teacherinstitute.all()
        totalNativLiveVideos = 0
        for i in teachers:
            totalNativLiveVideos += i.nativelive_teacher.all().count()
        return totalNativLiveVideos

    def totalPackages(self):
        teachers = self.teacherinstitute.all()
        totalPackages = 0
        for i in teachers:
            totalPackages += i.package_teacher.all().count()
        return totalPackages

    def packagesStudents(self):
        teachers = self.teacherinstitute.all()
        totalBoughtPackagesStudents = 0
        for i in teachers:
            packages = i.package_teacher.all()
            for p in packages:
                totalBoughtPackagesStudents += p.students.all().count()
        return totalBoughtPackagesStudents
    
class InstituteSocialMediaOptions(models.Model):
    title = models.CharField(max_length=31, primary_key=True)
    photo = models.CharField(max_length=512)

    def __str__(self):
        return self.title

class IntituteSocialMedia(models.Model):
    social_media = models.ForeignKey(to=InstituteSocialMediaOptions, on_delete=models.PROTECT)
    institute = models.ForeignKey(to=Institute, on_delete=models.CASCADE)
    url = models.CharField(max_length=512)

class InstituteDetails(models.Model):
    institute = models.OneToOneField(Institute, related_name='institute_details', on_delete=models.CASCADE)
    referralCoinLevel1 = models.IntegerField(default=5, null=True, blank=True)
    referralCoinLevel2 = models.IntegerField(default=5, null=True, blank=True)
    referralCoinLevel3 = models.IntegerField(default=5, null=True, blank=True)

    def __str__(self):
        return self.institute.name

class Branch(models.Model):
    name = models.CharField(max_length=100)
    institute = models.ForeignKey(Institute, related_name='branchInstitute', on_delete=models.CASCADE)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name

class Batch(models.Model):
    name = models.CharField(max_length=255)
    institute = models.ForeignKey(Institute, related_name='batchinstitute', on_delete=models.CASCADE)
    course = models.ManyToManyField('content.Course', related_name='batchcourse', blank=True)
    branch = models.ManyToManyField(Branch, related_name='batchBranch', blank=True)
    count = models.IntegerField(null=True,blank=True)
    max_student = models.IntegerField(null=True,blank=True)
    addLimit = models.BooleanField(default=False,null=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + self.institute.name

class Student(models.Model):
    studentuser = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    institute = models.ForeignKey(Institute, related_name='studentinstitute', on_delete=models.CASCADE)
    batches = models.ManyToManyField(Batch, related_name='studentbatch')
    subjects = models.ManyToManyField('content.Subject', related_name='studentsubject', blank=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    accessTests = models.BooleanField(default=True)
    accessVideo = models.BooleanField(default=True)
    accessNotes = models.BooleanField(default=True)
    accessCourses = models.BooleanField(default=True)
    accessLiveVideos = models.BooleanField(default=True)
    accessYouTubeLiveVideos = models.BooleanField(default=True)
    jdate = models.DateTimeField(default=timezone.now, null=True, blank=True)
    courses = models.ManyToManyField(TeacherCourse, related_name='student_course', blank=True)
    typeUser = models.CharField(max_length=100, null=True, blank=True)
    accessTestWinApp = models.BooleanField(default=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + self.institute.name + ' ' + str(self.institute.webAppUrl)

    def contact(self):
        contact = self.studentuser.username.split('@')[0]
        return contact

    def batch(self):
        queryset = self.batches.all().values_list('name')
        return list(queryset)
    
    def delete(self, *args, **kwargs):
        if self.studentuser:
            self.studentuser.delete()
        super().delete(*args, **kwargs)
    
class StudentDetails(models.Model):
    student = models.OneToOneField(Student, related_name='student',on_delete=models.CASCADE)
    reference_teacher_name = models.CharField(max_length=500, blank=True, null=True)
    photo = models.URLField(max_length=1000, blank=True, null=True)
    fullName = models.CharField(max_length=500, blank=True, null=True)
    address = models.CharField(max_length=1000, blank=True, null=True)
    phone = models.BigIntegerField(null=True, blank=True)
    parentPhone = models.BigIntegerField(null=True, blank=True)
    email = models.EmailField(max_length=100, blank=True, null=True)
    address = models.CharField(max_length=1000, blank=True, null=True)
    city = models.CharField(max_length=1000, blank=True, null=True)
    state = models.CharField(max_length=100, blank=True, null=True)
    pincode = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField(max_length=1000, blank=True, null=True)
    standard = models.CharField(max_length=100, blank=True, null=True)
    language = models.CharField(max_length=100, blank=True, null=True)
    parentName = models.CharField(max_length=200, blank=True, null=True)
    dob = models.DateField(null=True, blank=True)
    jdate = models.DateTimeField(default=timezone.now, null=True, blank=True)
    studentDocument = models.URLField(max_length=1000, blank=True, null=True)
    studentDocumentType = models.CharField(max_length=50, blank=True, null=True)
    payNumber = models.BigIntegerField(null=True, blank=True)
    studentIpAddress = models.CharField(blank=True, null=True, max_length=100)
    authorizedTestWin = models.BooleanField(default=None, null=True, blank=True)
    isBlocked = models.BooleanField(default=False)
    deviceAndVersion = models.CharField(max_length=100, blank=True, null=True)
    rollNumber = models.CharField(max_length=100, blank=True, null=True)
    medium = models.CharField(max_length=100, blank=True, null=True)
    board =  models.CharField(max_length=100, blank=True, null=True)
    goal = models.CharField(max_length=500, blank=True, null=True)
    mother_name = models.CharField(max_length=200, blank=True, null=True)
    gender = models.CharField(choices=(('M', 'Male'),('F', 'Female'),),blank=True, null=True, max_length=10)
    
    def __str__(self):
        return self.student.name

class Teacher(models.Model):
    teacheruser = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    institute = models.ForeignKey(Institute, related_name='teacherinstitute', on_delete=models.CASCADE)
    batches = models.ManyToManyField(Batch, related_name='teacherbatch')
    mainTeacher = models.BooleanField(default=False)
    subjects = models.ManyToManyField('content.Subject', related_name='teachersubject', blank=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    photo = models.URLField(max_length=2000, null=True, blank=True)
    permissions = models.ManyToManyField(TeacherPermission, related_name='teacherPermission')
    jdate = models.DateTimeField(default=timezone.now, null=True, blank=True)
    planValidity = models.BigIntegerField(null=True, blank=True)
    webAppTeacher = models.BooleanField(default=False, blank=True, null=True)
    teacherIpAddress = models.CharField(blank=True, null=True, max_length=100)
    teacherFirebaseTokens = models.ManyToManyField('basicinformation.TeacherFirebaseToken', related_name='teacher_firebaseTokens', blank=True)
    upi_id = models.CharField(blank=True, null=True, max_length=100)
    teacher_code = models.CharField(blank=True, null=True, max_length=100)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + self.institute.name

    def contact(self):
        contact = self.teacheruser.username.split('@')[0]
        return contact
    
    def add_subject(self, subject):
        if subject.subject_brought:
            raise ValueError(f'Subject "{subject.name}" is not available for add purchase it')
        self.subjects.add(subject)

class WebAppUser(models.Model):
    webappuser = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True)
    teacher = models.OneToOneField(Teacher, on_delete=models.CASCADE, null=True, blank=True)
    name = models.CharField(max_length=500, null=True, blank=True)
    phone = models.CharField(max_length=13, null=True, blank=True)
    appLink = models.URLField(max_length=2000, null=True, blank=True)
    logo = models.URLField(max_length=2000, null=True, blank=True)
    instituteName = models.CharField(max_length=500, null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + str(self.webappuser.username)

class StudentLeadData(models.Model):
    name = models.CharField(max_length=500, blank=True, null=True)
    phone = models.BigIntegerField(null=True, blank=True)
    fathername = models.CharField(max_length=500, blank=True, null=True)
    email = models.EmailField(max_length=100, blank=True, null=True)
    course = models.CharField(max_length=500, blank=True, null=True)
    city = models.CharField(max_length=500, blank=True, null=True)
    state = models.CharField(max_length=1000, blank=True, null=True)
    standard = models.CharField(max_length=100, blank=True, null=True)
    school = models.CharField(max_length=100, blank=True, null=True)
    sex = models.CharField(max_length=100, blank=True, null=True)
    is_used = models.BooleanField(default=False)

    def __str__(self):
        return self.name

class TeacherDetails(models.Model):
    teacher = models.OneToOneField(Teacher, related_name='teacher', on_delete=models.CASCADE)
    name = models.CharField(max_length=500, blank=True, null=True)
    phone = models.BigIntegerField(null=True, blank=True)
    email = models.EmailField(max_length=100, blank=True, null=True)
    course = models.ManyToManyField(TeacherCourse, related_name='teacher_courses', blank=True)
    subjectTeacherCourse = models.ManyToManyField('doubts.SubjectDoubtApp', related_name='subject_teacherCourse', blank=True)
    expertise_subject = models.CharField(max_length=500, blank=True, null=True)
    address = models.CharField(max_length=1000, blank=True, null=True)
    language = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=300, blank=True, null=True)
    state = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField(max_length=1000, blank=True, null=True)
    dateOfBirth = models.DateField(blank=True, null=True)
    fromFreeTime = models.TimeField(default='1:00', blank=True, null=True)
    toFreeTime = models.TimeField(default='1:00', blank=True, null=True)

    def __str__(self):
        return self.teacher.name

class Parent(models.Model):
    parentuser = models.OneToOneField(User, on_delete=models.CASCADE)
    student = models.ManyToManyField(Student, related_name='parent_student')
    photo = models.URLField(max_length=1000, blank=True, null=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    phoneNumber = models.TextField(null=True, blank=True)
    address = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=300, blank=True, null=True)
    state = models.CharField(max_length=300, blank=True, null=True)
    institute = models.ForeignKey(Institute, blank=True, null=True, on_delete=models.CASCADE)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name

class TalentHuntExamDetail(models.Model):
    student = models.OneToOneField(Student, related_name='studentExtraInfo', on_delete=models.CASCADE)
    testDate = models.DateTimeField(null=True, blank=True)
    city = models.CharField(max_length=200, blank=True, null=True)
    state = models.CharField(max_length=200, blank=True, null=True)
    couponCode = models.CharField(max_length=200, blank=True, null=True)
    institute = models.ForeignKey(Institute, related_name='talentHuntInstitute', on_delete=models.CASCADE)

    def __str__(self):
        return self.student.name + ' ' + self.institute.name

class StudentJoinRequest(models.Model):
    student = models.OneToOneField(Student, related_name='requestStudent', on_delete=models.CASCADE)
    batches = models.ManyToManyField(Batch, related_name='requestBatches')
    institute = models.ForeignKey(Institute, related_name='requestInstitute', on_delete=models.CASCADE)
    time = models.DateTimeField(auto_now=True, editable=True)
    progress = models.BooleanField(default=True)
    result = models.BooleanField(null=True, blank=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.student.name + ' ' + self.institute.name

class SubInstitute(models.Model):
    sub_institute_user = models.OneToOneField(User, on_delete=models.CASCADE)
    parent_institute = models.ForeignKey(Institute, related_name='sub_institute_parent', on_delete=models.CASCADE)
    trades = models.ManyToManyField('content.Trade', related_name='sub_institute_trades', blank=True)
    wishlist_students = models.ManyToManyField(Student, related_name='wishlist_subInstitute', blank=True)
    students = models.ManyToManyField(related_name='subinstitute_student', to='membership.Student')
    name = models.CharField(max_length=255)
    registration_number = models.CharField(max_length=300)
    about_institute = models.TextField(null=True, blank=True)
    phone_number = models.BigIntegerField(null=True, blank=True)
    email = models.EmailField(blank=True, null=True)
    pincode = models.IntegerField(null=True, blank=True)
    city = models.CharField(max_length=200, blank=True, null=True)
    latitude = models.CharField(max_length=100, blank=True, null=True)
    longitude = models.CharField(max_length=100, blank=True, null=True)
    googleMap_link = models.CharField(max_length=100, blank=True, null=True)
    state = models.CharField(max_length=200, blank=True, null=True)
    address = models.CharField(max_length=500, blank=True, null=True)
    total_rating = models.FloatField(null=True, blank=True)
    approved_by_main_institute = models.BooleanField(default=None, null=True, blank=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name

class SubInstituteTeacher(models.Model):
    sub_institute = models.ForeignKey(SubInstitute, related_name='sub_institute_teacher', on_delete=models.CASCADE)
    name = models.CharField(max_length=100, null=True, blank=True)
    designation = models.CharField(max_length=200, null=True, blank=True)
    profile_picture = models.URLField(max_length=3000, null=True, blank=True)
    date = models.DateTimeField(auto_now=True, editable=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.name + ' ' + self.sub_institute.name

class SubInstituteStudent(models.Model):
    student = models.OneToOneField(Student, related_name='student_subinstitute', on_delete=models.CASCADE)
    sub_institute = models.ManyToManyField(SubInstitute, related_name='sub_institute_student')
    trades_details = models.ManyToManyField('content.TradeDetails', related_name='sub_institute_tradesdetails', blank=True)
    category = models.CharField(blank=True, null=True, max_length=50)
    trusted_person_name = models.CharField(blank=True, null=True, max_length=50)
    trusted_person_number = models.BigIntegerField(null=True, blank=True)
    alternative_number = models.BigIntegerField(null=True, blank=True)
    secondary_marksheet = models.URLField(max_length=5000, blank=True, null=True)
    aadhar_card_number = models.CharField(max_length=20, blank=True, null=True)
    aadhar_card = models.URLField(max_length=5000, blank=True, null=True)
    slc = models.URLField(max_length=5000, blank=True, null=True)
    cv = models.CharField(max_length=400, blank=True, null=True)
    category_image = models.TextField(blank=True, null=True)
    student_registration_number = models.CharField(max_length=300,null=True, blank=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)

    def __str__(self):
        return self.student.name
    



class Principle(models.Model):
    teacheruser = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    institute = models.ManyToManyField(Institute, related_name='principleinstituteAll',blank=True)
    firebaseToken = models.TextField(max_length=2000, null=True, blank=True)
    created_date = models.DateField(auto_now_add=True, null=True, blank=True)
    
    def __str__(self):
        return self.name   

class RegisterExam(models.Model):
    student =models.OneToOneField(Student, related_name='student_register', on_delete=models.CASCADE)
    institute = models.ForeignKey(Institute, related_name='exam_institute', on_delete=models.CASCADE,null=True)
    name = models.CharField(max_length=255,null=False)
    father_name =  models.CharField(max_length=255,null=False)
    mother_name = models.CharField(max_length=200, blank=True, null=True)
    phone_number = models.BigIntegerField(null=True, blank=True)
    whatsapp_number = models.BigIntegerField(null=True, blank=True)
    jdate = models.DateTimeField(default=timezone.now, null=True, blank=True)
    pincode = models.IntegerField(null=True, blank=True)
    city = models.CharField(max_length=200, blank=True, null=True)
    profile_picture = models.URLField(max_length=3000, null=True, blank=True)
    signature = models.URLField(max_length=3000, blank=True, null=True)
    dob = models.DateField(null=True, blank=True)
    gender = models.CharField(choices=(('M', 'Male'),('F', 'Female'),),blank=True, null=True, max_length=10)
    aadhar_card = models.URLField(max_length=5000, blank=True, null=True)
    address = models.CharField(max_length=1000, blank=True, null=True)
    marksheet_9th = models.URLField(max_length=5000, blank=True, null=True)
    marksheet_10th = models.URLField(max_length=5000, blank=True, null=True)
    marksheet_11th = models.URLField(max_length=5000, blank=True, null=True)
    marksheet_12th = models.URLField(max_length=5000, blank=True, null=True)
    category = models.CharField(choices=(('GEN', 'GEN'),('OBC', 'OBC'),('ST', 'ST'),('SC', 'SC'),),blank=True, null=True, max_length=10)

    def __str__(self):
        return self.name

class PaidAmountStudentExam(models.Model):
    student = models.ForeignKey(RegisterExam, related_name='paid_studentexam_register_from', on_delete=models.SET_NULL, null=True, blank=True)
    paidAmount =models.FloatField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.paidAmount)

class AdmitCard(models.Model):
    name_of_examination = models.CharField(max_length=255,null=False)
    register_no = models.ForeignKey(RegisterExam, related_name='AdmitCard_register_numbeer', on_delete=models.SET_NULL, null=True, blank=True)
    roll_number =models.IntegerField()
    exam_register_no = models.IntegerField(null=True)
    exam_city = models.CharField(max_length=1000,null=True)
    dofexam = models.DateField(null=True, blank=True)
    examFrom = models.TimeField(null=True, blank=True)
    examTo = models.TimeField(null=True, blank=True)
    center_name = models.CharField(max_length=2000,null=True)

    def __str__(self):
        return str(self.exam_register_no)
    
class ScoreCard(models.Model):
    name_of_examination = models.CharField(max_length=255,null=False)
    register_no = models.ForeignKey(RegisterExam, related_name='Score_card_register_numbeer', on_delete=models.SET_NULL, null=True, blank=True)
    score = models.FloatField(null=True)
    rank = models.IntegerField(null=True)
    exam_register_no = models.IntegerField(null=True)

    def __str__(self):
        return str(self.exam_register_no)

class BatchLimitChangeRequest(models.Model):
    institute = models.ForeignKey(Institute, related_name='institute_batch',on_delete=models.CASCADE,null=True)
    batch = models.ForeignKey(Batch,related_name='institute_batch_limit',on_delete=models.CASCADE,null=True)
    date = models.DateTimeField(auto_now=True, editable=True)
    active = models.BooleanField(default=True)
    studentLimit = models.IntegerField(null=True)
    
class Board(models.Model):
    teacher = models.ForeignKey(Principle, on_delete=models.SET_NULL, null=True, blank=True)
    name = models.CharField(max_length=100,null=True,blank=True)
    thumbnail = models.URLField(max_length=2000)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    
    def __str__(self):
        return self.name
    
class State(models.Model):
    name = models.CharField(max_length=100,null=True, blank=True)
    code = models.CharField(max_length=100,null=True, blank=True)

    def __str__(self):
        return self.name

class City(models.Model):
    name = models.CharField(max_length=100,null=True, blank=True)
    state = models.ForeignKey(State, related_name='cities', on_delete=models.CASCADE)
    
    class Meta:
        verbose_name = 'City'
        verbose_name_plural = 'Cities'

    def __str__(self):
        return self.name

class BoardInstitutes(models.Model):
    institute = models.OneToOneField(Institute, on_delete=models.CASCADE, null=True, blank=True)
    board = models.ForeignKey(Board, on_delete=models.SET_NULL, null=True, blank=True)
    state = models.ForeignKey(State, on_delete=models.SET_NULL, null=True, blank=True)
    city = models.ForeignKey(City, on_delete=models.SET_NULL, null=True, blank=True)
    created_date = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    


    
    

    

    





==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/apps.py
--------------------------------------------------

from django.apps import AppConfig


class MembershipConfig(AppConfig):
    name = 'membership'


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/forms.py
--------------------------------------------------

from django.contrib.auth.models import User, Group
from django import forms
from django.contrib.auth.forms import UserCreationForm


class LoginForm(forms.ModelForm):
    password = forms.CharField(max_length=50, widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ['username', 'password']


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/admin.py
--------------------------------------------------

from django.contrib import admin
from .models import *
from content.models import  DyteOrganisationCredential, MeetHourMeetingUiConfig, Note

@admin.register(Batch)
class BatchAdmin(admin.ModelAdmin):
    search_fields = ['name', 'id', 'institute__id','institute__code'] 
    list_display = ['name', 'id', 'institute','max_student']
    ordering = ['id']
    readonly_fields = ['institute', 'course', 'branch']

@admin.register(InstituteDetails)
class InstituteDetailsAdmin(admin.ModelAdmin):
    list_display = ['id', 'institute']
    readonly_fields = ['institute']

@admin.register(InstituteSocialMediaOptions)
class InstituteSocialMediaOptionsAdmin(admin.ModelAdmin):
    list_display = ['title']



class MeetHourMeetingUiConfigInline(admin.StackedInline):
    model = MeetHourMeetingUiConfig
    extra = 0

class IntituteSocialMediaInline(admin.TabularInline):
    model = IntituteSocialMedia
    extra = 0

@admin.register(Institute)
class InstituteAdmin(admin.ModelAdmin):
    search_fields = ['name','phoneNumber','code','email', 'teacherinstitute__teacheruser__username']
    list_filter = ['typeInstitute']
    list_display = ['name','id','code', 'typeInstitute', 'mainTeacherUsername', 'instituteCreatedDate']
    fields = (  ('name', 'code', 'typeInstitute','phoneNumber', 'email', 'send_otp_email'), 
                ('logo', 'aboutUs', 'instituteAddress','welcomeNoteText'), 
                'deviceCheck',
                'access_to_market_place_store',
                'razorpaykey','razorpay_secret_key',
                ('easebuzzMerchanKey', 'easebuzzSaltKey', 'easebuzzSubMerchanKey'),
                ('wire_access', 'wire_error_sms_report_number', 'wire_key', 'wire_salt'),
                'server',
                'serverKey', 
                'json_file',
                'teacher_app_json',
                'video_upload_permission',
                'agoraCode',
                'joinRequestAutomatic',
                'batchChangeRequestAutomatic',
                'whatToSendDoubt',
                'showCourseUI',
                'listReversed',
                'showBodhiCurrentAffairs',
                'currentAffairsSubjectId',
                'previousYearsSubjectId',
                'dailyVocabSubjectId',
                'ebooksSubjectId',
                ('video_download', 'notes_download', 'downloadIn_gallery'),
                ('showOtherCourses', 'otherCourses'),
                'websiteURL',
                'facebookURL',
                'instagramURL',
                'twitterURL',
                'telegramURL',
                ('coinsRefferedFrom_registration','coinsRefferedTo_registration','extendRefferedCoins', 'buyCourseCoins'),
                ('webAppUrl','webAppCreationStarted','createTrace'),
                'meethour_account_type',
                'package_view',
                'youtube_video_save_to_server',
    )
    inlines = [MeetHourMeetingUiConfigInline, IntituteSocialMediaInline,]

class InstituteInline(admin.StackedInline):
    model = Institute
    fields = (  ('name', 'code', 'typeInstitute','phoneNumber', 'email', 'send_otp_email'), 
                ('logo', 'aboutUs', 'instituteAddress','welcomeNoteText'), 
                'deviceCheck',
                'access_to_market_place_store',
                'razorpaykey',
                ('easebuzzMerchanKey', 'easebuzzSaltKey', 'easebuzzSubMerchanKey'),
                ('wire_access', 'wire_error_sms_report_number', 'wire_key', 'wire_salt'),
                'server',
                'serverKey', 
                'agoraCode',
                'joinRequestAutomatic',
                'batchChangeRequestAutomatic',
                'whatToSendDoubt',
                'showCourseUI',
                'listReversed',
                'showBodhiCurrentAffairs',
                'currentAffairsSubjectId',
                'previousYearsSubjectId',
                'dailyVocabSubjectId',
                'ebooksSubjectId',
                ('video_download', 'notes_download', 'downloadIn_gallery'),
                ('showOtherCourses', 'otherCourses'),
                'websiteURL',
                'facebookURL',
                'instagramURL',
                'twitterURL',
                'telegramURL',
                ('coinsRefferedFrom_registration','coinsRefferedTo_registration','extendRefferedCoins', 'buyCourseCoins'),
                ('webAppUrl','webAppCreationStarted','createTrace'),
                'meethour_account_type',
                'package_view','youtube_video_save_to_server'
    )
    extra = 0

@admin.register(InstituteManagementAdmin)
class InstituteManagementAdminAdmin(admin.ModelAdmin):
    list_display = ['username', 'id', 'admin_code']
    readonly_fields = ['user', 'admin_code']
    inlines = [InstituteInline]
    
@admin.register(Parent)
class ParentAdmin(admin.ModelAdmin):
    list_display = ['id','parentuser', 'institute']
    readonly_fields = ['parentuser','institute', 'student',]

@admin.register(StudentDetails)
class StudentDetailsAdmin(admin.ModelAdmin):
    list_display = ['id','student', 'fullName',]
    readonly_fields = ['student',]
    search_fields = ['student__id','student__studentuser__username']

@admin.register(StudentJoinRequest)
class StudentJoinRequestAdmin(admin.ModelAdmin):
    list_display = ['id','student', 'institute',]
    search_fields = ['student__studentuser__username']
    readonly_fields = ['institute','student', 'batches']

@admin.register(StudentLeadData)
class StudentLeadDataAdmin(admin.ModelAdmin):
    list_display = ['id','name', 'phone']    

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    search_fields = ('id','name', 'studentuser__username','institute__code')
    list_filter = ('courses', 'accessTests', 'accessVideo', 'accessNotes', 'accessLiveVideos', 'accessYouTubeLiveVideos', 'typeUser', 'accessTestWinApp')
    list_display = ('name', 'id', 'batch', 'institute', 'jdate', 'firebaseToken', 'accessTests', 'accessVideo',
                    'accessNotes', 'accessLiveVideos', 'accessYouTubeLiveVideos', 'typeUser', 'accessTestWinApp')
    fields = ('name', 'institute', 'jdate', 'firebaseToken', 'accessTests', 'accessVideo',
              'accessNotes', 'accessLiveVideos', 'accessYouTubeLiveVideos', 'typeUser', 'accessTestWinApp')
    readonly_fields = ('institute', 'jdate', 'firebaseToken', 'accessTests', 'accessVideo',
                       'accessNotes', 'accessLiveVideos', 'accessYouTubeLiveVideos', 'typeUser', 'accessTestWinApp')
    
@admin.register(SubInstituteStudent)
class SubInstituteStudentAdmin(admin.ModelAdmin):
    list_display = ['id', 'student',]
    readonly_fields = ['student', 'sub_institute', 'trades_details', ]
    search_fields = ['student__id','student__name','student__studentuser__username']

@admin.register(SubInstituteTeacher)
class SubInstituteTeacherAdmin(admin.ModelAdmin):
    list_display = ['id','name','designation','sub_institute']
    readonly_fields = ['sub_institute']

@admin.register(SubInstitute)
class SubInstituteAdmin(admin.ModelAdmin):
    list_display = ['name', 'approved_by_main_institute']
    readonly_fields = ['sub_institute_user', 'parent_institute', 'trades', 'wishlist_students', 'students',]

class TeacherCourseInline(admin.TabularInline):
    model = TeacherCourse.teacher_course_category.through
    extra = 0

@admin.register(TeacherCourseCategory)
class TeacherCourseCategoryAdmin(admin.ModelAdmin):
    list_display = ['id','name', 'colour', 'thumbnail']
    list_editable = ['name', 'colour', 'thumbnail']
    readonly_fields = ['teacher_courses']
    inlines = [TeacherCourseInline]

@admin.register(TeacherCourse)
class TeacherCourseAdmin(admin.ModelAdmin):
    list_display = ['id', 'name']

@admin.register(TeacherDetails)
class TeacherDetailsAdmin(admin.ModelAdmin):
    readonly_fields = ['teacher', 'course', 'subjectTeacherCourse', ]

@admin.register(TeacherPermission)
class TeacherPermissionAdmin(admin.ModelAdmin):
    pass

@admin.register(Teacher)
class TeacherAdmin(admin.ModelAdmin):
    search_fields = ('id', 'name', 'teacheruser__username','jdate','institute__typeInstitute')
    list_filter = ('teacher__course','jdate')
    list_display = ('name', 'id', 'jdate', 'contact','upi_id','teacher_code')
    fields = ['teacheruser', 'name','institute', 'batches','mainTeacher', 'firebaseToken', 'photo',
              'permissions','jdate', 'planValidity', 'webAppTeacher', 'teacherIpAddress']
    readonly_fields = ['teacheruser','institute','batches','subjects','permissions','teacherFirebaseTokens']

@admin.register(WebAppUser)
class WebAppUserAdmin(admin.ModelAdmin):
    search_fields = ['teacher__teacheruser__username']
    list_display = ['id', 'webappuser', 'teacher']
    readonly_fields = ['webappuser', 'teacher']
    autocomplete_fields = ['webappuser', 'teacher']

@admin.register(Principle)
class PrincipleAdmin(admin.ModelAdmin):
    list_display = ['id','teacheruser', 'name',]
    readonly_fields = ['teacheruser',]
    filter_horizontal = ('institute',)
    
    def formfield_for_manytomany(self, db_field, request, **kwargs):
        if db_field.name == 'institute':
            kwargs['queryset'] = Institute.objects.filter(typeInstitute='Premium')
        return super().formfield_for_manytomany(db_field, request, **kwargs)

@admin.register(PaidAmountStudentExam)
class PaidAmountStudentExamAdmin(admin.ModelAdmin):
    list_display = ['id','student', 'paidAmount',]
    readonly_fields = ['student',]
    search_fields = ['student__studentuser__username']
    
@admin.register(RegisterExam)
class RegisterExamAdmin(admin.ModelAdmin):
    list_display = ['id','student', 'name',]
    readonly_fields = ['student','institute',]
    search_fields = ['student__studentuser__username']

@admin.register(AdmitCard)
class AdmitCardadmin(admin.ModelAdmin):
    list_display = ['id','roll_number', 'exam_city',]

@admin.register(ScoreCard)
class ScoreCardadmin(admin.ModelAdmin):
    list_display = ['id','name_of_examination', 'score',]
    readonly_fields = ['register_no',]

@admin.register(BatchLimitChangeRequest)
class BatchLimitChangeRequestadmin(admin.ModelAdmin):
    list_display = ['id','institute', 'studentLimit',]
    readonly_fields = ['institute','batch']
    
@admin.register(Branch)
class Branchadmin(admin.ModelAdmin):
    list_display = ['id','institute', 'name']
    
@admin.register(BoardInstitutes)
class BoardInstitutesadmin(admin.ModelAdmin):
    list_display = ['id','institute', 'board', 'city', 'state']
    search_fields = ['state__name']
    
@admin.register(State)
class Stateadmin(admin.ModelAdmin):
    list_display = ['id','name', 'code']
    search_fields = ['name']

@admin.register(City)
class Cityadmin(admin.ModelAdmin):
    list_display = ['id', 'name', 'state']
    search_fields = ['id','name','state__id','state__name']
    
@admin.register(Board)
class Boardadmin(admin.ModelAdmin):
    list_display = ['id','name']
    
    
    


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/tests.py
--------------------------------------------------

from django.test import TestCase



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/urls.py
--------------------------------------------------

from django.urls import path
from membership import views

app_name = 'membership'
urlpatterns = [
    path("login/", views.teacher_login, name="teacherLogin"),
    path('logout/', views.user_logout, name='logout'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/views.py
--------------------------------------------------

from django.shortcuts import render, reverse, redirect, HttpResponseRedirect
from .forms import LoginForm
from django.http import HttpResponse
from django.contrib.auth import (authenticate,login,logout,update_session_auth_hash)
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import auth, User
from django.contrib import messages
from rest_framework.authtoken.models import Token
import requests
import json

def teacher_login(request):
    if request.user.is_authenticated:
        user = request.user
        if user.groups.filter(name='Teachers').exists():
            return HttpResponseRedirect(reverse('basic:home'))
        
    if request.method == "POST":
        form = LoginForm(request.POST)
        username = request.POST['username']
        password = request.POST['password']
        if len(password) > 2:
            print('username {}, password {}'.format(username, password))
            user = authenticate(username=username, password=password)

            if user is not None:
                if user.is_active:
                    login(request, user)
                    token, created = Token.objects.get_or_create(user=user)
                    token = token.key

                    header = {
                        "Authorization": f"token {token}",
                        "Content-Type": "application/json",
                    }
                    url = f"https://bodhiai.live/api/content/teacher_terminate_live_videos/"
                    response = requests.get(url=url, headers=header)
                    return HttpResponseRedirect(reverse('basic:home'))
            else:
                try:
                    user = User.objects.get(username=username)
                    messages.error(request, 'Incorrect Password')
                    context = {'form': form}
                    return redirect('/membership/login/')
                
                except User.DoesNotExist:
                    messages.error(request, 'Incorrect Username')
                    context = {'form': form}
                    return render(request, 'membership/teacher_login2.html', context)

        context = {'form': form}
        return render(request, 'membership/teacher_login2.html', context)
    else:
        form = LoginForm()
        context = {'form': form}
        return render(request, 'membership/teacher_login2.html', context)


def user_logout(request):
    if request.user.is_authenticated:
        logout(request)
        return HttpResponseRedirect(reverse('membership:teacherLogin'))
    else:
        return HttpResponseRedirect(reverse('membership:teacherLogin'))
    


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/api/serializers.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/api/__init__.py
--------------------------------------------------



==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/api/urls.py
--------------------------------------------------

from django.urls import include, re_path as url
from django.urls import path
from membership.api import views

urlpatterns = [
    url(r'delete_user/$', views.DeleteUser.as_view(),name='delete_user'),
    url(r'delete_teacher/$', views.DeleteTeacher.as_view(),name='delete_teacher'),
    path('delete_teacher_token/<int:user_id>/', views.DeleteTeacherToken.as_view(), name='delete_teacher_token'),
    url(r'student_delete/$', views.StudentDelete.as_view(), name='StudentDelete'),
    
    url(r'send_otp_multipurpose/$',views.SendSMSOTPforMultiPurpose.as_view(), name='SendSMSOTPforMultiPurpose'),
    url(r'send_otp_multipurpose_email/$',views.SendEmailOTPforMultiPurpose.as_view(), name='SendEmailOTPforMultiPurpose'),
    url(r'institute_details_to_student/$',views.InstituteDetailsToStudent.as_view(), name='InstituteDetailsToStudent'),
    url(r'register_student/$', views.RegisterStudent.as_view(),name='registerStudent'),
    url(r'login_student/$', views.LoginStudent.as_view(), name='loginStudent'),
    url(r'login_student_new/$', views.LoginStudentNew.as_view(),name='loginStudentNew'),
    url(r'login_emennta_students/$', views.LoginEmenntaStudents.as_view(),name='login_emennta_students'),
    url(r'register_student_new/$', views.RegisterStudentNew.as_view(),name='registerStudentNew'),
    url(r'register_demo_student/$', views.RegisterDemoStudent.as_view(),name='register_demo_student'),
    url(r'create_institute_admin/$', views.CreateInstituteAdmin.as_view(), name='CreateInstituteAdmin'),
    url(r'login_institute_admin/$', views.LoginInstituteAdmin.as_view(), name='LoginInstituteAdmin'),
    url(r'login_teacher/$', views.LoginTeacher.as_view(), name='loginTeacher'),
    url(r'login_parent/$', views.LoginParent.as_view(), name='LoginParent'),
    url(r'forget_password_send_otp/$',views.GenerateOTPChangePassword.as_view(), name='forgetPasswordChangeOTP'),
    url(r'change_password/$', views.ChangePassword.as_view(), name='changePassword'),
    url(r'teacher_student_register/$',views.TeacherStudentRegister.as_view(), name='teacherStudentRegister'),
    url(r'teacher_student_register_batchwise_limit/$',views.TeacherStudentRegisterBatchwiseLimit.as_view(), name='TeacherStudentRegisterBatchwiseLimit'),
    url(r'create_teacher/$', views.TeacherCreateTeacher.as_view(),name='teacherCreateTeacher'),
    url(r'delete_teacher/$', views.DeleteTeacher.as_view(), name='deleteTeacher'),
    url(r'teacher_get_number/$', views.TeacherGetNumber.as_view(),name='teacherGetNumber'),
    url(r'teacher_change_password/$',views.TeacherChangePassword.as_view(), name='teacherChangePassword'),
    url(r'teacher_update_photo/$', views.TeacherUploadPhoto.as_view(),name='teacherUpdatePhoto'),
    url(r'teacher_get_photo/$', views.TeacherGetPhoto.as_view(),name='teacherGetPhoto'),
    url(r'register_parent/$', views.RegisterParent.as_view(), name='registerParent'),
    url(r'register_teacher_lite/$', views.RegisterTeacherLite.as_view(),name='registerTeacherLite'),
    url(r'login_lite_teacher/$', views.LoginTeacherLite.as_view(),name='loginTeacherLite'),
    url(r'student_check_existing_course/$',views.StudentCheckCourseB2C.as_view(), name='studentCheckCourseB2C'),
    url(r'get_all_courses_b2c/$',views.GetCoursesAllB2C.as_view(), name='getAllB2CCourses'),
    url(r'assign_courses_student/$', views.AssignCourseStudent.as_view(),name='assignCoursesStudent'),
    url(r'lite_change_institute/$', views.ChangeLiteStudentInstitute.as_view(),name='changeInstituteBodhiLite'),
    url(r'register_webapp_user/$', views.RegisterWebAppUser.as_view(),name='registerWebAppUser'),
    url(r'check_user_exists/$', views.CheckIfUserExists.as_view(),name='checkIfUserExists'),
    
    url(r'send_otp_rankup/$', views.SendOtpRankup.as_view(), name='SendOtpRankup'),
    url(r'send_otp_totalexamplus/$', views.SendOtpTotalExamPlus.as_view(),name='SendOtpTotalExamPlus'),
    url(r'send_otp_etuson/$', views.SendOtpEtuson.as_view(), name='SendOtpEtuson'),
    url(r'send_otp_pravinata/$', views.SendOtpPravinata.as_view(),name='SendOtpPravinata'),
    url(r'send_otp_credence/$', views.SendOtpCredence.as_view(),name='SendOtpCredence'),
    url(r'send_otp_atLive/$', views.SendOtpAtLive.as_view(), name='SendOtpAtLive'),
    url(r'send_otp_ankisha_computers/$',views.SendOtpAnkishaComputers.as_view(), name='SendOtpAnkishaComputers'),
    url(r'send_otp_as_education_academy/$',views.SendOtpAsEducationAcademy.as_view(), name='SendOtpAsEducationAcademy'),
    url(r'staff_delete_user/$', views.StaffDeleteUser.as_view(),name='StaffDeleteUser'),
    url(r'student_update_course/$', views.StudentUpdateCourse.as_view(),name='StudentUpdateCourse'),
    url(r'find_institute_bycode/$', views.FindInstituteByCode.as_view(),name='FindInstituteByCode'),
    url(r'login_student_shiksharth/$', views.LoginStudentShiksharth.as_view(),name='LoginStudentShiksharth'),
    url(r'register_student_by_own_shiksharth/$', views.RegisterStudentByStudent.as_view(),name='RegisterStudentByStudent'),
    url(r'register_student_by_institute_admin/$', views.RegisterStudentShiksharth.as_view(),name='RegisterStudentShiksharth'),
    url(r'update_subteacher_username/$', views.UpdateSubTeacherUsername.as_view(),name='UpdateSubTeacherUsername'),
    url(r'check_access_key/$', views.CheckAccessKey.as_view(),name='CheckAccessKey'),
    url(r'main_institute_register_student/$', views.MainInstituteRegisterStudent.as_view(),name='MainInstituteRegisterStudent'),
    url(r'main_institute_add_student_inTrade/$', views.MainInstituteAddStudentInTrade.as_view(),name='MainInstituteAddStudentInTrade'),
    
    url(r'register_emennta_students/$', views.RegisterEmenntaStudents.as_view(),name='register_emennta_students'),
    url(r'register_student_mennta/$', views.RegisterStudentMennta.as_view(),name='RegisterStudentMennta'),
    url(r'principle_register/$', views.PrincipleCreate.as_view(), name='PrincipleCreate'),
    url(r'principle_login/$', views.PrincipleLogin.as_view(), name='PrincipleLogin'),
    url(r'principle_institute_list/$', views.PrincipleInstituteList.as_view(), name='PrincipleInstituteList'),
    url(r'principle_institute/$', views.PrincipleInstitute.as_view(), name='PrincipleInstitute'),
    url(r'institute_list_without_primary/$', views.PrinciplenotPrimaryInstitute.as_view(), name='PrinciplenotPrimaryInstitute'),
    url(r'primary_institute_subject/$', views.PrinciplenotInstituteSubject.as_view(), name='PrinciplenotInstituteSubject'),
    url(r'institute_subject_list/$', views.InstituteSubjectList.as_view(), name='InstituteSubjectList'),
    url(r'institute_package_list/$', views.InstitutePackageList.as_view(), name='InstitutePackageList'),
    url(r'primary_institute_package/$', views.PrinciplenotInstitutePackage.as_view(), name='PrinciplenotInstitutePackage'),
    url(r'forgot_password/$', views.ForgotPassword.as_view(), name='forgot_password'),
    url(r'principle_all_institutes/$', views.PrincipleAllInstitute.as_view(), name='principle_all_institutes'),
    url(r'institute_board_list/$', views.InstituteBoardList.as_view(), name='institute_board_list'),
    url(r'add_board_institute/$', views.AddBoardInstitute.as_view(), name='add_board_institute'),
    url(r'board_wise_institute_list/$', views.BoardWiseInstituteList.as_view(), name='board_wise_institute_list'),
    url(r'search_board_institute/$', views.SearchBoardInstitute.as_view(), name='search_board_institute'),
    url(r'board_institute_filter_all/$', views.BoardInstituteFilterAll.as_view(), name='board_institute_filter_all'),
    url(r'add_city/$', views.AddCity.as_view(), name='add_city'),
    url(r'all_state_list/$', views.AllStateList.as_view(), name='all_state_list'),
    url(r'state_wise_city_list/$', views.StateWiseCityList.as_view(), name='state_wise_city_list'),
    url(r'board_wise_state_list/$', views.BoardWiseStateList.as_view(), name='board_wise_state_list'),
    url(r'board_state_wise_city_list/$', views.BoardStateWiseCityList.as_view(), name='board_state_wise_city_list'),
    url(r'daily_register_students_list_download/$', views.DailyRegisterStudentsListDownload.as_view(), name='daily_register_students_list_download'),
    url(r'daily_register_students_list/$', views.DailyRegisterStudentsList.as_view(), name='daily_register_students_list'),
    
    url(r'function/$', views.RStudent.as_view(), name='RStudent'),
    url(r'count_student/$', views.CountStudent.as_view(), name='count_student'),
    url(r'institute_batch_list/$', views.InstituteBatchList.as_view(), name='InstituteBatchList'),
    url(r'institute_batch_create_with_student_limit/$', views.InstituteBatchCreateWithLimit.as_view(), name='InstituteBatchCreateWithLimit'),
    url(r'institute_batch_edit_with_student_limit/$', views.InstituteBatchEditWithLimit.as_view(), name='InstituteBatchEditWithLimit'),
    url(r'teacher_request_batch_limit_change/$', views.TeacherRequestBatchLimitIncress.as_view(), name='TeacherRequestBatchLimitIncress'),
    url(r'all_institute_batch_limit_change_request/$', views.SuperAdminAllRequestBatchLimit.as_view(), name='SuperAdminAllRequestBatchLimit'),
    url(r'accept_batch_limit_change_request/$', views.AcceptBatchLimitChangeRequest.as_view(), name='AcceptBatchLimitChangeRequest'),
    url(r'get_institute_name_by_code/$', views.GetInstituteNameByCode.as_view(), name='get_institute_name_by_code'),
    url(r'get_institute_details_by_code/$', views.GetInstituteDetailsByCode.as_view(), name='get_institute_details_by_code'),
    url(r'add_batches_institute/$', views.AddBatchesInstitute.as_view(),name='add_batches_institute'),
    url(r'send_message_all_teachers/$',views.SendMessageAllTeachers.as_view(), name='send_message_all_teachers'),
    url(r'total_main_teacher/$',views.TotalMainTeacher.as_view(), name='total_main_teacher'),
    path('export-premium-institutes/', views.ExportPremiumInstitutesCSV.as_view(), name='export_premium_institutes_csv'),
]


==================================================

FILE: /Users/prashantpandey/Desktop/programming/projects/bodhiai/membership/api/views.py
--------------------------------------------------

import string
from django.db.models import DateField
from django.db.models.functions import Cast
from django.utils import timezone
from numpy import delete
from rest_framework.views import APIView
from membership.models import *
from django.db import transaction
from django.views.decorators.csrf import csrf_exempt
from django.middleware.csrf import get_token
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from django.contrib.auth.models import User, Group
from django.contrib.auth import authenticate
from django.contrib.auth import login as django_login, logout as django_logout
from basicinformation.api.helperFunctions import *
from basicinformation.tasks import *
from random import randint
from basicinformation.models import *
from content.models import *
import datetime
from django_user_agents.utils import get_user_agent
from django.db.models import Q
from gaming.api.views import *
import csv
import pandas as pd  
from django.http import HttpResponse
from rest_framework import status
from celery.result import AsyncResult
from celery_progress.backend import ProgressRecorder

class SendSMSOTPforMultiPurpose(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        code = data['code']

        otp = randint(1000, 9999)
        message = otp
        
        message_teamex = f"Dear {phone} Your OTP/Authentication Code is :{otp}"
        institute_code_for_variable_otp_function = [
            'rankup',
            'totalexam',
            '@pravinata',
            'cdl',
            'atla',
            'ankisha',
            'uia',
            'teamex',
            'cranax',
            'pcbtnursing',
        ]

        if code in institute_code_for_variable_otp_function:
            if code == 'rankup':
                response = send_otp_via_rankup(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'totalexam':
                response = send_otp_via_totalExamPlus(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            
            elif code == '@pravinata':
                response = send_otp_Pravinata(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'cdl':
                response = send_otp_Credence(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'atla':
                response = send_otp_atLive(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'ankisha':
                response = send_otp_ankisha_computers(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'uia':
                response = send_otp_as_ujjwal_IAS_academy(phone, message)
                context = {'status': True, "message": response, 'otp': otp}
                return Response(context)
            
            elif code == 'cranax':
                response = send_otp_textlocal_by_cranax(phone, message)
                context = {'status': True, 'message': response, 'otp': otp}
                return Response(context)
            
            elif code == 'pcbtnursing':
                response = send_otp_textlocal_by_pcbtnursing(phone, message)
                context = {'status': True, 'message': response, 'otp': otp}
                return Response(context)
            
            elif code == 'teamex':
                response = send_otp_as_teamex(phone, message_teamex)
                context = {'status': True, 'message': response, 'otp': otp}
                return Response(context)

        elif code:
            try:
                smsCount = SMSCount.objects.get(institute__code=code)
                if smsCount.remaining < 1:
                    context = {'status': False,'message': 'Your Institute OTP balance is over'}
                    return Response(context)
                else:
                    generateNewSMSCount = False
                    status = save_otp_details(code, phone, message, generateNewSMSCount)
                    status = send_otp_textlocal(phone, message)

            except SMSCount.DoesNotExist:
                generateNewSMSCount = True
                status = save_otp_details(code, phone, message, generateNewSMSCount)
                status = send_otp_textlocal(phone, message)
                
            response = status
        else:
            response = send_otp_textlocal(phone, message)

        context = {'status': True, 'otp': otp, 'message': response}
        return Response(context)

class SendEmailOTPforMultiPurpose(APIView):
    def post(self, request):
        data = request.data
        otp = randint(1000, 9999)
        code = data['code']
        institute = Institute.objects.get(code=code)

        sender_email = institute.send_otp_email
        reciver_email = data['email']
        subject = "Verification"
        message = f"Your OTP to login is {otp}"

        if code == 'ou':
            message = f"Your OTP to login is {otp}"
            response = send_otp_by_mail(sender_email, reciver_email, subject, message, )
        else:
            response = send_otp_by_mail(sender_email, reciver_email, subject, message, )

        if response == 1:
            context = {'status': True, "message": "OTP send successfully on given Email", 'otp': otp}
        else:
            context = {'status': False, "message": response}
            
        return Response(context)


class InstituteDetailsToStudent(APIView):
    def get(self, request):
        try:
            me = Studs(self.request.user)
            institute = me.profile.institute
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            teacherdetails, created = TeacherDetails.objects.get_or_create(teacher=teacher)
            institute_dict = {
                "id": institute.id,
                "name": institute.name,
                "main_teacher": teacher.name,
                "phone": teacherdetails.phone,
                "email": teacherdetails.email,
                "logo": institute.logo,
                "instituteAddress": institute.instituteAddress,
            }
            return Response({"status": True, "data": institute_dict})
        except Exception as e:
            return Response({"status": False, "message": str(e)})

class RegisterStudent(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        institute_code = data['institute_code']
        username = username.strip()
        
        try:
            user_batches = data['batches']
            batch_list = user_batches.strip('][').split(',')
        except:
            batch_list = None
        
        try:
            institute = Institute.objects.get(code=institute_code)
            try:
                user = User.objects.create_user(username=username, password=password, email=None)
                first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                teacher = list(Teacher.objects.filter(institute=institute))[0]

                student = Student()
                student.name = name
                student.institute = institute
                student.studentuser = user
                joininig_date = datetime.datetime.now()
                student.jdate = joininig_date
                student.save()
                student.batches.add(first_batch)
                student.save()
                
                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.save()
                if batch_list:
                    joinRequest = StudentJoinRequest()
                    joinRequest.student = student
                    joinRequest.institute = institute
                    joinRequest.save()
                    for bat in batch_list:
                        try:
                            batch_obj = Batch.objects.get(id=bat)
                            joinRequest.batches.add(batch_obj)
                            joinRequest.save()
                        except Exception as e:
                            print(str(e))
                            
                    if institute.joinRequestAutomatic:
                        student.batches.clear()
                        try:
                            for bat in batch_list:
                                batch_obj = Batch.objects.get(id=bat)
                                student.batches.add(batch_obj)
                                student.save()
                        except Exception as e:
                            print(str(e))
                f_sent = 'register'
                try:
                    app_token = app_serverKey(institute_code)
                    deviceId = teacher.firebaseToken
                    to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                    send_notification_individual(app_token, deviceId, to_text)
                    teacher_id = teacher.id
                    notification = {'title':'New Notification', 'body': to_text}
                except Exception as f:
                    f_sent = f
                    print(str(f))

                context = {'status': 'Success','name': student.name,'institute': student.institute.name}
                me = Studs(user)
                me.add_subjects()
                me.add_tests()
                return Response(context)

            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed', 'message': 'Institute code not found'}
            return Response(context)



class LoginStudentShiksharth(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        phone = data['phone']
        password = data['password']
        admin_code = data['admin_code']
        try:
            username = phone + "@" + admin_code + "_"
            user = User.objects.get(username__startswith = username)
            username = user.username
            
            if len(username) > 2 and len(password) > 2:
                user = authenticate(username=username, password=password)
                django_login(request, user)
                groups = user.groups.all()
                if groups[0].name == 'Students':
                    token, created = Token.objects.get_or_create(user=user)
                    student = Student.objects.get(studentuser=user)
                    showCourse = student.institute.showCourseUI
                    context = {
                        'status': 'Success', 
                        'key': token.key, 
                        'user_type': groups[0].name, 
                        'name': student.name, 
                        'username': user.username,
                        'showCourse': showCourse, 
                        'institute': student.institute.name, 
                        'instituteCode': student.institute.code
                        }
                    
                else:
                    context = {'status': 'Failed', 'message': 'Not a Student'}
                        
            else:
                context = {'status': 'failed', 'message': 'Length of Username or Password too Short.'}
              
        except Exception as e:
            context = {'status':'failed','message': str(e)}

        return Response(context)
        
class LoginStudent(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        
        try:
            try:
                institute_code = data['institute_code']
            except:
                pass
            
            if len(username) > 2 and len(password) > 2:
                if username == '6006':
                    try:
                        user = User.objects.get(username='6006')
                        user.delete()
                    except:
                        pass
                    
                    reg = internal_student_register(institute_code)
                    user = authenticate(username=username, password=password)
                    django_login(request, user)
                    
                    groups = user.groups.all()
                    if groups[0].name == 'Students':
                        token, created = Token.objects.get_or_create(user=user)
                        student = Student.objects.get(studentuser=user)
                        showCourse = student.institute.showCourseUI
                        context = {
                            'status': 'Success', 
                            'key': token.key, 
                            'user_type': groups[0].name, 
                            'name': student.name, 
                            'username': user.username,
                            'institute': student.institute.name, 
                            'showCourse': showCourse, 
                            'instituteCode': student.institute.code
                            }
                    else:
                        context = {'status': 'Failed', 'message': 'Not a student'}

                else:
                    user = authenticate(username=username, password=password)
                    django_login(request, user)
                    groups = user.groups.all()
                    if groups[0].name == 'Students':
                        token, created = Token.objects.get_or_create(user=user)
                        student = Student.objects.get(studentuser=user)
                        showCourse = student.institute.showCourseUI
                        context = {
                            'status': 'Success', 
                            'key': token.key, 
                            'user_type': groups[0].name, 
                            'name': student.name, 
                            'username': user.username,
                            'institute': student.institute.name, 
                            'showCourse': showCourse, 
                            'instituteCode': student.institute.code
                            }
                    else:
                        context = {'status': 'Failed', 'message': 'Not a student'}

            else:
                context = {'status': 'failed', 'message': 'length of username or password too short'}
                
        except Exception as e:
            context = {'status':'failed', 'message':str(e)} 
            
        return Response(context)
        

class CreateInstituteAdmin(APIView):
    def post(self, request):
        try:
            with transaction.atomic():
                data = request.data
                username = data['admin_username']
                password = data.get('password', '123')
                name = data['name']
                admin_code = data['admin_code']
                code = admin_code + '_' + data['code']
                try:
                    Institute.objects.get(code=code)
                    context = {'status': 'Failed', 'message': 'Already Created this Code'}
                    return Response(context)
                except:
                    pass
                
                institute_name = data['institute_name']
                teacher_username = data['teacher_username']
                if len(code) > 19:
                    context = {'status' : False,'message' : 'Code length is too long'}
                    return Response(context)

                user = User.objects.create_user(username=username, password=password, email=None)
                group = Group.objects.get(name='InstituteAdmin')
                group.user_set.add(user)

                institute_Admin = InstituteManagementAdmin.objects.create(user=user, name=name, admin_code=admin_code)

                institute = Institute()
                institute.AdminUser = institute_Admin
                institute.name = institute_name
                institute.code = code
                institute.save()

                instituteDetails = InstituteDetails()
                instituteDetails.institute = institute
                instituteDetails.save()

                batch = Batch()
                batch.name = 'Outer'
                batch.institute = institute
                batch.save()
                teacher_username = User.objects.create_user(username=teacher_username, password='123', email=None)
                group = Group.objects.get(name='Teachers')
                group.user_set.add(user)
                teacher = Teacher(teacheruser=teacher_username, name=institute_name +' Teacher', institute=institute, mainTeacher=True)
                batches = Batch.objects.filter(institute=institute)
                teacher.save()
                teacher.batches.add(*batches)
                context = {'status': True, 'message': 'Institute created successfully'}

                return Response({'status':True, 'message': 'Institute Admin Created Successfully'})
        except Exception as e:
            return Response({'status':False, 'message': str(e)})

class LoginInstituteAdmin(APIView):
    def post(self, request):
        try:
            data = request.data
            username = data['username']
            password = data['password']
            firebase_token = data.get('firebase_token', '')
            if len(username) > 2 and len(password) > 2:
                username = username.strip()
                user = authenticate(username=username, password=password)
                groups = user.groups.order_by('-id')
                for group in groups:
                    if group.name == 'InstituteAdmin':
                        token, created = Token.objects.get_or_create(user=user)
                        me = InstituteAdmin(user=user)
                        me.profile.firebaseToken = firebase_token
                        me.profile.save()
                        context = {
                            'status': True, 
                            'key': token.key, 
                            'user_type': group.name, 
                            'name': me.name, 
                            'username': user.username,
                            'institute': '', 
                            'code': me.profile.admin_code, 
                            'mainTeacher': '', 
                            'appUrl': ''
                            }
            return Response({'status': False, 'message': 'Not Valid Credentails'})
        
        except Exception as e: 
            context = {'status': False, 'message':str(e)}
        
        return Response(context)

class LoginTeacher(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        if len(username) > 2 and len(password) > 2:
            username = username.strip()
            user = authenticate(username=username, password=password)
            groups = user.groups.all()
            if groups[0].name == 'Teachers':
                token, created = Token.objects.get_or_create(user=user)
                teacher = Teacher.objects.get(teacheruser=user)
                appUrl = teacher.institute.webAppUrl
                teacher_code = teacher.teacher_code
                context = {
                    'status': 'Success', 
                    'key': token.key, 
                    'user_type': groups[0].name, 
                    'name': teacher.name, 
                    'username': user.username,
                    'institute': teacher.institute.name, 
                    'code': teacher.institute.code, 
                    'mainTeacher': teacher.mainTeacher, 
                    'appUrl': appUrl,
                    'teacher_code': teacher_code
                    }
            
            elif groups[0].name == 'WebAppUsers':
                token, created = Token.objects.get_or_create(user=user)
                webUser = WebAppUser.objects.get(webappuser=user)
                try:
                    teacher = webUser.teacher
                    code = teacher.institute.code
                    mainTeacher = True
                    instituteName = teacher.institute.name
                    appUrl = teacher.institute.webAppUrl
                except:
                    teacher = ''
                    code = ''
                    mainTeacher = True
                    instituteName = ''
                    appUrl = ''
                    
                context = {
                    'status': 'Success', 
                    'key': token.key, 
                    'user_type': groups[0].name, 
                    'name': webUser.name,
                    'username': user.username, 
                    'institute': instituteName, 
                    'code': code, 
                    'mainTeacher': mainTeacher, 
                    'appUrl': appUrl
                    }
            else:
                context = {'status': 'Failed', 'message': 'Not a teacher'}
        else:
            context = {'status': 'failed', 'message': 'length of username or password too short'}
        
        return Response(context)
        

class LoginTeacherLite(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        try:
            institute_code = data['institute_code']
        except:
            pass

        if len(username) > 2 and len(password) > 2:
            username = username.strip()
            new_username = username+'@'+institute_code
            user = authenticate(username=new_username, password=password)
            django_login(request, user)
            groups = user.groups.all()
            if groups[0].name == 'Teachers':
                token, created = Token.objects.get_or_create(user=user)
                teacher = Teacher.objects.get(teacheruser=user)
                context =\
                    {'status': 'Success', 'key': token.key, 'user_type': groups[0].name, 'name': teacher.name,
                        'username': user.username, 'institute': teacher.institute.name, 'mainTeacher': teacher.mainTeacher}
            else:
                context = {'status': 'Failed', 'message': 'Not a teacher'}
        else:
            context = {'status': 'failed', 'message': 'length of username or password too short'}
        
        return Response(context)
        

class RegisterWebAppUser(APIView):
    def post(self, request):
        data = request.data
        username = data['phone']
        name = data['name']
        password = data['password']
        user = User.objects.create_user(username=username, password=password, email=None)
        user.save()
        webUser = WebAppUser()
        webUser.webappuser = user
        webUser.name = name
        
        if len(username) > 12:
            pass
        else:
            webUser.phone = username
            
        webUser.save()
        group = Group.objects.get(name='WebAppUsers')
        group.user_set.add(user)
        token, created = Token.objects.get_or_create(user=user)
        context = {'status': 'Success', 'key': token.key, 'user_type': group.name, 'name': name,
                   'username': user.username, 'institute': None, 'code': None, 'mainTeacher': None}
        return Response(context)

class GenerateOTPChangePassword(APIView):
    def post(self, request):
        data = request.data
        phone = data.get('phone')
        try:
            code = data.get('code')
        except:
            code = None

        otp = randint(1000, 9999)
        message = otp

        if code:
            try:
                smsCount = SMSCount.objects.get(institute__code=code)
                try:
                    sms_send = IndividualSMS.objects.filter(phone=phone).order_by('-id').first()
                    datetime_now = datetime.now()
                    last_sms_datetime = sms_send.date
                    duration = datetime_now - last_sms_datetime
                    if duration.total_seconds() < 180:
                        context = {'status': 'Failed','message': 'Try Again after sometime'}
                        return Response(context)
                except:
                    pass
                
                if smsCount.remaining < 1:
                    context = {'status': 'Failed','message': 'Your Institute OTP balance is over'}
                    return Response(context)

                else:
                    generateNewSMSCount = False
                    status = save_otp_details(code, phone, message, generateNewSMSCount)
                    status = send_otp_textlocal(phone, message)

            except SMSCount.DoesNotExist:
                generateNewSMSCount = True
                status = save_otp_details(code, phone, message, generateNewSMSCount)
                status = send_otp_textlocal(phone, message)

        else:
            status = send_otp_textlocal(phone, message)

        context = {'status': 200, 'otp': otp, 'response': status}
        return Response(context)

class FindInstituteByCode(APIView):
    def post(self, request):
        data = request.data
        code = data.get('code')
        if code:
            institutes = Institute.objects.filter(code=code)
            ins_list = []
            for institute in institutes:
                ins_dict = {'name': institute.name, 'code': institute.code}
                ins_list.append(ins_dict)

        context = {'status': 'success', 'ins_list': ins_list}
        return Response(context)


class ChangePassword(APIView):
    @csrf_exempt
    def post(self, request):
        data = request.data
        try:
            phone = data['username']
            password = data['new_password']
            password = password.strip()
            print('phone {}, password {}'.format(phone, password))
            try:
                user = User.objects.get(username=phone.strip())
            except:
                user = User.objects.get(username=phone.split('@')[0])

            groups = user.groups.all()
            group = Group.objects.get(name='Teachers')
            user.set_password(password)
            user.save()
            context = {'status': 'Success','message': 'Password Successfully Changed'}
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class TeacherStudentRegister(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        username = data['username']
        name = data['name']
        user_batches = data['batches']
        batch_list = user_batches.strip('][').split(',')
        username = username.strip()+'@'+str(me.profile.institute.code)
        institute = me.profile.institute
        try:
            try:
                user = User.objects.create_user(username=username, password='123', email=None)
            except:
                context = {'status': 'failed','message': 'Already Exist'}
                return Response(context)

            first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')
            group.user_set.add(user)

            student = Student()
            student.name = name
            student.institute = institute
            student.studentuser = user
            student.save()
            student.batches.add(first_batch)
            for bat in batch_list:
                if bat:
                    batch = Batch.objects.get(id=bat)
                    student.batches.add(batch)
            student.save()
            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.save()
            context = {'status': 'Success', 'name': student.name,'institute': student.institute.name}
            mestudent = Studs(user)
            mestudent.add_subjects()
            mestudent.add_tests()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

def internal_student_register(institute_code):
    username = '6006'
    password = '123'
    name = 'test user'
    try:
        institute = Institute.objects.get(code=institute_code)
        try:
            user =\
                User.objects.create_user(
                    username=username, password=password, email=None)
            first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')
            group.user_set.add(user)

            student = Student()
            student.name = name
            student.institute = institute
            student.studentuser = user
            joininig_date = datetime.datetime.now()
            student.jdate = joininig_date
            student.save()
            student.batches.add(first_batch)
            student.save()
            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.save()
            if batch_list:
                joinRequest = StudentJoinRequest()
                joinRequest.student = student
                joinRequest.institute = institute
                joinRequest.save()
                for bat in batch_list:
                    try:
                        batch_obj = Batch.objects.get(id=bat)
                        joinRequest.batches.add(batch_obj)
                        joinRequest.save()
                    except Exception as e:
                        print(str(e))
                if institute.joinRequestAutomatic:
                    student.batches.clear()
                    try:
                        for bat in batch_list:
                            batch_obj = Batch.objects.get(id=bat)
                            student.batches.add(batch_obj)
                            student.save()
                    except Exception as e:
                        print(str(e))

            context =\
                {'status': 'Success', 'name': student.name,
                    'institute': student.institute.name}
            me = Studs(user)
            me.add_subjects()
            me.add_tests()
            return context

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return context
    except Institute.DoesNotExist:
        context = {'status': 'Failed', 'message': 'Institute code not found'}
        return context

class RegisterStudentNew(APIView):
    @csrf_exempt
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        institute_code = data['institute_code']
        
        try:
            user_batches = data['batches']
            batch_lists = user_batches.strip('][').split(',')
            excluded_batches = ["Outer", "Demo", "Outer Testing"]
            batch_list = [batch for batch in batch_lists if Batch.objects.get(id=batch).name not in excluded_batches]
        except:
            batch_list = None
            
        try:
            email = data['email']
        except:
            email = None
            
        try:
            typeUser = data['typeUser']
        except:
            typeUser = None
            
        username = username.strip()
        try:
            institute = Institute.objects.get(code=institute_code)
            new_username = username + '@' + institute_code
            try:
                user = User.objects.create_user(username=new_username, password=password, email=None)
                if institute_code == 'dvcommerce':
                    first_batch = Batch.objects.get(id=110439)
                else:
                    first_batch = Batch.objects.filter(institute=institute).order_by('id').first()

                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                if institute_code=="eclassopedia":
                    teacher = Teacher.objects.get(id=84289)
                else:
                    teacher = Teacher.objects.get(institute=institute,mainTeacher=True)

                student = Student()
                student.name = name
                student.institute = institute
                student.studentuser = user
                import datetime
                joininig_date = datetime.datetime.now()
                student.jdate = joininig_date
                if typeUser != None:
                    student.typeUser = typeUser
                student.save()
                student.batches.add(first_batch)
                student.save()

                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.fullName = name
                studentDetails.save()
                
                try:
                    tcode = data['tcode']
                    if tcode:
                        try:
                            teacher = Teacher.objects.get(teacher_code = tcode)
                            register_offer = float(10) #coins per app sharing
                            
                            sharing_coins = TeacherAppSharingCoins()
                            sharing_coins.teacher = teacher
                            sharing_coins.student = student
                            sharing_coins.coins = register_offer
                            sharing_coins.save()
                            
                            try:
                                teacher_total_coins = TeacherTotalCoins.objects.get(teacher = teacher)
                                teacher_total_coins.total_coins += register_offer
                                teacher_total_coins.save()
                            except TeacherTotalCoins.DoesNotExist:
                                teacher_total_coins = TeacherTotalCoins(teacher = teacher, total_coins = register_offer)
                                teacher_total_coins.save()
                                
                        except Teacher.DoesNotExist:
                            context = {'status': False, 'message': 'Teacher code is not correct'}
                            return Response(context)
                                
                        except Exception as e:
                            context = {'status': False, 'message':str(e)}
                            return Response(context)
                except:
                    pass
                
                if batch_list:
                    if institute.joinRequestAutomatic:
                        student.batches.clear()
                        try:
                            for bat in batch_list:
                                batch_obj = Batch.objects.get(id=bat)
                                student.batches.add(batch_obj)
                                student.save()
                        except Exception as e:
                            print(str(e))
                    else:
                        joinRequest = StudentJoinRequest()
                        joinRequest.student = student
                        joinRequest.institute = institute
                        joinRequest.save()
                        for bat in batch_list:
                            try:
                                batch_obj = Batch.objects.get(id=bat)
                                joinRequest.batches.add(batch_obj)
                                joinRequest.save()
                            except Exception as e:
                                print(str(e))
                f_sent = 'register'

                if institute_code == 'quizeapp' or institute_code == 'testwin':
                    language = Language.objects.get(id=1)
                    language.students.add(student)
                    language.save()
                    response = CreateFreeChallenge.delay(student.id)

                try:
                    json_file = teacher.institute.json_file
                except Exception as e:
                    json_file = None
                    
                try:
                    if institute_code=="eclassopedia":
                        app_token = app_serverKey(institute_code)
                        to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                        teacher_id = teacher.id
                        notification = {'title':'New Notification', 'body': to_text}
                        if json_file == None:
                            send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                        else:
                            send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)
                            
                    else:
                        app_token = list(AppServerKey.objects.all())[0]
                        to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                        teacher_id = teacher.id
                        notification = {'title':'New Notification', 'body': to_text}
                        if json_file == None:
                            send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                        else:
                            send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)
                        
                except Exception as f:
                    f_sent = f
                    print(str(f))

                context = {'status': 'Success', 'name': student.name,'institute': student.institute.name}
                
                try:
                    me = Studs(user)
                    me.add_subjects()
                    me.add_tests()
                except:
                    pass
                return Response(context)
            
            except Exception as e:

                try:
                    user = User.objects.get(username=new_username)
                    try:
                        student = Student.objects.get(studentuser=user)
                        try:
                            studentdetails = StudentDetails.objects.get(student=student)
                            studentdetails.delete()
                            student.delete()
                            user.delete()
                        except StudentDetails.DoesNotExist:
                            student.delete()
                            user.delete()
                    except Student.DoesNotExist:
                        user.delete()
                except User.DoesNotExist:
                    pass

                context = {'status': 'Failed', 'message': str(e)}
                return Response(context)
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed','message': 'Institute code not found'}
            return Response(context)

class LoginStudentNew(APIView):
    def get(self, request):
        return Response({"detail": "GET request not allowed"}, status=405)
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        
        try:
            if len(username) > 2 and len(password) > 2:
                print('username login {}'.format(username))

                try:
                    user = authenticate(username=username, password=password)
                except:
                    new_username = username.split('@')[0]
                    user = authenticate(username=new_username, password=password)

                if user == None:
                    context = {'status': 'failed','message': 'Login Credentials are missing matching'}
                
                if user.username != "1112223330" or user.username != "1112223333":
                    django_login(request, user)

                groups = user.groups.all()
                if groups[0].name == 'Students':
                    token, created = Token.objects.get_or_create(user=user)
                    student = Student.objects.get(studentuser = user)
                    showCourse = student.institute.showCourseUI
                    context = {
                        'status': 'Success', 
                        'key': token.key, 
                        'user_type': groups[0].name, 
                        'name': student.name, 
                        'username': user.username,
                        'showCourse': showCourse, 
                        'institute': student.institute.name, 
                        'instituteCode': student.institute.code,
                        }
                else:
                    context = {'status': 'Failed', 'message': 'Not a student'}
            else:
                context = {'status': 'failed', 'message': 'length of username or password too short'}
                
        except Exception as e:
            context = {'status': 'failed', 'message': str(e)}
            
        return Response(context)

class TeacherCreateTeacher(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        username = data['username']
        password = data['password']
        try:
            institute = Institute.objects.get(code=me.profile.institute.code)
            institute = me.profile.institute
            batch = me.profile.batches.all()[0]
            if me.profile.institute.code == 'olee':
                length = 8
                characters = string.ascii_letters + string.digits
                random_code = ''.join(random.choice(characters) for _ in range(length))
            else:
                random_code = None
            
            new_user = User.objects.create_user(username=username, password=password, email=None)
            group = Group.objects.get(name='Teachers')
            group.user_set.add(new_user)
            
            teacher = Teacher()
            teacher.teacheruser = new_user
            teacher.name = name
            teacher.institute = me.profile.institute
            teacher.mainTeacher = False
            teacher.teacher_code = random_code
            teacher.save()
            teacher.batches.add(batch)
            teacher.save()
            
            teacherDetails = TeacherDetails()
            teacherDetails.teacher = teacher
            teacherDetails.save()
            context = {'status': 'Success', 'message': 'Teacher created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class DeleteTeacher(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            teacher = Teacher.objects.get(id=teacher_id)
            teacher.delete()
            context = {'status': 'Success', 'message': 'Teacher Deleted'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class StudentCheckCourseB2C(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        courses = me.profile.courses.all().count()
        context = {'courses': courses}
        return Response(context)

class GetCoursesAllB2C(APIView):
    def get(self, request):
        teacherCourses = TeacherCourse.objects.all()
        course_list = []
        for course in teacherCourses:
            course_dict = {'id': course.id, 'name': course.name}
            course_list.append(course_dict)
        context = {'courses': course_list}
        return Response(context)

class AssignCourseStudent(APIView):
    def post(self, request, *args, **kwargs):
        me = Studs(self.request.user)
        data = request.data
        courses = data['courses_id']
        course_list = courses.strip('][').split(',')
        for course_id in course_list:
            teacher_course = TeacherCourse.objects.get(id=course_id)
            me.profile.courses.add(teacher_course)
            me.profile.save()
        context = {'status': 'Success', 'message': 'Courses added'}
        return Response(context)



class TeacherChangePassword(APIView):
    def post(self, request):
        data = request.data
        try:
            username = data['username']
            new_password = data['new_password']
            
            context = {
                'status': 'Failed',
                'message': 'Contact the administrator'
            }
            
            user = User.objects.get(username=username)

        except Exception as e:
            context = {'status': 'Failed', 'message': 'Contact the administrator'}

        return Response(context)

class TeacherGetNumber(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        try:
            teacher_username = data['username']
            teacher = Teacher.objects.get(teacheruser__username=teacher_username)
            phone = teacher.institute.phoneNumber
            context = {'status': 'Success', 'message': phone}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherUploadPhoto(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        try:
            photo = data['photo']
            me.profile.photo = photo
            me.profile.save()
            context = {'status': 'Success', 'message': 'Photo updated'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class TeacherGetPhoto(APIView):
    def get(self, request):
        me = Teach(self.request.user)
        if me.profile.photo == None:
            photo =\
                'https://cdn1.iconfinder.com/data/icons/back-to-school-37/24/school-512.png'
        else:
            photo = me.profile.photo
        context = {'photo': photo}
        return Response(context)

class RegisterParent(APIView):
    def post(self, request, *args, **kwargs):
        data = request.data
        username = data['phone']
        password = '123'
        name = data['name']
        institute_code = data['institute_code']
        student_username = data['student_phone']
        username = username.strip()
        try:
            institute = Institute.objects.get(code=institute_code)
            try:
                new_username = username + '@' + institute_code
                user = User.objects.create_user(username=new_username, password=password, email=None)
                student = Student.objects.get(studentuser__username=student_username+'@'+institute_code)
                group = Group.objects.get(name='Parents')
                group.user_set.add(user)
                parent = Parent()
                parent.name = name
                parent.institute = institute
                parent.parentuser = user
                parent.save()
                parent.student.add(student)
                parent.save()
                context = {'status': 'Success', 'name': parent.name,'student': student.name}
            except Exception as e:
                context = {'status': 'Failed', 'message': str(e)}
        except Institute.DoesNotExist:
            context = {'status': 'Failed','message': 'Institute code not found'}
        
        return Response(context)

                




class LoginParent(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        if len(username) > 2 and len(password) > 2:
            username = username.strip()
            user = authenticate(username=username, password=password)
            django_login(request, user)
            groups = user.groups.all()
            if groups[0].name == 'Parents':
                token, created = Token.objects.get_or_create(user=user)
                parent = Parent.objects.get(parentuser=user)
                context =\
                    {'status': 'Success', 'key': token.key,
                        'user_type': groups[0].name, 'name': parent.name, 'username': user.username, 'institute': parent.institute.name}
                return Response(context)
            else:
                context = {'status': 'Failed', 'message': 'No Parent'}
                return Response(context)
        else:
            context = {'status': 'failed', 'message': 'length of username or\
                       password too short'}
            return Response(context)

class ChangeLiteStudentInstitute(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        new_institute_code = data['new_institute_code']
        try:
            institute = Institute.objects.get(code=new_institute_code)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        try:
            me.profile.institute = institute
            old_username = self.request.user.username
            username_code = old_username.split('@')[0:-1]
            new_username = username_code + '@' + new_institute_code
            self.request.user.username = new_username
            self.request.user.save()
            context = {'status': 'Success', 'message': 'Institute changed'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class RegisterTeacherLite(APIView):
    def institute_code_generate():
        letters = string.ascii_lowercase
        code = ''.join(random.choice(letters) for i in range(2))
        try:
            code = Institute.objects.get(code=code)
            institute_code_generate()
        except:
            return code

    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        email = data['email']
        course = data['course']
        institute_name = data['institute_name']
        code = institute_code_generate()
        institute = Institute()
        institute.name = institute_name
        institute.code = code
        institute.typeInstitute = 'Free'
        institute.save()
        institute_code = institute.code
        
        username = username.strip()
        new_username = username + '@' + code
        user = User.objects.create_user(username=new_username, password=password, email=email)
        group = Group.objects.get(name='Teachers')
        group.user_set.add(user)

        teacher = Teacher(teacheruser=user, name=name +'teacher_lite', institute=institute, mainTeacher=True)
        subject10 = Subject.objects.get(id=9)
        subject11 = Subject.objects.get(id=1680)
        subject12 = Subject.objects.get(id=267)
        teacher.save()
        teacher.subjects.add(subject10)
        teacher.subjects.add(subject11)
        teacher.subjects.add(subject12)
        teacher.save()
        batch = Batch()
        batch.name = 'Outer'
        batch.institute = institute
        batch.save()
        batches = Batch.objects.filter(institute=institute)
        batches_list = []
        for bat in batches:
            teacher.batches.add(bat)
            batches_list.append(bat.name)
            teacher.save()
        teacher_course = Course()
        teacher_course.name = course
        teacher_course.institute = institute
        teacher_course.save()

        f_sent = 'register'
        
        try:
            json_file = teacher.institute.json_file
        except Exception as e:
            json_file = None
            
        try:
            app_token = app_serverKey(institute_code)
            deviceId = teacher.firebaseToken
            to_text = 'Successfully Registered :{} - {}'.format(username, name)
            teacher_id = teacher.id
            notification = {'title':'New Notification', 'body': to_text}
            if json_file == None:
                send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
            else:
                send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)
           
        except Exception as f:
            f_sent = f
            print(str(f))
            
        context = {'status': 'Success', 'name': teacher.name, 'batches_list': batches_list,
                   'username': new_username, 'institute_code': code, 'institute': teacher.institute.name}
        return Response(context)


class CheckIfUserExists(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        try:
            User.objects.get(username=username)
            context = {'status': 'Failed', 'message': 'User already exists'}
        except User.DoesNotExist:
            context = {'status': 'Success', 'message': 'New User'}
        return Response(context)

class SendOtpRankup(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_via_rankup(phone, message)
        context = {'status': 200, 'otp': otp }
        return Response(context)

class SendOtpTotalExamPlus(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_via_totalExamPlus(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpEtuson(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        
        response = send_otp_textlocal(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpPravinata(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_Pravinata(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpCredence(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_Credence(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpAtLive(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_atLive(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpAnkishaComputers(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_ankisha_computers(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class SendOtpAsEducationAcademy(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        otp = randint(1000, 9999)
        message = otp
        status = send_otp_as_education_academy(phone, message)
        context = {'status': 200, 'otp': otp}
        return Response(context)

class StaffDeleteUser(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        try:
            User.objects.get(username=username).delete()
            context = {'status': 'success', 'message': 'Successfully Deleted'}
        except User.DoesNotExist:
            context = {'status': 'Failed', 'message': 'user not found'}
        return Response(context)

class StudentUpdateCourse(APIView):
    def post(self, request):
        me = Studs(self.request.user)
        data = request.data
        courses = data['courses_id']
        course_list = courses.strip('][').split(',')
        me.profile.courses.clear()
        for course_id in course_list:
            teacher_course = TeacherCourse.objects.get(id=course_id)
            me.profile.courses.add(teacher_course)
            me.profile.save()
        context = {'status': 'Success', 'message': 'Courses added'}
        return Response(context)


class RegisterStudentByStudent(APIView):
    def post(self, request):
        data = request.data
        admin_code = data['admin_code']
        password = "123"
        stu_name = data['name']
        stu_phone = data['phone']
        try:
            user_name = str(stu_phone) + '@' + admin_code + "_"
            User.objects.get(username__startswith=user_name)
            context = {'status': 'Failed','message': "Username Already Exist."}
            return Response(context)
        except User.DoesNotExist:
            with transaction.atomic():
                institute_admin = InstituteManagementAdmin.objects.get(admin_code=admin_code)
                institute = Institute.objects.filter(AdminUser=institute_admin).order_by('id').first()

                username = str(stu_phone) + '@' + institute.code
                user = User.objects.create_user(username=username, password=password, email=None)
                first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                teacher = list(Teacher.objects.filter(institute=institute))[0]
                student = Student()
                student.name = stu_name
                student.institute = institute
                student.studentuser = user
                joininig_date = datetime.now()
                student.jdate = joininig_date
                student.save()
                student.batches.add(first_batch)
                student.save()
                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.save()
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    deviceId = teacher.firebaseToken
                    to_text = 'Congratulations!! New student:{} - {}'.format(username, stu_name)
                    send_notification_individual(app_token, deviceId, to_text)
                except Exception as e:
                    context = {'status': 'Failed','message': str(e)}
                context = {'status':'Success','message':'Successfully Created'}
        except Exception as e:
            context = {'status': 'Failed','message': str(e)}
        return Response(context)

class RegisterStudentShiksharth(APIView):
    def post(self, request):
        data = request.data
        admin_code = data['admin_code']
        institute_code = data['institute_code']
        password = "123"

        try:
            csv_file = request.FILES['file']

            if not csv_file.name.endswith('.csv') and not csv_file.name.endswith('.xlsx'):
                context = {'status': 'Failed','message': "The file format should be either csv or xlsx."}

            elif csv_file.name.endswith('.csv'):
                df = pd.read_csv(csv_file)

            else:
                df = pd.read_excel(csv_file)

            name = df['name']
            phone = df['phone']
            output = []
            student_list = list(zip(name,phone))
            response = HttpResponse(content_type='text/csv')
            writer = csv.writer(response)
            writer.writerow(['name', 'phone','Response'])
                             
            for stu_name, stu_phone in student_list:
                resp = [stu_name, stu_phone]
                try:
                    user_name = str(stu_phone) + '@' + admin_code + '_'
                    user_exist = User.objects.get(username__startswith=user_name)
                    resp.append("False")
                    resp.append("Username Already Exist.")
                    context = {'status': 'Failed','message': "Username Already Exist."}
                except User.DoesNotExist:
                    with transaction.atomic():
                        institute = Institute.objects.get(code=institute_code)
                        username = str(stu_phone) + '@' + institute_code
                        user = User.objects.create_user(username=username, password=password, email=None)
                        first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                        batch = Batch.objects.get(name='Outer', institute=institute)
                        institute_code
                        group = Group.objects.get(name='Students')
                        group.user_set.add(user)
                        teacher = list(Teacher.objects.filter(institute=institute))[0]

                        student = Student()
                        student.name = stu_name
                        student.institute = institute
                        student.studentuser = user
                        joininig_date = datetime.now()
                        student.jdate = joininig_date
                        student.save()
                        student.batches.add(first_batch)
                        student.save()
                        studentDetails = StudentDetails()
                        studentDetails.student = student
                        studentDetails.save()
                        resp.append("TRUE")
                
                        try:
                            app_token = list(AppServerKey.objects.all())[0]
                            deviceId = teacher.firebaseToken
                            to_text = 'Congratulations!! New student:{} - {}'.format(username, name)
                            send_notification_individual(app_token, deviceId, to_text)
                        except Exception as e:
                            context = {'status': 'Failed','message': str(e)}
                except:
                    pass

                output.append(resp)
                
            writer.writerows(output)
            response['Content-Disposition'] = f'attachment; filename="response.csv"'
            return response

        except Exception as e:
            stu_name = data['name']
            stu_phone = data['phone']
            try:
                user_name = str(stu_phone) + '@' + admin_code + "_"
                User.objects.get(username__startswith=user_name)
                context = {'status': 'Failed','message': "Username Already Exist."}
                return Response(context)
            except User.DoesNotExist:
                with transaction.atomic():
                    institute = Institute.objects.get(code=institute_code)
                    username = str(stu_phone) + '@' + institute_code
                    user = User.objects.create_user(username=username, password=password, email=None)
                    first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                    batch = Batch.objects.get(name='Outer', institute=institute)
                    group = Group.objects.get(name='Students')
                    group.user_set.add(user)
                    teacher = list(Teacher.objects.filter(institute=institute))[0]
                    student = Student()
                    student.name = stu_name
                    student.institute = institute
                    student.studentuser = user
                    joininig_date = datetime.now()
                    student.jdate = joininig_date
                    student.save()
                    student.batches.add(first_batch)
                    student.save()
                    studentDetails = StudentDetails()
                    studentDetails.student = student
                    studentDetails.save()
                    try:
                        app_token = list(AppServerKey.objects.all())[0]
                        deviceId = teacher.firebaseToken
                        to_text = 'Congratulations!! New student:{} - {}'.format(username, name)
                        send_notification_individual(app_token, deviceId, to_text)
                    except Exception as e:
                        context = {'status': 'Failed','message': str(e)}
                    context = {'status':'Success','message':'Successfully Created'}
            except Exception as e:
                context = {'status': 'Failed','message': str(e)}
        return Response(context)

class UpdateSubTeacherUsername(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        try:
            teacher_id = data['teacher_id']
            username = data.get('username')
            name = data.get('name')
            teacher = Teacher.objects.get(id=teacher_id)
            if name:
                teacher.name = name
                teacher.save()

            user = User.objects.get(username=teacher.teacheruser.username)
            if username:
                user.username = username
                user.save()
                
            context = {'status': 'Success', 'message': 'Updated Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class CheckAccessKey(APIView):
    def post(self, request):
        data = request.data
        access_key = "Bodhi2017"
        
        if access_key == data['access_key']:
            context = {'status': 'Success', 'message': 'Key Verified'}
        else:
            context = {'status': 'Failed', 'message': 'Invalid Key'}

        return Response(context)

class MainInstituteRegisterStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        name = data['name']
        phone = data['phone']
        amount = data['amount']
        trade_details_id = data['trade_details_id']
        institute = me.profile.institute
        username = phone +"@"+institute.code
        try:
            trade_details = TradeDetails.objects.get(id=trade_details_id)
            try:
                user = User.objects.create_user(username=username, password='123', email=None)
            except:
                context = {"status":"failed","message":"Already Exist"}
            
            first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')
            group.user_set.add(user)
            student = Student()
            student.name = name
            student.institute = institute
            student.studentuser = user
            student.save()
            student.batches.add(first_batch)
            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.save()
            try:
                student_trade_dict = {}
                student_trade_dict['student'] = student
                student_trade_dict['trade_details'] = trade_details
                student_trade_dict['paidAmount'] = amount
                student_trade_dict['mode'] = "offline"
                student_trade_dict['approved'] = True
                
                student_trade = StudentTradePurchase(**student_trade_dict)
                student_trade.save()
                try:
                    st_details, created = SubInstituteStudent.objects.get_or_create(student=me.profile)
                    st_details.trades_details.add(student_trade_dict['trade_details'])
                    st_details.sub_institute.add(student_trade_dict['trade_details'].sub_institute)
                except:
                    pass

            except Exception as e:
                context = {"status": "failed",'message': str(e),}

            context = {"status": "success",'message': "Student added in Trade Successfully",}

        except Exception as e:
            context = {"status": "failed",'message': str(e),}

        return Response(context)
    
class MainInstituteAddStudentInTrade(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student_id = data['student_id']
        trade_details_id = data['trade_details_id']
        amount = data['amount']
        
        try:
            trade_details = TradeDetails.objects.get(id=trade_details_id)
            student = Student.objects.get(id = student_id)
            
            student_trade_dict = {}
            student_trade_dict['student'] = student
            student_trade_dict['trade_details'] = trade_details
            student_trade_dict['paidAmount'] = amount
            student_trade_dict['mode'] = "offline"
            student_trade_dict['approved'] = True
            student_trade = StudentTradePurchase(**student_trade_dict)
            student_trade.save()
            try:
                st_details, created = SubInstituteStudent.objects.get_or_create(student=student)
                st_details.trades_details.add(student_trade_dict['trade_details'])
                st_details.sub_institute.add(student_trade_dict['trade_details'].sub_institute)
            except Exception as e:
                context = {"status": "failed",'message': str(e),}

            context = {"status": "success",'message': "Student added in Trade Successfully",}

        except Exception as e:
            context = {"status": "failed",'message': str(e),}

        return Response(context)

class StudentDelete(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        try:
            User.objects.get(username=username).delete()
            context = {'status': 'success', 'message': 'Successfully Deleted'}
        except User.DoesNotExist:
            context = {'status': 'Failed', 'message': 'User not found'}
        return Response(context)

                
            

            
            
        
        




class PrincipleCreate(APIView):
    def post(self, request):
        data = request.data
        
        try:
            name = data['name']
            username = data['username']
            password = data['password']
            institutes = data['institute']
            institutes = eval(institutes)
            new_user = User.objects.create_user(username=username, password=password, email=None)
            group = Group.objects.get(name='Principles')
            group.user_set.add(new_user)
            mainteacher = Principle(teacheruser=new_user, name=name)
            mainteacher.save()
            for institute in institutes:
                instance = Institute.objects.get(id=institute)
                mainteacher.institute.add(instance)
            
            context = {'status': 'Success', 'message': 'Principle Created'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class PrincipleLogin(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        try:
            user = authenticate(username=username, password=password)
            groups = user.groups.all()
            if groups[0].name == 'Principles':
                token, created = Token.objects.get_or_create(user=user)
                teacher = Principle.objects.get(teacheruser=user)
                context = {
                    'status': 'Success', 
                    'admin_token': token.key, 
                    'user_type': groups[0].name, 
                    'name': teacher.name, 
                    'username': user.username,
                    }
                return Response(context)
            
            elif groups[0].name == 'Teachers':
                token, created = Token.objects.get_or_create(user=user)
                teacher = Teacher.objects.get(teacheruser=user)
                appUrl = teacher.institute.webAppUrl
                context = {
                    'status': 'Success', 
                    'key': token.key, 
                    'user_type': groups[0].name, 
                    'name': teacher.name, 
                    'username': user.username,
                    'institute': teacher.institute.name, 
                    'code': teacher.institute.code, 
                    'mainTeacher': teacher.mainTeacher, 
                    'appUrl': appUrl
                    }
                return Response(context)
            
            elif groups[0].name == 'WebAppUsers':
                token, created = Token.objects.get_or_create(user=user)
                webUser = WebAppUser.objects.get(webappuser=user)
                try:
                    teacher = webUser.teacher
                    code = teacher.institute.code
                    mainTeacher = True
                    instituteName = teacher.institute.name
                    appUrl = teacher.institute.webAppUrl
                except:
                    teacher = ''
                    code = ''
                    mainTeacher = True
                    instituteName = ''
                    appUrl = ''
                context = {
                    'status': 'Success', 
                    'key': token.key, 
                    'user_type': groups[0].name, 
                    'name': webUser.name,
                    'username': user.username, 
                    'institute': instituteName, 
                    'code': code, 
                    'mainTeacher': mainTeacher, 
                    'appUrl': appUrl
                    }
                return Response(context)
            else:
                context = {'status': 'Failed', 'message': 'Not a teacher'}
                return Response(context)
            
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class PrincipleInstituteList(APIView):
    def get(self, request):
        me = PrincipleUser(self.request.user)
        principleInstitute = me.profile.institute.all()
        principleIns_list = []
        for principle in principleInstitute:
            principleIns_dict = {'id':principle.id,'code':principle.code,'institute':principle.name}
            principleIns_list.append(principleIns_dict)
            
        context = {'status': 'Success', 'principle_institute':principleIns_list, 'name': me.name}
        return Response(context)

class PrincipleInstitute(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        code = data['code']
        username = me.profile.teacheruser
        new_user = User.objects.get(id=username.id)
        new_teachername = new_user.username
        main_teacher = Teacher.objects.get(institute__code = code, mainTeacher=True)
        mainTeacherId = main_teacher.teacheruser.id
        main_techerusername = User.objects.get(id=mainTeacherId)
        permission_list = [1,2,3,4,5,6,7]
        institute = Institute.objects.get(code=code)
        teacher_name = str(new_teachername)+"@"+code
        
        try:
            user = User.objects.get(username=teacher_name)
            groups = user.groups.all()
            if groups[0].name == 'Teachers':
                token, created = Token.objects.get_or_create(user=user)
                teacher = Teacher.objects.get(teacheruser=user)
                mainteachertoken, created = Token.objects.get_or_create(user=main_techerusername)
                
                appUrl = teacher.institute.webAppUrl
                context = {
                    'status': 'Success', 
                    'key': mainteachertoken.key, 
                    'user_type': groups[0].name, 
                    'name': teacher.name, 
                    'username': user.username,
                    'institute': teacher.institute.name, 
                    'code': teacher.institute.code, 
                    'mainTeacher': teacher.mainTeacher, 
                    'appUrl': appUrl
                    }
                return Response(context)

        except User.DoesNotExist:
            teacher_username = User.objects.create_user(username=teacher_name, password='123', email=None)
            group = Group.objects.get(name='Teachers')
            group.user_set.add(teacher_username)   
            teacher = Teacher(teacheruser=teacher_username, name=institute.name +' Teacher', institute=institute, mainTeacher=False)
            batches = Batch.objects.filter(institute=institute)
            teacher.save()
            teacher.batches.add(*batches)
            for permission in permission_list:
                permission_obj = TeacherPermission.objects.get(id=permission)
                teacher.permissions.add(permission_obj)
            user = User.objects.get(username=teacher_name)
            groups = user.groups.all()
            if groups[0].name == 'Teachers':
                token, created = Token.objects.get_or_create(user=user)
                appUrl = teacher.institute.webAppUrl
                mainteachertoken, created = Token.objects.get_or_create(user=main_techerusername)
                context = {
                    'status': 'Success', 
                    'key': mainteachertoken.key, 
                    'user_type': groups[0].name, 
                    'name': teacher.name, 
                    'username': user.username,
                    'institute': teacher.institute.name, 
                    'code': teacher.institute.code, 
                    'mainTeacher': teacher.mainTeacher, 
                    'appUrl': appUrl
                    }
                return Response(context)

        except Exception as e:
            context = {'status': 'False','message':str(e)}
            return Response(context)

class PrinciplenotPrimaryInstitute(APIView):
    def get(self, request):
        me = PrincipleUser(self.request.user)
        principleInstitute = me.profile.institute.all()
        principleIns_list = []
        for principle in principleInstitute:
            if not principle.id==1:
                principleIns_dict = {"id":principle.id,"code":principle.code,"institute":principle.name,"joinDate":principle.AdminUser}
                principleIns_list.append(principleIns_dict)
            
        context = {'status': 'Success',"principle_institute":principleIns_list}
        return Response(context)

class PrinciplenotInstituteSubject(APIView):
    def get(self, request):
        try:
            try:
                institute = Institute.objects.get(id=79758)
            except:
                institute = Institute.objects.get(id=41721)
                
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            subject = teacher.subjects.all()
            subject_list = []
            for sub in subject:
                subject_dict = {
                    'id': sub.id, 
                    'subject_name': sub.name
                    }
                subject_list.append(subject_dict)
            context = {'status':True, 'subject_list': subject_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class InstituteSubjectList(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
        subject = teacher.subjects.all()
        subject_list = []
        for sub in subject:
            subject_dict = {"id": sub.id, "subject_name": sub.name,"subjectreplica":sub.parentsubjectReplica}
            subject_list.append(subject_dict)
        context = {'subject_list': subject_list}
        return Response(context)

class InstitutePackageList(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        teachers = Teacher.objects.filter(institute=institute)
        packages_list =[]
        for teacher in teachers:
            packages = Package.objects.filter(teacher=teacher).order_by('-id')
            for package in packages:
                packages_dict = {'id': package.id, 'title': package.title, 'duration': package.duration, 'details': package.details,
                                        'price': package.price,  'publish': package.publish,"packagereplica":package.parentpackageReplica}
                packages_list.append(packages_dict)
        
        context = {"status":True,'package_list': packages_list}
        return Response(context)

class PrinciplenotInstitutePackage(APIView):
    def get(self, request):
        try:
            try:
                institute = Institute.objects.get(id=79758)
            except:
                institute = Institute.objects.get(id=41721)
                
            teachers = Teacher.objects.filter(institute=institute)
            packages_list =[]
            for teacher in teachers:
                packages = Package.objects.filter(teacher=teacher).order_by('-id')
                for package in packages:
                    packages_dict = {
                        'id': package.id, 
                        'title': package.title, 
                        'duration': package.duration, 
                        'details': package.details,
                        'price': package.price,  
                        'publish': package.publish,
                        'packagereplica':package.parentpackageReplica,
                        }
                    packages_list.append(packages_dict)
            
            context = {'status':True,'package_list': packages_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class InstituteBoardList(APIView):
    def get(self, request):
        try:
            boards = Board.objects.all().order_by('-id')
            board_list = []
            for board in boards:
                board_dict = {
                    'id': board.id,
                    'name': board.name,
                    'thumbnail': board.thumbnail,
                    }
                board_list.append(board_dict)
            context = {'status':True, 'board_list': board_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        try:
            name = data['name']
            thumbnail = data['thumbnail']
            board = Board()
            board.teacher = me.profile
            board.name = name
            board.thumbnail = thumbnail
            board.save()
            
            context = {'status':True, 'message': 'Board added successfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
    def put(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            name = data['name']
            thumbnail = data['thumbnail']
            board = Board.objects.get(id = record_id)
            board.name = name
            board.thumbnail = thumbnail
            board.save()
            
            context = {'status':True, 'message': 'Board updated successfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
    def delete(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        try:
            record_id = data['record_id']
            board = Board.objects.get(id = record_id)
            board.delete()
            
            context = {'status':True, 'message': 'Board deleted successfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class PrincipleAllInstitute(APIView):
    def get(self, request):
        me = PrincipleUser(self.request.user)
        try:
            principle = Principle.objects.get(teacheruser = request.user)
            institutes = principle.institute.all()
            institute_list = []
            for institute in institutes:
                try:
                    institute_board = BoardInstitutes.objects.get(institute=institute)
                    board = institute_board.board.name
                    city = institute_board.city.name
                    state = institute_board.state.name
                except:
                    board = None
                    city = None
                    state = None
                    
                institute_dict = {
                    'id': institute.id,
                    'name': institute.name,
                    'code': institute.code,
                    'logo': institute.logo,
                    'board': board,
                    'city': city,
                    'state': state,
                    }
                institute_list.append(institute_dict)
            context = {'status':True, 'institute_list': institute_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
 
class AddBoardInstitute(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        try:
            board_id = data['board_id']
            institute_id = data['institute_id']
            city = data.get('city')
            state = data.get('state')
            board = Board.objects.get(id=board_id)
            institute = Institute.objects.get(id = institute_id)
            board_city = City.objects.get(id=city)
            board_state = State.objects.get(id=state)
            
            board_institute = BoardInstitutes()
            board_institute.board = board
            board_institute.institute = institute
            board_institute.city = board_city
            board_institute.state = board_state
            board_institute.save()
            
            context = {'status':True, 'message': 'Institute Add in board successfully'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context) 
    
class BoardWiseInstituteList(APIView):
    def post(self, request):
        data = request.data
        try:
            board_id = data['board_id']
            board = Board.objects.get(id=board_id)
            records = BoardInstitutes.objects.filter(board=board).order_by('-id')
            institute_list = []
            for record in records:
                institute_dict = {
                    'id': record.id,
                    'name': record.institute.name,
                    'code': record.institute.code,
                    'logo': record.institute.logo,
                    'city': record.city.name,
                    'state': record.state.name,
                    }
                institute_list.append(institute_dict)
            context = {'status':True, 'institute_list': institute_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class BoardWiseStateList(APIView):
    def post(self, request):
        data = request.data
        try:
            board_id = data['board_id']
            board = Board.objects.get(id=board_id)
            records = BoardInstitutes.objects.filter(board=board).order_by('-id')
            unique_state_ids = set()
            state_list = []
            for record in records:
                state_id = record.state.id
                if state_id not in unique_state_ids:
                    state_dict = {
                        'id': record.id,
                        'state_id': record.state.id,
                        'state_name': record.state.name,
                        }
                    state_list.append(state_dict)
                    unique_state_ids.add(state_id)
                    
            context = {'status':True, 'state_list': state_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class BoardStateWiseCityList(APIView):
    def post(self, request):
        data = request.data
        try:
            board_id = data['board_id']
            state_id = data['state_id']
            board = Board.objects.get(id=board_id)
            state = State.objects.get(id=state_id)
            records = BoardInstitutes.objects.filter(board=board, state=state).order_by('-id')
            
            unique_city_ids = set()
            city_list = []
            for record in records:
                city_id = record.city.id
                if city_id not in unique_city_ids:
                    city_dict = {
                        'id': record.id,
                        'city_id': record.city.id,
                        'city_name': record.city.name,
                        }
                    city_list.append(city_dict)
                    unique_city_ids.add(city_id)
            context = {'status':True, 'city_list': city_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)

class SearchBoardInstitute(APIView):
    def post(self, request):
        data = request.data
        try:
            board_id = data['board_id']
            city_id = data['city_id']
            board = Board.objects.get(id=board_id)
            board_institutes = BoardInstitutes.objects.filter(board=board, city__id = city_id).distinct()

            board_institutes_list = []

            for bi in board_institutes:
                board_institute_dict = {
                    'id': bi.id,
                    'name': bi.institute.name,
                    'code': bi.institute.code,
                    'logo': bi.institute.logo,
                    'city': bi.city.name,
                    'state': bi.state.name,
                }
                board_institutes_list.append(board_institute_dict)

            context = {'status': 'success', 'board_institutes_list': board_institutes_list}
        except Exception as e:
            context = {'status': 'Failed', 'message':str(e)}
        return Response(context)
    
class BoardInstituteFilterAll(APIView):
    def post(self, request):
        data = request.data
        board_id = data.get('board_id')
        state_id = data.get('state_id')
        city_id = data.get('city_id')
        try:
            board_institutes = BoardInstitutes.objects.all().distinct()

            if board_id:
                board_institutes = board_institutes.filter(board=board_id)

            if state_id:
                board_institutes = board_institutes.filter(state=state_id)
                
            if city_id:
                board_institutes = board_institutes.filter(city=city_id)

            board_institutes_list = []

            for bi in board_institutes:
                board_institute_dict = {
                    'id': bi.id,
                    'name': bi.institute.name,
                    'code': bi.institute.code,
                    'logo': bi.institute.logo,
                    'city': bi.city.name,
                    'state': bi.state.name,
                }
                board_institutes_list.append(board_institute_dict)
                
            context = {'status': True, 'message': 'Success', 'board_institutes_list': board_institutes_list}
        
        except Exception as e:
            context = {'status': False, 'message': str(e)}

        return Response(context)

class RStudentOld(APIView):
    def post(self, request):
        me =Teach(self.request.user)
        data = request.data
        institute_code = data['institute_code']
        try:
            institute = Institute.objects.get(code=institute_code)
            try:
                app_token = list(AppServerKey.objects.all())[0]
                deviceId = me.profile.firebaseToken
                to_text = 'Congrats!! New student:{} - {}'.format("studnet", "kc")
                send_notification_individual(app_token, deviceId, to_text)
            except Exception as f:
                f_sent = f

            context = {'status': 'Success'}
            return Response(context)

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            return Response(context)

class RStudent(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        student = Student.objects.get(id=936467)
        try:
            
            try:
                app_token = "AAAAg2JNbas:APA91bEo7xRUDsTtiy6YfCB2p2jgjzlnCEMVirb3rU2wICaOfxvCrB1ZDPwy77bwg1v7ismyxgzgbH4fwKF_0bAf9OTh1lIdNocee9WEike0NS2PfEOF4yW69B5UGKJ8iosy6dzLDw8W"
                deviceId = "c4gWa30iRSS1e843PKpMnu:APA91bF-QpPTL5i4Mi1rrtvgMQ9d4d8QRmaUM2QajQ20-OAPQ1gOu_4LtO8-6lkz-aovXqefwbNxxgNYgFqazxiauSfzKIkZLLSMYT9eQNP3qn6t2H_QHrdNMzMe_3Fvre1LKYbZaXtu"
                to_text = f'{student.name} your book has been dispatched'
                res =send_notification_individual(app_token, deviceId, to_text)
                print(res)
            except Exception as f:
                print(str(f))
            context = {'status': 'success',
                       'message': 'student Book successfully dispatched'}
        except StudentBook.DoesNotExist:
            context = {'status': 'Failed', 'message': 'student Book not found'}
        return Response(context)

class CountStudent(APIView):
    def get(self,request):
        inst_list = []
        institutes = Institute.objects.annotate(student_count=Count('studentinstitute')).filter(student_count__gte=2000)
        total = institutes.count()
        for i in institutes:
            inst_list.append(i.name)
       
        context = {'inst_list':inst_list,'total':total}
        return Response(context)
    
class ForgotPassword(APIView):
    def post(self, request):
        data = request.data
        try:
            username = data['username']
            password = data['password']
            user = User.objects.get(username=username)
            user.set_password(password)
            user.save()
            context = {'status': True,'message': 'Password Changed Successfully'}
            
        except User.DoesNotExist:
            context = {'status': False, 'message': 'User not found'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class TeacherStudentRegisterBatchwiseLimit(APIView):
    def post(self, request, *args, **kwargs):
        me = Teach(self.request.user)
        data = request.data
        username = data['username']
        name = data['name']
        user_batches = data['batches']
        batch_list = user_batches.strip('][').split(',')
        username = username.strip()+'@'+str(me.profile.institute.code)
        institute = me.profile.institute
        try:
            try:
                user = User.objects.create_user(username=username, password='123', email=None)
            except:
                context = {
                    "status": "failed",
                    "message": "Already Exist"
                }
                return Response(context)

            first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')
            group.user_set.add(user)

            student = Student()
            student.name = name
            student.institute = institute
            student.studentuser = user
            student.save()
            student.batches.add(first_batch)
            for bat in batch_list:
                if bat:
                    batch = Batch.objects.get(id=bat)
                    isAddLimit = batch.addLimit
                    if isAddLimit==True:
                        batch_count=batch.count
                        max_student = batch.max_student
                        if batch_count >= max_student:
                            return Response ({
                                    'status':False,
                                    'detail':'You have exceeded the student add limit. Kindly contact our  Main teacher.'
                                    })
                        batch.count = batch_count +1
                        student.batches.add(batch)
                        batch.save()
                    else:
                        student.batches.add(batch)
                        batch.save()

            
            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.save()
            context =\
                {'status': 'Success', 'name': student.name,
                    'institute': student.institute.name}
            mestudent = Studs(user)
            mestudent.add_subjects()
            mestudent.add_tests()
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteBatchList(APIView):
    def post(self, request, *args, **kwargs):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        institute = Institute.objects.get(id=institute_id)
        teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
        batches = teacher.batches.all()
        batch_list = []
        for batch in batches:
            batch_dict = {"id": batch.id, "batch_name": batch.name,"batchLimit":batch.addLimit}
            batch_list.append(batch_dict)
        context = {'batch_list': batch_list}
        return Response(context)

class InstituteBatchCreateWithLimit(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        batch_name = data['batch_name']
        batch_name = batch_name.replace('\"', '')
        try:
            max_student = data['max_student']
            max_student = int(max_student) +1
        except:
            max_student = None
        
        if batch_name == '' or batch_name == None:
            context = {'status': 'Failed',
                       'message': 'Please enter a valid name for batch'}
            return Response(context)

        try:
            institute = Institute.objects.get(id=institute_id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            my_batches = teacher.batches.all()
            teacher_admin = Teacher.objects.get(id=48069)
            for batch in my_batches:
                if batch.name == batch_name:
                    context = {
                        'status': 'Failed', 'message': 'Batch with {} name already exists'.format(batch_name)}
                    return Response(context)
            batch = Batch()
            batch.name = batch_name
            batch.institute = institute
            if max_student != None:
                batch.max_student = max_student
                batch.addLimit = True
                batch.count =1
            else:
                batch.count =None
            batch.save()

            teacher.batches.add(batch)
            context = {'status': 'Success',
                       'message': 'Batch {} successfully created !'.format(batch_name)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)

class InstituteBatchEditWithLimit(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        institute_id = data['institute_id']
        batch_id = data['batch_id']
        batch = Batch.objects.get(id=batch_id)
        try:
            batch_name = data['batch_name']
        except:
            batch_name =batch.name
            
        try:
            max_student = data['max_student']
            max_student = int(max_student) +1
        except:
            max_student = None

        try:
            institute = Institute.objects.get(id=institute_id)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)
            teacher_admin = Teacher.objects.get(id=48069)
            batch.name = batch_name
            if max_student != None:
                batch.max_student = max_student
                batch.addLimit = True
                batch.count =1
            else:
                batch.count =None
                
            batch.save()
            teacher.batches.add(batch)
            context = {'status': 'Success',
                       'message': 'Batch {} successfully edit !'.format(batch_name)}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
        return Response(context)
    
class TeacherRequestBatchLimitIncress(APIView):
    def post(self, request):
        me = Teach(self.request.user)
        data = request.data
        batch_id = data['batch_id']
        requestStudent = data['studentLimit']
        institute=me.profile.institute
        institute_code = institute.code
        
        try:
            json_file = me.profile.institute.json_file
        except Exception as e:
            json_file = None
        
        try:
            batch = Batch.objects.get(id=batch_id)
            teacher = Teacher.objects.get(institute = me.profile.institute, mainTeacher=True)
            
            try:
                batchLimit_req = BatchLimitChangeRequest.objects.filter(institute=institute, batch=batch)
                for batch_req in batchLimit_req:
                    if batch_req.active == True:
                        context = {'status': 'Failed','message': 'Request Already Sent'}
                        return Response(context)

                batchLimitRequest = BatchLimitChangeRequest()
                batchLimitRequest.batch = batch
                batchLimitRequest.institute = institute
                batchLimitRequest.studentLimit = requestStudent
                
                batchLimitRequest.save()
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    principle_id = 3
                    to_text = 'Message from {} for batch students limit increase {}'.format(institute,requestStudent)
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, principle_id=principle_id)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, principle_id=principle_id)
                    
                except Exception as e:
                    print(str(e))
                    
                context = {'status': 'Success','message': 'Batch student limit change. Request Sent successfully'}

            except Exception as e:
                batchLimitRequest = BatchLimitChangeRequest()
                batchLimitRequest.batch = batch
                batchLimitRequest.institute = institute
                batchLimitRequest.studentLimit = requestStudent
                batchLimitRequest.save()
                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    principle_id = 3
                    to_text = 'Message from {} for batch students limit increase {}'.format(institute,requestStudent)
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, principle_id=principle_id)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, principle_id=principle_id)
                except Exception as e:
                    print(str(e))
                    
                context = {'status': 'Success','message': 'Batch student limit change. Request Sent successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)

class SuperAdminAllRequestBatchLimit(APIView):
    def get(self, request):
        me = PrincipleUser(self.request.user)
        try:
            institute_list = []
            batchLimit_req = BatchLimitChangeRequest.objects.filter(active=True).order_by('-id')
            for batch_req in batchLimit_req:
                req_dict = {
                    "id":batch_req.id,
                    "institute":batch_req.institute.id,
                    "institute_name":batch_req.institute.name,
                    "batch":batch_req.batch.id,
                    "batch_name":batch_req.batch.name,
                    "active":batch_req.active,
                    "studentLimit":batch_req.studentLimit
                }
                institute_list.append(req_dict)

            context = {'status': 'Success','data': institute_list}

        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}
            
        return Response(context)
    
class AcceptBatchLimitChangeRequest(APIView):
    def post(self, request):
        me = PrincipleUser(self.request.user)
        data = request.data
        bcr_id = data['blcr_id']
        batch_id = data['batch_id']
        try:
            bcr = BatchLimitChangeRequest.objects.get(id=bcr_id)
            max_student = bcr.studentLimit
            
            batch = Batch.objects.get(id=batch_id)
            pre_limit = batch.max_student 
            batch.max_student = max_student + pre_limit
            batch.save()
        
            bcr.active = False
            bcr.save()
            context = {'status': 'Success', 'message': 'Batch limit change Successfully'}
        except Exception as e:
            context = {'status': 'Failed', 'message': str(e)}

        return Response(context)

class RegisterStudentMennta(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        name = data['name']
        medium = data.get('medium',None)
        goal = data.get('goal',None)
        board = data.get('board',None)
        institute_code = "emennta"
        try:
            user_batches = data['batches']
            batch_list = user_batches.strip('][').split(',')
        except:
            batch_list = None
        
        username = username.strip()
        try:
            institute = Institute.objects.get(code=institute_code)
            new_username = username + '@' + institute_code
            try:
                user = User.objects.create_user(username=new_username, password='123', email=None)
                first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                
                teacher = Teacher.objects.get(institute=institute,mainTeacher=True)
                student = Student()
                student.name = name
                student.institute = institute
                student.studentuser = user
                import datetime
                joininig_date = datetime.datetime.now()
                student.jdate = joininig_date
                student.save()
                student.batches.add(first_batch)
                student.save()

                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.fullName = name
                studentDetails.board = board
                studentDetails.medium = medium
                studentDetails.goal = goal
                studentDetails.save()
                if batch_list:
                    if institute.joinRequestAutomatic:
                        student.batches.clear()
                        try:
                            for bat in batch_list:
                                batch_obj = Batch.objects.get(id=bat)
                                student.batches.add(batch_obj)
                                student.save()
                        except Exception as e:
                            print(str(e))
                    else:
                        joinRequest = StudentJoinRequest()
                        joinRequest.student = student
                        joinRequest.institute = institute
                        joinRequest.save()
                        for bat in batch_list:
                            try:
                                batch_obj = Batch.objects.get(id=bat)
                                joinRequest.batches.add(batch_obj)
                                joinRequest.save()
                            except Exception as e:
                                print(str(e))
                
                f_sent = 'register'
                
                try:
                    json_file = teacher.institute.json_file
                except Exception as e:
                    json_file = None

                try:
                    app_token = list(AppServerKey.objects.all())[0]
                    to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                    teacher_id = teacher.id
                    notification = {'title':'New Notification', 'body': to_text}
                    if json_file == None:
                        send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                    else:
                        send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)
                        
                except Exception as f:
                    f_sent = f
                    print(str(f))

                context = {'status': 'Success', 'name': student.name,'institute': student.institute.name}
                try:
                    me = Studs(user)
                    me.add_subjects()
                    me.add_tests()
                except:
                    pass
                return Response(context)
            
            except Exception as e:
                try:
                    user = User.objects.get(username=new_username)
                    try:
                        student = Student.objects.get(studentuser=user)
                        try:
                            studentdetails = StudentDetails.objects.get(student=student)
                            studentdetails.delete()
                            student.delete()
                            user.delete()
                        except StudentDetails.DoesNotExist:
                            student.delete()
                            user.delete()
                    except Student.DoesNotExist:
                        user.delete()
                except User.DoesNotExist:
                    pass

                context = {'status': 'Failed', 'message': str(e)}
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed','message': 'Institute code not found'}
            
        return Response(context)
        
class GetInstituteNameByCode(APIView):
    def post(self, request):
        data = request.data
        institute_code = data['institute_code']
        try:
            institute = Institute.objects.get(code = institute_code)
            context = {
                'status':True, 
                'institute_name':institute.name,
                'phone': institute.phoneNumber,
                'email': institute.email,
                }
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        
        return Response(context)
    
class GetInstituteDetailsByCode(APIView):
    def post(self, request):
        data = request.data
        institute_code = data['institute_code']
        try:
            institute = Institute.objects.get(code = institute_code)
            context = {
                'status':True, 
                'institute_code': institute_code,
                'institute_name':institute.name,
                'phone': institute.phoneNumber,
                'email': institute.email,
                }
        except Exception as e:
            context = {'status':False, 'message': str(e)}
        
        return Response(context)

class RegisterDemoStudent(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        institute_code = data['institute_code']
            
        try:
            institute = Institute.objects.get(code=institute_code)
            try:
                user = User.objects.create_user(username = username, password = password, email=None)
                first_batch = Batch.objects.filter(institute = institute).order_by('id').first()
                group = Group.objects.get(name='Students')
                group.user_set.add(user)
                teacher = Teacher.objects.get(institute = institute,mainTeacher=True)

                student = Student()
                student.name = name
                student.institute = institute
                student.studentuser = user
                import datetime
                joininig_date = datetime.datetime.now()
                student.jdate = joininig_date
                student.save()
                student.batches.add(first_batch)
                student.save()

                studentDetails = StudentDetails()
                studentDetails.student = student
                studentDetails.fullName = name
                studentDetails.save()

                context = {'status': 'Success', 'name': student.name,'institute': student.institute.name}
                try:
                    me = Studs(user)
                    me.add_subjects()
                    me.add_tests()
                except:
                    pass
                
            except Exception as e:
                try:
                    user = User.objects.get(username=username)
                    try:
                        student = Student.objects.get(studentuser=user)
                        try:
                            studentdetails = StudentDetails.objects.get(student=student)
                            studentdetails.delete()
                            student.delete()
                            user.delete()
                        except StudentDetails.DoesNotExist:
                            student.delete()
                            user.delete()
                    except Student.DoesNotExist:
                        user.delete()
                except User.DoesNotExist:
                    pass

                context = {'status': 'Failed', 'message': str(e)}
            
        except Institute.DoesNotExist:
            context = {'status': 'Failed','message': 'Institute code not found'}
            
        return Response(context)
    
class RegisterEmenntaStudents(APIView):
    def post(self, request):
        data = request.data
        username = data['username']
        password = data['password']
        name = data['name']
        institute_code = data['institute_code']
        medium = data.get('medium')
        goal = data.get('goal')
        username = username.strip()
        
        principle = Principle.objects.get(teacheruser__username = 'MenntaAdmin')
        all_institutes = principle.institute.all()
        for institute in all_institutes:
            test_username = username + '@' + institute.code
            try:
                user = User.objects.get(username=test_username)
                context = {'status': False,'message': 'User already register','name': institute.name,'code': institute.code}
                return Response(context)
            except User.DoesNotExist:
                continue  # User not found in this institute, check next one
            
        try:
            user_batches = data['batches']
            batch_lists = user_batches.strip('][').split(',')
            excluded_batches = ["Outer", "Demo", "Outer Testing"]
            batch_list = [batch for batch in batch_lists if Batch.objects.get(id=batch).name not in excluded_batches]
        except:
            batch_list = None
            
        try:
            typeUser = data['typeUser']
        except:
            typeUser = None
            
        try:
            institute = Institute.objects.get(code=institute_code)
            new_username = username + '@' + institute_code
            user = User.objects.create_user(username=new_username, password=password, email=None)
            first_batch = Batch.objects.filter(institute=institute).order_by('id').first()
            group = Group.objects.get(name='Students')
            group.user_set.add(user)
            teacher = Teacher.objects.get(institute=institute, mainTeacher=True)

            student = Student()
            student.name = name
            student.institute = institute
            student.studentuser = user
            import datetime
            joininig_date = datetime.datetime.now()
            student.jdate = joininig_date
            if typeUser != None:
                student.typeUser = typeUser
            student.save()
            student.batches.add(first_batch)
            student.save()

            studentDetails = StudentDetails()
            studentDetails.student = student
            studentDetails.fullName = name
            studentDetails.medium = medium
            studentDetails.goal = goal
            studentDetails.save()
            
            if batch_list:
                if institute.joinRequestAutomatic:
                    student.batches.clear()
                    try:
                        for bat in batch_list:
                            batch_obj = Batch.objects.get(id=bat)
                            student.batches.add(batch_obj)
                            student.save()
                    except Exception as e:
                        print(str(e))
                else:
                    joinRequest = StudentJoinRequest()
                    joinRequest.student = student
                    joinRequest.institute = institute
                    joinRequest.save()
                    for bat in batch_list:
                        try:
                            batch_obj = Batch.objects.get(id=bat)
                            joinRequest.batches.add(batch_obj)
                            joinRequest.save()
                        except Exception as e:
                            print(str(e))
                            
            try:
                json_file = teacher.institute.json_file
            except Exception as e:
                json_file = None

            try:
                app_token = list(AppServerKey.objects.all())[0]
                to_text = 'Congrats!! New student:{} - {}'.format(username, name)
                teacher_id = teacher.id
                notification = {'title':'New Notification', 'body': to_text}
                if json_file == None:
                    send_notification_individual_second(serverKey=app_token, notification=notification, teacher_id=teacher_id)
                else:
                    send_notification_individual(json_file=json_file, notification=notification, teacher_id=teacher_id)

            except Exception as f:
                f_sent = f

            context = {'status': True,'name': student.name,'institute': student.institute.name}
            
            try:
                me = Studs(user)
                me.add_subjects()
                me.add_tests()
            except:
                pass
            
        except Exception as e:
            context = {'status': False,'message': str(e)}
            
        return Response(context)
        
class LoginEmenntaStudents(APIView):
    def post(self, request):
        data = request.data
        
        try:
            phone = data['username'].strip()
            password = data['password']
            
            principle = Principle.objects.get(teacheruser__username = 'MenntaAdmin')
            all_institutes = principle.institute.all()
            for institute in all_institutes:
                username = phone + '@' + institute.code
                try:
                    user = User.objects.get(username=username)
                    authenticated_user = authenticate(username=username, password=password)
                    if authenticated_user is not None:
                        groups = user.groups.all()
                        if groups[0].name == 'Students':
                            token, created = Token.objects.get_or_create(user=user)
                            student = Student.objects.get(studentuser = user)
                            showCourse = student.institute.showCourseUI
                            context = {
                                'status': True, 
                                'key': token.key, 
                                'user_type': groups[0].name, 
                                'name': student.name, 
                                'username': user.username,
                                'showCourse': showCourse, 
                                'institute': institute.name, 
                                'instituteCode': institute.code,
                                }
                            break
                        else:
                            context = {'status': False, 'message': 'Not a student'}
                except User.DoesNotExist:
                    continue
        
            if authenticated_user is None:
                context = {'status': False, 'message': 'Login Credentials are not correct'}
        except Exception as e:
            context = {'status':False, 'message':str(e)}    
            
        return Response(context)
    
class AddCity(APIView):
    def get(self, *args, **kwargs):
        data =  [
        {
            "id": "1",
            "name": "Mumbai",
            "state": "Maharashtra"
        },
        {
            "id": "2",
            "name": "Delhi",
            "state": "Delhi"
        },
        {
            "id": "3",
            "name": "Bengaluru",
            "state": "Karnataka"
        },
        {
            "id": "4",
            "name": "Ahmedabad",
            "state": "Gujarat"
        },
        {
            "id": "5",
            "name": "Hyderabad",
            "state": "Telangana"
        },
        {
            "id": "6",
            "name": "Chennai",
            "state": "Tamil Nadu"
        },
        {
            "id": "7",
            "name": "Kolkata",
            "state": "West Bengal"
        },
        {
            "id": "8",
            "name": "Pune",
            "state": "Maharashtra"
        },
        {
            "id": "9",
            "name": "Jaipur",
            "state": "Rajasthan"
        },
        {
            "id": "10",
            "name": "Surat",
            "state": "Gujarat"
        },
        {
            "id": "11",
            "name": "Lucknow",
            "state": "Uttar Pradesh"
        },
        {
            "id": "12",
            "name": "Kanpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "13",
            "name": "Nagpur",
            "state": "Maharashtra"
        },
        {
            "id": "14",
            "name": "Patna",
            "state": "Bihar"
        },
        {
            "id": "15",
            "name": "Indore",
            "state": "Madhya Pradesh"
        },
        {
            "id": "16",
            "name": "Thane",
            "state": "Maharashtra"
        },
        {
            "id": "17",
            "name": "Bhopal",
            "state": "Madhya Pradesh"
        },
        {
            "id": "18",
            "name": "Visakhapatnam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "19",
            "name": "Vadodara",
            "state": "Gujarat"
        },
        {
            "id": "20",
            "name": "Firozabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "21",
            "name": "Ludhiana",
            "state": "Punjab"
        },
        {
            "id": "22",
            "name": "Rajkot",
            "state": "Gujarat"
        },
        {
            "id": "23",
            "name": "Agra",
            "state": "Uttar Pradesh"
        },
        {
            "id": "24",
            "name": "Siliguri",
            "state": "West Bengal"
        },
        {
            "id": "25",
            "name": "Nashik",
            "state": "Maharashtra"
        },
        {
            "id": "26",
            "name": "Faridabad",
            "state": "Haryana"
        },
        {
            "id": "27",
            "name": "Patiala",
            "state": "Punjab"
        },
        {
            "id": "28",
            "name": "Meerut",
            "state": "Uttar Pradesh"
        },
        {
            "id": "29",
            "name": "Kalyan-Dombivali",
            "state": "Maharashtra"
        },
        {
            "id": "30",
            "name": "Vasai-Virar",
            "state": "Maharashtra"
        },
        {
            "id": "31",
            "name": "Varanasi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "32",
            "name": "Srinagar",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "33",
            "name": "Dhanbad",
            "state": "Jharkhand"
        },
        {
            "id": "34",
            "name": "Jodhpur",
            "state": "Rajasthan"
        },
        {
            "id": "35",
            "name": "Amritsar",
            "state": "Punjab"
        },
        {
            "id": "36",
            "name": "Raipur",
            "state": "Chhattisgarh"
        },
        {
            "id": "37",
            "name": "Allahabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "38",
            "name": "Coimbatore",
            "state": "Tamil Nadu"
        },
        {
            "id": "39",
            "name": "Jabalpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "40",
            "name": "Gwalior",
            "state": "Madhya Pradesh"
        },
        {
            "id": "41",
            "name": "Vijayawada",
            "state": "Andhra Pradesh"
        },
        {
            "id": "42",
            "name": "Madurai",
            "state": "Tamil Nadu"
        },
        {
            "id": "43",
            "name": "Guwahati",
            "state": "Assam"
        },
        {
            "id": "44",
            "name": "Chandigarh",
            "state": "Chandigarh"
        },
        {
            "id": "45",
            "name": "Hubli-Dharwad",
            "state": "Karnataka"
        },
        {
            "id": "46",
            "name": "Amroha",
            "state": "Uttar Pradesh"
        },
        {
            "id": "47",
            "name": "Moradabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "48",
            "name": "Gurgaon",
            "state": "Haryana"
        },
        {
            "id": "49",
            "name": "Aligarh",
            "state": "Uttar Pradesh"
        },
        {
            "id": "50",
            "name": "Solapur",
            "state": "Maharashtra"
        },
        {
            "id": "51",
            "name": "Ranchi",
            "state": "Jharkhand"
        },
        {
            "id": "52",
            "name": "Jalandhar",
            "state": "Punjab"
        },
        {
            "id": "53",
            "name": "Tiruchirappalli",
            "state": "Tamil Nadu"
        },
        {
            "id": "54",
            "name": "Bhubaneswar",
            "state": "Odisha"
        },
        {
            "id": "55",
            "name": "Salem",
            "state": "Tamil Nadu"
        },
        {
            "id": "56",
            "name": "Warangal",
            "state": "Telangana"
        },
        {
            "id": "57",
            "name": "Mira-Bhayandar",
            "state": "Maharashtra"
        },
        {
            "id": "58",
            "name": "Thiruvananthapuram",
            "state": "Kerala"
        },
        {
            "id": "59",
            "name": "Bhiwandi",
            "state": "Maharashtra"
        },
        {
            "id": "60",
            "name": "Saharanpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "61",
            "name": "Guntur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "62",
            "name": "Amravati",
            "state": "Maharashtra"
        },
        {
            "id": "63",
            "name": "Bikaner",
            "state": "Rajasthan"
        },
        {
            "id": "64",
            "name": "Noida",
            "state": "Uttar Pradesh"
        },
        {
            "id": "65",
            "name": "Jamshedpur",
            "state": "Jharkhand"
        },
        {
            "id": "66",
            "name": "Bhilai Nagar",
            "state": "Chhattisgarh"
        },
        {
            "id": "67",
            "name": "Cuttack",
            "state": "Odisha"
        },
        {
            "id": "68",
            "name": "Kochi",
            "state": "Kerala"
        },
        {
            "id": "69",
            "name": "Udaipur",
            "state": "Rajasthan"
        },
        {
            "id": "70",
            "name": "Bhavnagar",
            "state": "Gujarat"
        },
        {
            "id": "71",
            "name": "Dehradun",
            "state": "Uttarakhand"
        },
        {
            "id": "72",
            "name": "Asansol",
            "state": "West Bengal"
        },
        {
            "id": "73",
            "name": "Nanded-Waghala",
            "state": "Maharashtra"
        },
        {
            "id": "74",
            "name": "Ajmer",
            "state": "Rajasthan"
        },
        {
            "id": "75",
            "name": "Jamnagar",
            "state": "Gujarat"
        },
        {
            "id": "76",
            "name": "Ujjain",
            "state": "Madhya Pradesh"
        },
        {
            "id": "77",
            "name": "Sangli",
            "state": "Maharashtra"
        },
        {
            "id": "78",
            "name": "Loni",
            "state": "Uttar Pradesh"
        },
        {
            "id": "79",
            "name": "Jhansi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "80",
            "name": "Pondicherry",
            "state": "Puducherry"
        },
        {
            "id": "81",
            "name": "Nellore",
            "state": "Andhra Pradesh"
        },
        {
            "id": "82",
            "name": "Jammu",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "83",
            "name": "Belagavi",
            "state": "Karnataka"
        },
        {
            "id": "84",
            "name": "Raurkela",
            "state": "Odisha"
        },
        {
            "id": "85",
            "name": "Mangaluru",
            "state": "Karnataka"
        },
        {
            "id": "86",
            "name": "Tirunelveli",
            "state": "Tamil Nadu"
        },
        {
            "id": "87",
            "name": "Malegaon",
            "state": "Maharashtra"
        },
        {
            "id": "88",
            "name": "Gaya",
            "state": "Bihar"
        },
        {
            "id": "89",
            "name": "Tiruppur",
            "state": "Tamil Nadu"
        },
        {
            "id": "90",
            "name": "Davanagere",
            "state": "Karnataka"
        },
        {
            "id": "91",
            "name": "Kozhikode",
            "state": "Kerala"
        },
        {
            "id": "92",
            "name": "Akola",
            "state": "Maharashtra"
        },
        {
            "id": "93",
            "name": "Kurnool",
            "state": "Andhra Pradesh"
        },
        {
            "id": "94",
            "name": "Bokaro Steel City",
            "state": "Jharkhand"
        },
        {
            "id": "95",
            "name": "Rajahmundry",
            "state": "Andhra Pradesh"
        },
        {
            "id": "96",
            "name": "Ballari",
            "state": "Karnataka"
        },
        {
            "id": "97",
            "name": "Agartala",
            "state": "Tripura"
        },
        {
            "id": "98",
            "name": "Bhagalpur",
            "state": "Bihar"
        },
        {
            "id": "99",
            "name": "Latur",
            "state": "Maharashtra"
        },
        {
            "id": "100",
            "name": "Dhule",
            "state": "Maharashtra"
        },
        {
            "id": "101",
            "name": "Korba",
            "state": "Chhattisgarh"
        },
        {
            "id": "102",
            "name": "Bhilwara",
            "state": "Rajasthan"
        },
        {
            "id": "103",
            "name": "Brahmapur",
            "state": "Odisha"
        },
        {
            "id": "104",
            "name": "Mysore",
            "state": "Karnataka"
        },
        {
            "id": "105",
            "name": "Muzaffarpur",
            "state": "Bihar"
        },
        {
            "id": "106",
            "name": "Ahmednagar",
            "state": "Maharashtra"
        },
        {
            "id": "107",
            "name": "Kollam",
            "state": "Kerala"
        },
        {
            "id": "108",
            "name": "Raghunathganj",
            "state": "West Bengal"
        },
        {
            "id": "109",
            "name": "Bilaspur",
            "state": "Chhattisgarh"
        },
        {
            "id": "110",
            "name": "Shahjahanpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "111",
            "name": "Thrissur",
            "state": "Kerala"
        },
        {
            "id": "112",
            "name": "Alwar",
            "state": "Rajasthan"
        },
        {
            "id": "113",
            "name": "Kakinada",
            "state": "Andhra Pradesh"
        },
        {
            "id": "114",
            "name": "Nizamabad",
            "state": "Telangana"
        },
        {
            "id": "115",
            "name": "Sagar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "116",
            "name": "Tumkur",
            "state": "Karnataka"
        },
        {
            "id": "117",
            "name": "Hisar",
            "state": "Haryana"
        },
        {
            "id": "118",
            "name": "Rohtak",
            "state": "Haryana"
        },
        {
            "id": "119",
            "name": "Panipat",
            "state": "Haryana"
        },
        {
            "id": "120",
            "name": "Darbhanga",
            "state": "Bihar"
        },
        {
            "id": "121",
            "name": "Kharagpur",
            "state": "West Bengal"
        },
        {
            "id": "122",
            "name": "Aizawl",
            "state": "Mizoram"
        },
        {
            "id": "123",
            "name": "Ichalkaranji",
            "state": "Maharashtra"
        },
        {
            "id": "124",
            "name": "Tirupati",
            "state": "Andhra Pradesh"
        },
        {
            "id": "125",
            "name": "Karnal",
            "state": "Haryana"
        },
        {
            "id": "126",
            "name": "Bathinda",
            "state": "Punjab"
        },
        {
            "id": "127",
            "name": "Rampur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "128",
            "name": "Shivamogga",
            "state": "Karnataka"
        },
        {
            "id": "129",
            "name": "Ratlam",
            "state": "Madhya Pradesh"
        },
        {
            "id": "130",
            "name": "Modinagar",
            "state": "Uttar Pradesh"
        },
        {
            "id": "131",
            "name": "Durg",
            "state": "Chhattisgarh"
        },
        {
            "id": "132",
            "name": "Shillong",
            "state": "Meghalaya"
        },
        {
            "id": "133",
            "name": "Imphal",
            "state": "Manipur"
        },
        {
            "id": "134",
            "name": "Hapur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "135",
            "name": "Ranipet",
            "state": "Tamil Nadu"
        },
        {
            "id": "136",
            "name": "Anantapur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "137",
            "name": "Arrah",
            "state": "Bihar"
        },
        {
            "id": "138",
            "name": "Karimnagar",
            "state": "Telangana"
        },
        {
            "id": "139",
            "name": "Parbhani",
            "state": "Maharashtra"
        },
        {
            "id": "140",
            "name": "Etawah",
            "state": "Uttar Pradesh"
        },
        {
            "id": "141",
            "name": "Bharatpur",
            "state": "Rajasthan"
        },
        {
            "id": "142",
            "name": "Begusarai",
            "state": "Bihar"
        },
        {
            "id": "143",
            "name": "New Delhi",
            "state": "Delhi"
        },
        {
            "id": "144",
            "name": "Chhapra",
            "state": "Bihar"
        },
        {
            "id": "145",
            "name": "Kadapa",
            "state": "Andhra Pradesh"
        },
        {
            "id": "146",
            "name": "Ramagundam",
            "state": "Telangana"
        },
        {
            "id": "147",
            "name": "Pali",
            "state": "Rajasthan"
        },
        {
            "id": "148",
            "name": "Satna",
            "state": "Madhya Pradesh"
        },
        {
            "id": "149",
            "name": "Vizianagaram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "150",
            "name": "Katihar",
            "state": "Bihar"
        },
        {
            "id": "151",
            "name": "Hardwar",
            "state": "Uttarakhand"
        },
        {
            "id": "152",
            "name": "Sonipat",
            "state": "Haryana"
        },
        {
            "id": "153",
            "name": "Nagercoil",
            "state": "Tamil Nadu"
        },
        {
            "id": "154",
            "name": "Thanjavur",
            "state": "Tamil Nadu"
        },
        {
            "id": "155",
            "name": "Murwara (Katni)",
            "state": "Madhya Pradesh"
        },
        {
            "id": "156",
            "name": "Naihati",
            "state": "West Bengal"
        },
        {
            "id": "157",
            "name": "Sambhal",
            "state": "Uttar Pradesh"
        },
        {
            "id": "158",
            "name": "Nadiad",
            "state": "Gujarat"
        },
        {
            "id": "159",
            "name": "Yamunanagar",
            "state": "Haryana"
        },
        {
            "id": "160",
            "name": "English Bazar",
            "state": "West Bengal"
        },
        {
            "id": "161",
            "name": "Eluru",
            "state": "Andhra Pradesh"
        },
        {
            "id": "162",
            "name": "Munger",
            "state": "Bihar"
        },
        {
            "id": "163",
            "name": "Panchkula",
            "state": "Haryana"
        },
        {
            "id": "164",
            "name": "Raayachuru",
            "state": "Karnataka"
        },
        {
            "id": "165",
            "name": "Panvel",
            "state": "Maharashtra"
        },
        {
            "id": "166",
            "name": "Deoghar",
            "state": "Jharkhand"
        },
        {
            "id": "167",
            "name": "Ongole",
            "state": "Andhra Pradesh"
        },
        {
            "id": "168",
            "name": "Nandyal",
            "state": "Andhra Pradesh"
        },
        {
            "id": "169",
            "name": "Morena",
            "state": "Madhya Pradesh"
        },
        {
            "id": "170",
            "name": "Bhiwani",
            "state": "Haryana"
        },
        {
            "id": "171",
            "name": "Porbandar",
            "state": "Gujarat"
        },
        {
            "id": "172",
            "name": "Palakkad",
            "state": "Kerala"
        },
        {
            "id": "173",
            "name": "Anand",
            "state": "Gujarat"
        },
        {
            "id": "174",
            "name": "Purnia",
            "state": "Bihar"
        },
        {
            "id": "175",
            "name": "Baharampur",
            "state": "West Bengal"
        },
        {
            "id": "176",
            "name": "Barmer",
            "state": "Rajasthan"
        },
        {
            "id": "177",
            "name": "Morvi",
            "state": "Gujarat"
        },
        {
            "id": "178",
            "name": "Orai",
            "state": "Uttar Pradesh"
        },
        {
            "id": "179",
            "name": "Bahraich",
            "state": "Uttar Pradesh"
        },
        {
            "id": "180",
            "name": "Sikar",
            "state": "Rajasthan"
        },
        {
            "id": "181",
            "name": "Vellore",
            "state": "Tamil Nadu"
        },
        {
            "id": "182",
            "name": "Singrauli",
            "state": "Madhya Pradesh"
        },
        {
            "id": "183",
            "name": "Khammam",
            "state": "Telangana"
        },
        {
            "id": "184",
            "name": "Mahesana",
            "state": "Gujarat"
        },
        {
            "id": "185",
            "name": "Silchar",
            "state": "Assam"
        },
        {
            "id": "186",
            "name": "Sambalpur",
            "state": "Odisha"
        },
        {
            "id": "187",
            "name": "Rewa",
            "state": "Madhya Pradesh"
        },
        {
            "id": "188",
            "name": "Unnao",
            "state": "Uttar Pradesh"
        },
        {
            "id": "189",
            "name": "Hugli-Chinsurah",
            "state": "West Bengal"
        },
        {
            "id": "190",
            "name": "Raiganj",
            "state": "West Bengal"
        },
        {
            "id": "191",
            "name": "Phusro",
            "state": "Jharkhand"
        },
        {
            "id": "192",
            "name": "Adityapur",
            "state": "Jharkhand"
        },
        {
            "id": "193",
            "name": "Alappuzha",
            "state": "Kerala"
        },
        {
            "id": "194",
            "name": "Bahadurgarh",
            "state": "Haryana"
        },
        {
            "id": "195",
            "name": "Machilipatnam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "196",
            "name": "Rae Bareli",
            "state": "Uttar Pradesh"
        },
        {
            "id": "197",
            "name": "Jalpaiguri",
            "state": "West Bengal"
        },
        {
            "id": "198",
            "name": "Bharuch",
            "state": "Gujarat"
        },
        {
            "id": "199",
            "name": "Pathankot",
            "state": "Punjab"
        },
        {
            "id": "200",
            "name": "Hoshiarpur",
            "state": "Punjab"
        },
        {
            "id": "201",
            "name": "Baramula",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "202",
            "name": "Adoni",
            "state": "Andhra Pradesh"
        },
        {
            "id": "203",
            "name": "Jind",
            "state": "Haryana"
        },
        {
            "id": "204",
            "name": "Tonk",
            "state": "Rajasthan"
        },
        {
            "id": "205",
            "name": "Tenali",
            "state": "Andhra Pradesh"
        },
        {
            "id": "206",
            "name": "Kancheepuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "207",
            "name": "Vapi",
            "state": "Gujarat"
        },
        {
            "id": "208",
            "name": "Sirsa",
            "state": "Haryana"
        },
        {
            "id": "209",
            "name": "Navsari",
            "state": "Gujarat"
        },
        {
            "id": "210",
            "name": "Mahbubnagar",
            "state": "Telangana"
        },
        {
            "id": "211",
            "name": "Puri",
            "state": "Odisha"
        },
        {
            "id": "212",
            "name": "Robertson Pet",
            "state": "Karnataka"
        },
        {
            "id": "213",
            "name": "Erode",
            "state": "Tamil Nadu"
        },
        {
            "id": "214",
            "name": "Batala",
            "state": "Punjab"
        },
        {
            "id": "215",
            "name": "Haldwani-cum-Kathgodam",
            "state": "Uttarakhand"
        },
        {
            "id": "216",
            "name": "Vidisha",
            "state": "Madhya Pradesh"
        },
        {
            "id": "217",
            "name": "Saharsa",
            "state": "Bihar"
        },
        {
            "id": "218",
            "name": "Thanesar",
            "state": "Haryana"
        },
        {
            "id": "219",
            "name": "Chittoor",
            "state": "Andhra Pradesh"
        },
        {
            "id": "220",
            "name": "Veraval",
            "state": "Gujarat"
        },
        {
            "id": "221",
            "name": "Lakhimpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "222",
            "name": "Sitapur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "223",
            "name": "Hindupur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "224",
            "name": "Santipur",
            "state": "West Bengal"
        },
        {
            "id": "225",
            "name": "Balurghat",
            "state": "West Bengal"
        },
        {
            "id": "226",
            "name": "Ganjbasoda",
            "state": "Madhya Pradesh"
        },
        {
            "id": "227",
            "name": "Moga",
            "state": "Punjab"
        },
        {
            "id": "228",
            "name": "Proddatur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "229",
            "name": "Srinagar",
            "state": "Uttarakhand"
        },
        {
            "id": "230",
            "name": "Medinipur",
            "state": "West Bengal"
        },
        {
            "id": "231",
            "name": "Habra",
            "state": "West Bengal"
        },
        {
            "id": "232",
            "name": "Sasaram",
            "state": "Bihar"
        },
        {
            "id": "233",
            "name": "Hajipur",
            "state": "Bihar"
        },
        {
            "id": "234",
            "name": "Bhuj",
            "state": "Gujarat"
        },
        {
            "id": "235",
            "name": "Shivpuri",
            "state": "Madhya Pradesh"
        },
        {
            "id": "236",
            "name": "Ranaghat",
            "state": "West Bengal"
        },
        {
            "id": "237",
            "name": "Shimla",
            "state": "Himachal Pradesh"
        },
        {
            "id": "238",
            "name": "Tiruvannamalai",
            "state": "Tamil Nadu"
        },
        {
            "id": "239",
            "name": "Kaithal",
            "state": "Haryana"
        },
        {
            "id": "240",
            "name": "Rajnandgaon",
            "state": "Chhattisgarh"
        },
        {
            "id": "241",
            "name": "Godhra",
            "state": "Gujarat"
        },
        {
            "id": "242",
            "name": "Hazaribag",
            "state": "Jharkhand"
        },
        {
            "id": "243",
            "name": "Bhimavaram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "244",
            "name": "Mandsaur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "245",
            "name": "Dibrugarh",
            "state": "Assam"
        },
        {
            "id": "246",
            "name": "Kolar",
            "state": "Karnataka"
        },
        {
            "id": "247",
            "name": "Bankura",
            "state": "West Bengal"
        },
        {
            "id": "248",
            "name": "Mandya",
            "state": "Karnataka"
        },
        {
            "id": "249",
            "name": "Dehri-on-Sone",
            "state": "Bihar"
        },
        {
            "id": "250",
            "name": "Madanapalle",
            "state": "Andhra Pradesh"
        },
        {
            "id": "251",
            "name": "Malerkotla",
            "state": "Punjab"
        },
        {
            "id": "252",
            "name": "Lalitpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "253",
            "name": "Bettiah",
            "state": "Bihar"
        },
        {
            "id": "254",
            "name": "Pollachi",
            "state": "Tamil Nadu"
        },
        {
            "id": "255",
            "name": "Khanna",
            "state": "Punjab"
        },
        {
            "id": "256",
            "name": "Neemuch",
            "state": "Madhya Pradesh"
        },
        {
            "id": "257",
            "name": "Palwal",
            "state": "Haryana"
        },
        {
            "id": "258",
            "name": "Palanpur",
            "state": "Gujarat"
        },
        {
            "id": "259",
            "name": "Guntakal",
            "state": "Andhra Pradesh"
        },
        {
            "id": "260",
            "name": "Nabadwip",
            "state": "West Bengal"
        },
        {
            "id": "261",
            "name": "Udupi",
            "state": "Karnataka"
        },
        {
            "id": "262",
            "name": "Jagdalpur",
            "state": "Chhattisgarh"
        },
        {
            "id": "263",
            "name": "Motihari",
            "state": "Bihar"
        },
        {
            "id": "264",
            "name": "Pilibhit",
            "state": "Uttar Pradesh"
        },
        {
            "id": "265",
            "name": "Dimapur",
            "state": "Nagaland"
        },
        {
            "id": "266",
            "name": "Mohali",
            "state": "Punjab"
        },
        {
            "id": "267",
            "name": "Sadulpur",
            "state": "Rajasthan"
        },
        {
            "id": "268",
            "name": "Rajapalayam",
            "state": "Tamil Nadu"
        },
        {
            "id": "269",
            "name": "Dharmavaram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "270",
            "name": "Kashipur",
            "state": "Uttarakhand"
        },
        {
            "id": "271",
            "name": "Sivakasi",
            "state": "Tamil Nadu"
        },
        {
            "id": "272",
            "name": "Darjiling",
            "state": "West Bengal"
        },
        {
            "id": "273",
            "name": "Chikkamagaluru",
            "state": "Karnataka"
        },
        {
            "id": "274",
            "name": "Gudivada",
            "state": "Andhra Pradesh"
        },
        {
            "id": "275",
            "name": "Baleshwar Town",
            "state": "Odisha"
        },
        {
            "id": "276",
            "name": "Mancherial",
            "state": "Telangana"
        },
        {
            "id": "277",
            "name": "Srikakulam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "278",
            "name": "Adilabad",
            "state": "Telangana"
        },
        {
            "id": "279",
            "name": "Yavatmal",
            "state": "Maharashtra"
        },
        {
            "id": "280",
            "name": "Barnala",
            "state": "Punjab"
        },
        {
            "id": "281",
            "name": "Nagaon",
            "state": "Assam"
        },
        {
            "id": "282",
            "name": "Narasaraopet",
            "state": "Andhra Pradesh"
        },
        {
            "id": "283",
            "name": "Raigarh",
            "state": "Chhattisgarh"
        },
        {
            "id": "284",
            "name": "Roorkee",
            "state": "Uttarakhand"
        },
        {
            "id": "285",
            "name": "Valsad",
            "state": "Gujarat"
        },
        {
            "id": "286",
            "name": "Ambikapur",
            "state": "Chhattisgarh"
        },
        {
            "id": "287",
            "name": "Giridih",
            "state": "Jharkhand"
        },
        {
            "id": "288",
            "name": "Chandausi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "289",
            "name": "Purulia",
            "state": "West Bengal"
        },
        {
            "id": "290",
            "name": "Patan",
            "state": "Gujarat"
        },
        {
            "id": "291",
            "name": "Bagaha",
            "state": "Bihar"
        },
        {
            "id": "292",
            "name": "Hardoi ",
            "state": "Uttar Pradesh"
        },
        {
            "id": "293",
            "name": "Achalpur",
            "state": "Maharashtra"
        },
        {
            "id": "294",
            "name": "Osmanabad",
            "state": "Maharashtra"
        },
        {
            "id": "295",
            "name": "Deesa",
            "state": "Gujarat"
        },
        {
            "id": "296",
            "name": "Nandurbar",
            "state": "Maharashtra"
        },
        {
            "id": "297",
            "name": "Azamgarh",
            "state": "Uttar Pradesh"
        },
        {
            "id": "298",
            "name": "Ramgarh",
            "state": "Jharkhand"
        },
        {
            "id": "299",
            "name": "Firozpur",
            "state": "Punjab"
        },
        {
            "id": "300",
            "name": "Baripada Town",
            "state": "Odisha"
        },
        {
            "id": "301",
            "name": "Karwar",
            "state": "Karnataka"
        },
        {
            "id": "302",
            "name": "Siwan",
            "state": "Bihar"
        },
        {
            "id": "303",
            "name": "Rajampet",
            "state": "Andhra Pradesh"
        },
        {
            "id": "304",
            "name": "Pudukkottai",
            "state": "Tamil Nadu"
        },
        {
            "id": "305",
            "name": "Anantnag",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "306",
            "name": "Tadpatri",
            "state": "Andhra Pradesh"
        },
        {
            "id": "307",
            "name": "Satara",
            "state": "Maharashtra"
        },
        {
            "id": "308",
            "name": "Bhadrak",
            "state": "Odisha"
        },
        {
            "id": "309",
            "name": "Kishanganj",
            "state": "Bihar"
        },
        {
            "id": "310",
            "name": "Suryapet",
            "state": "Telangana"
        },
        {
            "id": "311",
            "name": "Wardha",
            "state": "Maharashtra"
        },
        {
            "id": "312",
            "name": "Ranebennuru",
            "state": "Karnataka"
        },
        {
            "id": "313",
            "name": "Amreli",
            "state": "Gujarat"
        },
        {
            "id": "314",
            "name": "Neyveli (TS)",
            "state": "Tamil Nadu"
        },
        {
            "id": "315",
            "name": "Jamalpur",
            "state": "Bihar"
        },
        {
            "id": "316",
            "name": "Marmagao",
            "state": "Goa"
        },
        {
            "id": "317",
            "name": "Udgir",
            "state": "Maharashtra"
        },
        {
            "id": "318",
            "name": "Tadepalligudem",
            "state": "Andhra Pradesh"
        },
        {
            "id": "319",
            "name": "Nagapattinam",
            "state": "Tamil Nadu"
        },
        {
            "id": "320",
            "name": "Buxar",
            "state": "Bihar"
        },
        {
            "id": "321",
            "name": "Aurangabad",
            "state": "Maharashtra"
        },
        {
            "id": "322",
            "name": "Jehanabad",
            "state": "Bihar"
        },
        {
            "id": "323",
            "name": "Phagwara",
            "state": "Punjab"
        },
        {
            "id": "324",
            "name": "Khair",
            "state": "Uttar Pradesh"
        },
        {
            "id": "325",
            "name": "Sawai Madhopur",
            "state": "Rajasthan"
        },
        {
            "id": "326",
            "name": "Kapurthala",
            "state": "Punjab"
        },
        {
            "id": "327",
            "name": "Chilakaluripet",
            "state": "Andhra Pradesh"
        },
        {
            "id": "328",
            "name": "Aurangabad",
            "state": "Bihar"
        },
        {
            "id": "329",
            "name": "Malappuram",
            "state": "Kerala"
        },
        {
            "id": "330",
            "name": "Rewari",
            "state": "Haryana"
        },
        {
            "id": "331",
            "name": "Nagaur",
            "state": "Rajasthan"
        },
        {
            "id": "332",
            "name": "Sultanpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "333",
            "name": "Nagda",
            "state": "Madhya Pradesh"
        },
        {
            "id": "334",
            "name": "Port Blair",
            "state": "Andaman and Nicobar Islands"
        },
        {
            "id": "335",
            "name": "Lakhisarai",
            "state": "Bihar"
        },
        {
            "id": "336",
            "name": "Panaji",
            "state": "Goa"
        },
        {
            "id": "337",
            "name": "Tinsukia",
            "state": "Assam"
        },
        {
            "id": "338",
            "name": "Itarsi",
            "state": "Madhya Pradesh"
        },
        {
            "id": "339",
            "name": "Kohima",
            "state": "Nagaland"
        },
        {
            "id": "340",
            "name": "Balangir",
            "state": "Odisha"
        },
        {
            "id": "341",
            "name": "Nawada",
            "state": "Bihar"
        },
        {
            "id": "342",
            "name": "Jharsuguda",
            "state": "Odisha"
        },
        {
            "id": "343",
            "name": "Jagtial",
            "state": "Telangana"
        },
        {
            "id": "344",
            "name": "Viluppuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "345",
            "name": "Amalner",
            "state": "Maharashtra"
        },
        {
            "id": "346",
            "name": "Zirakpur",
            "state": "Punjab"
        },
        {
            "id": "347",
            "name": "Tanda",
            "state": "Uttar Pradesh"
        },
        {
            "id": "348",
            "name": "Tiruchengode",
            "state": "Tamil Nadu"
        },
        {
            "id": "349",
            "name": "Nagina",
            "state": "Uttar Pradesh"
        },
        {
            "id": "350",
            "name": "Yemmiganur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "351",
            "name": "Vaniyambadi",
            "state": "Tamil Nadu"
        },
        {
            "id": "352",
            "name": "Sarni",
            "state": "Madhya Pradesh"
        },
        {
            "id": "353",
            "name": "Theni Allinagaram",
            "state": "Tamil Nadu"
        },
        {
            "id": "354",
            "name": "Margao",
            "state": "Goa"
        },
        {
            "id": "355",
            "name": "Akot",
            "state": "Maharashtra"
        },
        {
            "id": "356",
            "name": "Sehore",
            "state": "Madhya Pradesh"
        },
        {
            "id": "357",
            "name": "Mhow Cantonment",
            "state": "Madhya Pradesh"
        },
        {
            "id": "358",
            "name": "Kot Kapura",
            "state": "Punjab"
        },
        {
            "id": "359",
            "name": "Makrana",
            "state": "Rajasthan"
        },
        {
            "id": "360",
            "name": "Pandharpur",
            "state": "Maharashtra"
        },
        {
            "id": "361",
            "name": "Miryalaguda",
            "state": "Telangana"
        },
        {
            "id": "362",
            "name": "Shamli",
            "state": "Uttar Pradesh"
        },
        {
            "id": "363",
            "name": "Seoni",
            "state": "Madhya Pradesh"
        },
        {
            "id": "364",
            "name": "Ranibennur",
            "state": "Karnataka"
        },
        {
            "id": "365",
            "name": "Kadiri",
            "state": "Andhra Pradesh"
        },
        {
            "id": "366",
            "name": "Shrirampur",
            "state": "Maharashtra"
        },
        {
            "id": "367",
            "name": "Rudrapur",
            "state": "Uttarakhand"
        },
        {
            "id": "368",
            "name": "Parli",
            "state": "Maharashtra"
        },
        {
            "id": "369",
            "name": "Najibabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "370",
            "name": "Nirmal",
            "state": "Telangana"
        },
        {
            "id": "371",
            "name": "Udhagamandalam",
            "state": "Tamil Nadu"
        },
        {
            "id": "372",
            "name": "Shikohabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "373",
            "name": "Jhumri Tilaiya",
            "state": "Jharkhand"
        },
        {
            "id": "374",
            "name": "Aruppukkottai",
            "state": "Tamil Nadu"
        },
        {
            "id": "375",
            "name": "Ponnani",
            "state": "Kerala"
        },
        {
            "id": "376",
            "name": "Jamui",
            "state": "Bihar"
        },
        {
            "id": "377",
            "name": "Sitamarhi",
            "state": "Bihar"
        },
        {
            "id": "378",
            "name": "Chirala",
            "state": "Andhra Pradesh"
        },
        {
            "id": "379",
            "name": "Anjar",
            "state": "Gujarat"
        },
        {
            "id": "380",
            "name": "Karaikal",
            "state": "Puducherry"
        },
        {
            "id": "381",
            "name": "Hansi",
            "state": "Haryana"
        },
        {
            "id": "382",
            "name": "Anakapalle",
            "state": "Andhra Pradesh"
        },
        {
            "id": "383",
            "name": "Mahasamund",
            "state": "Chhattisgarh"
        },
        {
            "id": "384",
            "name": "Faridkot",
            "state": "Punjab"
        },
        {
            "id": "385",
            "name": "Saunda",
            "state": "Jharkhand"
        },
        {
            "id": "386",
            "name": "Dhoraji",
            "state": "Gujarat"
        },
        {
            "id": "387",
            "name": "Paramakudi",
            "state": "Tamil Nadu"
        },
        {
            "id": "388",
            "name": "Balaghat",
            "state": "Madhya Pradesh"
        },
        {
            "id": "389",
            "name": "Sujangarh",
            "state": "Rajasthan"
        },
        {
            "id": "390",
            "name": "Khambhat",
            "state": "Gujarat"
        },
        {
            "id": "391",
            "name": "Muktsar",
            "state": "Punjab"
        },
        {
            "id": "392",
            "name": "Rajpura",
            "state": "Punjab"
        },
        {
            "id": "393",
            "name": "Kavali",
            "state": "Andhra Pradesh"
        },
        {
            "id": "394",
            "name": "Dhamtari",
            "state": "Chhattisgarh"
        },
        {
            "id": "395",
            "name": "Ashok Nagar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "396",
            "name": "Sardarshahar",
            "state": "Rajasthan"
        },
        {
            "id": "397",
            "name": "Mahuva",
            "state": "Gujarat"
        },
        {
            "id": "398",
            "name": "Bargarh",
            "state": "Odisha"
        },
        {
            "id": "399",
            "name": "Kamareddy",
            "state": "Telangana"
        },
        {
            "id": "400",
            "name": "Sahibganj",
            "state": "Jharkhand"
        },
        {
            "id": "401",
            "name": "Kothagudem",
            "state": "Telangana"
        },
        {
            "id": "402",
            "name": "Ramanagaram",
            "state": "Karnataka"
        },
        {
            "id": "403",
            "name": "Gokak",
            "state": "Karnataka"
        },
        {
            "id": "404",
            "name": "Tikamgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "405",
            "name": "Araria",
            "state": "Bihar"
        },
        {
            "id": "406",
            "name": "Rishikesh",
            "state": "Uttarakhand"
        },
        {
            "id": "407",
            "name": "Shahdol",
            "state": "Madhya Pradesh"
        },
        {
            "id": "408",
            "name": "Medininagar (Daltonganj)",
            "state": "Jharkhand"
        },
        {
            "id": "409",
            "name": "Arakkonam",
            "state": "Tamil Nadu"
        },
        {
            "id": "410",
            "name": "Washim",
            "state": "Maharashtra"
        },
        {
            "id": "411",
            "name": "Sangrur",
            "state": "Punjab"
        },
        {
            "id": "412",
            "name": "Bodhan",
            "state": "Telangana"
        },
        {
            "id": "413",
            "name": "Fazilka",
            "state": "Punjab"
        },
        {
            "id": "414",
            "name": "Palacole",
            "state": "Andhra Pradesh"
        },
        {
            "id": "415",
            "name": "Keshod",
            "state": "Gujarat"
        },
        {
            "id": "416",
            "name": "Sullurpeta",
            "state": "Andhra Pradesh"
        },
        {
            "id": "417",
            "name": "Wadhwan",
            "state": "Gujarat"
        },
        {
            "id": "418",
            "name": "Gurdaspur",
            "state": "Punjab"
        },
        {
            "id": "419",
            "name": "Vatakara",
            "state": "Kerala"
        },
        {
            "id": "420",
            "name": "Tura",
            "state": "Meghalaya"
        },
        {
            "id": "421",
            "name": "Narnaul",
            "state": "Haryana"
        },
        {
            "id": "422",
            "name": "Kharar",
            "state": "Punjab"
        },
        {
            "id": "423",
            "name": "Yadgir",
            "state": "Karnataka"
        },
        {
            "id": "424",
            "name": "Ambejogai",
            "state": "Maharashtra"
        },
        {
            "id": "425",
            "name": "Ankleshwar",
            "state": "Gujarat"
        },
        {
            "id": "426",
            "name": "Savarkundla",
            "state": "Gujarat"
        },
        {
            "id": "427",
            "name": "Paradip",
            "state": "Odisha"
        },
        {
            "id": "428",
            "name": "Virudhachalam",
            "state": "Tamil Nadu"
        },
        {
            "id": "429",
            "name": "Kanhangad",
            "state": "Kerala"
        },
        {
            "id": "430",
            "name": "Kadi",
            "state": "Gujarat"
        },
        {
            "id": "431",
            "name": "Srivilliputhur",
            "state": "Tamil Nadu"
        },
        {
            "id": "432",
            "name": "Gobindgarh",
            "state": "Punjab"
        },
        {
            "id": "433",
            "name": "Tindivanam",
            "state": "Tamil Nadu"
        },
        {
            "id": "434",
            "name": "Mansa",
            "state": "Punjab"
        },
        {
            "id": "435",
            "name": "Taliparamba",
            "state": "Kerala"
        },
        {
            "id": "436",
            "name": "Manmad",
            "state": "Maharashtra"
        },
        {
            "id": "437",
            "name": "Tanuku",
            "state": "Andhra Pradesh"
        },
        {
            "id": "438",
            "name": "Rayachoti",
            "state": "Andhra Pradesh"
        },
        {
            "id": "439",
            "name": "Virudhunagar",
            "state": "Tamil Nadu"
        },
        {
            "id": "440",
            "name": "Koyilandy",
            "state": "Kerala"
        },
        {
            "id": "441",
            "name": "Jorhat",
            "state": "Assam"
        },
        {
            "id": "442",
            "name": "Karur",
            "state": "Tamil Nadu"
        },
        {
            "id": "443",
            "name": "Valparai",
            "state": "Tamil Nadu"
        },
        {
            "id": "444",
            "name": "Srikalahasti",
            "state": "Andhra Pradesh"
        },
        {
            "id": "445",
            "name": "Neyyattinkara",
            "state": "Kerala"
        },
        {
            "id": "446",
            "name": "Bapatla",
            "state": "Andhra Pradesh"
        },
        {
            "id": "447",
            "name": "Fatehabad",
            "state": "Haryana"
        },
        {
            "id": "448",
            "name": "Malout",
            "state": "Punjab"
        },
        {
            "id": "449",
            "name": "Sankarankovil",
            "state": "Tamil Nadu"
        },
        {
            "id": "450",
            "name": "Tenkasi",
            "state": "Tamil Nadu"
        },
        {
            "id": "451",
            "name": "Ratnagiri",
            "state": "Maharashtra"
        },
        {
            "id": "452",
            "name": "Rabkavi Banhatti",
            "state": "Karnataka"
        },
        {
            "id": "453",
            "name": "Sikandrabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "454",
            "name": "Chaibasa",
            "state": "Jharkhand"
        },
        {
            "id": "455",
            "name": "Chirmiri",
            "state": "Chhattisgarh"
        },
        {
            "id": "456",
            "name": "Palwancha",
            "state": "Telangana"
        },
        {
            "id": "457",
            "name": "Bhawanipatna",
            "state": "Odisha"
        },
        {
            "id": "458",
            "name": "Kayamkulam",
            "state": "Kerala"
        },
        {
            "id": "459",
            "name": "Pithampur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "460",
            "name": "Nabha",
            "state": "Punjab"
        },
        {
            "id": "461",
            "name": "Shahabad, Hardoi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "462",
            "name": "Dhenkanal",
            "state": "Odisha"
        },
        {
            "id": "463",
            "name": "Uran Islampur",
            "state": "Maharashtra"
        },
        {
            "id": "464",
            "name": "Gopalganj",
            "state": "Bihar"
        },
        {
            "id": "465",
            "name": "Bongaigaon City",
            "state": "Assam"
        },
        {
            "id": "466",
            "name": "Palani",
            "state": "Tamil Nadu"
        },
        {
            "id": "467",
            "name": "Pusad",
            "state": "Maharashtra"
        },
        {
            "id": "468",
            "name": "Sopore",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "469",
            "name": "Pilkhuwa",
            "state": "Uttar Pradesh"
        },
        {
            "id": "470",
            "name": "Tarn Taran",
            "state": "Punjab"
        },
        {
            "id": "471",
            "name": "Renukoot",
            "state": "Uttar Pradesh"
        },
        {
            "id": "472",
            "name": "Mandamarri",
            "state": "Telangana"
        },
        {
            "id": "473",
            "name": "Shahabad",
            "state": "Karnataka"
        },
        {
            "id": "474",
            "name": "Barbil",
            "state": "Odisha"
        },
        {
            "id": "475",
            "name": "Koratla",
            "state": "Telangana"
        },
        {
            "id": "476",
            "name": "Madhubani",
            "state": "Bihar"
        },
        {
            "id": "477",
            "name": "Arambagh",
            "state": "West Bengal"
        },
        {
            "id": "478",
            "name": "Gohana",
            "state": "Haryana"
        },
        {
            "id": "479",
            "name": "Ladnu",
            "state": "Rajasthan"
        },
        {
            "id": "480",
            "name": "Pattukkottai",
            "state": "Tamil Nadu"
        },
        {
            "id": "481",
            "name": "Sirsi",
            "state": "Karnataka"
        },
        {
            "id": "482",
            "name": "Sircilla",
            "state": "Telangana"
        },
        {
            "id": "483",
            "name": "Tamluk",
            "state": "West Bengal"
        },
        {
            "id": "484",
            "name": "Jagraon",
            "state": "Punjab"
        },
        {
            "id": "485",
            "name": "AlipurdUrban Agglomerationr",
            "state": "West Bengal"
        },
        {
            "id": "486",
            "name": "Alirajpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "487",
            "name": "Tandur",
            "state": "Telangana"
        },
        {
            "id": "488",
            "name": "Naidupet",
            "state": "Andhra Pradesh"
        },
        {
            "id": "489",
            "name": "Tirupathur",
            "state": "Tamil Nadu"
        },
        {
            "id": "490",
            "name": "Tohana",
            "state": "Haryana"
        },
        {
            "id": "491",
            "name": "Ratangarh",
            "state": "Rajasthan"
        },
        {
            "id": "492",
            "name": "Dhubri",
            "state": "Assam"
        },
        {
            "id": "493",
            "name": "Masaurhi",
            "state": "Bihar"
        },
        {
            "id": "494",
            "name": "Visnagar",
            "state": "Gujarat"
        },
        {
            "id": "495",
            "name": "Vrindavan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "496",
            "name": "Nokha",
            "state": "Rajasthan"
        },
        {
            "id": "497",
            "name": "Nagari",
            "state": "Andhra Pradesh"
        },
        {
            "id": "498",
            "name": "Narwana",
            "state": "Haryana"
        },
        {
            "id": "499",
            "name": "Ramanathapuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "500",
            "name": "Ujhani",
            "state": "Uttar Pradesh"
        },
        {
            "id": "501",
            "name": "Samastipur",
            "state": "Bihar"
        },
        {
            "id": "502",
            "name": "Laharpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "503",
            "name": "Sangamner",
            "state": "Maharashtra"
        },
        {
            "id": "504",
            "name": "Nimbahera",
            "state": "Rajasthan"
        },
        {
            "id": "505",
            "name": "Siddipet",
            "state": "Telangana"
        },
        {
            "id": "506",
            "name": "Suri",
            "state": "West Bengal"
        },
        {
            "id": "507",
            "name": "Diphu",
            "state": "Assam"
        },
        {
            "id": "508",
            "name": "Jhargram",
            "state": "West Bengal"
        },
        {
            "id": "509",
            "name": "Shirpur-Warwade",
            "state": "Maharashtra"
        },
        {
            "id": "510",
            "name": "Tilhar",
            "state": "Uttar Pradesh"
        },
        {
            "id": "511",
            "name": "Sindhnur",
            "state": "Karnataka"
        },
        {
            "id": "512",
            "name": "Udumalaipettai",
            "state": "Tamil Nadu"
        },
        {
            "id": "513",
            "name": "Malkapur",
            "state": "Maharashtra"
        },
        {
            "id": "514",
            "name": "Wanaparthy",
            "state": "Telangana"
        },
        {
            "id": "515",
            "name": "Gudur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "516",
            "name": "Kendujhar",
            "state": "Odisha"
        },
        {
            "id": "517",
            "name": "Mandla",
            "state": "Madhya Pradesh"
        },
        {
            "id": "518",
            "name": "Mandi",
            "state": "Himachal Pradesh"
        },
        {
            "id": "519",
            "name": "Nedumangad",
            "state": "Kerala"
        },
        {
            "id": "520",
            "name": "North Lakhimpur",
            "state": "Assam"
        },
        {
            "id": "521",
            "name": "Vinukonda",
            "state": "Andhra Pradesh"
        },
        {
            "id": "522",
            "name": "Tiptur",
            "state": "Karnataka"
        },
        {
            "id": "523",
            "name": "Gobichettipalayam",
            "state": "Tamil Nadu"
        },
        {
            "id": "524",
            "name": "Sunabeda",
            "state": "Odisha"
        },
        {
            "id": "525",
            "name": "Wani",
            "state": "Maharashtra"
        },
        {
            "id": "526",
            "name": "Upleta",
            "state": "Gujarat"
        },
        {
            "id": "527",
            "name": "Narasapuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "528",
            "name": "Nuzvid",
            "state": "Andhra Pradesh"
        },
        {
            "id": "529",
            "name": "Tezpur",
            "state": "Assam"
        },
        {
            "id": "530",
            "name": "Una",
            "state": "Gujarat"
        },
        {
            "id": "531",
            "name": "Markapur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "532",
            "name": "Sheopur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "533",
            "name": "Thiruvarur",
            "state": "Tamil Nadu"
        },
        {
            "id": "534",
            "name": "Sidhpur",
            "state": "Gujarat"
        },
        {
            "id": "535",
            "name": "Sahaswan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "536",
            "name": "Suratgarh",
            "state": "Rajasthan"
        },
        {
            "id": "537",
            "name": "Shajapur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "538",
            "name": "Rayagada",
            "state": "Odisha"
        },
        {
            "id": "539",
            "name": "Lonavla",
            "state": "Maharashtra"
        },
        {
            "id": "540",
            "name": "Ponnur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "541",
            "name": "Kagaznagar",
            "state": "Telangana"
        },
        {
            "id": "542",
            "name": "Gadwal",
            "state": "Telangana"
        },
        {
            "id": "543",
            "name": "Bhatapara",
            "state": "Chhattisgarh"
        },
        {
            "id": "544",
            "name": "Kandukur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "545",
            "name": "Sangareddy",
            "state": "Telangana"
        },
        {
            "id": "546",
            "name": "Unjha",
            "state": "Gujarat"
        },
        {
            "id": "547",
            "name": "Lunglei",
            "state": "Mizoram"
        },
        {
            "id": "548",
            "name": "Karimganj",
            "state": "Assam"
        },
        {
            "id": "549",
            "name": "Kannur",
            "state": "Kerala"
        },
        {
            "id": "550",
            "name": "Bobbili",
            "state": "Andhra Pradesh"
        },
        {
            "id": "551",
            "name": "Mokameh",
            "state": "Bihar"
        },
        {
            "id": "552",
            "name": "Talegaon Dabhade",
            "state": "Maharashtra"
        },
        {
            "id": "553",
            "name": "Anjangaon",
            "state": "Maharashtra"
        },
        {
            "id": "554",
            "name": "Mangrol",
            "state": "Gujarat"
        },
        {
            "id": "555",
            "name": "Sunam",
            "state": "Punjab"
        },
        {
            "id": "556",
            "name": "Gangarampur",
            "state": "West Bengal"
        },
        {
            "id": "557",
            "name": "Thiruvallur",
            "state": "Tamil Nadu"
        },
        {
            "id": "558",
            "name": "Tirur",
            "state": "Kerala"
        },
        {
            "id": "559",
            "name": "Rath",
            "state": "Uttar Pradesh"
        },
        {
            "id": "560",
            "name": "Jatani",
            "state": "Odisha"
        },
        {
            "id": "561",
            "name": "Viramgam",
            "state": "Gujarat"
        },
        {
            "id": "562",
            "name": "Rajsamand",
            "state": "Rajasthan"
        },
        {
            "id": "563",
            "name": "Yanam",
            "state": "Puducherry"
        },
        {
            "id": "564",
            "name": "Kottayam",
            "state": "Kerala"
        },
        {
            "id": "565",
            "name": "Panruti",
            "state": "Tamil Nadu"
        },
        {
            "id": "566",
            "name": "Dhuri",
            "state": "Punjab"
        },
        {
            "id": "567",
            "name": "Namakkal",
            "state": "Tamil Nadu"
        },
        {
            "id": "568",
            "name": "Kasaragod",
            "state": "Kerala"
        },
        {
            "id": "569",
            "name": "Modasa",
            "state": "Gujarat"
        },
        {
            "id": "570",
            "name": "Rayadurg",
            "state": "Andhra Pradesh"
        },
        {
            "id": "571",
            "name": "Supaul",
            "state": "Bihar"
        },
        {
            "id": "572",
            "name": "Kunnamkulam",
            "state": "Kerala"
        },
        {
            "id": "573",
            "name": "Umred",
            "state": "Maharashtra"
        },
        {
            "id": "574",
            "name": "Bellampalle",
            "state": "Telangana"
        },
        {
            "id": "575",
            "name": "Sibsagar",
            "state": "Assam"
        },
        {
            "id": "576",
            "name": "Mandi Dabwali",
            "state": "Haryana"
        },
        {
            "id": "577",
            "name": "Ottappalam",
            "state": "Kerala"
        },
        {
            "id": "578",
            "name": "Dumraon",
            "state": "Bihar"
        },
        {
            "id": "579",
            "name": "Samalkot",
            "state": "Andhra Pradesh"
        },
        {
            "id": "580",
            "name": "Jaggaiahpet",
            "state": "Andhra Pradesh"
        },
        {
            "id": "581",
            "name": "Goalpara",
            "state": "Assam"
        },
        {
            "id": "582",
            "name": "Tuni",
            "state": "Andhra Pradesh"
        },
        {
            "id": "583",
            "name": "Lachhmangarh",
            "state": "Rajasthan"
        },
        {
            "id": "584",
            "name": "Bhongir",
            "state": "Telangana"
        },
        {
            "id": "585",
            "name": "Amalapuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "586",
            "name": "Firozpur Cantt.",
            "state": "Punjab"
        },
        {
            "id": "587",
            "name": "Vikarabad",
            "state": "Telangana"
        },
        {
            "id": "588",
            "name": "Thiruvalla",
            "state": "Kerala"
        },
        {
            "id": "589",
            "name": "Sherkot",
            "state": "Uttar Pradesh"
        },
        {
            "id": "590",
            "name": "Palghar",
            "state": "Maharashtra"
        },
        {
            "id": "591",
            "name": "Shegaon",
            "state": "Maharashtra"
        },
        {
            "id": "592",
            "name": "Jangaon",
            "state": "Telangana"
        },
        {
            "id": "593",
            "name": "Bheemunipatnam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "594",
            "name": "Panna",
            "state": "Madhya Pradesh"
        },
        {
            "id": "595",
            "name": "Thodupuzha",
            "state": "Kerala"
        },
        {
            "id": "596",
            "name": "KathUrban Agglomeration",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "597",
            "name": "Palitana",
            "state": "Gujarat"
        },
        {
            "id": "598",
            "name": "Arwal",
            "state": "Bihar"
        },
        {
            "id": "599",
            "name": "Venkatagiri",
            "state": "Andhra Pradesh"
        },
        {
            "id": "600",
            "name": "Kalpi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "601",
            "name": "Rajgarh (Churu)",
            "state": "Rajasthan"
        },
        {
            "id": "602",
            "name": "Sattenapalle",
            "state": "Andhra Pradesh"
        },
        {
            "id": "603",
            "name": "Arsikere",
            "state": "Karnataka"
        },
        {
            "id": "604",
            "name": "Ozar",
            "state": "Maharashtra"
        },
        {
            "id": "605",
            "name": "Thirumangalam",
            "state": "Tamil Nadu"
        },
        {
            "id": "606",
            "name": "Petlad",
            "state": "Gujarat"
        },
        {
            "id": "607",
            "name": "Nasirabad",
            "state": "Rajasthan"
        },
        {
            "id": "608",
            "name": "Phaltan",
            "state": "Maharashtra"
        },
        {
            "id": "609",
            "name": "Rampurhat",
            "state": "West Bengal"
        },
        {
            "id": "610",
            "name": "Nanjangud",
            "state": "Karnataka"
        },
        {
            "id": "611",
            "name": "Forbesganj",
            "state": "Bihar"
        },
        {
            "id": "612",
            "name": "Tundla",
            "state": "Uttar Pradesh"
        },
        {
            "id": "613",
            "name": "BhabUrban Agglomeration",
            "state": "Bihar"
        },
        {
            "id": "614",
            "name": "Sagara",
            "state": "Karnataka"
        },
        {
            "id": "615",
            "name": "Pithapuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "616",
            "name": "Sira",
            "state": "Karnataka"
        },
        {
            "id": "617",
            "name": "Bhadrachalam",
            "state": "Telangana"
        },
        {
            "id": "618",
            "name": "Charkhi Dadri",
            "state": "Haryana"
        },
        {
            "id": "619",
            "name": "Chatra",
            "state": "Jharkhand"
        },
        {
            "id": "620",
            "name": "Palasa Kasibugga",
            "state": "Andhra Pradesh"
        },
        {
            "id": "621",
            "name": "Nohar",
            "state": "Rajasthan"
        },
        {
            "id": "622",
            "name": "Yevla",
            "state": "Maharashtra"
        },
        {
            "id": "623",
            "name": "Sirhind Fatehgarh Sahib",
            "state": "Punjab"
        },
        {
            "id": "624",
            "name": "Bhainsa",
            "state": "Telangana"
        },
        {
            "id": "625",
            "name": "Parvathipuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "626",
            "name": "Shahade",
            "state": "Maharashtra"
        },
        {
            "id": "627",
            "name": "Chalakudy",
            "state": "Kerala"
        },
        {
            "id": "628",
            "name": "Narkatiaganj",
            "state": "Bihar"
        },
        {
            "id": "629",
            "name": "Kapadvanj",
            "state": "Gujarat"
        },
        {
            "id": "630",
            "name": "Macherla",
            "state": "Andhra Pradesh"
        },
        {
            "id": "631",
            "name": "Raghogarh-Vijaypur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "632",
            "name": "Rupnagar",
            "state": "Punjab"
        },
        {
            "id": "633",
            "name": "Naugachhia",
            "state": "Bihar"
        },
        {
            "id": "634",
            "name": "Sendhwa",
            "state": "Madhya Pradesh"
        },
        {
            "id": "635",
            "name": "Byasanagar",
            "state": "Odisha"
        },
        {
            "id": "636",
            "name": "Sandila",
            "state": "Uttar Pradesh"
        },
        {
            "id": "637",
            "name": "Gooty",
            "state": "Andhra Pradesh"
        },
        {
            "id": "638",
            "name": "Salur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "639",
            "name": "Nanpara",
            "state": "Uttar Pradesh"
        },
        {
            "id": "640",
            "name": "Sardhana",
            "state": "Uttar Pradesh"
        },
        {
            "id": "641",
            "name": "Vita",
            "state": "Maharashtra"
        },
        {
            "id": "642",
            "name": "Gumia",
            "state": "Jharkhand"
        },
        {
            "id": "643",
            "name": "Puttur",
            "state": "Karnataka"
        },
        {
            "id": "644",
            "name": "Jalandhar Cantt.",
            "state": "Punjab"
        },
        {
            "id": "645",
            "name": "Nehtaur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "646",
            "name": "Changanassery",
            "state": "Kerala"
        },
        {
            "id": "647",
            "name": "Mandapeta",
            "state": "Andhra Pradesh"
        },
        {
            "id": "648",
            "name": "Dumka",
            "state": "Jharkhand"
        },
        {
            "id": "649",
            "name": "Seohara",
            "state": "Uttar Pradesh"
        },
        {
            "id": "650",
            "name": "Umarkhed",
            "state": "Maharashtra"
        },
        {
            "id": "651",
            "name": "Madhupur",
            "state": "Jharkhand"
        },
        {
            "id": "652",
            "name": "Vikramasingapuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "653",
            "name": "Punalur",
            "state": "Kerala"
        },
        {
            "id": "654",
            "name": "Kendrapara",
            "state": "Odisha"
        },
        {
            "id": "655",
            "name": "Sihor",
            "state": "Gujarat"
        },
        {
            "id": "656",
            "name": "Nellikuppam",
            "state": "Tamil Nadu"
        },
        {
            "id": "657",
            "name": "Samana",
            "state": "Punjab"
        },
        {
            "id": "658",
            "name": "Warora",
            "state": "Maharashtra"
        },
        {
            "id": "659",
            "name": "Nilambur",
            "state": "Kerala"
        },
        {
            "id": "660",
            "name": "Rasipuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "661",
            "name": "Ramnagar",
            "state": "Uttarakhand"
        },
        {
            "id": "662",
            "name": "Jammalamadugu",
            "state": "Andhra Pradesh"
        },
        {
            "id": "663",
            "name": "Nawanshahr",
            "state": "Punjab"
        },
        {
            "id": "664",
            "name": "Thoubal",
            "state": "Manipur"
        },
        {
            "id": "665",
            "name": "Athni",
            "state": "Karnataka"
        },
        {
            "id": "666",
            "name": "Cherthala",
            "state": "Kerala"
        },
        {
            "id": "667",
            "name": "Sidhi",
            "state": "Madhya Pradesh"
        },
        {
            "id": "668",
            "name": "Farooqnagar",
            "state": "Telangana"
        },
        {
            "id": "669",
            "name": "Peddapuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "670",
            "name": "Chirkunda",
            "state": "Jharkhand"
        },
        {
            "id": "671",
            "name": "Pachora",
            "state": "Maharashtra"
        },
        {
            "id": "672",
            "name": "Madhepura",
            "state": "Bihar"
        },
        {
            "id": "673",
            "name": "Pithoragarh",
            "state": "Uttarakhand"
        },
        {
            "id": "674",
            "name": "Tumsar",
            "state": "Maharashtra"
        },
        {
            "id": "675",
            "name": "Phalodi",
            "state": "Rajasthan"
        },
        {
            "id": "676",
            "name": "Tiruttani",
            "state": "Tamil Nadu"
        },
        {
            "id": "677",
            "name": "Rampura Phul",
            "state": "Punjab"
        },
        {
            "id": "678",
            "name": "Perinthalmanna",
            "state": "Kerala"
        },
        {
            "id": "679",
            "name": "Padrauna",
            "state": "Uttar Pradesh"
        },
        {
            "id": "680",
            "name": "Pipariya",
            "state": "Madhya Pradesh"
        },
        {
            "id": "681",
            "name": "Dalli-Rajhara",
            "state": "Chhattisgarh"
        },
        {
            "id": "682",
            "name": "Punganur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "683",
            "name": "Mattannur",
            "state": "Kerala"
        },
        {
            "id": "684",
            "name": "Mathura",
            "state": "Uttar Pradesh"
        },
        {
            "id": "685",
            "name": "Thakurdwara",
            "state": "Uttar Pradesh"
        },
        {
            "id": "686",
            "name": "Nandivaram-Guduvancheri",
            "state": "Tamil Nadu"
        },
        {
            "id": "687",
            "name": "Mulbagal",
            "state": "Karnataka"
        },
        {
            "id": "688",
            "name": "Manjlegaon",
            "state": "Maharashtra"
        },
        {
            "id": "689",
            "name": "Wankaner",
            "state": "Gujarat"
        },
        {
            "id": "690",
            "name": "Sillod",
            "state": "Maharashtra"
        },
        {
            "id": "691",
            "name": "Nidadavole",
            "state": "Andhra Pradesh"
        },
        {
            "id": "692",
            "name": "Surapura",
            "state": "Karnataka"
        },
        {
            "id": "693",
            "name": "Rajagangapur",
            "state": "Odisha"
        },
        {
            "id": "694",
            "name": "Sheikhpura",
            "state": "Bihar"
        },
        {
            "id": "695",
            "name": "Parlakhemundi",
            "state": "Odisha"
        },
        {
            "id": "696",
            "name": "Kalimpong",
            "state": "West Bengal"
        },
        {
            "id": "697",
            "name": "Siruguppa",
            "state": "Karnataka"
        },
        {
            "id": "698",
            "name": "Arvi",
            "state": "Maharashtra"
        },
        {
            "id": "699",
            "name": "Limbdi",
            "state": "Gujarat"
        },
        {
            "id": "700",
            "name": "Barpeta",
            "state": "Assam"
        },
        {
            "id": "701",
            "name": "Manglaur",
            "state": "Uttarakhand"
        },
        {
            "id": "702",
            "name": "Repalle",
            "state": "Andhra Pradesh"
        },
        {
            "id": "703",
            "name": "Mudhol",
            "state": "Karnataka"
        },
        {
            "id": "704",
            "name": "Shujalpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "705",
            "name": "Mandvi",
            "state": "Gujarat"
        },
        {
            "id": "706",
            "name": "Thangadh",
            "state": "Gujarat"
        },
        {
            "id": "707",
            "name": "Sironj",
            "state": "Madhya Pradesh"
        },
        {
            "id": "708",
            "name": "Nandura",
            "state": "Maharashtra"
        },
        {
            "id": "709",
            "name": "Shoranur",
            "state": "Kerala"
        },
        {
            "id": "710",
            "name": "Nathdwara",
            "state": "Rajasthan"
        },
        {
            "id": "711",
            "name": "Periyakulam",
            "state": "Tamil Nadu"
        },
        {
            "id": "712",
            "name": "Sultanganj",
            "state": "Bihar"
        },
        {
            "id": "713",
            "name": "Medak",
            "state": "Telangana"
        },
        {
            "id": "714",
            "name": "Narayanpet",
            "state": "Telangana"
        },
        {
            "id": "715",
            "name": "Raxaul Bazar",
            "state": "Bihar"
        },
        {
            "id": "716",
            "name": "Rajauri",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "717",
            "name": "Pernampattu",
            "state": "Tamil Nadu"
        },
        {
            "id": "718",
            "name": "Nainital",
            "state": "Uttarakhand"
        },
        {
            "id": "719",
            "name": "Ramachandrapuram",
            "state": "Andhra Pradesh"
        },
        {
            "id": "720",
            "name": "Vaijapur",
            "state": "Maharashtra"
        },
        {
            "id": "721",
            "name": "Nangal",
            "state": "Punjab"
        },
        {
            "id": "722",
            "name": "Sidlaghatta",
            "state": "Karnataka"
        },
        {
            "id": "723",
            "name": "Punch",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "724",
            "name": "Pandhurna",
            "state": "Madhya Pradesh"
        },
        {
            "id": "725",
            "name": "Wadgaon Road",
            "state": "Maharashtra"
        },
        {
            "id": "726",
            "name": "Talcher",
            "state": "Odisha"
        },
        {
            "id": "727",
            "name": "Varkala",
            "state": "Kerala"
        },
        {
            "id": "728",
            "name": "Pilani",
            "state": "Rajasthan"
        },
        {
            "id": "729",
            "name": "Nowgong",
            "state": "Madhya Pradesh"
        },
        {
            "id": "730",
            "name": "Naila Janjgir",
            "state": "Chhattisgarh"
        },
        {
            "id": "731",
            "name": "Mapusa",
            "state": "Goa"
        },
        {
            "id": "732",
            "name": "Vellakoil",
            "state": "Tamil Nadu"
        },
        {
            "id": "733",
            "name": "Merta City",
            "state": "Rajasthan"
        },
        {
            "id": "734",
            "name": "Sivaganga",
            "state": "Tamil Nadu"
        },
        {
            "id": "735",
            "name": "Mandideep",
            "state": "Madhya Pradesh"
        },
        {
            "id": "736",
            "name": "Sailu",
            "state": "Maharashtra"
        },
        {
            "id": "737",
            "name": "Vyara",
            "state": "Gujarat"
        },
        {
            "id": "738",
            "name": "Kovvur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "739",
            "name": "Vadalur",
            "state": "Tamil Nadu"
        },
        {
            "id": "740",
            "name": "Nawabganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "741",
            "name": "Padra",
            "state": "Gujarat"
        },
        {
            "id": "742",
            "name": "Sainthia",
            "state": "West Bengal"
        },
        {
            "id": "743",
            "name": "Siana",
            "state": "Uttar Pradesh"
        },
        {
            "id": "744",
            "name": "Shahpur",
            "state": "Karnataka"
        },
        {
            "id": "745",
            "name": "Sojat",
            "state": "Rajasthan"
        },
        {
            "id": "746",
            "name": "Noorpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "747",
            "name": "Paravoor",
            "state": "Kerala"
        },
        {
            "id": "748",
            "name": "Murtijapur",
            "state": "Maharashtra"
        },
        {
            "id": "749",
            "name": "Ramnagar",
            "state": "Bihar"
        },
        {
            "id": "750",
            "name": "Sundargarh",
            "state": "Odisha"
        },
        {
            "id": "751",
            "name": "Taki",
            "state": "West Bengal"
        },
        {
            "id": "752",
            "name": "Saundatti-Yellamma",
            "state": "Karnataka"
        },
        {
            "id": "753",
            "name": "Pathanamthitta",
            "state": "Kerala"
        },
        {
            "id": "754",
            "name": "Wadi",
            "state": "Karnataka"
        },
        {
            "id": "755",
            "name": "Rameshwaram",
            "state": "Tamil Nadu"
        },
        {
            "id": "756",
            "name": "Tasgaon",
            "state": "Maharashtra"
        },
        {
            "id": "757",
            "name": "Sikandra Rao",
            "state": "Uttar Pradesh"
        },
        {
            "id": "758",
            "name": "Sihora",
            "state": "Madhya Pradesh"
        },
        {
            "id": "759",
            "name": "Tiruvethipuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "760",
            "name": "Tiruvuru",
            "state": "Andhra Pradesh"
        },
        {
            "id": "761",
            "name": "Mehkar",
            "state": "Maharashtra"
        },
        {
            "id": "762",
            "name": "Peringathur",
            "state": "Kerala"
        },
        {
            "id": "763",
            "name": "Perambalur",
            "state": "Tamil Nadu"
        },
        {
            "id": "764",
            "name": "Manvi",
            "state": "Karnataka"
        },
        {
            "id": "765",
            "name": "Zunheboto",
            "state": "Nagaland"
        },
        {
            "id": "766",
            "name": "Mahnar Bazar",
            "state": "Bihar"
        },
        {
            "id": "767",
            "name": "Attingal",
            "state": "Kerala"
        },
        {
            "id": "768",
            "name": "Shahbad",
            "state": "Haryana"
        },
        {
            "id": "769",
            "name": "Puranpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "770",
            "name": "Nelamangala",
            "state": "Karnataka"
        },
        {
            "id": "771",
            "name": "Nakodar",
            "state": "Punjab"
        },
        {
            "id": "772",
            "name": "Lunawada",
            "state": "Gujarat"
        },
        {
            "id": "773",
            "name": "Murshidabad",
            "state": "West Bengal"
        },
        {
            "id": "774",
            "name": "Mahe",
            "state": "Puducherry"
        },
        {
            "id": "775",
            "name": "Lanka",
            "state": "Assam"
        },
        {
            "id": "776",
            "name": "Rudauli",
            "state": "Uttar Pradesh"
        },
        {
            "id": "777",
            "name": "Tuensang",
            "state": "Nagaland"
        },
        {
            "id": "778",
            "name": "Lakshmeshwar",
            "state": "Karnataka"
        },
        {
            "id": "779",
            "name": "Zira",
            "state": "Punjab"
        },
        {
            "id": "780",
            "name": "Yawal",
            "state": "Maharashtra"
        },
        {
            "id": "781",
            "name": "Thana Bhawan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "782",
            "name": "Ramdurg",
            "state": "Karnataka"
        },
        {
            "id": "783",
            "name": "Pulgaon",
            "state": "Maharashtra"
        },
        {
            "id": "784",
            "name": "Sadasivpet",
            "state": "Telangana"
        },
        {
            "id": "785",
            "name": "Nargund",
            "state": "Karnataka"
        },
        {
            "id": "786",
            "name": "Neem-Ka-Thana",
            "state": "Rajasthan"
        },
        {
            "id": "787",
            "name": "Memari",
            "state": "West Bengal"
        },
        {
            "id": "788",
            "name": "Nilanga",
            "state": "Maharashtra"
        },
        {
            "id": "789",
            "name": "Naharlagun",
            "state": "Arunachal Pradesh"
        },
        {
            "id": "790",
            "name": "Pakaur",
            "state": "Jharkhand"
        },
        {
            "id": "791",
            "name": "Wai",
            "state": "Maharashtra"
        },
        {
            "id": "792",
            "name": "Tarikere",
            "state": "Karnataka"
        },
        {
            "id": "793",
            "name": "Malavalli",
            "state": "Karnataka"
        },
        {
            "id": "794",
            "name": "Raisen",
            "state": "Madhya Pradesh"
        },
        {
            "id": "795",
            "name": "Lahar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "796",
            "name": "Uravakonda",
            "state": "Andhra Pradesh"
        },
        {
            "id": "797",
            "name": "Savanur",
            "state": "Karnataka"
        },
        {
            "id": "798",
            "name": "Sirohi",
            "state": "Rajasthan"
        },
        {
            "id": "799",
            "name": "Udhampur",
            "state": "Jammu and Kashmir"
        },
        {
            "id": "800",
            "name": "Umarga",
            "state": "Maharashtra"
        },
        {
            "id": "801",
            "name": "Pratapgarh",
            "state": "Rajasthan"
        },
        {
            "id": "802",
            "name": "Lingsugur",
            "state": "Karnataka"
        },
        {
            "id": "803",
            "name": "Usilampatti",
            "state": "Tamil Nadu"
        },
        {
            "id": "804",
            "name": "Palia Kalan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "805",
            "name": "Wokha",
            "state": "Nagaland"
        },
        {
            "id": "806",
            "name": "Rajpipla",
            "state": "Gujarat"
        },
        {
            "id": "807",
            "name": "Vijayapura",
            "state": "Karnataka"
        },
        {
            "id": "808",
            "name": "Rawatbhata",
            "state": "Rajasthan"
        },
        {
            "id": "809",
            "name": "Sangaria",
            "state": "Rajasthan"
        },
        {
            "id": "810",
            "name": "Paithan",
            "state": "Maharashtra"
        },
        {
            "id": "811",
            "name": "Rahuri",
            "state": "Maharashtra"
        },
        {
            "id": "812",
            "name": "Patti",
            "state": "Punjab"
        },
        {
            "id": "813",
            "name": "Zaidpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "814",
            "name": "Lalsot",
            "state": "Rajasthan"
        },
        {
            "id": "815",
            "name": "Maihar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "816",
            "name": "Vedaranyam",
            "state": "Tamil Nadu"
        },
        {
            "id": "817",
            "name": "Nawapur",
            "state": "Maharashtra"
        },
        {
            "id": "818",
            "name": "Solan",
            "state": "Himachal Pradesh"
        },
        {
            "id": "819",
            "name": "Vapi",
            "state": "Gujarat"
        },
        {
            "id": "820",
            "name": "Sanawad",
            "state": "Madhya Pradesh"
        },
        {
            "id": "821",
            "name": "Warisaliganj",
            "state": "Bihar"
        },
        {
            "id": "822",
            "name": "Revelganj",
            "state": "Bihar"
        },
        {
            "id": "823",
            "name": "Sabalgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "824",
            "name": "Tuljapur",
            "state": "Maharashtra"
        },
        {
            "id": "825",
            "name": "Simdega",
            "state": "Jharkhand"
        },
        {
            "id": "826",
            "name": "Musabani",
            "state": "Jharkhand"
        },
        {
            "id": "827",
            "name": "Kodungallur",
            "state": "Kerala"
        },
        {
            "id": "828",
            "name": "Phulabani",
            "state": "Odisha"
        },
        {
            "id": "829",
            "name": "Umreth",
            "state": "Gujarat"
        },
        {
            "id": "830",
            "name": "Narsipatnam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "831",
            "name": "Nautanwa",
            "state": "Uttar Pradesh"
        },
        {
            "id": "832",
            "name": "Rajgir",
            "state": "Bihar"
        },
        {
            "id": "833",
            "name": "Yellandu",
            "state": "Telangana"
        },
        {
            "id": "834",
            "name": "Sathyamangalam",
            "state": "Tamil Nadu"
        },
        {
            "id": "835",
            "name": "Pilibanga",
            "state": "Rajasthan"
        },
        {
            "id": "836",
            "name": "Morshi",
            "state": "Maharashtra"
        },
        {
            "id": "837",
            "name": "Pehowa",
            "state": "Haryana"
        },
        {
            "id": "838",
            "name": "Sonepur",
            "state": "Bihar"
        },
        {
            "id": "839",
            "name": "Pappinisseri",
            "state": "Kerala"
        },
        {
            "id": "840",
            "name": "Zamania",
            "state": "Uttar Pradesh"
        },
        {
            "id": "841",
            "name": "Mihijam",
            "state": "Jharkhand"
        },
        {
            "id": "842",
            "name": "Purna",
            "state": "Maharashtra"
        },
        {
            "id": "843",
            "name": "Puliyankudi",
            "state": "Tamil Nadu"
        },
        {
            "id": "844",
            "name": "Shikarpur, Bulandshahr",
            "state": "Uttar Pradesh"
        },
        {
            "id": "845",
            "name": "Umaria",
            "state": "Madhya Pradesh"
        },
        {
            "id": "846",
            "name": "Porsa",
            "state": "Madhya Pradesh"
        },
        {
            "id": "847",
            "name": "Naugawan Sadat",
            "state": "Uttar Pradesh"
        },
        {
            "id": "848",
            "name": "Fatehpur Sikri",
            "state": "Uttar Pradesh"
        },
        {
            "id": "849",
            "name": "Manuguru",
            "state": "Telangana"
        },
        {
            "id": "850",
            "name": "Udaipur",
            "state": "Tripura"
        },
        {
            "id": "851",
            "name": "Pipar City",
            "state": "Rajasthan"
        },
        {
            "id": "852",
            "name": "Pattamundai",
            "state": "Odisha"
        },
        {
            "id": "853",
            "name": "Nanjikottai",
            "state": "Tamil Nadu"
        },
        {
            "id": "854",
            "name": "Taranagar",
            "state": "Rajasthan"
        },
        {
            "id": "855",
            "name": "Yerraguntla",
            "state": "Andhra Pradesh"
        },
        {
            "id": "856",
            "name": "Satana",
            "state": "Maharashtra"
        },
        {
            "id": "857",
            "name": "Sherghati",
            "state": "Bihar"
        },
        {
            "id": "858",
            "name": "Sankeshwara",
            "state": "Karnataka"
        },
        {
            "id": "859",
            "name": "Madikeri",
            "state": "Karnataka"
        },
        {
            "id": "860",
            "name": "Thuraiyur",
            "state": "Tamil Nadu"
        },
        {
            "id": "861",
            "name": "Sanand",
            "state": "Gujarat"
        },
        {
            "id": "862",
            "name": "Rajula",
            "state": "Gujarat"
        },
        {
            "id": "863",
            "name": "Kyathampalle",
            "state": "Telangana"
        },
        {
            "id": "864",
            "name": "Shahabad, Rampur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "865",
            "name": "Tilda Newra",
            "state": "Chhattisgarh"
        },
        {
            "id": "866",
            "name": "Narsinghgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "867",
            "name": "Chittur-Thathamangalam",
            "state": "Kerala"
        },
        {
            "id": "868",
            "name": "Malaj Khand",
            "state": "Madhya Pradesh"
        },
        {
            "id": "869",
            "name": "Sarangpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "870",
            "name": "Robertsganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "871",
            "name": "Sirkali",
            "state": "Tamil Nadu"
        },
        {
            "id": "872",
            "name": "Radhanpur",
            "state": "Gujarat"
        },
        {
            "id": "873",
            "name": "Tiruchendur",
            "state": "Tamil Nadu"
        },
        {
            "id": "874",
            "name": "Utraula",
            "state": "Uttar Pradesh"
        },
        {
            "id": "875",
            "name": "Patratu",
            "state": "Jharkhand"
        },
        {
            "id": "876",
            "name": "Vijainagar, Ajmer",
            "state": "Rajasthan"
        },
        {
            "id": "877",
            "name": "Periyasemur",
            "state": "Tamil Nadu"
        },
        {
            "id": "878",
            "name": "Pathri",
            "state": "Maharashtra"
        },
        {
            "id": "879",
            "name": "Sadabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "880",
            "name": "Talikota",
            "state": "Karnataka"
        },
        {
            "id": "881",
            "name": "Sinnar",
            "state": "Maharashtra"
        },
        {
            "id": "882",
            "name": "Mungeli",
            "state": "Chhattisgarh"
        },
        {
            "id": "883",
            "name": "Sedam",
            "state": "Karnataka"
        },
        {
            "id": "884",
            "name": "Shikaripur",
            "state": "Karnataka"
        },
        {
            "id": "885",
            "name": "Sumerpur",
            "state": "Rajasthan"
        },
        {
            "id": "886",
            "name": "Sattur",
            "state": "Tamil Nadu"
        },
        {
            "id": "887",
            "name": "Sugauli",
            "state": "Bihar"
        },
        {
            "id": "888",
            "name": "Lumding",
            "state": "Assam"
        },
        {
            "id": "889",
            "name": "Vandavasi",
            "state": "Tamil Nadu"
        },
        {
            "id": "890",
            "name": "Titlagarh",
            "state": "Odisha"
        },
        {
            "id": "891",
            "name": "Uchgaon",
            "state": "Maharashtra"
        },
        {
            "id": "892",
            "name": "Mokokchung",
            "state": "Nagaland"
        },
        {
            "id": "893",
            "name": "Paschim Punropara",
            "state": "West Bengal"
        },
        {
            "id": "894",
            "name": "Sagwara",
            "state": "Rajasthan"
        },
        {
            "id": "895",
            "name": "Ramganj Mandi",
            "state": "Rajasthan"
        },
        {
            "id": "896",
            "name": "Tarakeswar",
            "state": "West Bengal"
        },
        {
            "id": "897",
            "name": "Mahalingapura",
            "state": "Karnataka"
        },
        {
            "id": "898",
            "name": "Dharmanagar",
            "state": "Tripura"
        },
        {
            "id": "899",
            "name": "Mahemdabad",
            "state": "Gujarat"
        },
        {
            "id": "900",
            "name": "Manendragarh",
            "state": "Chhattisgarh"
        },
        {
            "id": "901",
            "name": "Uran",
            "state": "Maharashtra"
        },
        {
            "id": "902",
            "name": "Tharamangalam",
            "state": "Tamil Nadu"
        },
        {
            "id": "903",
            "name": "Tirukkoyilur",
            "state": "Tamil Nadu"
        },
        {
            "id": "904",
            "name": "Pen",
            "state": "Maharashtra"
        },
        {
            "id": "905",
            "name": "Makhdumpur",
            "state": "Bihar"
        },
        {
            "id": "906",
            "name": "Maner",
            "state": "Bihar"
        },
        {
            "id": "907",
            "name": "Oddanchatram",
            "state": "Tamil Nadu"
        },
        {
            "id": "908",
            "name": "Palladam",
            "state": "Tamil Nadu"
        },
        {
            "id": "909",
            "name": "Mundi",
            "state": "Madhya Pradesh"
        },
        {
            "id": "910",
            "name": "Nabarangapur",
            "state": "Odisha"
        },
        {
            "id": "911",
            "name": "Mudalagi",
            "state": "Karnataka"
        },
        {
            "id": "912",
            "name": "Samalkha",
            "state": "Haryana"
        },
        {
            "id": "913",
            "name": "Nepanagar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "914",
            "name": "Karjat",
            "state": "Maharashtra"
        },
        {
            "id": "915",
            "name": "Ranavav",
            "state": "Gujarat"
        },
        {
            "id": "916",
            "name": "Pedana",
            "state": "Andhra Pradesh"
        },
        {
            "id": "917",
            "name": "Pinjore",
            "state": "Haryana"
        },
        {
            "id": "918",
            "name": "Lakheri",
            "state": "Rajasthan"
        },
        {
            "id": "919",
            "name": "Pasan",
            "state": "Madhya Pradesh"
        },
        {
            "id": "920",
            "name": "Puttur",
            "state": "Andhra Pradesh"
        },
        {
            "id": "921",
            "name": "Vadakkuvalliyur",
            "state": "Tamil Nadu"
        },
        {
            "id": "922",
            "name": "Tirukalukundram",
            "state": "Tamil Nadu"
        },
        {
            "id": "923",
            "name": "Mahidpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "924",
            "name": "Mussoorie",
            "state": "Uttarakhand"
        },
        {
            "id": "925",
            "name": "Muvattupuzha",
            "state": "Kerala"
        },
        {
            "id": "926",
            "name": "Rasra",
            "state": "Uttar Pradesh"
        },
        {
            "id": "927",
            "name": "Udaipurwati",
            "state": "Rajasthan"
        },
        {
            "id": "928",
            "name": "Manwath",
            "state": "Maharashtra"
        },
        {
            "id": "929",
            "name": "Adoor",
            "state": "Kerala"
        },
        {
            "id": "930",
            "name": "Uthamapalayam",
            "state": "Tamil Nadu"
        },
        {
            "id": "931",
            "name": "Partur",
            "state": "Maharashtra"
        },
        {
            "id": "932",
            "name": "Nahan",
            "state": "Himachal Pradesh"
        },
        {
            "id": "933",
            "name": "Ladwa",
            "state": "Haryana"
        },
        {
            "id": "934",
            "name": "Mankachar",
            "state": "Assam"
        },
        {
            "id": "935",
            "name": "Nongstoin",
            "state": "Meghalaya"
        },
        {
            "id": "936",
            "name": "Losal",
            "state": "Rajasthan"
        },
        {
            "id": "937",
            "name": "Sri Madhopur",
            "state": "Rajasthan"
        },
        {
            "id": "938",
            "name": "Ramngarh",
            "state": "Rajasthan"
        },
        {
            "id": "939",
            "name": "Mavelikkara",
            "state": "Kerala"
        },
        {
            "id": "940",
            "name": "Rawatsar",
            "state": "Rajasthan"
        },
        {
            "id": "941",
            "name": "Rajakhera",
            "state": "Rajasthan"
        },
        {
            "id": "942",
            "name": "Lar",
            "state": "Uttar Pradesh"
        },
        {
            "id": "943",
            "name": "Lal Gopalganj Nindaura",
            "state": "Uttar Pradesh"
        },
        {
            "id": "944",
            "name": "Muddebihal",
            "state": "Karnataka"
        },
        {
            "id": "945",
            "name": "Sirsaganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "946",
            "name": "Shahpura",
            "state": "Rajasthan"
        },
        {
            "id": "947",
            "name": "Surandai",
            "state": "Tamil Nadu"
        },
        {
            "id": "948",
            "name": "Sangole",
            "state": "Maharashtra"
        },
        {
            "id": "949",
            "name": "Pavagada",
            "state": "Karnataka"
        },
        {
            "id": "950",
            "name": "Tharad",
            "state": "Gujarat"
        },
        {
            "id": "951",
            "name": "Mansa",
            "state": "Gujarat"
        },
        {
            "id": "952",
            "name": "Umbergaon",
            "state": "Gujarat"
        },
        {
            "id": "953",
            "name": "Mavoor",
            "state": "Kerala"
        },
        {
            "id": "954",
            "name": "Nalbari",
            "state": "Assam"
        },
        {
            "id": "955",
            "name": "Talaja",
            "state": "Gujarat"
        },
        {
            "id": "956",
            "name": "Malur",
            "state": "Karnataka"
        },
        {
            "id": "957",
            "name": "Mangrulpir",
            "state": "Maharashtra"
        },
        {
            "id": "958",
            "name": "Soro",
            "state": "Odisha"
        },
        {
            "id": "959",
            "name": "Shahpura",
            "state": "Rajasthan"
        },
        {
            "id": "960",
            "name": "Vadnagar",
            "state": "Gujarat"
        },
        {
            "id": "961",
            "name": "Raisinghnagar",
            "state": "Rajasthan"
        },
        {
            "id": "962",
            "name": "Sindhagi",
            "state": "Karnataka"
        },
        {
            "id": "963",
            "name": "Sanduru",
            "state": "Karnataka"
        },
        {
            "id": "964",
            "name": "Sohna",
            "state": "Haryana"
        },
        {
            "id": "965",
            "name": "Manavadar",
            "state": "Gujarat"
        },
        {
            "id": "966",
            "name": "Pihani",
            "state": "Uttar Pradesh"
        },
        {
            "id": "967",
            "name": "Safidon",
            "state": "Haryana"
        },
        {
            "id": "968",
            "name": "Risod",
            "state": "Maharashtra"
        },
        {
            "id": "969",
            "name": "Rosera",
            "state": "Bihar"
        },
        {
            "id": "970",
            "name": "Sankari",
            "state": "Tamil Nadu"
        },
        {
            "id": "971",
            "name": "Malpura",
            "state": "Rajasthan"
        },
        {
            "id": "972",
            "name": "Sonamukhi",
            "state": "West Bengal"
        },
        {
            "id": "973",
            "name": "Shamsabad, Agra",
            "state": "Uttar Pradesh"
        },
        {
            "id": "974",
            "name": "Nokha",
            "state": "Bihar"
        },
        {
            "id": "975",
            "name": "PandUrban Agglomeration",
            "state": "West Bengal"
        },
        {
            "id": "976",
            "name": "Mainaguri",
            "state": "West Bengal"
        },
        {
            "id": "977",
            "name": "Afzalpur",
            "state": "Karnataka"
        },
        {
            "id": "978",
            "name": "Shirur",
            "state": "Maharashtra"
        },
        {
            "id": "979",
            "name": "Salaya",
            "state": "Gujarat"
        },
        {
            "id": "980",
            "name": "Shenkottai",
            "state": "Tamil Nadu"
        },
        {
            "id": "981",
            "name": "Pratapgarh",
            "state": "Tripura"
        },
        {
            "id": "982",
            "name": "Vadipatti",
            "state": "Tamil Nadu"
        },
        {
            "id": "983",
            "name": "Nagarkurnool",
            "state": "Telangana"
        },
        {
            "id": "984",
            "name": "Savner",
            "state": "Maharashtra"
        },
        {
            "id": "985",
            "name": "Sasvad",
            "state": "Maharashtra"
        },
        {
            "id": "986",
            "name": "Rudrapur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "987",
            "name": "Soron",
            "state": "Uttar Pradesh"
        },
        {
            "id": "988",
            "name": "Sholingur",
            "state": "Tamil Nadu"
        },
        {
            "id": "989",
            "name": "Pandharkaoda",
            "state": "Maharashtra"
        },
        {
            "id": "990",
            "name": "Perumbavoor",
            "state": "Kerala"
        },
        {
            "id": "991",
            "name": "Maddur",
            "state": "Karnataka"
        },
        {
            "id": "992",
            "name": "Nadbai",
            "state": "Rajasthan"
        },
        {
            "id": "993",
            "name": "Talode",
            "state": "Maharashtra"
        },
        {
            "id": "994",
            "name": "Shrigonda",
            "state": "Maharashtra"
        },
        {
            "id": "995",
            "name": "Madhugiri",
            "state": "Karnataka"
        },
        {
            "id": "996",
            "name": "Tekkalakote",
            "state": "Karnataka"
        },
        {
            "id": "997",
            "name": "Seoni-Malwa",
            "state": "Madhya Pradesh"
        },
        {
            "id": "998",
            "name": "Shirdi",
            "state": "Maharashtra"
        },
        {
            "id": "999",
            "name": "SUrban Agglomerationr",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1000",
            "name": "Terdal",
            "state": "Karnataka"
        },
        {
            "id": "1001",
            "name": "Raver",
            "state": "Maharashtra"
        },
        {
            "id": "1002",
            "name": "Tirupathur",
            "state": "Tamil Nadu"
        },
        {
            "id": "1003",
            "name": "Taraori",
            "state": "Haryana"
        },
        {
            "id": "1004",
            "name": "Mukhed",
            "state": "Maharashtra"
        },
        {
            "id": "1005",
            "name": "Manachanallur",
            "state": "Tamil Nadu"
        },
        {
            "id": "1006",
            "name": "Rehli",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1007",
            "name": "Sanchore",
            "state": "Rajasthan"
        },
        {
            "id": "1008",
            "name": "Rajura",
            "state": "Maharashtra"
        },
        {
            "id": "1009",
            "name": "Piro",
            "state": "Bihar"
        },
        {
            "id": "1010",
            "name": "Mudabidri",
            "state": "Karnataka"
        },
        {
            "id": "1011",
            "name": "Vadgaon Kasba",
            "state": "Maharashtra"
        },
        {
            "id": "1012",
            "name": "Nagar",
            "state": "Rajasthan"
        },
        {
            "id": "1013",
            "name": "Vijapur",
            "state": "Gujarat"
        },
        {
            "id": "1014",
            "name": "Viswanatham",
            "state": "Tamil Nadu"
        },
        {
            "id": "1015",
            "name": "Polur",
            "state": "Tamil Nadu"
        },
        {
            "id": "1016",
            "name": "Panagudi",
            "state": "Tamil Nadu"
        },
        {
            "id": "1017",
            "name": "Manawar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1018",
            "name": "Tehri",
            "state": "Uttarakhand"
        },
        {
            "id": "1019",
            "name": "Samdhan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1020",
            "name": "Pardi",
            "state": "Gujarat"
        },
        {
            "id": "1021",
            "name": "Rahatgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1022",
            "name": "Panagar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1023",
            "name": "Uthiramerur",
            "state": "Tamil Nadu"
        },
        {
            "id": "1024",
            "name": "Tirora",
            "state": "Maharashtra"
        },
        {
            "id": "1025",
            "name": "Rangia",
            "state": "Assam"
        },
        {
            "id": "1026",
            "name": "Sahjanwa",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1027",
            "name": "Wara Seoni",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1028",
            "name": "Magadi",
            "state": "Karnataka"
        },
        {
            "id": "1029",
            "name": "Rajgarh (Alwar)",
            "state": "Rajasthan"
        },
        {
            "id": "1030",
            "name": "Rafiganj",
            "state": "Bihar"
        },
        {
            "id": "1031",
            "name": "Tarana",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1032",
            "name": "Rampur Maniharan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1033",
            "name": "Sheoganj",
            "state": "Rajasthan"
        },
        {
            "id": "1034",
            "name": "Raikot",
            "state": "Punjab"
        },
        {
            "id": "1035",
            "name": "Pauri",
            "state": "Uttarakhand"
        },
        {
            "id": "1036",
            "name": "Sumerpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1037",
            "name": "Navalgund",
            "state": "Karnataka"
        },
        {
            "id": "1038",
            "name": "Shahganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1039",
            "name": "Marhaura",
            "state": "Bihar"
        },
        {
            "id": "1040",
            "name": "Tulsipur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1041",
            "name": "Sadri",
            "state": "Rajasthan"
        },
        {
            "id": "1042",
            "name": "Thiruthuraipoondi",
            "state": "Tamil Nadu"
        },
        {
            "id": "1043",
            "name": "Shiggaon",
            "state": "Karnataka"
        },
        {
            "id": "1044",
            "name": "Pallapatti",
            "state": "Tamil Nadu"
        },
        {
            "id": "1045",
            "name": "Mahendragarh",
            "state": "Haryana"
        },
        {
            "id": "1046",
            "name": "Sausar",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1047",
            "name": "Ponneri",
            "state": "Tamil Nadu"
        },
        {
            "id": "1048",
            "name": "Mahad",
            "state": "Maharashtra"
        },
        {
            "id": "1049",
            "name": "Lohardaga",
            "state": "Jharkhand"
        },
        {
            "id": "1050",
            "name": "Tirwaganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1051",
            "name": "Margherita",
            "state": "Assam"
        },
        {
            "id": "1052",
            "name": "Sundarnagar",
            "state": "Himachal Pradesh"
        },
        {
            "id": "1053",
            "name": "Rajgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1054",
            "name": "Mangaldoi",
            "state": "Assam"
        },
        {
            "id": "1055",
            "name": "Renigunta",
            "state": "Andhra Pradesh"
        },
        {
            "id": "1056",
            "name": "Longowal",
            "state": "Punjab"
        },
        {
            "id": "1057",
            "name": "Ratia",
            "state": "Haryana"
        },
        {
            "id": "1058",
            "name": "Lalgudi",
            "state": "Tamil Nadu"
        },
        {
            "id": "1059",
            "name": "Shrirangapattana",
            "state": "Karnataka"
        },
        {
            "id": "1060",
            "name": "Niwari",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1061",
            "name": "Natham",
            "state": "Tamil Nadu"
        },
        {
            "id": "1062",
            "name": "Unnamalaikadai",
            "state": "Tamil Nadu"
        },
        {
            "id": "1063",
            "name": "PurqUrban Agglomerationzi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1064",
            "name": "Shamsabad, Farrukhabad",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1065",
            "name": "Mirganj",
            "state": "Bihar"
        },
        {
            "id": "1066",
            "name": "Todaraisingh",
            "state": "Rajasthan"
        },
        {
            "id": "1067",
            "name": "Warhapur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1068",
            "name": "Rajam",
            "state": "Andhra Pradesh"
        },
        {
            "id": "1069",
            "name": "Urmar Tanda",
            "state": "Punjab"
        },
        {
            "id": "1070",
            "name": "Lonar",
            "state": "Maharashtra"
        },
        {
            "id": "1071",
            "name": "Powayan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1072",
            "name": "P.N.Patti",
            "state": "Tamil Nadu"
        },
        {
            "id": "1073",
            "name": "Palampur",
            "state": "Himachal Pradesh"
        },
        {
            "id": "1074",
            "name": "Srisailam Project (Right Flank Colony) Township",
            "state": "Andhra Pradesh"
        },
        {
            "id": "1075",
            "name": "Sindagi",
            "state": "Karnataka"
        },
        {
            "id": "1076",
            "name": "Sandi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1077",
            "name": "Vaikom",
            "state": "Kerala"
        },
        {
            "id": "1078",
            "name": "Malda",
            "state": "West Bengal"
        },
        {
            "id": "1079",
            "name": "Tharangambadi",
            "state": "Tamil Nadu"
        },
        {
            "id": "1080",
            "name": "Sakaleshapura",
            "state": "Karnataka"
        },
        {
            "id": "1081",
            "name": "Lalganj",
            "state": "Bihar"
        },
        {
            "id": "1082",
            "name": "Malkangiri",
            "state": "Odisha"
        },
        {
            "id": "1083",
            "name": "Rapar",
            "state": "Gujarat"
        },
        {
            "id": "1084",
            "name": "Mauganj",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1085",
            "name": "Todabhim",
            "state": "Rajasthan"
        },
        {
            "id": "1086",
            "name": "Srinivaspur",
            "state": "Karnataka"
        },
        {
            "id": "1087",
            "name": "Murliganj",
            "state": "Bihar"
        },
        {
            "id": "1088",
            "name": "Reengus",
            "state": "Rajasthan"
        },
        {
            "id": "1089",
            "name": "Sawantwadi",
            "state": "Maharashtra"
        },
        {
            "id": "1090",
            "name": "Tittakudi",
            "state": "Tamil Nadu"
        },
        {
            "id": "1091",
            "name": "Lilong",
            "state": "Manipur"
        },
        {
            "id": "1092",
            "name": "Rajaldesar",
            "state": "Rajasthan"
        },
        {
            "id": "1093",
            "name": "Pathardi",
            "state": "Maharashtra"
        },
        {
            "id": "1094",
            "name": "Achhnera",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1095",
            "name": "Pacode",
            "state": "Tamil Nadu"
        },
        {
            "id": "1096",
            "name": "Naraura",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1097",
            "name": "Nakur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1098",
            "name": "Palai",
            "state": "Kerala"
        },
        {
            "id": "1099",
            "name": "Morinda, India",
            "state": "Punjab"
        },
        {
            "id": "1100",
            "name": "Manasa",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1101",
            "name": "Nainpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1102",
            "name": "Sahaspur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1103",
            "name": "Pauni",
            "state": "Maharashtra"
        },
        {
            "id": "1104",
            "name": "Prithvipur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1105",
            "name": "Ramtek",
            "state": "Maharashtra"
        },
        {
            "id": "1106",
            "name": "Silapathar",
            "state": "Assam"
        },
        {
            "id": "1107",
            "name": "Songadh",
            "state": "Gujarat"
        },
        {
            "id": "1108",
            "name": "Safipur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1109",
            "name": "Sohagpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1110",
            "name": "Mul",
            "state": "Maharashtra"
        },
        {
            "id": "1111",
            "name": "Sadulshahar",
            "state": "Rajasthan"
        },
        {
            "id": "1112",
            "name": "Phillaur",
            "state": "Punjab"
        },
        {
            "id": "1113",
            "name": "Sambhar",
            "state": "Rajasthan"
        },
        {
            "id": "1114",
            "name": "Prantij",
            "state": "Rajasthan"
        },
        {
            "id": "1115",
            "name": "Nagla",
            "state": "Uttarakhand"
        },
        {
            "id": "1116",
            "name": "Pattran",
            "state": "Punjab"
        },
        {
            "id": "1117",
            "name": "Mount Abu",
            "state": "Rajasthan"
        },
        {
            "id": "1118",
            "name": "Reoti",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1119",
            "name": "Tenu dam-cum-Kathhara",
            "state": "Jharkhand"
        },
        {
            "id": "1120",
            "name": "Panchla",
            "state": "West Bengal"
        },
        {
            "id": "1121",
            "name": "Sitarganj",
            "state": "Uttarakhand"
        },
        {
            "id": "1122",
            "name": "Pasighat",
            "state": "Arunachal Pradesh"
        },
        {
            "id": "1123",
            "name": "Motipur",
            "state": "Bihar"
        },
        {
            "id": "1124",
            "name": "O' Valley",
            "state": "Tamil Nadu"
        },
        {
            "id": "1125",
            "name": "Raghunathpur",
            "state": "West Bengal"
        },
        {
            "id": "1126",
            "name": "Suriyampalayam",
            "state": "Tamil Nadu"
        },
        {
            "id": "1127",
            "name": "Qadian",
            "state": "Punjab"
        },
        {
            "id": "1128",
            "name": "Rairangpur",
            "state": "Odisha"
        },
        {
            "id": "1129",
            "name": "Silvassa",
            "state": "Dadra and Nagar Haveli"
        },
        {
            "id": "1130",
            "name": "Nowrozabad (Khodargama)",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1131",
            "name": "Mangrol",
            "state": "Rajasthan"
        },
        {
            "id": "1132",
            "name": "Soyagaon",
            "state": "Maharashtra"
        },
        {
            "id": "1133",
            "name": "Sujanpur",
            "state": "Punjab"
        },
        {
            "id": "1134",
            "name": "Manihari",
            "state": "Bihar"
        },
        {
            "id": "1135",
            "name": "Sikanderpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1136",
            "name": "Mangalvedhe",
            "state": "Maharashtra"
        },
        {
            "id": "1137",
            "name": "Phulera",
            "state": "Rajasthan"
        },
        {
            "id": "1138",
            "name": "Ron",
            "state": "Karnataka"
        },
        {
            "id": "1139",
            "name": "Sholavandan",
            "state": "Tamil Nadu"
        },
        {
            "id": "1140",
            "name": "Saidpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1141",
            "name": "Shamgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1142",
            "name": "Thammampatti",
            "state": "Tamil Nadu"
        },
        {
            "id": "1143",
            "name": "Maharajpur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1144",
            "name": "Multai",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1145",
            "name": "Mukerian",
            "state": "Punjab"
        },
        {
            "id": "1146",
            "name": "Sirsi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1147",
            "name": "Purwa",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1148",
            "name": "Sheohar",
            "state": "Bihar"
        },
        {
            "id": "1149",
            "name": "Namagiripettai",
            "state": "Tamil Nadu"
        },
        {
            "id": "1150",
            "name": "Parasi",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1151",
            "name": "Lathi",
            "state": "Gujarat"
        },
        {
            "id": "1152",
            "name": "Lalganj",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1153",
            "name": "Narkhed",
            "state": "Maharashtra"
        },
        {
            "id": "1154",
            "name": "Mathabhanga",
            "state": "West Bengal"
        },
        {
            "id": "1155",
            "name": "Shendurjana",
            "state": "Maharashtra"
        },
        {
            "id": "1156",
            "name": "Peravurani",
            "state": "Tamil Nadu"
        },
        {
            "id": "1157",
            "name": "Mariani",
            "state": "Assam"
        },
        {
            "id": "1158",
            "name": "Phulpur",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1159",
            "name": "Rania",
            "state": "Haryana"
        },
        {
            "id": "1160",
            "name": "Pali",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1161",
            "name": "Pachore",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1162",
            "name": "Parangipettai",
            "state": "Tamil Nadu"
        },
        {
            "id": "1163",
            "name": "Pudupattinam",
            "state": "Tamil Nadu"
        },
        {
            "id": "1164",
            "name": "Panniyannur",
            "state": "Kerala"
        },
        {
            "id": "1165",
            "name": "Maharajganj",
            "state": "Bihar"
        },
        {
            "id": "1166",
            "name": "Rau",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1167",
            "name": "Monoharpur",
            "state": "West Bengal"
        },
        {
            "id": "1168",
            "name": "Mandawa",
            "state": "Rajasthan"
        },
        {
            "id": "1169",
            "name": "Marigaon",
            "state": "Assam"
        },
        {
            "id": "1170",
            "name": "Pallikonda",
            "state": "Tamil Nadu"
        },
        {
            "id": "1171",
            "name": "Pindwara",
            "state": "Rajasthan"
        },
        {
            "id": "1172",
            "name": "Shishgarh",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1173",
            "name": "Patur",
            "state": "Maharashtra"
        },
        {
            "id": "1174",
            "name": "Mayang Imphal",
            "state": "Manipur"
        },
        {
            "id": "1175",
            "name": "Mhowgaon",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1176",
            "name": "Guruvayoor",
            "state": "Kerala"
        },
        {
            "id": "1177",
            "name": "Mhaswad",
            "state": "Maharashtra"
        },
        {
            "id": "1178",
            "name": "Sahawar",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1179",
            "name": "Sivagiri",
            "state": "Tamil Nadu"
        },
        {
            "id": "1180",
            "name": "Mundargi",
            "state": "Karnataka"
        },
        {
            "id": "1181",
            "name": "Punjaipugalur",
            "state": "Tamil Nadu"
        },
        {
            "id": "1182",
            "name": "Kailasahar",
            "state": "Tripura"
        },
        {
            "id": "1183",
            "name": "Samthar",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1184",
            "name": "Sakti",
            "state": "Chhattisgarh"
        },
        {
            "id": "1185",
            "name": "Sadalagi",
            "state": "Karnataka"
        },
        {
            "id": "1186",
            "name": "Silao",
            "state": "Bihar"
        },
        {
            "id": "1187",
            "name": "Mandalgarh",
            "state": "Rajasthan"
        },
        {
            "id": "1188",
            "name": "Loha",
            "state": "Maharashtra"
        },
        {
            "id": "1189",
            "name": "Pukhrayan",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1190",
            "name": "Padmanabhapuram",
            "state": "Tamil Nadu"
        },
        {
            "id": "1191",
            "name": "Belonia",
            "state": "Tripura"
        },
        {
            "id": "1192",
            "name": "Saiha",
            "state": "Mizoram"
        },
        {
            "id": "1193",
            "name": "Srirampore",
            "state": "West Bengal"
        },
        {
            "id": "1194",
            "name": "Talwara",
            "state": "Punjab"
        },
        {
            "id": "1195",
            "name": "Puthuppally",
            "state": "Kerala"
        },
        {
            "id": "1196",
            "name": "Khowai",
            "state": "Tripura"
        },
        {
            "id": "1197",
            "name": "Vijaypur",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1198",
            "name": "Takhatgarh",
            "state": "Rajasthan"
        },
        {
            "id": "1199",
            "name": "Thirupuvanam",
            "state": "Tamil Nadu"
        },
        {
            "id": "1200",
            "name": "Adra",
            "state": "West Bengal"
        },
        {
            "id": "1201",
            "name": "Piriyapatna",
            "state": "Karnataka"
        },
        {
            "id": "1202",
            "name": "Obra",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1203",
            "name": "Adalaj",
            "state": "Gujarat"
        },
        {
            "id": "1204",
            "name": "Nandgaon",
            "state": "Maharashtra"
        },
        {
            "id": "1205",
            "name": "Barh",
            "state": "Bihar"
        },
        {
            "id": "1206",
            "name": "Chhapra",
            "state": "Gujarat"
        },
        {
            "id": "1207",
            "name": "Panamattom",
            "state": "Kerala"
        },
        {
            "id": "1208",
            "name": "Niwai",
            "state": "Uttar Pradesh"
        },
        {
            "id": "1209",
            "name": "Bageshwar",
            "state": "Uttarakhand"
        },
        {
            "id": "1210",
            "name": "Tarbha",
            "state": "Odisha"
        },
        {
            "id": "1211",
            "name": "Adyar",
            "state": "Karnataka"
        },
        {
            "id": "1212",
            "name": "Narsinghgarh",
            "state": "Madhya Pradesh"
        },
        {
            "id": "1213",
            "name": "Warud",
            "state": "Maharashtra"
        },
        {
            "id": "1214",
            "name": "Asarganj",
            "state": "Bihar"
        },
        {
            "id": "1215",
            "name": "Sarsod",
            "state": "Haryana"
        },
        {
            "id": "1216",
            "name": "Gandhinagar",
            "state": "Gujarat"
        },
        {
            "id":"1217",
            "name":"Kullu",
            "state":"Himachal Pradesh"
        },
        {
            "id":"1218",
            "name":"Manali",
            "state":"Himachal Praddesh"
        },
        {
            "id":"1219",
            "name":"Mirzapur",
            "state":"Uttar Pradesh"
        },
        {
            "id":"1220",
            "name":"Kota",
            "state":"Rajasthan"
        },
        {
        "id":"1221",
        "name":"Dispur",
        "state":"Assam"
        }
    ]

        for item in data:
            state_name = item["state"]
            city_name = item["name"]
            try:
                state = State.objects.get(name=state_name)
                City.objects.get_or_create(name=city_name, state=state)
            except:
                pass
                
        context = {'message':'success'}
        
        return Response(context)
    
class AllStateList(APIView):
    def get(self,request):
        try:
            states = State.objects.all().order_by('name')
            state_list = []
            for state in states:
                state_dict = {'id':state.id, 'name':state.name}
                state_list.append(state_dict)
            context = {'status':True, 'state_list':state_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class StateWiseCityList(APIView):
    def post(self,request):
        data = request.data
        try:
            state_id = data['state_id']
            cities = City.objects.filter(state__id = state_id).order_by('name')
            city_list = []
            for city in cities:
                city_dict = {'id':city.id, 'name':city.name}
                city_list.append(city_dict)
            context = {'status':True, 'city_list':city_list}
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        return Response(context)
    
class AddBatchesInstitute(APIView):
    def get(self,request):
        try:
            
            code_list = [f'mennta_{i}' for i in range(1, 1245)]
            easebuzzMerchanKey = 'E4PGYN5DSD'
            easebuzzSaltKey = 'LLQW7Y6VSG'
            easebuzzSubMerchanKey = 'S501887Z1Q'

            for code in code_list:
                try:
                    institute = Institute.objects.get(code=code)
                    institute.easebuzzMerchanKey = easebuzzMerchanKey
                    institute.easebuzzSaltKey = easebuzzSaltKey
                    institute.easebuzzSubMerchanKey = easebuzzSubMerchanKey
                    institute.save()
                except Institute.DoesNotExist:
                    continue
                
            context = {'status':True, 'message':'success'}
            
        except Exception as e:
            context = {'status':False, 'message':str(e)}
            
        return Response(context)
    
class DeleteUser(APIView):
    def post(self, request):
        data = request.data
        phone = data['phone']
        institute_code = data['institute_code']
        try:
            if phone == '1112223330' or phone == '1112223333':
                context = {
                    'status': False, 
                    'institute_code': institute_code,
                    'message': 'This number can not be delete. This is using for demo purpose.'
                    }
            else:
                username = phone+'@'+institute_code
                user = User.objects.get(username = username)
                user.delete()
                context = {
                    'status': True, 
                    'institute_code': institute_code,
                    'message': 'User Delete Successfully'
                    }
        except Exception as e:
            context = {'status':False, 'message':str(e)}
        
        return Response(context)

class DeleteTeacherToken(APIView):
    def get(self, request, user_id):
        try:
            token = Token.objects.get(user_id=user_id)
            token.delete()
            context = {'status': True, 'message': 'Token deleted successfully'}
        except Token.DoesNotExist:
            context = {'status': False, 'message': 'Token does not exist for the given user'}
        except Exception as e:
            context = {'status': False, 'message': str(e)}
        
        return Response(context)
    
        
                        
class DailyRegisterStudentsListDownload(APIView):
    def get(self, request):
        try:
            today = timezone.now().date()
            students = Student.objects.filter(institute__code__startswith='mennta_')
            output = []
            for student in students:
                batches_list = []
                batches = student.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                    
                try:
                    student_data = StudentDetails.objects.get(student=student)
                    email = student_data.email
                    dob = student_data.dob
                    address = student_data.address
                    parent_name = student_data.parentName
                    mother_name = student_data.mother_name
                except:
                    email = None
                    dob = None
                    address = None
                    parent_name = None
                    mother_name = None
                    
                temp_list = [
                    student.institute.name,
                    student.name,
                    student.studentuser.username.split('@')[0],
                    email,
                    dob,
                    address,
                    parent_name,
                    mother_name,
                    batches_list,
                ]
                output.append(temp_list)

            if output:
                response = HttpResponse(content_type='text/csv')
                response['Content-Disposition'] = 'attachment; filename="details.csv"'
                writer = csv.writer(response)
                writer.writerow(['Institute', 'Name', 'Phone Number', 'Email', 'Dob', 'Address', 'Father Name', 'Mother Name', 'Batches'])
                writer.writerows(output)
                return response
            else:
                return Response({'message': 'No data available.'})

        except Exception as e:
            context = {'issues': str(e)}
            
        return Response(context)
        
class DailyRegisterStudentsList(APIView):
    def get(self, request):
        me = PrincipleUser(self.request.user)
        try:
            today = timezone.now().date()
            students = Student.objects.filter(institute__code__startswith='mennta_')
            students_list = []
            for student in students:
                batches_list = []
                batches = student.batches.all()
                for batch in batches:
                    batch_dict = {'id': batch.id, 'name': batch.name}
                    batches_list.append(batch_dict)
                    
                try:
                    student_data = StudentDetails.objects.get(student=student)
                    email = student_data.email
                    dob = student_data.dob
                    address = student_data.address
                    parent_name = student_data.parentName
                    mother_name = student_data.mother_name
                except:
                    email = None
                    dob = None
                    address = None
                    parent_name = None
                    mother_name = None
                    
                student_dict = {
                    'institute_code' : student.institute.code,
                    'institute_name' : student.institute.name,
                    'student_name' : student.name,
                    'joining_date': student.jdate,
                    'phone_number' : student.studentuser.username.split('@')[0],
                    'email' : email,
                    'dob' : dob,
                    'address' : address,
                    'father_name' : parent_name,
                    'mother_name' : mother_name,
                    'batches_list': batches_list,
                }
                students_list.append(student_dict)
                    
            context = {'status':True, 'students_list': students_list}

        except Exception as e:
            context = {'status':False, 'message': str(e)}
            
        return Response(context)
            
class SendMessageAllTeachers(APIView):   
    def get(self, request):
        try:
            total_records = Teacher.objects.filter(mainTeacher=True).count()
            task = send_notification_to_main_teachers.delay(total_records)
            
            context = {'status': True, 'task_id': task.id, 'message': 'Successfully sent notification'}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class TotalMainTeacher(APIView):   
    def get(self, request):
        try:
            total_records = Teacher.objects.filter(mainTeacher=True).count()
            
            context = {'status': True, 'total_records':total_records}
            
        except Exception as e:
            context = {'status': False, 'message': str(e)}
            
        return Response(context)
    
class ExportPremiumInstitutesCSV(APIView):
    def get(self, request):
        institutes = Institute.objects.filter(typeInstitute='Premium')
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="premium_institutes.csv"'
        writer = csv.writer(response)
        
        writer.writerow(['Institute Name','Number of Students','Videos','Notes','Tests','Packages','Buy Packages','Created Date'])

        for institute in institutes:
            writer.writerow([
                institute.name,
                institute.totalStudents(),
                institute.totalVideos(),
                institute.totalNotes(),
                institute.totalTests(),
                institute.totalPackages(),
                institute.packagesStudents(),
                institute.instituteCreatedDate(),
            ])

        return response




            

==================================================

